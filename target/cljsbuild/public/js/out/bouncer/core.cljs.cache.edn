;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name bouncer.core, :imports nil, :requires {gstring goog.string, goog.string goog.string, goog.string.format goog.string.format}, :uses nil, :defs {wrap-chain {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 133, :column 8, :end-line 133, :end-column 18, :private true, :arglists (quote ([old-state message-fn & fs])), :doc "Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(old-state message-fn fs)], :arglists ([old-state message-fn & fs]), :arglists-meta (nil)}}, :private true, :name bouncer.core/wrap-chain, :variadic true, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(old-state message-fn fs)], :arglists ([old-state message-fn & fs]), :arglists-meta (nil)}, :method-params [(old-state message-fn fs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists ([old-state message-fn & fs]), :doc "Internal Use.\n\n  Chain of responsibility.\n\n  Takes the current state and a collection of validators `fs`\n\n  Will run all validators against `old-state` and eventually return a vector with the result - the errors map - and the new state - the original map augmented with the errors map.\n\n  See also `wrap`\n"}, wrap {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 85, :column 8, :end-line 85, :end-column 12, :private true, :arglists (quote ([message-fn acc [pred k & args]])), :doc "Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"}, :private true, :name bouncer.core/wrap, :variadic false, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 12, :method-params ([message-fn acc p__32710]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 3, :fn-var true, :arglists (quote ([message-fn acc [pred k & args]])), :doc "Wraps pred in the context of validating a single value\n\n  - `acc`  is the map being validated\n\n  - `pred` is a validator\n\n  - `k`    the path to the value to be validated in the associative structure `acc`\n\n  - `args` any extra args to pred\n\n  It only runs pred if:\n\n  - the validator contains a pre-condition *and* it is met or;\n  - the validator is optional  *and* there is a non-nil value to be validated (this information is read from pred's metadata) or;\n  - there are no previous errors for the given path\n\n  Returns `acc` augmented with a namespace qualified ::errors keyword\n"}, validate* {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 150, :column 8, :end-line 150, :end-column 17, :private true, :arglists (quote ([message-fn m fs])), :doc "Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."}, :private true, :name bouncer.core/validate*, :variadic false, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 17, :method-params ([message-fn m fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 3, :fn-var true, :arglists (quote ([message-fn m fs])), :doc "Internal use.\n\n  Validates the map m using the validation functions fs.\n\n  Returns a vector where the first element is the map of validation errors if any and the second is the original map (possibly) augmented with the errors map."}, valid? {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 221, :column 7, :end-line 221, :end-column 13, :arglists (quote ([& args])), :doc "Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name bouncer.core/valid?, :variadic true, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Takes a map and one or more validation functions with semantics provided by \"validate\". Returns true if the map passes all validations. False otherwise."}, validate {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 178, :column 7, :end-line 178, :end-column 15, :arglists (quote ([& args])), :doc "Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name bouncer.core/validate, :variadic true, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Takes a\n\n  - `message-fn` (optional) responsible for transforming error metadata into\n  the validation result (defaults to `with-default-messages`)\n\n  - `m` map to be validated\n\n  - `forms` validations to be performed on the map\n\n  forms can be a single validator set or a sequence of key/value pairs where:\n\n  key   ==> :keyword or [:a :path]\n\n  value ==> validation-function or\n            validator-set or\n           [[validation-function args+opts]] or\n           [validation-function another-validation-function] or\n           [validation-function [another-validation-function args+opts]]\n\n  e.g.:\n\n\n      (core/validate a-map\n               :name v/required\n               :age  [v/required\n                     [v/number :message \"age must be a number\"]]\n               [:passport :number] v/positive)\n\n\n  Returns a vector where the first element is the map of validation errors if\n  any and the second is the original map (possibly) augmented with the errors\n  map.\n\n  See also `defvalidator`\n"}, build-multi-step {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 24, :column 8, :end-line 24, :end-column 24, :private true, :arglists (quote ([key-or-vec fn-vec] [key-or-vec [f-or-list & rest] acc])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-or-vec fn-vec] [key-or-vec [f-or-list & rest] acc]), :arglists ([key-or-vec fn-vec] [key-or-vec [f-or-list & rest] acc]), :arglists-meta (nil nil)}}, :private true, :name bouncer.core/build-multi-step, :variadic false, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([key-or-vec fn-vec] [key-or-vec [f-or-list & rest] acc]), :arglists ([key-or-vec fn-vec] [key-or-vec [f-or-list & rest] acc]), :arglists-meta (nil nil)}, :method-params ([key-or-vec fn-vec] [key-or-vec [f-or-list & rest] acc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists ([key-or-vec fn-vec] [key-or-vec [f-or-list & rest] acc])}, build-steps {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 64, :column 8, :end-line 64, :end-column 19, :private true, :arglists (quote ([[head & tail :as forms]]))}, :private true, :name bouncer.core/build-steps, :variadic false, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 19, :method-params ([p__32702]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[head & tail :as forms]]))}, pre-condition-met? {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 82, :column 8, :end-line 82, :end-column 26, :private true, :arglists (quote ([pre-fn map]))}, :private true, :name bouncer.core/pre-condition-met?, :variadic false, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 26, :method-params ([pre-fn map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pre-fn map]))}, merge-path {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 40, :column 8, :end-line 40, :end-column 18, :private true, :arglists (quote ([parent-key validations-map])), :doc "Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"}, :private true, :name bouncer.core/merge-path, :variadic false, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 18, :method-params ([parent-key validations-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent-key validations-map])), :doc "Takes two arguments:\n\n  `parent-keyword` is a :keyword - or a vector of :keywords denoting a path in a associative structure\n\n  `validations-map` is a map of forms following this spec:\n\n\n      {:keyword [f g] :another-keyword h}\n\n\n  Merges `:parent-keyword` with every first element of validations-map, transforming it into:\n\n\n      ([:parent-keyword :keyword] [f g] [:parent-keyword :another-keyword] h)\n"}, with-default-messages {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/bouncer/core.cljs", :line 165, :column 7, :end-line 165, :end-column 28, :arglists (quote ([error])), :doc "Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"}, :name bouncer.core/with-default-messages, :variadic false, :file "target/cljsbuild/public/js/out/bouncer/core.cljs", :end-column 28, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error])), :doc "Use together with `validate`, e.g.:\n\n\n      (core/validate core/with-default-messages {}\n                     :name v/required)"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:args :path :pre :else :value :bouncer.core/errors :optional :metadata :default-message-format :message}, :order [:else :bouncer.core/errors :optional :default-message-format :message :pre :path :value :args :metadata]}, :doc "The `core` namespace provides the two main entry point functions in bouncer:\n\n  - `validate`\n  - `valid?`\n\n\nAll other functions are meant for internal use only and shouldn't be relied upon.\n\nThe project [README](https://github.com/leonardoborges/bouncer/blob/master/README.md) should get you started,\nit's pretty comprehensive.\n\n\nIf you'd like to know more about the motivation behind `bouncer`, check the\n[announcement post](http://www.leonardoborges.com/writings/2013/01/04/bouncer-validation-lib-for-clojure/)."}