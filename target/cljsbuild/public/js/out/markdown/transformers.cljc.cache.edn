;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name markdown.transformers, :imports nil, :requires {string clojure.string, clojure.string clojure.string, markdown.links markdown.links, markdown.lists markdown.lists, markdown.tables markdown.tables, markdown.common markdown.common}, :uses {italics markdown.common, separator markdown.common, make-heading markdown.common, dashes markdown.common, thaw-strings markdown.common, implicit-reference-link markdown.links, bold markdown.common, footnote-link markdown.links, escape-code markdown.common, table markdown.tables, strong markdown.common, li markdown.lists, reference-link markdown.links, image-reference-link markdown.links, em markdown.common, escaped-chars markdown.common, inline-code markdown.common, strikethrough markdown.common, link markdown.links, image markdown.links}, :defs {h2? {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 39, :column 7, :end-line 39, :end-column 10, :arglists (quote ([text]))}, :name markdown.transformers/h2?, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 10, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, paragraph {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 116, :column 7, :end-line 116, :end-column 16, :arglists (quote ([text {:keys [eof heading hr code lists blockquote paragraph last-line-empty?], :as state}]))}, :name markdown.transformers/paragraph, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 16, :method-params ([text p__31545]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof heading hr code lists blockquote paragraph last-line-empty?], :as state}]))}, blockquote {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 195, :column 7, :end-line 195, :end-column 17, :arglists (quote ([text {:keys [eof code codeblock lists], :as state}]))}, :name markdown.transformers/blockquote, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 17, :method-params ([text p__31557]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof code codeblock lists], :as state}]))}, heading {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 65, :column 7, :end-line 65, :end-column 14, :arglists (quote ([text state]))}, :name markdown.transformers/heading, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 14, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, superscript {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 48, :column 7, :end-line 48, :end-column 18, :arglists (quote ([text state]))}, :name markdown.transformers/superscript, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 18, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, autourl-transformer {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 88, :column 7, :end-line 88, :end-column 26, :arglists (quote ([text state]))}, :name markdown.transformers/autourl-transformer, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 26, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, h1? {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 36, :column 7, :end-line 36, :end-column 10, :arglists (quote ([text]))}, :name markdown.transformers/h1?, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 10, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, codeblock {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 157, :column 7, :end-line 157, :end-column 16, :arglists (quote ([text state]))}, :name markdown.transformers/codeblock, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 16, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, flatten-metadata {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 250, :column 7, :end-line 250, :end-column 23, :arglists (quote ([metadata])), :doc "Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."}, :name markdown.transformers/flatten-metadata, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 23, :method-params ([metadata]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([metadata])), :doc "Given a list of maps which contain a single key/value, flatten them all into\n  a single map with all the leading spaces removed. If an empty list is provided\n  then return nil."}, hr {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 184, :column 7, :end-line 184, :end-column 9, :arglists (quote ([text state]))}, :name markdown.transformers/hr, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, transformer-vector {:name markdown.transformers/transformer-vector, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 284, :column 1, :end-line 284, :end-column 24, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 284, :column 6, :end-line 284, :end-column 24}}, autoemail-transformer {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 98, :column 7, :end-line 98, :end-column 28, :arglists (quote ([text state]))}, :name markdown.transformers/autoemail-transformer, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 28, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, parse-metadata-line {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 236, :column 7, :end-line 236, :end-column 26, :arglists (quote ([line])), :doc "Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."}, :name markdown.transformers/parse-metadata-line, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 26, :method-params ([line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 1, :fn-var true, :arglists (quote ([line])), :doc "Given a line of metadata header text return either a list containing a parsed\n  and normalizd key and the original text of the value, or if no header is found\n  (this is a continuation or new value from a pervious header key) simply\n  return the text. If a blank or invalid line is found return nil."}, formatter {:name markdown.transformers/formatter, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 27, :column 1, :end-line 27, :end-column 36, :dynamic true, :declared true, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 27, :column 27, :end-line 27, :end-column 36, :dynamic true, :declared true}}, *next-line* {:name markdown.transformers/*next-line*, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 29, :column 1, :end-line 29, :end-column 31, :dynamic true, :declared true, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 29, :column 20, :end-line 29, :end-column 31, :dynamic true, :declared true}}, empty-line {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 42, :column 7, :end-line 42, :end-column 17, :arglists (quote ([text state]))}, :name markdown.transformers/empty-line, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 17, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, footer {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 222, :column 7, :end-line 222, :end-column 13, :arglists (quote ([footnotes]))}, :name markdown.transformers/footer, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 13, :method-params ([footnotes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([footnotes]))}, heading? {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 31, :column 7, :end-line 31, :end-column 15, :arglists (quote ([text type]))}, :name markdown.transformers/heading?, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 15, :method-params ([text type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text type]))}, code {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 136, :column 7, :end-line 136, :end-column 11, :arglists (quote ([text {:keys [eof lists code codeblock], :as state}]))}, :name markdown.transformers/code, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 11, :method-params ([text p__31550]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [eof lists code codeblock], :as state}]))}, parse-metadata-headers {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 271, :column 7, :end-line 271, :end-column 29, :arglists (quote ([lines-seq])), :doc "Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists."}, :name markdown.transformers/parse-metadata-headers, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 29, :method-params ([lines-seq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lines-seq])), :doc "Given a sequence of lines from a markdown document, attempt to parse a\n  metadata header if it exists."}, br {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 81, :column 7, :end-line 81, :end-column 9, :arglists (quote ([text {:keys [code lists], :as state}]))}, :name markdown.transformers/br, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 9, :method-params ([text p__31538]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text {:keys [code lists], :as state}]))}, paragraph-text {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/markdown/transformers.cljc", :line 112, :column 7, :end-line 112, :end-column 21, :arglists (quote ([last-line-empty? text]))}, :name markdown.transformers/paragraph-text, :variadic false, :file "target/cljsbuild/public/js/out/markdown/transformers.cljc", :end-column 21, :method-params ([last-line-empty? text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([last-line-empty? text]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:codeblock :hr :lists :clojurescript :else :last-line-empty? :default :code-style :code :processed :heading-anchors :eof :paragraph :blockquote :heading}, :order [:code :codeblock :hr :heading :default :else :heading-anchors :lists :clojurescript :eof :blockquote :paragraph :last-line-empty? :code-style :processed]}, :doc nil}