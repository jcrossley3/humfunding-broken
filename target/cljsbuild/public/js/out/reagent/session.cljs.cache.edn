;; Analyzed by ClojureScript 1.8.40
{:name reagent.session, :doc nil, :excludes #{get reset! swap! get-in}, :use-macros nil, :require-macros nil, :uses {atom reagent.core}, :requires {reagent reagent.core, reagent.core reagent.core}, :imports nil, :defs {assoc-in! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 46, :column 7, :end-line 46, :end-column 16, :arglists (quote ([ks v])), :doc "Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."}, :name reagent.session/assoc-in!, :variadic false, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 16, :method-params ([ks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ks v])), :doc "Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."}, remove! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 41, :column 7, :end-line 41, :end-column 14, :arglists (quote ([k])), :doc "Remove a key from the session"}, :name reagent.session/remove!, :variadic false, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 14, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Remove a key from the session"}, update-in! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 79, :column 7, :end-line 79, :end-column 17, :arglists (quote ([ks f & args])), :doc "'Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ks f args)], :arglists ([ks f & args]), :arglists-meta (nil)}}, :name reagent.session/update-in!, :variadic true, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ks f args)], :arglists ([ks f & args]), :arglists-meta (nil)}, :method-params [(ks f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists ([ks f & args]), :doc "'Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created."}, get-in! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 61, :column 7, :end-line 61, :end-column 14, :arglists (quote ([ks & [default]])), :doc "Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ks [default])], :arglists ([ks & [default]]), :arglists-meta (nil)}}, :name reagent.session/get-in!, :variadic true, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ks [default])], :arglists ([ks & [default]]), :arglists-meta (nil)}, :method-params [(ks [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists ([ks & [default]]), :doc "Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session."}, get {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 12, :column 7, :end-line 12, :end-column 10, :arglists (quote ([k & [default]])), :doc "Get the key's value from the session, returns nil if it doesn't exist.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [default])], :arglists ([k & [default]]), :arglists-meta (nil)}}, :name reagent.session/get, :variadic true, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [default])], :arglists ([k & [default]]), :arglists-meta (nil)}, :method-params [(k [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists ([k & [default]]), :doc "Get the key's value from the session, returns nil if it doesn't exist."}, reset! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 38, :column 7, :end-line 38, :end-column 13, :arglists (quote ([m]))}, :name reagent.session/reset!, :variadic false, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, cursor {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([ks])), :doc "Returns a cursor from the state atom."}, :name reagent.session/cursor, :variadic false, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 13, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks])), :doc "Returns a cursor from the state atom."}, get! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 54, :column 7, :end-line 54, :end-column 11, :arglists (quote ([k & [default]])), :doc "Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [default])], :arglists ([k & [default]]), :arglists-meta (nil)}}, :name reagent.session/get!, :variadic true, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(k [default])], :arglists ([k & [default]]), :arglists-meta (nil)}, :method-params [(k [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists ([k & [default]]), :doc "Destructive get from the session. This returns the current value of the key\n  and then removes it from the session."}, state {:name reagent.session/state, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 5, :column 6, :end-line 5, :end-column 11}}, swap! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 27, :column 7, :end-line 27, :end-column 12, :arglists (quote ([f & args])), :doc "Replace the current session's value with the result of executing f with\n  the current value and args.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :name reagent.session/swap!, :variadic true, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists ([f & args]), :doc "Replace the current session's value with the result of executing f with\n  the current value and args."}, clear! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 33, :column 7, :end-line 33, :end-column 13, :arglists (quote ([])), :doc "Remove all data from the session and start over cleanly."}, :name reagent.session/clear!, :variadic false, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Remove all data from the session and start over cleanly."}, update! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 69, :column 7, :end-line 69, :end-column 14, :arglists (quote ([k f & args])), :doc "Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(k f args)], :arglists ([k f & args]), :arglists-meta (nil)}}, :name reagent.session/update!, :variadic true, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(k f args)], :arglists ([k f & args]), :arglists-meta (nil)}, :method-params [(k f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists ([k f & args]), :doc "Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added."}, put! {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 18, :column 7, :end-line 18, :end-column 11, :arglists (quote ([k v]))}, :name reagent.session/put!, :variadic false, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 11, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v]))}, get-in {:protocol-inline nil, :meta {:file "/home/torysa/Workspace/humfunding/target/cljsbuild/public/js/out/reagent/session.cljs", :line 21, :column 7, :end-line 21, :end-column 13, :arglists (quote ([ks & [default]])), :doc "Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ks [default])], :arglists ([ks & [default]]), :arglists-meta (nil)}}, :name reagent.session/get-in, :variadic true, :file "target/cljsbuild/public/js/out/reagent/session.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(ks [default])], :arglists ([ks & [default]]), :arglists-meta (nil)}, :method-params [(ks [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([ks & [default]]), :doc "Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist."}}}