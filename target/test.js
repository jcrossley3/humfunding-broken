if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.13.3
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.React = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var EventPluginUtils = _dereq_(19);
var ReactChildren = _dereq_(32);
var ReactComponent = _dereq_(34);
var ReactClass = _dereq_(33);
var ReactContext = _dereq_(38);
var ReactCurrentOwner = _dereq_(39);
var ReactElement = _dereq_(57);
var ReactElementValidator = _dereq_(58);
var ReactDOM = _dereq_(40);
var ReactDOMTextComponent = _dereq_(51);
var ReactDefaultInjection = _dereq_(54);
var ReactInstanceHandles = _dereq_(66);
var ReactMount = _dereq_(70);
var ReactPerf = _dereq_(75);
var ReactPropTypes = _dereq_(78);
var ReactReconciler = _dereq_(81);
var ReactServerRendering = _dereq_(84);

var assign = _dereq_(27);
var findDOMNode = _dereq_(117);
var onlyChild = _dereq_(144);

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  Component: ReactComponent,
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactClass.createClass,
  createElement: createElement,
  cloneElement: cloneElement,
  createFactory: createFactory,
  createMixin: function(mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  findDOMNode: findDOMNode,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_(21);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'https://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'https://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

React.version = '0.13.3';

module.exports = React;

},{"117":117,"144":144,"19":19,"21":21,"27":27,"32":32,"33":33,"34":34,"38":38,"39":39,"40":40,"51":51,"54":54,"57":57,"58":58,"66":66,"70":70,"75":75,"78":78,"81":81,"84":84}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

'use strict';

var focusNode = _dereq_(119);

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"119":119}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = _dereq_(15);
var EventPropagators = _dereq_(20);
var ExecutionEnvironment = _dereq_(21);
var FallbackCompositionState = _dereq_(22);
var SyntheticCompositionEvent = _dereq_(93);
var SyntheticInputEvent = _dereq_(97);

var keyOf = _dereq_(141);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !documentMode &&
  !isPresto()
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = (
  ExecutionEnvironment.canUseDOM &&
  (
    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
  )
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}


/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(
    eventType,
    topLevelTargetID,
    nativeEvent
  );

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (
      topLevelType === topLevelTypes.topCompositionEnd ||
      isFallbackCompositionEnd(topLevelType, nativeEvent)
    ) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(
    eventTypes.beforeInput,
    topLevelTargetID,
    nativeEvent
  );

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
    topLevelType,
    topLevelTarget,
    topLevelTargetID,
    nativeEvent
  ) {
    return [
      extractCompositionEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      ),
      extractBeforeInputEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      )
    ];
  }
};

module.exports = BeforeInputEventPlugin;

},{"141":141,"15":15,"20":20,"21":21,"22":22,"93":93,"97":97}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  boxFlex: true,
  boxFlexGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = _dereq_(4);
var ExecutionEnvironment = _dereq_(21);

var camelizeStyleName = _dereq_(108);
var dangerousStyleValue = _dereq_(113);
var hyphenateStyleName = _dereq_(133);
var memoizeStringOnly = _dereq_(143);
var warning = _dereq_(154);

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property %s. Did you mean %s?',
      name,
      camelizeStyleName(name)
    ) : null);
  };

  var warnBadVendoredStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
      name,
      name.charAt(0).toUpperCase() + name.slice(1)
    ) : null);
  };

  var warnStyleValueWithSemicolon = function(name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    ("production" !== "development" ? warning(
      false,
      'Style property values shouldn\'t contain a semicolon. ' +
      'Try "%s: %s" instead.',
      name,
      value.replace(badStyleValueWithSemicolonPattern, '')
    ) : null);
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function(name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if ("production" !== "development") {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"108":108,"113":113,"133":133,"143":143,"154":154,"21":21,"4":4}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = _dereq_(28);

var assign = _dereq_(27);
var invariant = _dereq_(135);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        'Mismatched list of contexts in callback queue'
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"135":135,"27":27,"28":28}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = _dereq_(15);
var EventPluginHub = _dereq_(17);
var EventPropagators = _dereq_(20);
var ExecutionEnvironment = _dereq_(21);
var ReactUpdates = _dereq_(87);
var SyntheticEvent = _dereq_(95);

var isEventSupported = _dereq_(136);
var isTextInputElement = _dereq_(138);
var keyOf = _dereq_(141);

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    (!('documentMode' in document) || document.documentMode > 8)
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    (!('documentMode' in document) || document.documentMode > 9)
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"136":136,"138":138,"141":141,"15":15,"17":17,"20":20,"21":21,"87":87,"95":95}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = _dereq_(12);
var ReactMultiChildUpdateTypes = _dereq_(72);

var setTextContent = _dereq_(149);
var invariant = _dereq_(135);

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"12":12,"135":135,"149":149,"72":72}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

'use strict';

var invariant = _dereq_(135);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"135":135}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = _dereq_(10);

var quoteAttributeValueForBrowser = _dereq_(147);
var warning = _dereq_(154);

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property %s. Did you mean %s?',
      name,
      standardName
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
      quoteAttributeValueForBrowser(id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return attributeName;
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"10":10,"147":147,"154":154}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

'use strict';

var ExecutionEnvironment = _dereq_(21);

var createNodesFromMarkup = _dereq_(112);
var emptyFunction = _dereq_(114);
var getMarkupWrap = _dereq_(127);
var invariant = _dereq_(135);

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            'Danger: Discarding unexpected node:',
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See React.renderToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"112":112,"114":114,"127":127,"135":135,"21":21}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = _dereq_(141);

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"141":141}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = _dereq_(15);
var EventPropagators = _dereq_(20);
var SyntheticMouseEvent = _dereq_(99);

var ReactMount = _dereq_(70);
var keyOf = _dereq_(141);

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"141":141,"15":15,"20":20,"70":70,"99":99}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = _dereq_(140);

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"140":140}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_(114);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"114":114}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = _dereq_(18);
var EventPluginUtils = _dereq_(19);

var accumulateInto = _dereq_(105);
var forEachAccumulated = _dereq_(120);
var invariant = _dereq_(135);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid =
    InstanceHandle &&
    InstanceHandle.traverseTwoPhase &&
    InstanceHandle.traverseEnterLeave;
  ("production" !== "development" ? invariant(
    valid,
    'InstanceHandle not injected before use!'
  ) : invariant(valid));
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"105":105,"120":120,"135":135,"18":18,"19":19}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = _dereq_(135);

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"135":135}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = _dereq_(15);

var invariant = _dereq_(135);

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, cb) {
  forEachEventDispatch(event, cb);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"135":135,"15":15}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = _dereq_(15);
var EventPluginHub = _dereq_(17);

var accumulateInto = _dereq_(105);
var forEachAccumulated = _dereq_(120);

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"105":105,"120":120,"15":15,"17":17}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  (typeof window !== 'undefined' &&
  window.document && window.document.createElement)
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = _dereq_(28);

var assign = _dereq_(27);
var getTextContentAccessor = _dereq_(130);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function() {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function() {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

},{"130":130,"27":27,"28":28}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = _dereq_(10);
var ExecutionEnvironment = _dereq_(21);

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: null,
    autoCorrect: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // property is supported for OpenGraph in meta tags.
    property: null,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"10":10,"21":21}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = _dereq_(78);

var invariant = _dereq_(135);

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"135":135,"78":78}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

'use strict';

var ReactBrowserEventEmitter = _dereq_(30);

var accumulateInto = _dereq_(105);
var forEachAccumulated = _dereq_(120);
var invariant = _dereq_(135);

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    // If a component renders to null or if another component fatals and causes
    // the state of the tree to be corrupted, `node` here can be null.
    var node = this.getDOMNode();
    ("production" !== "development" ? invariant(
      node,
      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
    ) : invariant(node));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      node
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"105":105,"120":120,"135":135,"30":30}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = _dereq_(15);

var emptyFunction = _dereq_(114);

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"114":114,"15":15}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = _dereq_(135);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"135":135}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var findDOMNode = _dereq_(117);

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"117":117}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = _dereq_(15);
var EventPluginHub = _dereq_(17);
var EventPluginRegistry = _dereq_(18);
var ReactEventEmitterMixin = _dereq_(61);
var ViewportMetrics = _dereq_(104);

var assign = _dereq_(27);
var isEventSupported = _dereq_(136);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            (isListening.hasOwnProperty(dependency) && isListening[dependency])
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function() {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"104":104,"136":136,"15":15,"17":17,"18":18,"27":27,"61":61}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = _dereq_(81);

var flattenChildren = _dereq_(118);
var instantiateReactComponent = _dereq_(134);
var shouldUpdateReactComponent = _dereq_(151);

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {

  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function(nestedChildNodes, transaction, context) {
    var children = flattenChildren(nestedChildNodes);
    for (var name in children) {
      if (children.hasOwnProperty(name)) {
        var child = children[name];
        // The rendered children must be turned into instances as they're
        // mounted.
        var childInstance = instantiateReactComponent(child, null);
        children[name] = childInstance;
      }
    }
    return children;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextNestedChildNodes Nested child maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function(
    prevChildren,
    nextNestedChildNodes,
    transaction,
    context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    var nextChildren = flattenChildren(nextNestedChildNodes);
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(
          prevChild, nextElement, transaction, context
        );
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(
          nextElement,
          null
        );
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) &&
          !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function(renderedChildren) {
    for (var name in renderedChildren) {
      var renderedChild = renderedChildren[name];
      ReactReconciler.unmountComponent(renderedChild);
    }
  }

};

module.exports = ReactChildReconciler;

},{"118":118,"134":134,"151":151,"81":81}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = _dereq_(28);
var ReactFragment = _dereq_(63);

var traverseAllChildren = _dereq_(153);
var warning = _dereq_(154);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      keyUnique,
      'ReactChildren.map(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return ReactFragment.create(mapResult);
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"153":153,"154":154,"28":28,"63":63}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = _dereq_(34);
var ReactCurrentOwner = _dereq_(39);
var ReactElement = _dereq_(57);
var ReactErrorUtils = _dereq_(60);
var ReactInstanceMap = _dereq_(67);
var ReactLifeCycle = _dereq_(68);
var ReactPropTypeLocations = _dereq_(77);
var ReactPropTypeLocationNames = _dereq_(76);
var ReactUpdateQueue = _dereq_(86);

var assign = _dereq_(27);
var invariant = _dereq_(135);
var keyMirror = _dereq_(140);
var keyOf = _dereq_(141);
var warning = _dereq_(154);

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    if ("production" !== "development") {
      validateTypeDef(
        Constructor,
        childContextTypes,
        ReactPropTypeLocations.childContext
      );
    }
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    if ("production" !== "development") {
      validateTypeDef(
        Constructor,
        contextTypes,
        ReactPropTypeLocations.context
      );
    }
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    if ("production" !== "development") {
      validateTypeDef(
        Constructor,
        propTypes,
        ReactPropTypeLocations.prop
      );
    }
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      ("production" !== "development" ? warning(
        typeof typeDef[propName] === 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactClass',
        ReactPropTypeLocationNames[location],
        propName
      ) : null);
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
    ReactClassInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactClassInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactClassInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    typeof spec !== 'function',
    'ReactClass: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(typeof spec !== 'function'));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactClass: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod =
        ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isReactClassMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isReactClassMethod && (
              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
            ),
            'ReactClass: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isReactClassMethod && (
            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactClass: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactClass: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      ("production" !== "development" ? invariant(
        one[key] === undefined,
        'mergeIntoWithNoDuplicateKeys(): ' +
        'Tried to merge two objects with the same key: `%s`. This conflict ' +
        'may be due to a mixin; in particular, this may be caused by two ' +
        'getInitialState() or getDefaultProps() methods returning objects ' +
        'with clashing keys.',
        key
      ) : invariant(one[key] === undefined));
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if ("production" !== "development") {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        ("production" !== "development" ? warning(
          false,
          'bind(): React component methods may only be bound to the ' +
          'component instance. See %s',
          componentName
        ) : null);
      } else if (!args.length) {
        ("production" !== "development" ? warning(
          false,
          'bind(): You are binding a component method to the component. ' +
          'React does this for you automatically in a high-performance ' +
          'way, so you can safely remove this call. See %s',
          componentName
        ) : null);
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(
        component,
        ReactErrorUtils.guard(
          method,
          component.constructor.displayName + '.' + autoBindKey
        )
      );
    }
  }
}

var typeDeprecationDescriptor = {
  enumerable: false,
  get: function() {
    var displayName = this.displayName || this.name || 'Component';
    ("production" !== "development" ? warning(
      false,
      '%s.type is deprecated. Use %s directly to access the class.',
      displayName,
      displayName
    ) : null);
    Object.defineProperty(this, 'type', {
      value: this
    });
    return this;
  }
};

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function(newState, callback) {
    ReactUpdateQueue.enqueueReplaceState(this, newState);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    if ("production" !== "development") {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        ("production" !== "development" ? warning(
          owner._warnedAboutRefsInRender,
          '%s is accessing isMounted inside its render() function. ' +
          'render() should be a pure function of props and state. It should ' +
          'never access something that requires stale data from the previous ' +
          'render, such as refs. Move this logic to componentDidMount and ' +
          'componentDidUpdate instead.',
          owner.getName() || 'A component'
        ) : null);
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(this);
    return (
      internalInstance &&
      internalInstance !== ReactLifeCycle.currentlyMountingInstance
    );
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function(partialProps, callback) {
    ReactUpdateQueue.enqueueSetProps(this, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function(newProps, callback) {
    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function() {};
assign(
  ReactClassComponent.prototype,
  ReactComponent.prototype,
  ReactClassMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props, context) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
          'JSX instead. See: https://fb.me/react-legacyfactory'
        ) : null);
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("production" !== "development") {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' &&
            this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      ("production" !== "development" ? invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("production" !== "development") {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        spec.displayName || 'A component'
      ) : null);
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    // Legacy hook
    Constructor.type = Constructor;
    if ("production" !== "development") {
      try {
        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;

},{"135":135,"140":140,"141":141,"154":154,"27":27,"34":34,"39":39,"57":57,"60":60,"67":67,"68":68,"76":76,"77":77,"86":86}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactUpdateQueue = _dereq_(86);

var invariant = _dereq_(135);
var warning = _dereq_(154);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context) {
  this.props = props;
  this.context = context;
}

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function(partialState, callback) {
  ("production" !== "development" ? invariant(
    typeof partialState === 'object' ||
    typeof partialState === 'function' ||
    partialState == null,
    'setState(...): takes an object of state variables to update or a ' +
    'function which returns an object of state variables.'
  ) : invariant(typeof partialState === 'object' ||
  typeof partialState === 'function' ||
  partialState == null));
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      partialState != null,
      'setState(...): You passed an undefined or null state object; ' +
      'instead, use forceUpdate().'
    ) : null);
  }
  ReactUpdateQueue.enqueueSetState(this, partialState);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function(callback) {
  ReactUpdateQueue.enqueueForceUpdate(this);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if ("production" !== "development") {
  var deprecatedAPIs = {
    getDOMNode: [
      'getDOMNode',
      'Use React.findDOMNode(component) instead.'
    ],
    isMounted: [
      'isMounted',
      'Instead, make sure to clean up subscriptions and pending requests in ' +
      'componentWillUnmount to prevent memory leaks.'
    ],
    replaceProps: [
      'replaceProps',
      'Instead call React.render again at the top level.'
    ],
    replaceState: [
      'replaceState',
      'Refactor your code to use setState instead (see ' +
      'https://github.com/facebook/react/issues/3236).'
    ],
    setProps: [
      'setProps',
      'Instead call React.render again at the top level.'
    ]
  };
  var defineDeprecationWarning = function(methodName, info) {
    try {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function() {
          ("production" !== "development" ? warning(
            false,
            '%s(...) is deprecated in plain JavaScript React classes. %s',
            info[0],
            info[1]
          ) : null);
          return undefined;
        }
      });
    } catch (x) {
      // IE will fail on defineProperty (es5-shim/sham too)
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;

},{"135":135,"154":154,"86":86}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

'use strict';

var ReactDOMIDOperations = _dereq_(44);
var ReactMount = _dereq_(70);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates:
    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID:
    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;

},{"44":44,"70":70}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = _dereq_(135);

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function(environment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactCompositeComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      ReactComponentEnvironment.unmountIDFromEnvironment =
        environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID =
        environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates =
        environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;

},{"135":135}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = _dereq_(36);
var ReactContext = _dereq_(38);
var ReactCurrentOwner = _dereq_(39);
var ReactElement = _dereq_(57);
var ReactElementValidator = _dereq_(58);
var ReactInstanceMap = _dereq_(67);
var ReactLifeCycle = _dereq_(68);
var ReactNativeComponent = _dereq_(73);
var ReactPerf = _dereq_(75);
var ReactPropTypeLocations = _dereq_(77);
var ReactPropTypeLocationNames = _dereq_(76);
var ReactReconciler = _dereq_(81);
var ReactUpdates = _dereq_(87);

var assign = _dereq_(27);
var emptyObject = _dereq_(115);
var invariant = _dereq_(135);
var shouldUpdateReactComponent = _dereq_(151);
var warning = _dereq_(154);

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._isTopLevel = false;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(this._currentElement._context);

    var Component = ReactNativeComponent.getComponentClassForElement(
      this._currentElement
    );

    // Initialize the public class
    var inst = new Component(publicProps, publicContext);

    if ("production" !== "development") {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      ("production" !== "development" ? warning(
        inst.render != null,
        '%s(...): No `render` method found on the returned component ' +
        'instance: you may have forgotten to define `render` in your ' +
        'component or you may have accidentally tried to render an element ' +
        'whose type is a function that isn\'t a React component.',
        Component.displayName || Component.name || 'Component'
      ) : null);
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if ("production" !== "development") {
      this._warnIfContextsDiffer(this._currentElement._context, context);
    }

    if ("production" !== "development") {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      ("production" !== "development" ? warning(
        !inst.getInitialState ||
        inst.getInitialState.isReactClassApproved,
        'getInitialState was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Did you mean to define a state property instead?',
        this.getName() || 'a component'
      ) : null);
      ("production" !== "development" ? warning(
        !inst.getDefaultProps ||
        inst.getDefaultProps.isReactClassApproved,
        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Use a static property to define defaultProps instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== "development" ? warning(
        !inst.propTypes,
        'propTypes was defined as an instance property on %s. Use a static ' +
        'property to define propTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== "development" ? warning(
        !inst.contextTypes,
        'contextTypes was defined as an instance property on %s. Use a ' +
        'static property to define contextTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== "development" ? warning(
        typeof inst.componentShouldUpdate !== 'function',
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        (this.getName() || 'A component')
      ) : null);
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    ("production" !== "development" ? invariant(
      typeof initialState === 'object' && !Array.isArray(initialState),
      '%s.state: must be set to an object or null',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var childContext;
    var renderedElement;

    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
    ReactLifeCycle.currentlyMountingInstance = this;
    try {
      if (inst.componentWillMount) {
        inst.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingStateQueue` without triggering a re-render.
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }

      childContext = this._getValidatedChildContext(context);
      renderedElement = this._renderValidatedComponent(childContext);
    } finally {
      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
    }

    this._renderedComponent = this._instantiateReactComponent(
      renderedElement,
      this._currentElement.type // The wrapping type
    );

    var markup = ReactReconciler.mountComponent(
      this._renderedComponent,
      rootID,
      transaction,
      this._mergeChildContext(context, childContext)
    );
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
      ReactLifeCycle.currentlyUnmountingInstance = this;
      try {
        inst.componentWillUnmount();
      } finally {
        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
      }
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;

    // Reset pending fields
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Schedule a partial update to the props. Only used for internal testing.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @internal
   */
  _setPropsInternal: function(partialProps, callback) {
    // This is a deoptimized path. We optimize for always having an element.
    // This creates an extra internal element.
    var element = this._pendingElement || this._currentElement;
    this._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      assign({}, element.props, partialProps)
    );
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function(context) {
    var maskedContext = null;
    // This really should be getting the component class for the element,
    // but we know that we're not going to need it for built-ins.
    if (typeof this._currentElement.type === 'string') {
      return emptyObject;
    }
    var contextTypes = this._currentElement.type.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = this._maskContext(context);
    if ("production" !== "development") {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.contextTypes) {
        this._checkPropTypes(
          Component.contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _getValidatedChildContext: function(currentContext) {
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof inst.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        this.getName() || 'ReactCompositeComponent'
      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          inst.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in inst.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          this.getName() || 'ReactCompositeComponent',
          name
        ) : invariant(name in inst.constructor.childContextTypes));
      }
      return childContext;
    }
    return null;
  },

  _mergeChildContext: function(currentContext, childContext) {
    if (childContext) {
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.propTypes) {
        this._checkPropTypes(
          Component.propTypes,
          newProps,
          ReactPropTypeLocations.prop
        );
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          ("production" !== "development" ? invariant(
            typeof propTypes[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually ' +
            'from React.PropTypes.',
            componentName || 'React class',
            ReactPropTypeLocationNames[location],
            propName
          ) : invariant(typeof propTypes[propName] === 'function'));
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // React.render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            ("production" !== "development" ? warning(
              false,
              'Failed Composite propType: %s%s',
              error.message,
              addendum
            ) : null);
          } else {
            ("production" !== "development" ? warning(
              false,
              'Failed Context Types: %s%s',
              error.message,
              addendum
            ) : null);
          }
        }
      }
    }
  },

  receiveComponent: function(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(
      transaction,
      prevElement,
      nextElement,
      prevContext,
      nextContext
    );
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(
        this,
        this._pendingElement || this._currentElement,
        transaction,
        this._context
      );
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      if ("production" !== "development") {
        ReactElementValidator.checkAndWarnForMutatedProps(
          this._currentElement
        );
      }

      this.updateComponent(
        transaction,
        this._currentElement,
        this._currentElement,
        this._context,
        this._context
      );
    }
  },

  /**
   * Compare two contexts, warning if they are different
   * TODO: Remove this check when owner-context is removed
   */
   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
    ownerBasedContext = this._maskContext(ownerBasedContext);
    parentBasedContext = this._maskContext(parentBasedContext);
    var parentKeys = Object.keys(parentBasedContext).sort();
    var displayName = this.getName() || 'ReactCompositeComponent';
    for (var i = 0; i < parentKeys.length; i++) {
      var key = parentKeys[i];
      ("production" !== "development" ? warning(
        ownerBasedContext[key] === parentBasedContext[key],
        'owner-based and parent-based contexts differ '  +
        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
        '(see: http://fb.me/react-context-by-parent)',
        ownerBasedContext[key],
        parentBasedContext[key],
        key,
        displayName
      ) : null);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function(
    transaction,
    prevParentElement,
    nextParentElement,
    prevUnmaskedContext,
    nextUnmaskedContext
  ) {
    var inst = this._instance;

    var nextContext = inst.context;
    var nextProps = inst.props;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement !== nextParentElement) {
      nextContext = this._processContext(nextParentElement._context);
      nextProps = this._processProps(nextParentElement.props);

      if ("production" !== "development") {
        if (nextUnmaskedContext != null) {
          this._warnIfContextsDiffer(
            nextParentElement._context,
            nextUnmaskedContext
          );
        }
      }

      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate =
      this._pendingForceUpdate ||
      !inst.shouldComponentUpdate ||
      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        typeof shouldUpdate !== 'undefined',
        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
        'boolean value. Make sure to return true or false.',
        this.getName() || 'ReactCompositeComponent'
      ) : null);
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextParentElement,
        nextProps,
        nextState,
        nextContext,
        transaction,
        nextUnmaskedContext
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(
        nextState,
        typeof partial === 'function' ?
          partial.call(inst, nextState, props, context) :
          partial
      );
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction,
    unmaskedContext
  ) {
    var inst = this._instance;

    var prevProps = inst.props;
    var prevState = inst.state;
    var prevContext = inst.context;

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (inst.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
        inst
      );
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var childContext = this._getValidatedChildContext();
    var nextRenderedElement = this._renderValidatedComponent(childContext);
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(
        prevComponentInstance,
        nextRenderedElement,
        transaction,
        this._mergeChildContext(context, childContext)
      );
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(
        nextRenderedElement,
        this._currentElement.type
      );
      var nextMarkup = ReactReconciler.mountComponent(
        this._renderedComponent,
        thisID,
        transaction,
        this._mergeChildContext(context, childContext)
      );
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(
      prevComponentID,
      nextMarkup
    );
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function() {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if ("production" !== "development") {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' &&
          inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function(childContext) {
    var renderedComponent;
    var previousContext = ReactContext.current;
    ReactContext.current = this._mergeChildContext(
      this._currentElement._context,
      childContext
    );
    ReactCurrentOwner.current = this;
    try {
      renderedComponent =
        this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactContext.current = previousContext;
      ReactCurrentOwner.current = null;
    }
    ("production" !== "development" ? invariant(
      // TODO: An `isValidNode` function would probably be more appropriate
      renderedComponent === null || renderedComponent === false ||
      ReactElement.isValidElement(renderedComponent),
      '%s.render(): A valid ReactComponent must be returned. You may have ' +
        'returned undefined, an array or some other invalid object.',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false ||
    ReactElement.isValidElement(renderedComponent)));
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function(ref, component) {
    var inst = this.getPublicInstance();
    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
    refs[ref] = component.getPublicInstance();
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return (
      type.displayName || (constructor && constructor.displayName) ||
      type.name || (constructor && constructor.name) ||
      null
    );
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by React.render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function() {
    return this._instance;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(
  ReactCompositeComponentMixin,
  'ReactCompositeComponent',
  {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent',
    _renderValidatedComponent: '_renderValidatedComponent'
  }
);

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;

},{"115":115,"135":135,"151":151,"154":154,"27":27,"36":36,"38":38,"39":39,"57":57,"58":58,"67":67,"68":68,"73":73,"75":75,"76":76,"77":77,"81":81,"87":87}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

'use strict';

var assign = _dereq_(27);
var emptyObject = _dereq_(115);
var warning = _dereq_(154);

var didWarn = false;

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: emptyObject,

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        didWarn,
        'withContext is deprecated and will be removed in a future version. ' +
        'Use a wrapper component with getChildContext instead.'
      ) : null);

      didWarn = true;
    }

    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"115":115,"154":154,"27":27}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

'use strict';

var ReactElement = _dereq_(57);
var ReactElementValidator = _dereq_(58);

var mapObject = _dereq_(142);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"142":142,"57":57,"58":58}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var AutoFocusMixin = _dereq_(2);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);

var keyMirror = _dereq_(140);

var button = ReactElement.createFactory('button');

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactClass.createClass({
  displayName: 'ReactDOMButton',
  tagName: 'BUTTON',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"140":140,"2":2,"29":29,"33":33,"57":57}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var CSSPropertyOperations = _dereq_(5);
var DOMProperty = _dereq_(10);
var DOMPropertyOperations = _dereq_(11);
var ReactBrowserEventEmitter = _dereq_(30);
var ReactComponentBrowserEnvironment =
  _dereq_(35);
var ReactMount = _dereq_(70);
var ReactMultiChild = _dereq_(71);
var ReactPerf = _dereq_(75);

var assign = _dereq_(27);
var escapeTextContentForBrowser = _dereq_(116);
var invariant = _dereq_(135);
var isEventSupported = _dereq_(136);
var keyOf = _dereq_(141);
var warning = _dereq_(154);

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * Optionally injectable operations for mutating the DOM
 */
var BackendIDOperations = null;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (props.dangerouslySetInnerHTML != null) {
    ("production" !== "development" ? invariant(
      props.children == null,
      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
    ) : invariant(props.children == null));
    ("production" !== "development" ? invariant(
      typeof props.dangerouslySetInnerHTML === 'object' &&
      '__html' in props.dangerouslySetInnerHTML,
      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
      'for more information.'
    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
    '__html' in props.dangerouslySetInnerHTML));
  }
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      props.innerHTML == null,
      'Directly setting property `innerHTML` is not permitted. ' +
      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
    ) : null);
    ("production" !== "development" ? warning(
      !props.contentEditable || props.children == null,
      'A component is `contentEditable` and contains `children` managed by ' +
      'React. It is now your responsibility to guarantee that none of ' +
      'those nodes are unexpectedly modified or duplicated. This is ' +
      'probably not intentional.'
    ) : null);
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
    'using JSX.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    ("production" !== "development" ? warning(
      registrationName !== 'onScroll' || isEventSupported('scroll', true),
      'This browser doesn\'t support the `onScroll` event'
    ) : null);
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this._renderedChildren = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function(element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} The computed markup.
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    assertValidProps(this._currentElement.props);
    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
    return (
      this._createOpenTagMarkupAndPutListeners(transaction) +
      this._createContentMarkup(transaction, context) +
      closeTag
    );
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this._currentElement.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction, context) {
    var prefix = '';
    if (this._tag === 'listing' ||
        this._tag === 'pre' ||
        this._tag === 'textarea') {
      // Add an initial newline because browsers ignore the first newline in
      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
      prefix = '\n';
    }

    var props = this._currentElement.props;

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return prefix + innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        return prefix + escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction,
          context
        );
        return prefix + mountImages.join('');
      }
    }
    return prefix;
  },

  receiveComponent: function(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function(transaction, prevElement, nextElement, context) {
    assertValidProps(this._currentElement.props);
    this._updateDOMProperties(prevElement.props, transaction);
    this._updateDOMChildren(prevElement.props, transaction, context);
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this._currentElement.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ?
        this._previousStyleCopy :
        lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction, context) {
    var nextProps = this._currentElement.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(
  ReactDOMComponent.prototype,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin
);

ReactDOMComponent.injection = {
  injectIDOperations: function(IDOperations) {
    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
  }
};

module.exports = ReactDOMComponent;

},{"10":10,"11":11,"116":116,"135":135,"136":136,"141":141,"154":154,"27":27,"30":30,"35":35,"5":5,"70":70,"71":71,"75":75}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

'use strict';

var EventConstants = _dereq_(15);
var LocalEventTrapMixin = _dereq_(25);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);

var form = ReactElement.createFactory('form');

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactClass.createClass({
  displayName: 'ReactDOMForm',
  tagName: 'FORM',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"15":15,"25":25,"29":29,"33":33,"57":57}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

'use strict';

var CSSPropertyOperations = _dereq_(5);
var DOMChildrenOperations = _dereq_(9);
var DOMPropertyOperations = _dereq_(11);
var ReactMount = _dereq_(70);
var ReactPerf = _dereq_(75);

var invariant = _dereq_(135);
var setInnerHTML = _dereq_(148);

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactDOMComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== "development" ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== "development" ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
    DOMPropertyOperations.deleteValueForProperty(node, name, value);
  },

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: function(id, styles) {
    var node = ReactMount.getNode(id);
    CSSPropertyOperations.setValueForStyles(node, styles);
  },

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: function(id, html) {
    var node = ReactMount.getNode(id);
    setInnerHTML(node, html);
  },

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: function(id, content) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.updateTextContent(node, content);
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function(updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  updatePropertyByID: 'updatePropertyByID',
  deletePropertyByID: 'deletePropertyByID',
  updateStylesByID: 'updateStylesByID',
  updateInnerHTMLByID: 'updateInnerHTMLByID',
  updateTextContentByID: 'updateTextContentByID',
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;

},{"11":11,"135":135,"148":148,"5":5,"70":70,"75":75,"9":9}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIframe
 */

'use strict';

var EventConstants = _dereq_(15);
var LocalEventTrapMixin = _dereq_(25);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);

var iframe = ReactElement.createFactory('iframe');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <iframe> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <iframe> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMIframe = ReactClass.createClass({
  displayName: 'ReactDOMIframe',
  tagName: 'IFRAME',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return iframe(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
  }
});

module.exports = ReactDOMIframe;

},{"15":15,"25":25,"29":29,"33":33,"57":57}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

'use strict';

var EventConstants = _dereq_(15);
var LocalEventTrapMixin = _dereq_(25);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);

var img = ReactElement.createFactory('img');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactClass.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"15":15,"25":25,"29":29,"33":33,"57":57}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var AutoFocusMixin = _dereq_(2);
var DOMPropertyOperations = _dereq_(11);
var LinkedValueUtils = _dereq_(24);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);
var ReactMount = _dereq_(70);
var ReactUpdates = _dereq_(87);

var assign = _dereq_(27);
var invariant = _dereq_(135);

var input = ReactElement.createFactory('input');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactClass.createClass({
  displayName: 'ReactDOMInput',
  tagName: 'INPUT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"11":11,"135":135,"2":2,"24":24,"27":27,"29":29,"33":33,"57":57,"70":70,"87":87}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);

var warning = _dereq_(154);

var option = ReactElement.createFactory('option');

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactClass.createClass({
  displayName: 'ReactDOMOption',
  tagName: 'OPTION',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"154":154,"29":29,"33":33,"57":57}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var AutoFocusMixin = _dereq_(2);
var LinkedValueUtils = _dereq_(24);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);
var ReactUpdates = _dereq_(87);

var assign = _dereq_(27);

var select = ReactElement.createFactory('select');

function updateOptionsIfPendingUpdateAndMounted() {
  /*jshint validthis:true */
  if (this._pendingUpdate) {
    this._pendingUpdate = false;
    var value = LinkedValueUtils.getValue(this);
    if (value != null && this.isMounted()) {
      updateOptions(this, value);
    }
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return null;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(component, propValue) {
  var selectedValue, i, l;
  var options = component.getDOMNode().options;

  if (component.props.multiple) {
    selectedValue = {};
    for (i = 0, l = propValue.length; i < l; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0, l = options.length; i < l; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0, l = options.length; i < l; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactClass.createClass({
  displayName: 'ReactDOMSelect',
  tagName: 'SELECT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentWillMount: function() {
    this._pendingUpdate = false;
  },

  componentDidMount: function() {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      updateOptions(this, value);
    } else if (this.props.defaultValue != null) {
      updateOptions(this, this.props.defaultValue);
    }
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      this._pendingUpdate = false;
      updateOptions(this, value);
    } else if (!prevProps.multiple !== !this.props.multiple) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (this.props.defaultValue != null) {
        updateOptions(this, this.props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(this, this.props.multiple ? [] : '');
      }
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    this._pendingUpdate = true;
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"2":2,"24":24,"27":27,"29":29,"33":33,"57":57,"87":87}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = _dereq_(21);

var getNodeForCharacterOffset = _dereq_(128);
var getTextContentAccessor = _dereq_(130);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = (
  ExecutionEnvironment.canUseDOM &&
  'selection' in document &&
  !('getSelection' in window)
);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"128":128,"130":130,"21":21}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMPropertyOperations = _dereq_(11);
var ReactComponentBrowserEnvironment =
  _dereq_(35);
var ReactDOMComponent = _dereq_(42);

var assign = _dereq_(27);
var escapeTextContentForBrowser = _dereq_(116);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function(props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function(text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    var escapedText = escapeTextContentForBrowser(this._stringText);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
          this._rootNodeID,
          nextStringText
        );
      }
    }
  },

  unmountComponent: function() {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;

},{"11":11,"116":116,"27":27,"35":35,"42":42}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var AutoFocusMixin = _dereq_(2);
var DOMPropertyOperations = _dereq_(11);
var LinkedValueUtils = _dereq_(24);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);
var ReactUpdates = _dereq_(87);

var assign = _dereq_(27);
var invariant = _dereq_(135);

var warning = _dereq_(154);

var textarea = ReactElement.createFactory('textarea');

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactClass.createClass({
  displayName: 'ReactDOMTextarea',
  tagName: 'TEXTAREA',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"11":11,"135":135,"154":154,"2":2,"24":24,"27":27,"29":29,"33":33,"57":57,"87":87}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = _dereq_(87);
var Transaction = _dereq_(103);

var assign = _dereq_(27);
var emptyFunction = _dereq_(114);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b, c, d) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d);
    } else {
      transaction.perform(callback, null, a, b, c, d);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"103":103,"114":114,"27":27,"87":87}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = _dereq_(3);
var ChangeEventPlugin = _dereq_(7);
var ClientReactRootIndex = _dereq_(8);
var DefaultEventPluginOrder = _dereq_(13);
var EnterLeaveEventPlugin = _dereq_(14);
var ExecutionEnvironment = _dereq_(21);
var HTMLDOMPropertyConfig = _dereq_(23);
var MobileSafariClickEventPlugin = _dereq_(26);
var ReactBrowserComponentMixin = _dereq_(29);
var ReactClass = _dereq_(33);
var ReactComponentBrowserEnvironment =
  _dereq_(35);
var ReactDefaultBatchingStrategy = _dereq_(53);
var ReactDOMComponent = _dereq_(42);
var ReactDOMButton = _dereq_(41);
var ReactDOMForm = _dereq_(43);
var ReactDOMImg = _dereq_(46);
var ReactDOMIDOperations = _dereq_(44);
var ReactDOMIframe = _dereq_(45);
var ReactDOMInput = _dereq_(47);
var ReactDOMOption = _dereq_(48);
var ReactDOMSelect = _dereq_(49);
var ReactDOMTextarea = _dereq_(52);
var ReactDOMTextComponent = _dereq_(51);
var ReactElement = _dereq_(57);
var ReactEventListener = _dereq_(62);
var ReactInjection = _dereq_(64);
var ReactInstanceHandles = _dereq_(66);
var ReactMount = _dereq_(70);
var ReactReconcileTransaction = _dereq_(80);
var SelectEventPlugin = _dereq_(89);
var ServerReactRootIndex = _dereq_(90);
var SimpleEventPlugin = _dereq_(91);
var SVGDOMPropertyConfig = _dereq_(88);

var createFullPageComponent = _dereq_(111);

function autoGenerateWrapperClass(type) {
  return ReactClass.createClass({
    tagName: type.toUpperCase(),
    render: function() {
      return new ReactElement(
        type,
        null,
        null,
        null,
        null,
        this.props
      );
    }
  });
}

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectTextComponentClass(
    ReactDOMTextComponent
  );

  ReactInjection.NativeComponent.injectAutoWrapper(
    autoGenerateWrapperClass
  );

  // This needs to happen before createFullPageComponent() otherwise the mixin
  // won't be included.
  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'iframe': ReactDOMIframe,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_(55);
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"111":111,"13":13,"14":14,"21":21,"23":23,"26":26,"29":29,"3":3,"33":33,"35":35,"41":41,"42":42,"43":43,"44":44,"45":45,"46":46,"47":47,"48":48,"49":49,"51":51,"52":52,"53":53,"55":55,"57":57,"62":62,"64":64,"66":66,"7":7,"70":70,"8":8,"80":80,"88":88,"89":89,"90":90,"91":91}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = _dereq_(10);
var ReactDefaultPerfAnalysis = _dereq_(56);
var ReactMount = _dereq_(70);
var ReactPerf = _dereq_(75);

var performanceNow = _dereq_(146);

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' ||
          moduleName === 'ReactDOMIDOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        (// TODO: receiveComponent()?
        (fnName === 'mountComponent' ||
        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

        if (typeof this._currentElement.type === 'string') {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ?
            this._currentElement._owner.getName() :
            '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"10":10,"146":146,"56":56,"70":70,"75":75}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_(27);

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"27":27}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactContext = _dereq_(38);
var ReactCurrentOwner = _dereq_(39);

var assign = _dereq_(27);
var warning = _dereq_(154);

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the %s property of the React element. Instead, ' +
        'specify the correct value when initially creating the element.',
        key
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = {props: props, originalProps: assign({}, props)};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    try {
      Object.defineProperty(this._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true
      });
    } catch (x) {
    }
    this._store.validated = false;

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

ReactElement.cloneElement = function(element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return new ReactElement(
    element.type,
    key,
    ref,
    owner,
    element._context,
    props
  );
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"154":154,"27":27,"38":38,"39":39}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = _dereq_(57);
var ReactFragment = _dereq_(63);
var ReactPropTypeLocations = _dereq_(77);
var ReactPropTypeLocationNames = _dereq_(76);
var ReactCurrentOwner = _dereq_(39);
var ReactNativeComponent = _dereq_(73);

var getIteratorFn = _dereq_(126);
var invariant = _dereq_(135);
var warning = _dereq_(154);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the instance's name for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getName(instance) {
  var publicInstance = instance && instance.getPublicInstance();
  if (!publicInstance) {
    return undefined;
  }
  var constructor = publicInstance.constructor;
  if (!constructor) {
    return undefined;
  }
  return constructor.displayName || constructor.name || undefined;
}

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return (
    current && getName(current) || undefined
  );
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  warnAndMonitorForKeyUse(
    'Each child in an array or iterator should have a unique "key" prop.',
    element,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validatePropertyKey(name, element, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'Child objects should have non-numeric keys so ordering is preserved.',
    element,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} message The base warning that gets output.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function warnAndMonitorForKeyUse(message, element, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = typeof parentType === 'string' ?
    parentType : parentType.displayName || parentType.name;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[message] || (
    (ownerHasKeyUseWarning[message] = {})
  );
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  var parentOrOwnerAddendum =
    ownerName ? (" Check the render method of " + ownerName + ".") :
    parentName ? (" Check the React.render call using <" + parentName + ">.") :
    '';

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerAddendum = '';
  if (element &&
      element._owner &&
      element._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    var childOwnerName = getName(element._owner);

    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
  }

  ("production" !== "development" ? warning(
    false,
    message + '%s%s See https://fb.me/react-warning-keys for more information.',
    parentOrOwnerAddendum,
    childOwnerAddendum
  ) : null);
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    node._store.validated = true;
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    } else if (typeof node === 'object') {
      var fragment = ReactFragment.extractIfFragment(node);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          validatePropertyKey(key, fragment[key], parentType);
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        ("production" !== "development" ? invariant(
          typeof propTypes[propName] === 'function',
          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
          'React.PropTypes.',
          componentName || 'React class',
          ReactPropTypeLocationNames[location],
          propName
        ) : invariant(typeof propTypes[propName] === 'function'));
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(this);
        ("production" !== "development" ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
      }
    }
  }
}

var warnedPropsMutations = {};

/**
 * Warn about mutating props when setting `propName` on `element`.
 *
 * @param {string} propName The string key within props that was set
 * @param {ReactElement} element
 */
function warnForPropsMutation(propName, element) {
  var type = element.type;
  var elementName = typeof type === 'string' ? type : type.displayName;
  var ownerName = element._owner ?
    element._owner.getPublicInstance().constructor.displayName : null;

  var warningKey = propName + '|' + elementName + '|' + ownerName;
  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
    return;
  }
  warnedPropsMutations[warningKey] = true;

  var elementInfo = '';
  if (elementName) {
    elementInfo = ' <' + elementName + ' />';
  }
  var ownerInfo = '';
  if (ownerName) {
    ownerInfo = ' The element was created by ' + ownerName + '.';
  }

  ("production" !== "development" ? warning(
    false,
    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
    'correct value when initially creating the element or use ' +
    'React.cloneElement to make a new element with updated props.%s',
    propName,
    elementInfo,
    ownerInfo
  ) : null);
}

// Inline Object.is polyfill
function is(a, b) {
  if (a !== a) {
    // NaN
    return b !== b;
  }
  if (a === 0 && b === 0) {
    // +-0
    return 1 / a === 1 / b;
  }
  return a === b;
}

/**
 * Given an element, check if its props have been mutated since element
 * creation (or the last call to this function). In particular, check if any
 * new props have been added, which we can't directly catch by defining warning
 * properties on the props object.
 *
 * @param {ReactElement} element
 */
function checkAndWarnForMutatedProps(element) {
  if (!element._store) {
    // Element was created using `new ReactElement` directly or with
    // `ReactElement.createElement`; skip mutation checking
    return;
  }

  var originalProps = element._store.originalProps;
  var props = element.props;

  for (var propName in props) {
    if (props.hasOwnProperty(propName)) {
      if (!originalProps.hasOwnProperty(propName) ||
          !is(originalProps[propName], props[propName])) {
        warnForPropsMutation(propName, element);

        // Copy over the new value so that the two props objects match again
        originalProps[propName] = props[propName];
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  if (element.type == null) {
    // This has already warned. Don't throw.
    return;
  }
  // Extract the component class from the element. Converts string types
  // to a composite class which may have propTypes.
  // TODO: Validating a string's propTypes is not decoupled from the
  // rendering target which is problematic.
  var componentClass = ReactNativeComponent.getComponentClassForElement(
    element
  );
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(
      name,
      componentClass.propTypes,
      element.props,
      ReactPropTypeLocations.prop
    );
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    ("production" !== "development" ? warning(
      componentClass.getDefaultProps.isReactClassApproved,
      'getDefaultProps is only used on classic React.createClass ' +
      'definitions. Use a static property named `defaultProps` instead.'
    ) : null);
  }
}

var ReactElementValidator = {

  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if ("production" !== "development") {
      try {
        Object.defineProperty(
          validatedFactory,
          'type',
          {
            enumerable: false,
            get: function() {
              ("production" !== "development" ? warning(
                false,
                'Factory.type is deprecated. Access the class directly ' +
                'before passing it to createFactory.'
              ) : null);
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          }
        );
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }


    return validatedFactory;
  },

  cloneElement: function(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;

},{"126":126,"135":135,"154":154,"39":39,"57":57,"63":63,"73":73,"76":76,"77":77}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = _dereq_(57);
var ReactInstanceMap = _dereq_(67);

var invariant = _dereq_(135);

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

var ReactEmptyComponentType = function() {};
ReactEmptyComponentType.prototype.componentDidMount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Make sure we run these methods in the correct order, we shouldn't
  // need this check. We're going to assume if we're here it means we ran
  // componentWillUnmount already so there is no internal instance (it gets
  // removed as part of the unmounting process).
  if (!internalInstance) {
    return;
  }
  registerNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.componentWillUnmount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Get rid of this check. See TODO in componentDidMount.
  if (!internalInstance) {
    return;
  }
  deregisterNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.render = function() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
};

var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

var ReactEmptyComponent = {
  emptyElement: emptyElement,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID
};

module.exports = ReactEmptyComponent;

},{"135":135,"57":57,"67":67}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = _dereq_(17);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"17":17}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = _dereq_(16);
var ExecutionEnvironment = _dereq_(21);
var PooledClass = _dereq_(28);
var ReactInstanceHandles = _dereq_(66);
var ReactMount = _dereq_(70);
var ReactUpdates = _dereq_(87);

var assign = _dereq_(27);
var getEventTarget = _dereq_(125);
var getUnboundedScrollPosition = _dereq_(131);

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"125":125,"131":131,"16":16,"21":21,"27":27,"28":28,"66":66,"70":70,"87":87}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule ReactFragment
*/

'use strict';

var ReactElement = _dereq_(57);

var warning = _dereq_(154);

/**
 * We used to allow keyed objects to serve as a collection of ReactElements,
 * or nested sets. This allowed us a way to explicitly key a set a fragment of
 * components. This is now being replaced with an opaque data structure.
 * The upgrade path is to call React.addons.createFragment({ key: value }) to
 * create a keyed fragment. The resulting data structure is opaque, for now.
 */

if ("production" !== "development") {
  var fragmentKey = '_reactFragment';
  var didWarnKey = '_reactDidWarn';
  var canWarnForReactFragment = false;

  try {
    // Feature test. Don't even try to issue this warning if we can't use
    // enumerable: false.

    var dummy = function() {
      return 1;
    };

    Object.defineProperty(
      {},
      fragmentKey,
      {enumerable: false, value: true}
    );

    Object.defineProperty(
      {},
      'key',
      {enumerable: true, get: dummy}
    );

    canWarnForReactFragment = true;
  } catch (x) { }

  var proxyPropertyAccessWithWarning = function(obj, key) {
    Object.defineProperty(obj, key, {
      enumerable: true,
      get: function() {
        ("production" !== "development" ? warning(
          this[didWarnKey],
          'A ReactFragment is an opaque type. Accessing any of its ' +
          'properties is deprecated. Pass it to one of the React.Children ' +
          'helpers.'
        ) : null);
        this[didWarnKey] = true;
        return this[fragmentKey][key];
      },
      set: function(value) {
        ("production" !== "development" ? warning(
          this[didWarnKey],
          'A ReactFragment is an immutable opaque type. Mutating its ' +
          'properties is deprecated.'
        ) : null);
        this[didWarnKey] = true;
        this[fragmentKey][key] = value;
      }
    });
  };

  var issuedWarnings = {};

  var didWarnForFragment = function(fragment) {
    // We use the keys and the type of the value as a heuristic to dedupe the
    // warning to avoid spamming too much.
    var fragmentCacheKey = '';
    for (var key in fragment) {
      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
    }
    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
    issuedWarnings[fragmentCacheKey] = true;
    return alreadyWarnedOnce;
  };
}

var ReactFragment = {
  // Wrap a keyed object in an opaque proxy that warns you if you access any
  // of its properties.
  create: function(object) {
    if ("production" !== "development") {
      if (typeof object !== 'object' || !object || Array.isArray(object)) {
        ("production" !== "development" ? warning(
          false,
          'React.addons.createFragment only accepts a single object.',
          object
        ) : null);
        return object;
      }
      if (ReactElement.isValidElement(object)) {
        ("production" !== "development" ? warning(
          false,
          'React.addons.createFragment does not accept a ReactElement ' +
          'without a wrapper object.'
        ) : null);
        return object;
      }
      if (canWarnForReactFragment) {
        var proxy = {};
        Object.defineProperty(proxy, fragmentKey, {
          enumerable: false,
          value: object
        });
        Object.defineProperty(proxy, didWarnKey, {
          writable: true,
          enumerable: false,
          value: false
        });
        for (var key in object) {
          proxyPropertyAccessWithWarning(proxy, key);
        }
        Object.preventExtensions(proxy);
        return proxy;
      }
    }
    return object;
  },
  // Extract the original keyed object from the fragment opaque type. Warn if
  // a plain object is passed here.
  extract: function(fragment) {
    if ("production" !== "development") {
      if (canWarnForReactFragment) {
        if (!fragment[fragmentKey]) {
          ("production" !== "development" ? warning(
            didWarnForFragment(fragment),
            'Any use of a keyed object should be wrapped in ' +
            'React.addons.createFragment(object) before being passed as a ' +
            'child.'
          ) : null);
          return fragment;
        }
        return fragment[fragmentKey];
      }
    }
    return fragment;
  },
  // Check if this is a fragment and if so, extract the keyed object. If it
  // is a fragment-like object, warn that it should be wrapped. Ignore if we
  // can't determine what kind of object this is.
  extractIfFragment: function(fragment) {
    if ("production" !== "development") {
      if (canWarnForReactFragment) {
        // If it is the opaque type, return the keyed object.
        if (fragment[fragmentKey]) {
          return fragment[fragmentKey];
        }
        // Otherwise, check each property if it has an element, if it does
        // it is probably meant as a fragment, so we can warn early. Defer,
        // the warning to extract.
        for (var key in fragment) {
          if (fragment.hasOwnProperty(key) &&
              ReactElement.isValidElement(fragment[key])) {
            // This looks like a fragment object, we should provide an
            // early warning.
            return ReactFragment.extract(fragment);
          }
        }
      }
    }
    return fragment;
  }
};

module.exports = ReactFragment;

},{"154":154,"57":57}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = _dereq_(10);
var EventPluginHub = _dereq_(17);
var ReactComponentEnvironment = _dereq_(36);
var ReactClass = _dereq_(33);
var ReactEmptyComponent = _dereq_(59);
var ReactBrowserEventEmitter = _dereq_(30);
var ReactNativeComponent = _dereq_(73);
var ReactDOMComponent = _dereq_(42);
var ReactPerf = _dereq_(75);
var ReactRootIndex = _dereq_(83);
var ReactUpdates = _dereq_(87);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMComponent: ReactDOMComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"10":10,"17":17,"30":30,"33":33,"36":36,"42":42,"59":59,"73":73,"75":75,"83":83,"87":87}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = _dereq_(50);

var containsNode = _dereq_(109);
var focusNode = _dereq_(119);
var getActiveElement = _dereq_(121);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"109":109,"119":119,"121":121,"50":50}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = _dereq_(83);

var invariant = _dereq_(135);

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"135":135,"83":83}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function(key) {
    key._reactInternalInstance = undefined;
  },

  get: function(key) {
    return key._reactInternalInstance;
  },

  has: function(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function(key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

},{}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLifeCycle
 */

'use strict';

/**
 * This module manages the bookkeeping when a component is in the process
 * of being mounted or being unmounted. This is used as a way to enforce
 * invariants (or warnings) when it is not recommended to call
 * setState/forceUpdate.
 *
 * currentlyMountingInstance: During the construction phase, it is not possible
 * to trigger an update since the instance is not fully mounted yet. However, we
 * currently allow this as a convenience for mutating the initial state.
 *
 * currentlyUnmountingInstance: During the unmounting phase, the instance is
 * still mounted and can therefore schedule an update. However, this is not
 * recommended and probably an error since it's about to be unmounted.
 * Therefore we still want to trigger in an error for that case.
 */

var ReactLifeCycle = {
  currentlyMountingInstance: null,
  currentlyUnmountingInstance: null
};

module.exports = ReactLifeCycle;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = _dereq_(106);

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"106":106}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = _dereq_(10);
var ReactBrowserEventEmitter = _dereq_(30);
var ReactCurrentOwner = _dereq_(39);
var ReactElement = _dereq_(57);
var ReactElementValidator = _dereq_(58);
var ReactEmptyComponent = _dereq_(59);
var ReactInstanceHandles = _dereq_(66);
var ReactInstanceMap = _dereq_(67);
var ReactMarkupChecksum = _dereq_(69);
var ReactPerf = _dereq_(75);
var ReactReconciler = _dereq_(81);
var ReactUpdateQueue = _dereq_(86);
var ReactUpdates = _dereq_(87);

var emptyObject = _dereq_(115);
var containsNode = _dereq_(109);
var getReactRootElementInContainer = _dereq_(129);
var instantiateReactComponent = _dereq_(134);
var invariant = _dereq_(135);
var setInnerHTML = _dereq_(148);
var shouldUpdateReactComponent = _dereq_(151);
var warning = _dereq_(154);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponent.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup) {
  var markup = ReactReconciler.mountComponent(
    componentInstance, rootID, transaction, emptyObject
  );
  componentInstance._isTopLevel = true;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    shouldReuseMarkup) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
  transaction.perform(
    mountComponentIntoNode,
    null,
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup
  );
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextElement,
      container,
      callback) {
    if ("production" !== "development") {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    ReactMount.scrollMonitor(container, function() {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function(
    nextElement,
    container,
    shouldReuseMarkup
  ) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      '_renderNewRootComponent(): Render methods should be a pure function ' +
      'of props and state; triggering nested component updates from ' +
      'render is not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(
      componentInstance,
      container
    );

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(
      batchedMountComponentIntoNode,
      componentInstance,
      reactRootID,
      container,
      shouldReuseMarkup
    );

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] =
        getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'React.render(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        typeof nextElement === 'function' ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like an element
        nextElement != null && nextElement.props !== undefined ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        ).getPublicInstance();
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    if ("production" !== "development") {
      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (ReactMount.isRenderedByReact(rootElementSibling)) {
            ("production" !== "development" ? warning(
              false,
              'render(): Target node has markup rendered by React, but there ' +
              'are unrelated nodes as well. This is most commonly caused by ' +
              'white-space inserted around server-rendered markup.'
            ) : null);
            break;
          }

          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    ).getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = ReactElement.createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    ("production" !== "development" ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'unmountComponentAtNode(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    ReactReconciler.unmountComponent(instance);

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          ("production" !== "development" ? warning(
            false,
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          ) : null);
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },

  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
    ("production" !== "development" ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'mountComponentIntoNode(...): Target container is not valid.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
        );
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
          checksum
        );

        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
        var difference = ' (client) ' +
          markup.substring(diffIndex - 20, diffIndex + 20) +
          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        ("production" !== "development" ? invariant(
          container.nodeType !== DOC_NODE_TYPE,
          'You\'re trying to render a component to the document using ' +
          'server rendering but the checksum was invalid. This usually ' +
          'means you rendered a different component type or props on ' +
          'the client from the one on the server, or your render() ' +
          'methods are impure. React cannot handle this case due to ' +
          'cross-browser quirks by rendering at the document root. You ' +
          'should look for environment dependent code in your components ' +
          'and ensure the props are the same client and server side:\n%s',
          difference
        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

        if ("production" !== "development") {
          ("production" !== "development" ? warning(
            false,
            'React attempted to reuse markup in a container but the ' +
            'checksum was invalid. This generally means that you are ' +
            'using server rendering and the markup generated on the ' +
            'server was not what the client was expecting. React injected ' +
            'new markup to compensate which works but you have lost many ' +
            'of the benefits of server rendering. Instead, figure out ' +
            'why the markup being generated is different on the client ' +
            'or server:\n%s',
            difference
          ) : null);
        }
      }
    }

    ("production" !== "development" ? invariant(
      container.nodeType !== DOC_NODE_TYPE,
      'You\'re trying to render a component to the document but ' +
        'you didn\'t use server rendering. We can\'t do this ' +
        'without using server rendering due to cross-browser quirks. ' +
        'See React.renderToString() for server rendering.'
    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

    setInnerHTML(container, markup);
  },

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;

},{"10":10,"109":109,"115":115,"129":129,"134":134,"135":135,"148":148,"151":151,"154":154,"30":30,"39":39,"57":57,"58":58,"59":59,"66":66,"67":67,"69":69,"75":75,"81":81,"86":86,"87":87}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = _dereq_(36);
var ReactMultiChildUpdateTypes = _dereq_(72);

var ReactReconciler = _dereq_(81);
var ReactChildReconciler = _dereq_(31);

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction, context) {
      var children = ReactChildReconciler.instantiateChildren(
        nestedChildren, transaction, context
      );
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(
            child,
            rootID,
            transaction,
            context
          );
          child._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }

      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = ReactChildReconciler.updateChildren(
        prevChildren, nextNestedChildren, transaction, context
      );
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(
            nextChild, name, nextIndex, transaction, context
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(
      child,
      name,
      index,
      transaction,
      context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(
        child,
        rootID,
        transaction,
        context
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;

},{"31":31,"36":36,"72":72,"81":81}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = _dereq_(140);

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"140":140}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = _dereq_(27);
var invariant = _dereq_(135);

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function(componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  },
  // Temporary hack since we expect DOM refs to behave like composites,
  // for this release.
  injectAutoWrapper: function(wrapperFactory) {
    autoGenerateWrapperClass = wrapperFactory;
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  ("production" !== "development" ? invariant(
    genericComponentClass,
    'There is no registered component for the tag %s',
    element.type
  ) : invariant(genericComponentClass));
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"135":135,"27":27}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = _dereq_(135);

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      (object &&
      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;

},{"135":135}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function(object, objectName, methodNames) {
    if ("production" !== "development") {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(
          objectName,
          methodNames[key],
          object[key]
        );
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = _dereq_(140);

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"140":140}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = _dereq_(57);
var ReactFragment = _dereq_(63);
var ReactPropTypeLocationNames = _dereq_(76);

var emptyFunction = _dereq_(114);

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ") +
          ("`" + componentName + "`.")
        );
      }
      return null;
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }
      propValue = ReactFragment.extractIfFragment(propValue);
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"114":114,"57":57,"63":63,"76":76}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

'use strict';

var PooledClass = _dereq_(28);
var ReactBrowserEventEmitter = _dereq_(30);

var assign = _dereq_(27);

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"27":27,"28":28,"30":30}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = _dereq_(6);
var PooledClass = _dereq_(28);
var ReactBrowserEventEmitter = _dereq_(30);
var ReactInputSelection = _dereq_(65);
var ReactPutListenerQueue = _dereq_(79);
var Transaction = _dereq_(103);

var assign = _dereq_(27);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"103":103,"27":27,"28":28,"30":30,"6":6,"65":65,"79":79}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = _dereq_(82);
var ReactElementValidator = _dereq_(58);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if ("production" !== "development") {
      ReactElementValidator.checkAndWarnForMutatedProps(
        internalInstance._currentElement
      );
    }
    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function(internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function(
    internalInstance, nextElement, transaction, context
  ) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    if ("production" !== "development") {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    var refsChanged = ReactRef.shouldUpdateRefs(
      prevElement,
      nextElement
    );

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(
    internalInstance,
    transaction
  ) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;

},{"58":58,"82":82}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = _dereq_(74);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  return (
    nextElement._owner !== prevElement._owner ||
    nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

},{"74":74}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactElement = _dereq_(57);
var ReactInstanceHandles = _dereq_(66);
var ReactMarkupChecksum = _dereq_(69);
var ReactServerRenderingTransaction =
  _dereq_(85);

var emptyObject = _dereq_(115);
var instantiateReactComponent = _dereq_(134);
var invariant = _dereq_(135);

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup =
        componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"115":115,"134":134,"135":135,"57":57,"66":66,"69":69,"85":85}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = _dereq_(28);
var CallbackQueue = _dereq_(6);
var ReactPutListenerQueue = _dereq_(79);
var Transaction = _dereq_(103);

var assign = _dereq_(27);
var emptyFunction = _dereq_(114);

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"103":103,"114":114,"27":27,"28":28,"6":6,"79":79}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactLifeCycle = _dereq_(68);
var ReactCurrentOwner = _dereq_(39);
var ReactElement = _dereq_(57);
var ReactInstanceMap = _dereq_(67);
var ReactUpdates = _dereq_(87);

var assign = _dereq_(27);
var invariant = _dereq_(135);
var warning = _dereq_(154);

function enqueueUpdate(internalInstance) {
  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
    // If we're in a componentWillMount handler, don't enqueue a rerender
    // because ReactUpdates assumes we're in a browser context (which is
    // wrong for server rendering) and we're about to do a render anyway.
    // See bug in #1740.
    ReactUpdates.enqueueUpdate(internalInstance);
  }
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    '%s(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.',
    callerName
  ) : invariant(ReactCurrentOwner.current == null));

  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if ("production" !== "development") {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      ("production" !== "development" ? warning(
        !callerName,
        '%s(...): Can only update a mounted or mounting component. ' +
        'This usually means you called %s() on an unmounted ' +
        'component. This is a no-op.',
        callerName,
        callerName
      ) : null);
    }
    return null;
  }

  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
    return null;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function(publicInstance, callback) {
    ("production" !== "development" ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance ||
        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function(internalInstance, callback) {
    ("production" !== "development" ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'forceUpdate'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function(publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceState'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function(publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setState'
    );

    if (!internalInstance) {
      return;
    }

    var queue =
      internalInstance._pendingStateQueue ||
      (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function(publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== "development" ? invariant(
      internalInstance._isTopLevel,
      'setProps(...): You called `setProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    var props = assign({}, element.props, partialProps);
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function(publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== "development" ? invariant(
      internalInstance._isTopLevel,
      'replaceProps(...): You called `replaceProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function(internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;

},{"135":135,"154":154,"27":27,"39":39,"57":57,"67":67,"68":68,"87":87}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = _dereq_(6);
var PooledClass = _dereq_(28);
var ReactCurrentOwner = _dereq_(39);
var ReactPerf = _dereq_(75);
var ReactReconciler = _dereq_(81);
var Transaction = _dereq_(103);

var assign = _dereq_(27);
var invariant = _dereq_(135);
var warning = _dereq_(154);

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(
      component,
      transaction.reconcileTransaction
    );

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(
          callbacks[j],
          component.getPublicInstance()
        );
      }
    }
  }
}

var flushBatchedUpdates = function() {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  flushBatchedUpdates
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"103":103,"135":135,"154":154,"27":27,"28":28,"39":39,"6":6,"75":75,"81":81}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = _dereq_(10);

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"10":10}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = _dereq_(15);
var EventPropagators = _dereq_(20);
var ReactInputSelection = _dereq_(65);
var SyntheticEvent = _dereq_(95);

var getActiveElement = _dereq_(121);
var isTextInputElement = _dereq_(138);
var keyOf = _dereq_(141);
var shallowEqual = _dereq_(150);

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"121":121,"138":138,"141":141,"15":15,"150":150,"20":20,"65":65,"95":95}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = _dereq_(15);
var EventPluginUtils = _dereq_(19);
var EventPropagators = _dereq_(20);
var SyntheticClipboardEvent = _dereq_(92);
var SyntheticEvent = _dereq_(95);
var SyntheticFocusEvent = _dereq_(96);
var SyntheticKeyboardEvent = _dereq_(98);
var SyntheticMouseEvent = _dereq_(99);
var SyntheticDragEvent = _dereq_(94);
var SyntheticTouchEvent = _dereq_(100);
var SyntheticUIEvent = _dereq_(101);
var SyntheticWheelEvent = _dereq_(102);

var getEventCharCode = _dereq_(122);

var invariant = _dereq_(135);
var keyOf = _dereq_(141);
var warning = _dereq_(154);

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"100":100,"101":101,"102":102,"122":122,"135":135,"141":141,"15":15,"154":154,"19":19,"20":20,"92":92,"94":94,"95":95,"96":96,"98":98,"99":99}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = _dereq_(95);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

},{"95":95}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = _dereq_(95);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;

},{"95":95}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = _dereq_(99);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"99":99}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = _dereq_(28);

var assign = _dereq_(27);
var emptyFunction = _dereq_(114);
var getEventTarget = _dereq_(125);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"114":114,"125":125,"27":27,"28":28}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = _dereq_(101);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"101":101}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = _dereq_(95);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;

},{"95":95}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = _dereq_(101);

var getEventCharCode = _dereq_(122);
var getEventKey = _dereq_(123);
var getEventModifierState = _dereq_(124);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"101":101,"122":122,"123":123,"124":124}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = _dereq_(101);
var ViewportMetrics = _dereq_(104);

var getEventModifierState = _dereq_(124);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"101":101,"104":104,"124":124}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = _dereq_(101);

var getEventModifierState = _dereq_(124);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"101":101,"124":124}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = _dereq_(95);

var getEventTarget = _dereq_(125);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"125":125,"95":95}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = _dereq_(99);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"99":99}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = _dereq_(135);

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"135":135}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function(scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = _dereq_(135);

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"135":135}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

'use strict';

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_(107);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"107":107}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_(139);

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"139":139}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

var toArray = _dereq_(152);

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

},{"152":152}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

'use strict';

// Defeat circular references by requiring this directly.
var ReactClass = _dereq_(33);
var ReactElement = _dereq_(57);

var invariant = _dereq_(135);

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactClass.createClass({
    tagName: tag.toUpperCase(),
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"135":135,"33":33,"57":57}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_(21);

var createArrayFromMixed = _dereq_(110);
var getMarkupWrap = _dereq_(127);
var invariant = _dereq_(135);

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"110":110,"127":127,"135":135,"21":21}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = _dereq_(4);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"4":4}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = _dereq_(39);
var ReactInstanceMap = _dereq_(67);
var ReactMount = _dereq_(70);

var invariant = _dereq_(135);
var isNode = _dereq_(137);
var warning = _dereq_(154);

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if ("production" !== "development") {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      ("production" !== "development" ? warning(
        owner._warnedAboutRefsInRender,
        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
        'render() should be a pure function of props and state. It should ' +
        'never access something that requires stale data from the previous ' +
        'render, such as refs. Move this logic to componentDidMount and ' +
        'componentDidUpdate instead.',
        owner.getName() || 'A component'
      ) : null);
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (isNode(componentOrElement)) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  ("production" !== "development" ? invariant(
    componentOrElement.render == null ||
    typeof componentOrElement.render !== 'function',
    'Component (with keys: %s) contains `render` method ' +
    'but is not mounted in the DOM',
    Object.keys(componentOrElement)
  ) : invariant(componentOrElement.render == null ||
  typeof componentOrElement.render !== 'function'));
  ("production" !== "development" ? invariant(
    false,
    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
    Object.keys(componentOrElement)
  ) : invariant(false));
}

module.exports = findDOMNode;

},{"135":135,"137":137,"154":154,"39":39,"67":67,"70":70}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = _dereq_(153);
var warning = _dereq_(154);

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      keyUnique,
      'flattenChildren(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"153":153,"154":154}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = _dereq_(122);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"122":122}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (
    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
  );
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_(21);

var invariant = _dereq_(135);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'clipPath': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'clipPath': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"135":135,"21":21}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

'use strict';

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = _dereq_(21);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"21":21}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_(132);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"132":132}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = _dereq_(37);
var ReactEmptyComponent = _dereq_(59);
var ReactNativeComponent = _dereq_(73);

var assign = _dereq_(27);
var invariant = _dereq_(135);
var warning = _dereq_(154);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function() { };
assign(
  ReactCompositeComponentWrapper.prototype,
  ReactCompositeComponent.Mixin,
  {
    _instantiateReactComponent: instantiateReactComponent
  }
);

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return (
    typeof type === 'function' &&
    typeof type.prototype !== 'undefined' &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function'
  );
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, parentCompositeType) {
  var instance;

  if (node === null || node === false) {
    node = ReactEmptyComponent.emptyElement;
  }

  if (typeof node === 'object') {
    var element = node;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        element && (typeof element.type === 'function' ||
                    typeof element.type === 'string'),
        'Only functions or strings can be mounted as React components.'
      ) : null);
    }

    // Special case string values
    if (parentCompositeType === element.type &&
        typeof element.type === 'string') {
      // Avoid recursion if the wrapper renders itself.
      instance = ReactNativeComponent.createInternalComponent(element);
      // All native components are currently wrapped in a composite so we're
      // safe to assume that this is what we should instantiate.
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // represenations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    ("production" !== "development" ? invariant(
      false,
      'Encountered invalid React node of type %s',
      typeof node
    ) : invariant(false));
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function' &&
      typeof instance.unmountComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if ("production" !== "development") {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if ("production" !== "development") {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;

},{"135":135,"154":154,"27":27,"37":37,"59":59,"73":73}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = _dereq_(21);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"21":21}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
    typeof object.nodeType === 'number' &&
    typeof object.nodeName === 'string'))
  ));
}

module.exports = isNode;

},{}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
  );
}

module.exports = isTextInputElement;

},{}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_(137);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"137":137}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = _dereq_(135);

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"135":135}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

},{}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = _dereq_(57);

var invariant = _dereq_(135);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"135":135,"57":57}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_(21);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"21":21}],146:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_(145);

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"145":145}],147:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = _dereq_(116);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

},{"116":116}],148:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = _dereq_(21);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function(node, html) {
    MSApp.execUnsafeLocalFunction(function() {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"21":21}],149:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = _dereq_(21);
var escapeTextContentForBrowser = _dereq_(116);
var setInnerHTML = _dereq_(148);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function(node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function(node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

},{"116":116,"148":148,"21":21}],150:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

'use strict';

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],151:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

var warning = _dereq_(154);

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement != null && nextElement != null) {
    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return (nextType === 'string' || nextType === 'number');
    } else {
      if (nextType === 'object' &&
          prevElement.type === nextElement.type &&
          prevElement.key === nextElement.key) {
        var ownersMatch = prevElement._owner === nextElement._owner;
        var prevName = null;
        var nextName = null;
        var nextDisplayName = null;
        if ("production" !== "development") {
          if (!ownersMatch) {
            if (prevElement._owner != null &&
                prevElement._owner.getPublicInstance() != null &&
                prevElement._owner.getPublicInstance().constructor != null) {
              prevName =
                prevElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement._owner != null &&
                nextElement._owner.getPublicInstance() != null &&
                nextElement._owner.getPublicInstance().constructor != null) {
              nextName =
                nextElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement.type != null &&
                nextElement.type.displayName != null) {
              nextDisplayName = nextElement.type.displayName;
            }
            if (nextElement.type != null && typeof nextElement.type === 'string') {
              nextDisplayName = nextElement.type;
            }
            if (typeof nextElement.type !== 'string' ||
                nextElement.type === 'input' ||
                nextElement.type === 'textarea') {
              if ((prevElement._owner != null &&
                  prevElement._owner._isOwnerNecessary === false) ||
                  (nextElement._owner != null &&
                  nextElement._owner._isOwnerNecessary === false)) {
                if (prevElement._owner != null) {
                  prevElement._owner._isOwnerNecessary = true;
                }
                if (nextElement._owner != null) {
                  nextElement._owner._isOwnerNecessary = true;
                }
                ("production" !== "development" ? warning(
                  false,
                  '<%s /> is being rendered by both %s and %s using the same ' +
                  'key (%s) in the same place. Currently, this means that ' +
                  'they don\'t preserve state. This behavior should be very ' +
                  'rare so we\'re considering deprecating it. Please contact ' +
                  'the React team and explain your use case so that we can ' +
                  'take that into consideration.',
                  nextDisplayName || 'Unknown Component',
                  prevName || '[Unknown]',
                  nextName || '[Unknown]',
                  prevElement.key
                ) : null);
              }
            }
          }
        }
        return ownersMatch;
      }
    }
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{"154":154}],152:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_(135);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"135":135}],153:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactElement = _dereq_(57);
var ReactFragment = _dereq_(63);
var ReactInstanceHandles = _dereq_(66);

var getIteratorFn = _dereq_(126);
var invariant = _dereq_(135);
var warning = _dereq_(154);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(
  children,
  nameSoFar,
  indexSoFar,
  callback,
  traverseContext
) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null ||
      type === 'string' ||
      type === 'number' ||
      ReactElement.isValidElement(children)) {
    callback(
      traverseContext,
      children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
      indexSoFar
    );
    return 1;
  }

  var child, nextName, nextIndex;
  var subtreeCount = 0; // Count of children found in the current subtree.

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = (
        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
        getComponentKey(child, i)
      );
      nextIndex = indexSoFar + subtreeCount;
      subtreeCount += traverseAllChildrenImpl(
        child,
        nextName,
        nextIndex,
        callback,
        traverseContext
      );
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            getComponentKey(child, ii++)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      } else {
        if ("production" !== "development") {
          ("production" !== "development" ? warning(
            didWarnAboutMaps,
            'Using Maps as children is not yet fully supported. It is an ' +
            'experimental feature that might be removed. Convert it to a ' +
            'sequence / iterable of keyed ReactElements instead.'
          ) : null);
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = (
              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
              getComponentKey(child, 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              child,
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    } else if (type === 'object') {
      ("production" !== "development" ? invariant(
        children.nodeType !== 1,
        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
        'elements are not valid children of React components.'
      ) : invariant(children.nodeType !== 1));
      var fragment = ReactFragment.extract(children);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          child = fragment[key];
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            wrapUserProvidedKey(key) + SUBSEPARATOR +
            getComponentKey(child, 0)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"126":126,"135":135,"154":154,"57":57,"63":63,"66":66}],154:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_(114);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
      console.warn(message);
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

},{"114":114}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
goog.forwardDeclare("Document");
goog.forwardDeclare("HTMLScriptElement");
goog.forwardDeclare("XMLHttpRequest");
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.writeScripts_(path);
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return doc != null && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModuleFromUrl = function(url) {
    goog.retrieveAndExecModule_(url);
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareLegacyNamespace:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function() {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = (doc.createElement("script"));
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function(pathToLoad) {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    visitNode(pathToLoad);
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in (obj)) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _evalTest_ \x3d 1;");
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = (doc.createElement("SCRIPT"));
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:" "};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "" && ch <= "�";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.intAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\", "\x3c":"\x3c"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  var sb = ['"'];
  for (var i = 0;i < s.length;i++) {
    var ch = s.charAt(i);
    var cc = ch.charCodeAt(0);
    sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
  }
  sb.push('"');
  return sb.join("");
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = String.prototype.repeat ? function(string, length) {
  return string.repeat(length);
} : function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i) >>> 0;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return obj !== null && key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in (obj)) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (obj !== null && key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (obj !== null && key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in (obj) ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (goog.isFunction(obj.clone)) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  var minLen = arguments[0].length;
  for (var i = 1;i < arguments.length;i++) {
    if (arguments[i].length < minLen) {
      minLen = arguments[i].length;
    }
  }
  for (var i = 0;i < minLen;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      value.push(arguments[j][i]);
    }
    result.push(value);
  }
  return result;
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.8.40";
cljs.core._STAR_unchecked_if_STAR_ = false;
goog.define("cljs.core._STAR_target_STAR_", "default");
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__31852__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__31852 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__31853__i = 0, G__31853__a = new Array(arguments.length - 0);
        while (G__31853__i < G__31853__a.length) {
          G__31853__a[G__31853__i] = arguments[G__31853__i + 0];
          ++G__31853__i;
        }
        args = new cljs.core.IndexedSeq(G__31853__a, 0);
      }
      return G__31852__delegate.call(this, args);
    };
    G__31852.cljs$lang$maxFixedArity = 0;
    G__31852.cljs$lang$applyTo = function(arglist__31854) {
      var args = cljs.core.seq(arglist__31854);
      return G__31852__delegate(args);
    };
    G__31852.cljs$core$IFn$_invoke$arity$variadic = G__31852__delegate;
    return G__31852;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__31855__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__31855 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__31856__i = 0, G__31856__a = new Array(arguments.length - 0);
        while (G__31856__i < G__31856__a.length) {
          G__31856__a[G__31856__i] = arguments[G__31856__i + 0];
          ++G__31856__i;
        }
        args = new cljs.core.IndexedSeq(G__31856__a, 0);
      }
      return G__31855__delegate.call(this, args);
    };
    G__31855.cljs$lang$maxFixedArity = 0;
    G__31855.cljs$lang$applyTo = function(arglist__31857) {
      var args = cljs.core.seq(arglist__31857);
      return G__31855__delegate(args);
    };
    G__31855.cljs$core$IFn$_invoke$arity$variadic = G__31855__delegate;
    return G__31855;
  }();
  return null;
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return goog.string.isUnicodeChar(x);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__29588__auto__ = ty;
    if (cljs.core.truth_(and__29588__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__29588__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4655__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4655__auto__)) {
    var s = temp__4655__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.system_time = function cljs$core$system_time() {
  if (typeof performance !== "undefined" && !(performance.now == null)) {
    return performance.now();
  } else {
    if (typeof process !== "undefined" && !(process.hrtime == null)) {
      var t = process.hrtime();
      return (t[0] * 1E9 + t[1]) / 1E6;
    } else {
      return (new Date).getTime();
    }
  }
};
cljs.core.make_array = function cljs$core$make_array(var_args) {
  var args31858 = [];
  var len__30669__auto___31864 = arguments.length;
  var i__30670__auto___31865 = 0;
  while (true) {
    if (i__30670__auto___31865 < len__30669__auto___31864) {
      args31858.push(arguments[i__30670__auto___31865]);
      var G__31866 = i__30670__auto___31865 + 1;
      i__30670__auto___31865 = G__31866;
      continue;
    } else {
    }
    break;
  }
  var G__31863 = args31858.length;
  switch(G__31863) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args31858.slice(2), 0, null);
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic = function(type, size, more_sizes) {
  var dims = more_sizes;
  var dimarray = new Array(size);
  var n__30514__auto___31868 = dimarray.length;
  var i_31869 = 0;
  while (true) {
    if (i_31869 < n__30514__auto___31868) {
      dimarray[i_31869] = cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.make_array, null, dims) : cljs.core.apply.call(null, cljs.core.make_array, null, dims);
      var G__31870 = i_31869 + 1;
      i_31869 = G__31870;
      continue;
    } else {
    }
    break;
  }
  return dimarray;
};
cljs.core.make_array.cljs$lang$applyTo = function(seq31859) {
  var G__31860 = cljs.core.first(seq31859);
  var seq31859__$1 = cljs.core.next(seq31859);
  var G__31861 = cljs.core.first(seq31859__$1);
  var seq31859__$2 = cljs.core.next(seq31859__$1);
  return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(G__31860, G__31861, seq31859__$2);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__30514__auto___31871 = len;
  var i_31872 = 0;
  while (true) {
    if (i_31872 < n__30514__auto___31871) {
      new_arr[i_31872] = arr[i_31872];
      var G__31873 = i_31872 + 1;
      i_31872 = G__31873;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__31874 = i + 1;
      i = G__31874;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget(var_args) {
  var args31875 = [];
  var len__30669__auto___31884 = arguments.length;
  var i__30670__auto___31885 = 0;
  while (true) {
    if (i__30670__auto___31885 < len__30669__auto___31884) {
      args31875.push(arguments[i__30670__auto___31885]);
      var G__31886 = i__30670__auto___31885 + 1;
      i__30670__auto___31885 = G__31886;
      continue;
    } else {
    }
    break;
  }
  var G__31880 = args31875.length;
  switch(G__31880) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args31875.slice(2), 0, null);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__31881 = cljs.core.aget;
  var G__31882 = array[i];
  var G__31883 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__31881, G__31882, G__31883) : cljs.core.apply.call(null, G__31881, G__31882, G__31883);
};
cljs.core.aget.cljs$lang$applyTo = function(seq31876) {
  var G__31877 = cljs.core.first(seq31876);
  var seq31876__$1 = cljs.core.next(seq31876);
  var G__31878 = cljs.core.first(seq31876__$1);
  var seq31876__$2 = cljs.core.next(seq31876__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__31877, G__31878, seq31876__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset(var_args) {
  var args31888 = [];
  var len__30669__auto___31899 = arguments.length;
  var i__30670__auto___31900 = 0;
  while (true) {
    if (i__30670__auto___31900 < len__30669__auto___31899) {
      args31888.push(arguments[i__30670__auto___31900]);
      var G__31901 = i__30670__auto___31900 + 1;
      i__30670__auto___31900 = G__31901;
      continue;
    } else {
    }
    break;
  }
  var G__31894 = args31888.length;
  switch(G__31894) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args31888.slice(3), 0, null);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__31895 = cljs.core.aset;
  var G__31896 = array[idx];
  var G__31897 = idx2;
  var G__31898 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__31895, G__31896, G__31897, G__31898) : cljs.core.apply.call(null, G__31895, G__31896, G__31897, G__31898);
};
cljs.core.aset.cljs$lang$applyTo = function(seq31889) {
  var G__31890 = cljs.core.first(seq31889);
  var seq31889__$1 = cljs.core.next(seq31889);
  var G__31891 = cljs.core.first(seq31889__$1);
  var seq31889__$2 = cljs.core.next(seq31889__$1);
  var G__31892 = cljs.core.first(seq31889__$2);
  var seq31889__$3 = cljs.core.next(seq31889__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__31890, G__31891, G__31892, seq31889__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array(var_args) {
  var args31903 = [];
  var len__30669__auto___31909 = arguments.length;
  var i__30670__auto___31910 = 0;
  while (true) {
    if (i__30670__auto___31910 < len__30669__auto___31909) {
      args31903.push(arguments[i__30670__auto___31910]);
      var G__31911 = i__30670__auto___31910 + 1;
      i__30670__auto___31910 = G__31911;
      continue;
    } else {
    }
    break;
  }
  var G__31905 = args31903.length;
  switch(G__31905) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args31903.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__31906 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__31907 = [];
  var G__31908 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__31906, G__31907, G__31908) : cljs.core.reduce.call(null, G__31906, G__31907, G__31908);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___31916 = arguments.length;
  var i__30670__auto___31917 = 0;
  while (true) {
    if (i__30670__auto___31917 < len__30669__auto___31916) {
      args__30676__auto__.push(arguments[i__30670__auto___31917]);
      var G__31918 = i__30670__auto___31917 + 1;
      i__30670__auto___31917 = G__31918;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 2 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(2), 0, null) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30677__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq31913) {
  var G__31914 = cljs.core.first(seq31913);
  var seq31913__$1 = cljs.core.next(seq31913);
  var G__31915 = cljs.core.first(seq31913__$1);
  var seq31913__$2 = cljs.core.next(seq31913__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__31914, G__31915, seq31913__$2);
};
cljs.core.Fn = function() {
};
cljs.core.IFn = function() {
};
cljs.core._invoke = function cljs$core$_invoke(var_args) {
  var args31919 = [];
  var len__30669__auto___31922 = arguments.length;
  var i__30670__auto___31923 = 0;
  while (true) {
    if (i__30670__auto___31923 < len__30669__auto___31922) {
      args31919.push(arguments[i__30670__auto___31923]);
      var G__31924 = i__30670__auto___31923 + 1;
      i__30670__auto___31923 = G__31924;
      continue;
    } else {
    }
    break;
  }
  var G__31921 = args31919.length;
  switch(G__31921) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args31919.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__30264__auto__.call(null, this$, a);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__30264__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__30264__auto__.call(null, this$, a, b);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__30264__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$4 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__30264__auto__.call(null, this$, a, b, c);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__30264__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$5 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__30264__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__30264__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$6 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__30264__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__30264__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$7 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__30264__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$8 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$9 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$10 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$11 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$12 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$13 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$14 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$15 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$16 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$17 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$18 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$19 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$20 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$21 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._invoke[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$22 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__30264__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__30264__auto____$1 = cljs.core._invoke["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__30264__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__30263__auto__ = value == null ? null : value;
    var m__30264__auto__ = cljs.core._clone[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__30264__auto__.call(null, value);
    } else {
      var m__30264__auto____$1 = cljs.core._clone["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__30264__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = function() {
};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._count[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._count["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = function() {
};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._empty[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._empty["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = function() {
};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._conj[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__30264__auto__.call(null, coll, o);
    } else {
      var m__30264__auto____$1 = cljs.core._conj["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__30264__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = function() {
};
cljs.core._nth = function cljs$core$_nth(var_args) {
  var args31926 = [];
  var len__30669__auto___31929 = arguments.length;
  var i__30670__auto___31930 = 0;
  while (true) {
    if (i__30670__auto___31930 < len__30669__auto___31929) {
      args31926.push(arguments[i__30670__auto___31930]);
      var G__31931 = i__30670__auto___31930 + 1;
      i__30670__auto___31930 = G__31931;
      continue;
    } else {
    }
    break;
  }
  var G__31928 = args31926.length;
  switch(G__31928) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args31926.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._nth[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__30264__auto__.call(null, coll, n);
    } else {
      var m__30264__auto____$1 = cljs.core._nth["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__30264__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._nth[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__30264__auto__.call(null, coll, n, not_found);
    } else {
      var m__30264__auto____$1 = cljs.core._nth["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__30264__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
};
cljs.core.ISeq = function() {
};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._first[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._first["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._rest[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._rest["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = function() {
};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._next[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._next["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = function() {
};
cljs.core._lookup = function cljs$core$_lookup(var_args) {
  var args31933 = [];
  var len__30669__auto___31936 = arguments.length;
  var i__30670__auto___31937 = 0;
  while (true) {
    if (i__30670__auto___31937 < len__30669__auto___31936) {
      args31933.push(arguments[i__30670__auto___31937]);
      var G__31938 = i__30670__auto___31937 + 1;
      i__30670__auto___31937 = G__31938;
      continue;
    } else {
    }
    break;
  }
  var G__31935 = args31933.length;
  switch(G__31935) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args31933.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._lookup[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__30264__auto__.call(null, o, k);
    } else {
      var m__30264__auto____$1 = cljs.core._lookup["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__30264__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._lookup[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__30264__auto__.call(null, o, k, not_found);
    } else {
      var m__30264__auto____$1 = cljs.core._lookup["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__30264__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__30264__auto__.call(null, coll, k);
    } else {
      var m__30264__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__30264__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._assoc[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__30264__auto__.call(null, coll, k, v);
    } else {
      var m__30264__auto____$1 = cljs.core._assoc["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__30264__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IMap = function() {
};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._dissoc[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__30264__auto__.call(null, coll, k);
    } else {
      var m__30264__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__30264__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = function() {
};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._key[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._key["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._val[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._val["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = function() {
};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._disjoin[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__30264__auto__.call(null, coll, v);
    } else {
      var m__30264__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__30264__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = function() {
};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._peek[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._peek["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._pop[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._pop["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = function() {
};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._assoc_n[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__30264__auto__.call(null, coll, n, val);
    } else {
      var m__30264__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__30264__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = function() {
};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._deref[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__30264__auto__.call(null, o);
    } else {
      var m__30264__auto____$1 = cljs.core._deref["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__30264__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = function() {
};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__30264__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__30264__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__30264__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = function() {
};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._meta[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__30264__auto__.call(null, o);
    } else {
      var m__30264__auto____$1 = cljs.core._meta["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__30264__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = function() {
};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._with_meta[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__30264__auto__.call(null, o, meta);
    } else {
      var m__30264__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__30264__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = function() {
};
cljs.core._reduce = function cljs$core$_reduce(var_args) {
  var args31940 = [];
  var len__30669__auto___31943 = arguments.length;
  var i__30670__auto___31944 = 0;
  while (true) {
    if (i__30670__auto___31944 < len__30669__auto___31943) {
      args31940.push(arguments[i__30670__auto___31944]);
      var G__31945 = i__30670__auto___31944 + 1;
      i__30670__auto___31944 = G__31945;
      continue;
    } else {
    }
    break;
  }
  var G__31942 = args31940.length;
  switch(G__31942) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args31940.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._reduce[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__30264__auto__.call(null, coll, f);
    } else {
      var m__30264__auto____$1 = cljs.core._reduce["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__30264__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._reduce[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__30264__auto__.call(null, coll, f, start);
    } else {
      var m__30264__auto____$1 = cljs.core._reduce["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__30264__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._kv_reduce[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__30264__auto__.call(null, coll, f, init);
    } else {
      var m__30264__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__30264__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = function() {
};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._equiv[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__30264__auto__.call(null, o, other);
    } else {
      var m__30264__auto____$1 = cljs.core._equiv["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__30264__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = function() {
};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._hash[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__30264__auto__.call(null, o);
    } else {
      var m__30264__auto____$1 = cljs.core._hash["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__30264__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = function() {
};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._seq[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__30264__auto__.call(null, o);
    } else {
      var m__30264__auto____$1 = cljs.core._seq["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__30264__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = function() {
};
cljs.core.IList = function() {
};
cljs.core.IRecord = function() {
};
cljs.core.IReversible = function() {
};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._rseq[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._rseq["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = function() {
};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._sorted_seq[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__30264__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__30264__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__30264__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__30264__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__30264__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__30264__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._entry_key[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__30264__auto__.call(null, coll, entry);
    } else {
      var m__30264__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__30264__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._comparator[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._comparator["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = function() {
};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__30263__auto__ = writer == null ? null : writer;
    var m__30264__auto__ = cljs.core._write[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__30264__auto__.call(null, writer, s);
    } else {
      var m__30264__auto____$1 = cljs.core._write["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__30264__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__30263__auto__ = writer == null ? null : writer;
    var m__30264__auto__ = cljs.core._flush[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__30264__auto__.call(null, writer);
    } else {
      var m__30264__auto____$1 = cljs.core._flush["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__30264__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = function() {
};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._pr_writer[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__30264__auto__.call(null, o, writer, opts);
    } else {
      var m__30264__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__30264__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = function() {
};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(x) {
  if (!(x == null) && !(x.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return x.cljs$core$IPending$_realized_QMARK_$arity$1(x);
  } else {
    var x__30263__auto__ = x == null ? null : x;
    var m__30264__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto__.call(null, x);
    } else {
      var m__30264__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", x);
      }
    }
  }
};
cljs.core.IWatchable = function() {
};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._notify_watches[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__30264__auto__.call(null, this$, oldval, newval);
    } else {
      var m__30264__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__30264__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._add_watch[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__30264__auto__.call(null, this$, key, f);
    } else {
      var m__30264__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__30264__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs.core._remove_watch[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__30264__auto__.call(null, this$, key);
    } else {
      var m__30264__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__30264__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = function() {
};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._as_transient[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = function() {
};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__30263__auto__ = tcoll == null ? null : tcoll;
    var m__30264__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__30264__auto__.call(null, tcoll, val);
    } else {
      var m__30264__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__30264__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__30263__auto__ = tcoll == null ? null : tcoll;
    var m__30264__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__30264__auto__.call(null, tcoll);
    } else {
      var m__30264__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__30264__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = function() {
};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__30263__auto__ = tcoll == null ? null : tcoll;
    var m__30264__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__30264__auto__.call(null, tcoll, key, val);
    } else {
      var m__30264__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__30264__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = function() {
};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__30263__auto__ = tcoll == null ? null : tcoll;
    var m__30264__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__30264__auto__.call(null, tcoll, key);
    } else {
      var m__30264__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__30264__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = function() {
};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__30263__auto__ = tcoll == null ? null : tcoll;
    var m__30264__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__30264__auto__.call(null, tcoll, n, val);
    } else {
      var m__30264__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__30264__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__30263__auto__ = tcoll == null ? null : tcoll;
    var m__30264__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__30264__auto__.call(null, tcoll);
    } else {
      var m__30264__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__30264__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = function() {
};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__30263__auto__ = tcoll == null ? null : tcoll;
    var m__30264__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__30264__auto__.call(null, tcoll, v);
    } else {
      var m__30264__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__30264__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = function() {
};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__30263__auto__ = x == null ? null : x;
    var m__30264__auto__ = cljs.core._compare[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__30264__auto__.call(null, x, y);
    } else {
      var m__30264__auto____$1 = cljs.core._compare["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__30264__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = function() {
};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._drop_first[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = function() {
};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._chunked_first[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._chunked_rest[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = function() {
};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._chunked_next[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = function() {
};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__30263__auto__ = x == null ? null : x;
    var m__30264__auto__ = cljs.core._name[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto__.call(null, x);
    } else {
      var m__30264__auto____$1 = cljs.core._name["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__30263__auto__ = x == null ? null : x;
    var m__30264__auto__ = cljs.core._namespace[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto__.call(null, x);
    } else {
      var m__30264__auto____$1 = cljs.core._namespace["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = function() {
};
cljs.core.IReset = function() {
};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__30264__auto__.call(null, o, new_value);
    } else {
      var m__30264__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__30264__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = function() {
};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_(var_args) {
  var args31947 = [];
  var len__30669__auto___31950 = arguments.length;
  var i__30670__auto___31951 = 0;
  while (true) {
    if (i__30670__auto___31951 < len__30669__auto___31950) {
      args31947.push(arguments[i__30670__auto___31951]);
      var G__31952 = i__30670__auto___31951 + 1;
      i__30670__auto___31951 = G__31952;
      continue;
    } else {
    }
    break;
  }
  var G__31949 = args31947.length;
  switch(G__31949) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args31947.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__30264__auto__.call(null, o, f);
    } else {
      var m__30264__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__30264__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__30264__auto__.call(null, o, f, a);
    } else {
      var m__30264__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__30264__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$4 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__30264__auto__.call(null, o, f, a, b);
    } else {
      var m__30264__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__30264__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$5 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__30264__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__30264__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__30264__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__30263__auto__ = o == null ? null : o;
    var m__30264__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__30264__auto__.call(null, o, new_value);
    } else {
      var m__30264__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__30264__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = function() {
};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__30263__auto__ = coll == null ? null : coll;
    var m__30264__auto__ = cljs.core._iterator[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto__.call(null, coll);
    } else {
      var m__30264__auto____$1 = cljs.core._iterator["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__30264__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  return h1__$6 ^ h1__$6 >>> 16;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__31954 = i + 2;
        var G__31955 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__31954;
        h1 = G__31955;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__31958 = i + 1;
          var G__31959 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__31958;
          hash = G__31959;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      if (cljs.core.truth_(isFinite(o))) {
        return Math.floor(o) % 2147483647;
      } else {
        var G__31967 = o;
        switch(G__31967) {
          case Infinity:
            return 2146435072;
            break;
          case -Infinity:
            return -1048576;
            break;
          default:
            return 2146959360;
        }
      }
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(c, x) {
  return x instanceof c;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = cljs.core.not(a.ns);
      if (and__29588__auto__) {
        return b.ns;
      } else {
        return and__29588__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__31975 = a.ns;
            var G__31976 = b.ns;
            return goog.array.defaultCompare(G__31975, G__31976);
          }();
          if (0 === nsc) {
            var G__31977 = a.name;
            var G__31978 = b.name;
            return goog.array.defaultCompare(G__31977, G__31978);
          } else {
            return nsc;
          }
        }
      } else {
        var G__31979 = a.name;
        var G__31980 = b.name;
        return goog.array.defaultCompare(G__31979, G__31980);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__31982 = null;
  var G__31982__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__31982__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__31982 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__31982__2.call(this, self__, coll);
      case 3:
        return G__31982__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__31982.cljs$core$IFn$_invoke$arity$2 = G__31982__2;
  G__31982.cljs$core$IFn$_invoke$arity$3 = G__31982__3;
  return G__31982;
}();
cljs.core.Symbol.prototype.apply = function(self__, args31981) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args31981)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__30035__auto__ = self__._hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol(var_args) {
  var args31983 = [];
  var len__30669__auto___31986 = arguments.length;
  var i__30670__auto___31987 = 0;
  while (true) {
    if (i__30670__auto___31987 < len__30669__auto___31986) {
      args31983.push(arguments[i__30670__auto___31987]);
      var G__31988 = i__30670__auto___31987 + 1;
      i__30670__auto___31987 = G__31988;
      continue;
    } else {
    }
    break;
  }
  var G__31985 = args31983.length;
  switch(G__31985) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args31983.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx < 1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2523137;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__31991 = this$__$1.sym;
    var G__31992 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__31991, G__31992) : cljs.core._EQ_.call(null, G__31991, G__31992);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__32037 = null;
  var G__32037__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__32037__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__32037__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__32037__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__32037__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__32037__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__32037__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__32037__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__32037__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__32037__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__32037__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__32037__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__32037__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__32037__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__32037__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__32037__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__32037__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__32037__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__32037__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__32037__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__32037__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__32037__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__31993 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__31994 = a;
    var G__31995 = b;
    var G__31996 = c;
    var G__31997 = d;
    var G__31998 = e;
    var G__31999 = f;
    var G__32000 = g;
    var G__32001 = h;
    var G__32002 = i;
    var G__32003 = j;
    var G__32004 = k;
    var G__32005 = l;
    var G__32006 = m;
    var G__32007 = n;
    var G__32008 = o;
    var G__32009 = p;
    var G__32010 = q;
    var G__32011 = r;
    var G__32012 = s;
    var G__32013 = t;
    var G__32014 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__31993, G__31994, G__31995, G__31996, G__31997, G__31998, G__31999, G__32000, G__32001, G__32002, G__32003, G__32004, G__32005, G__32006, G__32007, G__32008, G__32009, G__32010, G__32011, G__32012, G__32013, G__32014) : cljs.core.apply.call(null, G__31993, G__31994, G__31995, G__31996, G__31997, G__31998, G__31999, G__32000, G__32001, G__32002, G__32003, G__32004, G__32005, G__32006, G__32007, 
    G__32008, G__32009, G__32010, G__32011, G__32012, G__32013, G__32014);
  };
  G__32037 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__32037__1.call(this, self__);
      case 2:
        return G__32037__2.call(this, self__, a);
      case 3:
        return G__32037__3.call(this, self__, a, b);
      case 4:
        return G__32037__4.call(this, self__, a, b, c);
      case 5:
        return G__32037__5.call(this, self__, a, b, c, d);
      case 6:
        return G__32037__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__32037__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__32037__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__32037__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__32037__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__32037__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__32037__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__32037__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__32037__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__32037__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__32037__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__32037__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__32037__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__32037__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__32037__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__32037__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__32037__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32037.cljs$core$IFn$_invoke$arity$1 = G__32037__1;
  G__32037.cljs$core$IFn$_invoke$arity$2 = G__32037__2;
  G__32037.cljs$core$IFn$_invoke$arity$3 = G__32037__3;
  G__32037.cljs$core$IFn$_invoke$arity$4 = G__32037__4;
  G__32037.cljs$core$IFn$_invoke$arity$5 = G__32037__5;
  G__32037.cljs$core$IFn$_invoke$arity$6 = G__32037__6;
  G__32037.cljs$core$IFn$_invoke$arity$7 = G__32037__7;
  G__32037.cljs$core$IFn$_invoke$arity$8 = G__32037__8;
  G__32037.cljs$core$IFn$_invoke$arity$9 = G__32037__9;
  G__32037.cljs$core$IFn$_invoke$arity$10 = G__32037__10;
  G__32037.cljs$core$IFn$_invoke$arity$11 = G__32037__11;
  G__32037.cljs$core$IFn$_invoke$arity$12 = G__32037__12;
  G__32037.cljs$core$IFn$_invoke$arity$13 = G__32037__13;
  G__32037.cljs$core$IFn$_invoke$arity$14 = G__32037__14;
  G__32037.cljs$core$IFn$_invoke$arity$15 = G__32037__15;
  G__32037.cljs$core$IFn$_invoke$arity$16 = G__32037__16;
  G__32037.cljs$core$IFn$_invoke$arity$17 = G__32037__17;
  G__32037.cljs$core$IFn$_invoke$arity$18 = G__32037__18;
  G__32037.cljs$core$IFn$_invoke$arity$19 = G__32037__19;
  G__32037.cljs$core$IFn$_invoke$arity$20 = G__32037__20;
  G__32037.cljs$core$IFn$_invoke$arity$21 = G__32037__21;
  G__32037.cljs$core$IFn$_invoke$arity$22 = G__32037__22;
  return G__32037;
}();
cljs.core.Var.prototype.apply = function(self__, args31990) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args31990)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__32015 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__32016 = a;
  var G__32017 = b;
  var G__32018 = c;
  var G__32019 = d;
  var G__32020 = e;
  var G__32021 = f;
  var G__32022 = g;
  var G__32023 = h;
  var G__32024 = i;
  var G__32025 = j;
  var G__32026 = k;
  var G__32027 = l;
  var G__32028 = m;
  var G__32029 = n;
  var G__32030 = o;
  var G__32031 = p;
  var G__32032 = q;
  var G__32033 = r;
  var G__32034 = s;
  var G__32035 = t;
  var G__32036 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__32015, G__32016, G__32017, G__32018, G__32019, G__32020, G__32021, G__32022, G__32023, G__32024, G__32025, G__32026, G__32027, G__32028, G__32029, G__32030, G__32031, G__32032, G__32033, G__32034, G__32035, G__32036) : cljs.core.apply.call(null, G__32015, G__32016, G__32017, G__32018, G__32019, G__32020, G__32021, G__32022, G__32023, G__32024, G__32025, G__32026, G__32027, G__32028, G__32029, 
  G__32030, G__32031, G__32032, G__32033, G__32034, G__32035, G__32036);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0, null);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0, null);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_(var_args) {
  var args32050 = [];
  var len__30669__auto___32056 = arguments.length;
  var i__30670__auto___32057 = 0;
  while (true) {
    if (i__30670__auto___32057 < len__30669__auto___32056) {
      args32050.push(arguments[i__30670__auto___32057]);
      var G__32058 = i__30670__auto___32057 + 1;
      i__30670__auto___32057 = G__32058;
      continue;
    } else {
    }
    break;
  }
  var G__32055 = args32050.length;
  switch(G__32055) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32050.slice(2), 0, null);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__32060 = y;
        var G__32061 = cljs.core.first(more);
        var G__32062 = cljs.core.next(more);
        x = G__32060;
        y = G__32061;
        more = G__32062;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq32051) {
  var G__32052 = cljs.core.first(seq32051);
  var seq32051__$1 = cljs.core.next(seq32051);
  var G__32053 = cljs.core.first(seq32051__$1);
  var seq32051__$2 = cljs.core.next(seq32051__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__32052, G__32053, seq32051__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__32063 = n + 1;
      var G__32064 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__32065 = cljs.core.next(coll__$1);
      n = G__32063;
      hash_code = G__32064;
      coll__$1 = G__32065;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__32066 = n + 1;
      var G__32067 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__32068 = cljs.core.next(coll__$1);
      n = G__32066;
      hash_code = G__32067;
      coll__$1 = G__32068;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__32069 = this$__$1.valueOf();
    var G__32070 = other.valueOf();
    return goog.array.defaultCompare(G__32069, G__32070);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce(var_args) {
  var args32071 = [];
  var len__30669__auto___32080 = arguments.length;
  var i__30670__auto___32081 = 0;
  while (true) {
    if (i__30670__auto___32081 < len__30669__auto___32080) {
      args32071.push(arguments[i__30670__auto___32081]);
      var G__32082 = i__30670__auto___32081 + 1;
      i__30670__auto___32081 = G__32082;
      continue;
    } else {
    }
    break;
  }
  var G__32073 = args32071.length;
  switch(G__32073) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32071.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__32074 = val;
          var G__32075 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32074, G__32075) : f.call(null, G__32074, G__32075);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__32084 = nval;
          var G__32085 = n + 1;
          val = G__32084;
          n = G__32085;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__32076 = val__$1;
        var G__32077 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32076, G__32077) : f.call(null, G__32076, G__32077);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__32086 = nval;
        var G__32087 = n + 1;
        val__$1 = G__32086;
        n = G__32087;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__32078 = val__$1;
        var G__32079 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32078, G__32079) : f.call(null, G__32078, G__32079);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__32088 = nval;
        var G__32089 = n + 1;
        val__$1 = G__32088;
        n = G__32089;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce(var_args) {
  var args32090 = [];
  var len__30669__auto___32099 = arguments.length;
  var i__30670__auto___32100 = 0;
  while (true) {
    if (i__30670__auto___32100 < len__30669__auto___32099) {
      args32090.push(arguments[i__30670__auto___32100]);
      var G__32101 = i__30670__auto___32100 + 1;
      i__30670__auto___32100 = G__32101;
      continue;
    } else {
    }
    break;
  }
  var G__32092 = args32090.length;
  switch(G__32092) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32090.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__32093 = val;
          var G__32094 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32093, G__32094) : f.call(null, G__32093, G__32094);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__32103 = nval;
          var G__32104 = n + 1;
          val = G__32103;
          n = G__32104;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__32095 = val__$1;
        var G__32096 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32095, G__32096) : f.call(null, G__32095, G__32096);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__32105 = nval;
        var G__32106 = n + 1;
        val__$1 = G__32105;
        n = G__32106;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__32097 = val__$1;
        var G__32098 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32097, G__32098) : f.call(null, G__32097, G__32098);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__32107 = nval;
        var G__32108 = n + 1;
        val__$1 = G__32107;
        n = G__32108;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core._indexOf = function cljs$core$_indexOf(var_args) {
  var args32113 = [];
  var len__30669__auto___32116 = arguments.length;
  var i__30670__auto___32117 = 0;
  while (true) {
    if (i__30670__auto___32117 < len__30669__auto___32116) {
      args32113.push(arguments[i__30670__auto___32117]);
      var G__32118 = i__30670__auto___32117 + 1;
      i__30670__auto___32117 = G__32118;
      continue;
    } else {
    }
    break;
  }
  var G__32115 = args32113.length;
  switch(G__32115) {
    case 2:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32113.length)].join(""));;
  }
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
  if (start >= len) {
    return -1;
  } else {
    var idx = start > 0 ? start : start < 0 ? function() {
      var x__29931__auto__ = 0;
      var y__29932__auto__ = start + len;
      return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
    }() : start;
    while (true) {
      if (idx < len) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx) : cljs.core.nth.call(null, coll, idx), x)) {
          return idx;
        } else {
          var G__32120 = idx + 1;
          idx = G__32120;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._indexOf.cljs$lang$maxFixedArity = 3;
cljs.core._lastIndexOf = function cljs$core$_lastIndexOf(var_args) {
  var args32121 = [];
  var len__30669__auto___32124 = arguments.length;
  var i__30670__auto___32125 = 0;
  while (true) {
    if (i__30670__auto___32125 < len__30669__auto___32124) {
      args32121.push(arguments[i__30670__auto___32125]);
      var G__32126 = i__30670__auto___32125 + 1;
      i__30670__auto___32125 = G__32126;
      continue;
    } else {
    }
    break;
  }
  var G__32123 = args32121.length;
  switch(G__32123) {
    case 2:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32121.length)].join(""));;
  }
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
  if (len === 0) {
    return -1;
  } else {
    var idx = start > 0 ? function() {
      var x__29938__auto__ = len - 1;
      var y__29939__auto__ = start;
      return x__29938__auto__ < y__29939__auto__ ? x__29938__auto__ : y__29939__auto__;
    }() : start < 0 ? len + start : start;
    while (true) {
      if (idx >= 0) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx) : cljs.core.nth.call(null, coll, idx), x)) {
          return idx;
        } else {
          var G__32128 = idx - 1;
          idx = G__32128;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._lastIndexOf.cljs$lang$maxFixedArity = 3;
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i, meta) {
  this.arr = arr;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 166592766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.indexOf = function() {
  var G__32129 = null;
  var G__32129__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__32129__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32129 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32129__1.call(this, x);
      case 2:
        return G__32129__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32129.cljs$core$IFn$_invoke$arity$1 = G__32129__1;
  G__32129.cljs$core$IFn$_invoke$arity$2 = G__32129__2;
  return G__32129;
}();
cljs.core.IndexedSeq.prototype.lastIndexOf = function() {
  var G__32130 = null;
  var G__32130__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
  };
  var G__32130__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32130 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32130__1.call(this, x);
      case 2:
        return G__32130__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32130.cljs$core$IFn$_invoke$arity$1 = G__32130__1;
  G__32130.cljs$core$IFn$_invoke$arity$2 = G__32130__2;
  return G__32130;
}();
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, self__.meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__29931__auto__ = 0;
  var y__29932__auto__ = self__.arr.length - self__.i;
  return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, new_meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i, meta) {
  return new cljs.core.IndexedSeq(arr, i, meta);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq(var_args) {
  var args32131 = [];
  var len__30669__auto___32134 = arguments.length;
  var i__30670__auto___32135 = 0;
  while (true) {
    if (i__30670__auto___32135 < len__30669__auto___32134) {
      args32131.push(arguments[i__30670__auto___32135]);
      var G__32136 = i__30670__auto___32135 + 1;
      i__30670__auto___32135 = G__32136;
      continue;
    } else {
    }
    break;
  }
  var G__32133 = args32131.length;
  switch(G__32133) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32131.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i, null);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq(var_args) {
  var args32138 = [];
  var len__30669__auto___32141 = arguments.length;
  var i__30670__auto___32142 = 0;
  while (true) {
    if (i__30670__auto___32142 < len__30669__auto___32141) {
      args32138.push(arguments[i__30670__auto___32142]);
      var G__32143 = i__30670__auto___32142 + 1;
      i__30670__auto___32142 = G__32143;
      continue;
    } else {
    }
    break;
  }
  var G__32140 = args32138.length;
  switch(G__32140) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32138.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.indexOf = function() {
  var G__32147 = null;
  var G__32147__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__32147__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32147 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32147__1.call(this, x);
      case 2:
        return G__32147__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32147.cljs$core$IFn$_invoke$arity$1 = G__32147__1;
  G__32147.cljs$core$IFn$_invoke$arity$2 = G__32147__2;
  return G__32147;
}();
cljs.core.RSeq.prototype.lastIndexOf = function() {
  var G__32148 = null;
  var G__32148__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
  };
  var G__32148__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32148 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32148__1.call(this, x);
      case 2:
        return G__32148__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32148.cljs$core$IFn$_invoke$arity$1 = G__32148__1;
  G__32148.cljs$core$IFn$_invoke$arity$2 = G__32148__2;
  return G__32148;
}();
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__32145 = cljs.core.List.EMPTY;
  var G__32146 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__32145, G__32146) : cljs.core.with_meta.call(null, G__32145, G__32146);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__32149 = sn;
      s = G__32149;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj(var_args) {
  var args32150 = [];
  var len__30669__auto___32156 = arguments.length;
  var i__30670__auto___32157 = 0;
  while (true) {
    if (i__30670__auto___32157 < len__30669__auto___32156) {
      args32150.push(arguments[i__30670__auto___32157]);
      var G__32158 = i__30670__auto___32157 + 1;
      i__30670__auto___32157 = G__32158;
      continue;
    } else {
    }
    break;
  }
  var G__32155 = args32150.length;
  switch(G__32155) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32150.slice(2), 0, null);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__32160 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__32161 = cljs.core.first(xs);
      var G__32162 = cljs.core.next(xs);
      coll = G__32160;
      x = G__32161;
      xs = G__32162;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq32151) {
  var G__32152 = cljs.core.first(seq32151);
  var seq32151__$1 = cljs.core.next(seq32151);
  var G__32153 = cljs.core.first(seq32151__$1);
  var seq32151__$2 = cljs.core.next(seq32151__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__32152, G__32153, seq32151__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__32163 = cljs.core.next(s);
      var G__32164 = acc + 1;
      s = G__32163;
      acc = G__32164;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth(var_args) {
  var args32169 = [];
  var len__30669__auto___32172 = arguments.length;
  var i__30670__auto___32173 = 0;
  while (true) {
    if (i__30670__auto___32173 < len__30669__auto___32172) {
      args32169.push(arguments[i__30670__auto___32173]);
      var G__32174 = i__30670__auto___32173 + 1;
      i__30670__auto___32173 = G__32174;
      continue;
    } else {
    }
    break;
  }
  var G__32171 = args32169.length;
  switch(G__32171) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32169.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__32176 = cljs.core.next(coll);
            var G__32177 = n - 1;
            coll = G__32176;
            n = G__32177;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__32178 = cljs.core.next(coll);
            var G__32179 = n - 1;
            var G__32180 = not_found;
            coll = G__32178;
            n = G__32179;
            not_found = G__32180;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth(var_args) {
  var args32181 = [];
  var len__30669__auto___32188 = arguments.length;
  var i__30670__auto___32189 = 0;
  while (true) {
    if (i__30670__auto___32189 < len__30669__auto___32188) {
      args32181.push(arguments[i__30670__auto___32189]);
      var G__32190 = i__30670__auto___32189 + 1;
      i__30670__auto___32189 = G__32190;
      continue;
    } else {
    }
    break;
  }
  var G__32183 = args32181.length;
  switch(G__32183) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32181.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return null;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__32192 = n__$1 - 1;
      var G__32193 = cljs.core.rest(xs);
      n__$1 = G__32192;
      xs = G__32193;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get(var_args) {
  var args32194 = [];
  var len__30669__auto___32199 = arguments.length;
  var i__30670__auto___32200 = 0;
  while (true) {
    if (i__30670__auto___32200 < len__30669__auto___32199) {
      args32194.push(arguments[i__30670__auto___32200]);
      var G__32201 = i__30670__auto___32200 + 1;
      i__30670__auto___32200 = G__32201;
      continue;
    } else {
    }
    break;
  }
  var G__32196 = args32194.length;
  switch(G__32196) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32194.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc(var_args) {
  var args32203 = [];
  var len__30669__auto___32210 = arguments.length;
  var i__30670__auto___32211 = 0;
  while (true) {
    if (i__30670__auto___32211 < len__30669__auto___32210) {
      args32203.push(arguments[i__30670__auto___32211]);
      var G__32212 = i__30670__auto___32211 + 1;
      i__30670__auto___32211 = G__32212;
      continue;
    } else {
    }
    break;
  }
  var G__32209 = args32203.length;
  switch(G__32209) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32203.slice(3), 0, null);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__32214 = ret;
      var G__32215 = cljs.core.first(kvs);
      var G__32216 = cljs.core.second(kvs);
      var G__32217 = cljs.core.nnext(kvs);
      coll = G__32214;
      k = G__32215;
      v = G__32216;
      kvs = G__32217;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq32204) {
  var G__32205 = cljs.core.first(seq32204);
  var seq32204__$1 = cljs.core.next(seq32204);
  var G__32206 = cljs.core.first(seq32204__$1);
  var seq32204__$2 = cljs.core.next(seq32204__$1);
  var G__32207 = cljs.core.first(seq32204__$2);
  var seq32204__$3 = cljs.core.next(seq32204__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__32205, G__32206, G__32207, seq32204__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc(var_args) {
  var args32218 = [];
  var len__30669__auto___32224 = arguments.length;
  var i__30670__auto___32225 = 0;
  while (true) {
    if (i__30670__auto___32225 < len__30669__auto___32224) {
      args32218.push(arguments[i__30670__auto___32225]);
      var G__32226 = i__30670__auto___32225 + 1;
      i__30670__auto___32225 = G__32226;
      continue;
    } else {
    }
    break;
  }
  var G__32223 = args32218.length;
  switch(G__32223) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32218.slice(2), 0, null);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__32228 = ret;
        var G__32229 = cljs.core.first(ks);
        var G__32230 = cljs.core.next(ks);
        coll = G__32228;
        k = G__32229;
        ks = G__32230;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq32219) {
  var G__32220 = cljs.core.first(seq32219);
  var seq32219__$1 = cljs.core.next(seq32219);
  var G__32221 = cljs.core.first(seq32219__$1);
  var seq32219__$2 = cljs.core.next(seq32219__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__32220, G__32221, seq32219__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__29600__auto__ = goog.isFunction(f);
  if (or__29600__auto__) {
    return or__29600__auto__;
  } else {
    if (!(f == null)) {
      if (false || f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__32236 = null;
  var G__32236__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__32236__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__32236__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__32236__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__32236__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__32236__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__32236__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__32236__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__32236__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__32236__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__32236__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__32236__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__32236__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__32236__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__32236__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__32236__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__32236__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__32236__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__32236__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__32236__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__32236__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__32236__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__32236 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__32236__1.call(this, self__);
      case 2:
        return G__32236__2.call(this, self__, a);
      case 3:
        return G__32236__3.call(this, self__, a, b);
      case 4:
        return G__32236__4.call(this, self__, a, b, c);
      case 5:
        return G__32236__5.call(this, self__, a, b, c, d);
      case 6:
        return G__32236__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__32236__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__32236__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__32236__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__32236__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__32236__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__32236__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__32236__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__32236__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__32236__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__32236__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__32236__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__32236__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__32236__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__32236__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__32236__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__32236__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32236.cljs$core$IFn$_invoke$arity$1 = G__32236__1;
  G__32236.cljs$core$IFn$_invoke$arity$2 = G__32236__2;
  G__32236.cljs$core$IFn$_invoke$arity$3 = G__32236__3;
  G__32236.cljs$core$IFn$_invoke$arity$4 = G__32236__4;
  G__32236.cljs$core$IFn$_invoke$arity$5 = G__32236__5;
  G__32236.cljs$core$IFn$_invoke$arity$6 = G__32236__6;
  G__32236.cljs$core$IFn$_invoke$arity$7 = G__32236__7;
  G__32236.cljs$core$IFn$_invoke$arity$8 = G__32236__8;
  G__32236.cljs$core$IFn$_invoke$arity$9 = G__32236__9;
  G__32236.cljs$core$IFn$_invoke$arity$10 = G__32236__10;
  G__32236.cljs$core$IFn$_invoke$arity$11 = G__32236__11;
  G__32236.cljs$core$IFn$_invoke$arity$12 = G__32236__12;
  G__32236.cljs$core$IFn$_invoke$arity$13 = G__32236__13;
  G__32236.cljs$core$IFn$_invoke$arity$14 = G__32236__14;
  G__32236.cljs$core$IFn$_invoke$arity$15 = G__32236__15;
  G__32236.cljs$core$IFn$_invoke$arity$16 = G__32236__16;
  G__32236.cljs$core$IFn$_invoke$arity$17 = G__32236__17;
  G__32236.cljs$core$IFn$_invoke$arity$18 = G__32236__18;
  G__32236.cljs$core$IFn$_invoke$arity$19 = G__32236__19;
  G__32236.cljs$core$IFn$_invoke$arity$20 = G__32236__20;
  G__32236.cljs$core$IFn$_invoke$arity$21 = G__32236__21;
  G__32236.cljs$core$IFn$_invoke$arity$22 = G__32236__22;
  return G__32236;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args32235) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args32235)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__29588__auto__ = !(o == null);
    if (and__29588__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__29588__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj(var_args) {
  var args32241 = [];
  var len__30669__auto___32247 = arguments.length;
  var i__30670__auto___32248 = 0;
  while (true) {
    if (i__30670__auto___32248 < len__30669__auto___32247) {
      args32241.push(arguments[i__30670__auto___32248]);
      var G__32249 = i__30670__auto___32248 + 1;
      i__30670__auto___32248 = G__32249;
      continue;
    } else {
    }
    break;
  }
  var G__32246 = args32241.length;
  switch(G__32246) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32241.slice(2), 0, null);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__32251 = ret;
        var G__32252 = cljs.core.first(ks);
        var G__32253 = cljs.core.next(ks);
        coll = G__32251;
        k = G__32252;
        ks = G__32253;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq32242) {
  var G__32243 = cljs.core.first(seq32242);
  var seq32242__$1 = cljs.core.next(seq32242);
  var G__32244 = cljs.core.first(seq32242__$1);
  var seq32242__$2 = cljs.core.next(seq32242__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__32243, G__32244, seq32242__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj(var_args) {
  var args32274 = [];
  var len__30669__auto___32280 = arguments.length;
  var i__30670__auto___32281 = 0;
  while (true) {
    if (i__30670__auto___32281 < len__30669__auto___32280) {
      args32274.push(arguments[i__30670__auto___32281]);
      var G__32282 = i__30670__auto___32281 + 1;
      i__30670__auto___32281 = G__32282;
      continue;
    } else {
    }
    break;
  }
  var G__32277 = args32274.length;
  switch(G__32277) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32274.slice(0), 0, null);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__30688__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq32275) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq32275));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__32286_32288 = obj;
  var G__32287_32289 = function(G__32286_32288, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__32286_32288, keys);
  goog.object.forEach(G__32286_32288, G__32287_32289);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__32290 = i__$1 + 1;
      var G__32291 = j__$1 + 1;
      var G__32292 = len__$1 - 1;
      i__$1 = G__32290;
      j__$1 = G__32291;
      len__$1 = G__32292;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__32293 = i__$1 - 1;
      var G__32294 = j__$1 - 1;
      var G__32295 = len__$1 - 1;
      i__$1 = G__32293;
      j__$1 = G__32294;
      len__$1 = G__32295;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  if (!(s == null)) {
    if (s.cljs$lang$protocol_mask$partition0$ & 8388608 || s.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!s.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__29600__auto__ = cljs.core.fn_QMARK_(f);
  if (or__29600__auto__) {
    return or__29600__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_(var_args) {
  var args32306 = [];
  var len__30669__auto___32312 = arguments.length;
  var i__30670__auto___32313 = 0;
  while (true) {
    if (i__30670__auto___32313 < len__30669__auto___32312) {
      args32306.push(arguments[i__30670__auto___32313]);
      var G__32314 = i__30670__auto___32313 + 1;
      i__30670__auto___32313 = G__32314;
      continue;
    } else {
    }
    break;
  }
  var G__32311 = args32306.length;
  switch(G__32311) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32306.slice(2), 0, null);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__32316 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__32317 = etc;
          s = G__32316;
          xs = G__32317;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq32307) {
  var G__32308 = cljs.core.first(seq32307);
  var seq32307__$1 = cljs.core.next(seq32307);
  var G__32309 = cljs.core.first(seq32307__$1);
  var seq32307__$2 = cljs.core.next(seq32307__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__32308, G__32309, seq32307__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed(var_args) {
  var args32320 = [];
  var len__30669__auto___32323 = arguments.length;
  var i__30670__auto___32324 = 0;
  while (true) {
    if (i__30670__auto___32324 < len__30669__auto___32323) {
      args32320.push(arguments[i__30670__auto___32324]);
      var G__32325 = i__30670__auto___32324 + 1;
      i__30670__auto___32324 = G__32325;
      continue;
    } else {
    }
    break;
  }
  var G__32322 = args32320.length;
  switch(G__32322) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32320.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__32327 = xs;
      var G__32328 = ys;
      var G__32329 = len;
      var G__32330 = n + 1;
      xs = G__32327;
      ys = G__32328;
      len = G__32329;
      n = G__32330;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort(var_args) {
  var args32331 = [];
  var len__30669__auto___32336 = arguments.length;
  var i__30670__auto___32337 = 0;
  while (true) {
    if (i__30670__auto___32337 < len__30669__auto___32336) {
      args32331.push(arguments[i__30670__auto___32337]);
      var G__32338 = i__30670__auto___32337 + 1;
      i__30670__auto___32337 = G__32338;
      continue;
    } else {
    }
    break;
  }
  var G__32333 = args32331.length;
  switch(G__32333) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32331.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__32334_32340 = a;
    var G__32335_32341 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__32334_32340, G__32335_32341);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by(var_args) {
  var args32342 = [];
  var len__30669__auto___32345 = arguments.length;
  var i__30670__auto___32346 = 0;
  while (true) {
    if (i__30670__auto___32346 < len__30669__auto___32345) {
      args32342.push(arguments[i__30670__auto___32346]);
      var G__32347 = i__30670__auto___32346 + 1;
      i__30670__auto___32346 = G__32347;
      continue;
    } else {
    }
    break;
  }
  var G__32344 = args32342.length;
  switch(G__32344) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32342.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce(var_args) {
  var args32349 = [];
  var len__30669__auto___32357 = arguments.length;
  var i__30670__auto___32358 = 0;
  while (true) {
    if (i__30670__auto___32358 < len__30669__auto___32357) {
      args32349.push(arguments[i__30670__auto___32358]);
      var G__32359 = i__30670__auto___32358 + 1;
      i__30670__auto___32358 = G__32359;
      continue;
    } else {
    }
    break;
  }
  var G__32351 = args32349.length;
  switch(G__32351) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32349.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4655__auto__ = cljs.core.seq(coll);
  if (temp__4655__auto__) {
    var s = temp__4655__auto__;
    var G__32352 = f;
    var G__32353 = cljs.core.first(s);
    var G__32354 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__32352, G__32353, G__32354) : cljs.core.reduce.call(null, G__32352, G__32353, G__32354);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__32355 = val__$1;
        var G__32356 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32355, G__32356) : f.call(null, G__32355, G__32356);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__32361 = nval;
        var G__32362 = cljs.core.next(coll__$1);
        val__$1 = G__32361;
        coll__$1 = G__32362;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce(var_args) {
  var args32363 = [];
  var len__30669__auto___32368 = arguments.length;
  var i__30670__auto___32369 = 0;
  while (true) {
    if (i__30670__auto___32369 < len__30669__auto___32368) {
      args32363.push(arguments[i__30670__auto___32369]);
      var G__32370 = i__30670__auto___32369 + 1;
      i__30670__auto___32369 = G__32370;
      continue;
    } else {
    }
    break;
  }
  var G__32365 = args32363.length;
  switch(G__32365) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32363.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing(var_args) {
  var args32372 = [];
  var len__30669__auto___32375 = arguments.length;
  var i__30670__auto___32376 = 0;
  while (true) {
    if (i__30670__auto___32376 < len__30669__auto___32375) {
      args32372.push(arguments[i__30670__auto___32376]);
      var G__32377 = i__30670__auto___32376 + 1;
      i__30670__auto___32376 = G__32377;
      continue;
    } else {
    }
    break;
  }
  var G__32374 = args32372.length;
  switch(G__32374) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32372.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__32379 = null;
    var G__32379__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__32379__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__32379__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__32379 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__32379__0.call(this);
        case 1:
          return G__32379__1.call(this, x);
        case 2:
          return G__32379__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__32379.cljs$core$IFn$_invoke$arity$0 = G__32379__0;
    G__32379.cljs$core$IFn$_invoke$arity$1 = G__32379__1;
    G__32379.cljs$core$IFn$_invoke$arity$2 = G__32379__2;
    return G__32379;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce(var_args) {
  var args32380 = [];
  var len__30669__auto___32383 = arguments.length;
  var i__30670__auto___32384 = 0;
  while (true) {
    if (i__30670__auto___32384 < len__30669__auto___32383) {
      args32380.push(arguments[i__30670__auto___32384]);
      var G__32385 = i__30670__auto___32384 + 1;
      i__30670__auto___32384 = G__32385;
      continue;
    } else {
    }
    break;
  }
  var G__32382 = args32380.length;
  switch(G__32382) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32380.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_(var_args) {
  var args32387 = [];
  var len__30669__auto___32393 = arguments.length;
  var i__30670__auto___32394 = 0;
  while (true) {
    if (i__30670__auto___32394 < len__30669__auto___32393) {
      args32387.push(arguments[i__30670__auto___32394]);
      var G__32395 = i__30670__auto___32394 + 1;
      i__30670__auto___32394 = G__32395;
      continue;
    } else {
    }
    break;
  }
  var G__32392 = args32387.length;
  switch(G__32392) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32387.slice(2), 0, null);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq32388) {
  var G__32389 = cljs.core.first(seq32388);
  var seq32388__$1 = cljs.core.next(seq32388);
  var G__32390 = cljs.core.first(seq32388__$1);
  var seq32388__$2 = cljs.core.next(seq32388__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__32389, G__32390, seq32388__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_(var_args) {
  var args32397 = [];
  var len__30669__auto___32403 = arguments.length;
  var i__30670__auto___32404 = 0;
  while (true) {
    if (i__30670__auto___32404 < len__30669__auto___32403) {
      args32397.push(arguments[i__30670__auto___32404]);
      var G__32405 = i__30670__auto___32404 + 1;
      i__30670__auto___32404 = G__32405;
      continue;
    } else {
    }
    break;
  }
  var G__32402 = args32397.length;
  switch(G__32402) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32397.slice(2), 0, null);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq32398) {
  var G__32399 = cljs.core.first(seq32398);
  var seq32398__$1 = cljs.core.next(seq32398);
  var G__32400 = cljs.core.first(seq32398__$1);
  var seq32398__$2 = cljs.core.next(seq32398__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__32399, G__32400, seq32398__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_(var_args) {
  var args32407 = [];
  var len__30669__auto___32413 = arguments.length;
  var i__30670__auto___32414 = 0;
  while (true) {
    if (i__30670__auto___32414 < len__30669__auto___32413) {
      args32407.push(arguments[i__30670__auto___32414]);
      var G__32415 = i__30670__auto___32414 + 1;
      i__30670__auto___32414 = G__32415;
      continue;
    } else {
    }
    break;
  }
  var G__32412 = args32407.length;
  switch(G__32412) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32407.slice(2), 0, null);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq32408) {
  var G__32409 = cljs.core.first(seq32408);
  var seq32408__$1 = cljs.core.next(seq32408);
  var G__32410 = cljs.core.first(seq32408__$1);
  var seq32408__$2 = cljs.core.next(seq32408__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__32409, G__32410, seq32408__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_(var_args) {
  var args32417 = [];
  var len__30669__auto___32423 = arguments.length;
  var i__30670__auto___32424 = 0;
  while (true) {
    if (i__30670__auto___32424 < len__30669__auto___32423) {
      args32417.push(arguments[i__30670__auto___32424]);
      var G__32425 = i__30670__auto___32424 + 1;
      i__30670__auto___32424 = G__32425;
      continue;
    } else {
    }
    break;
  }
  var G__32422 = args32417.length;
  switch(G__32422) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32417.slice(2), 0, null);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq32418) {
  var G__32419 = cljs.core.first(seq32418);
  var seq32418__$1 = cljs.core.next(seq32418);
  var G__32420 = cljs.core.first(seq32418__$1);
  var seq32418__$2 = cljs.core.next(seq32418__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__32419, G__32420, seq32418__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_(var_args) {
  var args32427 = [];
  var len__30669__auto___32433 = arguments.length;
  var i__30670__auto___32434 = 0;
  while (true) {
    if (i__30670__auto___32434 < len__30669__auto___32433) {
      args32427.push(arguments[i__30670__auto___32434]);
      var G__32435 = i__30670__auto___32434 + 1;
      i__30670__auto___32434 = G__32435;
      continue;
    } else {
    }
    break;
  }
  var G__32432 = args32427.length;
  switch(G__32432) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32427.slice(2), 0, null);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__32437 = y;
        var G__32438 = cljs.core.first(more);
        var G__32439 = cljs.core.next(more);
        x = G__32437;
        y = G__32438;
        more = G__32439;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq32428) {
  var G__32429 = cljs.core.first(seq32428);
  var seq32428__$1 = cljs.core.next(seq32428);
  var G__32430 = cljs.core.first(seq32428__$1);
  var seq32428__$2 = cljs.core.next(seq32428__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__32429, G__32430, seq32428__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_(var_args) {
  var args32440 = [];
  var len__30669__auto___32446 = arguments.length;
  var i__30670__auto___32447 = 0;
  while (true) {
    if (i__30670__auto___32447 < len__30669__auto___32446) {
      args32440.push(arguments[i__30670__auto___32447]);
      var G__32448 = i__30670__auto___32447 + 1;
      i__30670__auto___32447 = G__32448;
      continue;
    } else {
    }
    break;
  }
  var G__32445 = args32440.length;
  switch(G__32445) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32440.slice(2), 0, null);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__32450 = y;
        var G__32451 = cljs.core.first(more);
        var G__32452 = cljs.core.next(more);
        x = G__32450;
        y = G__32451;
        more = G__32452;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq32441) {
  var G__32442 = cljs.core.first(seq32441);
  var seq32441__$1 = cljs.core.next(seq32441);
  var G__32443 = cljs.core.first(seq32441__$1);
  var seq32441__$2 = cljs.core.next(seq32441__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__32442, G__32443, seq32441__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_(var_args) {
  var args32453 = [];
  var len__30669__auto___32459 = arguments.length;
  var i__30670__auto___32460 = 0;
  while (true) {
    if (i__30670__auto___32460 < len__30669__auto___32459) {
      args32453.push(arguments[i__30670__auto___32460]);
      var G__32461 = i__30670__auto___32460 + 1;
      i__30670__auto___32460 = G__32461;
      continue;
    } else {
    }
    break;
  }
  var G__32458 = args32453.length;
  switch(G__32458) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32453.slice(2), 0, null);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__32463 = y;
        var G__32464 = cljs.core.first(more);
        var G__32465 = cljs.core.next(more);
        x = G__32463;
        y = G__32464;
        more = G__32465;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq32454) {
  var G__32455 = cljs.core.first(seq32454);
  var seq32454__$1 = cljs.core.next(seq32454);
  var G__32456 = cljs.core.first(seq32454__$1);
  var seq32454__$2 = cljs.core.next(seq32454__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__32455, G__32456, seq32454__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_(var_args) {
  var args32466 = [];
  var len__30669__auto___32472 = arguments.length;
  var i__30670__auto___32473 = 0;
  while (true) {
    if (i__30670__auto___32473 < len__30669__auto___32472) {
      args32466.push(arguments[i__30670__auto___32473]);
      var G__32474 = i__30670__auto___32473 + 1;
      i__30670__auto___32473 = G__32474;
      continue;
    } else {
    }
    break;
  }
  var G__32471 = args32466.length;
  switch(G__32471) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32466.slice(2), 0, null);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__32476 = y;
        var G__32477 = cljs.core.first(more);
        var G__32478 = cljs.core.next(more);
        x = G__32476;
        y = G__32477;
        more = G__32478;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq32467) {
  var G__32468 = cljs.core.first(seq32467);
  var seq32467__$1 = cljs.core.next(seq32467);
  var G__32469 = cljs.core.first(seq32467__$1);
  var seq32467__$2 = cljs.core.next(seq32467__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__32468, G__32469, seq32467__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max(var_args) {
  var args32479 = [];
  var len__30669__auto___32485 = arguments.length;
  var i__30670__auto___32486 = 0;
  while (true) {
    if (i__30670__auto___32486 < len__30669__auto___32485) {
      args32479.push(arguments[i__30670__auto___32486]);
      var G__32487 = i__30670__auto___32486 + 1;
      i__30670__auto___32486 = G__32487;
      continue;
    } else {
    }
    break;
  }
  var G__32484 = args32479.length;
  switch(G__32484) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32479.slice(2), 0, null);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__29931__auto__ = x;
  var y__29932__auto__ = y;
  return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__29931__auto__ = x;
    var y__29932__auto__ = y;
    return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq32480) {
  var G__32481 = cljs.core.first(seq32480);
  var seq32480__$1 = cljs.core.next(seq32480);
  var G__32482 = cljs.core.first(seq32480__$1);
  var seq32480__$2 = cljs.core.next(seq32480__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__32481, G__32482, seq32480__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min(var_args) {
  var args32489 = [];
  var len__30669__auto___32495 = arguments.length;
  var i__30670__auto___32496 = 0;
  while (true) {
    if (i__30670__auto___32496 < len__30669__auto___32495) {
      args32489.push(arguments[i__30670__auto___32496]);
      var G__32497 = i__30670__auto___32496 + 1;
      i__30670__auto___32496 = G__32497;
      continue;
    } else {
    }
    break;
  }
  var G__32494 = args32489.length;
  switch(G__32494) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32489.slice(2), 0, null);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__29938__auto__ = x;
  var y__29939__auto__ = y;
  return x__29938__auto__ < y__29939__auto__ ? x__29938__auto__ : y__29939__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__29938__auto__ = x;
    var y__29939__auto__ = y;
    return x__29938__auto__ < y__29939__auto__ ? x__29938__auto__ : y__29939__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq32490) {
  var G__32491 = cljs.core.first(seq32490);
  var seq32490__$1 = cljs.core.next(seq32490);
  var G__32492 = cljs.core.first(seq32490__$1);
  var seq32490__$2 = cljs.core.next(seq32490__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__32491, G__32492, seq32490__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add(var_args) {
  var args32499 = [];
  var len__30669__auto___32505 = arguments.length;
  var i__30670__auto___32506 = 0;
  while (true) {
    if (i__30670__auto___32506 < len__30669__auto___32505) {
      args32499.push(arguments[i__30670__auto___32506]);
      var G__32507 = i__30670__auto___32506 + 1;
      i__30670__auto___32506 = G__32507;
      continue;
    } else {
    }
    break;
  }
  var G__32504 = args32499.length;
  switch(G__32504) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32499.slice(2), 0, null);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq32500) {
  var G__32501 = cljs.core.first(seq32500);
  var seq32500__$1 = cljs.core.next(seq32500);
  var G__32502 = cljs.core.first(seq32500__$1);
  var seq32500__$2 = cljs.core.next(seq32500__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__32501, G__32502, seq32500__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int(var_args) {
  var args32509 = [];
  var len__30669__auto___32515 = arguments.length;
  var i__30670__auto___32516 = 0;
  while (true) {
    if (i__30670__auto___32516 < len__30669__auto___32515) {
      args32509.push(arguments[i__30670__auto___32516]);
      var G__32517 = i__30670__auto___32516 + 1;
      i__30670__auto___32516 = G__32517;
      continue;
    } else {
    }
    break;
  }
  var G__32514 = args32509.length;
  switch(G__32514) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32509.slice(2), 0, null);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq32510) {
  var G__32511 = cljs.core.first(seq32510);
  var seq32510__$1 = cljs.core.next(seq32510);
  var G__32512 = cljs.core.first(seq32510__$1);
  var seq32510__$2 = cljs.core.next(seq32510__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__32511, G__32512, seq32510__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int(var_args) {
  var args32519 = [];
  var len__30669__auto___32525 = arguments.length;
  var i__30670__auto___32526 = 0;
  while (true) {
    if (i__30670__auto___32526 < len__30669__auto___32525) {
      args32519.push(arguments[i__30670__auto___32526]);
      var G__32527 = i__30670__auto___32526 + 1;
      i__30670__auto___32526 = G__32527;
      continue;
    } else {
    }
    break;
  }
  var G__32524 = args32519.length;
  switch(G__32524) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32519.slice(2), 0, null);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq32520) {
  var G__32521 = cljs.core.first(seq32520);
  var seq32520__$1 = cljs.core.next(seq32520);
  var G__32522 = cljs.core.first(seq32520__$1);
  var seq32520__$2 = cljs.core.next(seq32520__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__32521, G__32522, seq32520__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply(var_args) {
  var args32529 = [];
  var len__30669__auto___32535 = arguments.length;
  var i__30670__auto___32536 = 0;
  while (true) {
    if (i__30670__auto___32536 < len__30669__auto___32535) {
      args32529.push(arguments[i__30670__auto___32536]);
      var G__32537 = i__30670__auto___32536 + 1;
      i__30670__auto___32536 = G__32537;
      continue;
    } else {
    }
    break;
  }
  var G__32534 = args32529.length;
  switch(G__32534) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32529.slice(2), 0, null);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq32530) {
  var G__32531 = cljs.core.first(seq32530);
  var seq32530__$1 = cljs.core.next(seq32530);
  var G__32532 = cljs.core.first(seq32530__$1);
  var seq32530__$2 = cljs.core.next(seq32530__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__32531, G__32532, seq32530__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int(var_args) {
  var args32539 = [];
  var len__30669__auto___32545 = arguments.length;
  var i__30670__auto___32546 = 0;
  while (true) {
    if (i__30670__auto___32546 < len__30669__auto___32545) {
      args32539.push(arguments[i__30670__auto___32546]);
      var G__32547 = i__30670__auto___32546 + 1;
      i__30670__auto___32546 = G__32547;
      continue;
    } else {
    }
    break;
  }
  var G__32544 = args32539.length;
  switch(G__32544) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32539.slice(2), 0, null);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq32540) {
  var G__32541 = cljs.core.first(seq32540);
  var seq32540__$1 = cljs.core.next(seq32540);
  var G__32542 = cljs.core.first(seq32540__$1);
  var seq32540__$2 = cljs.core.next(seq32540__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__32541, G__32542, seq32540__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract(var_args) {
  var args32549 = [];
  var len__30669__auto___32555 = arguments.length;
  var i__30670__auto___32556 = 0;
  while (true) {
    if (i__30670__auto___32556 < len__30669__auto___32555) {
      args32549.push(arguments[i__30670__auto___32556]);
      var G__32557 = i__30670__auto___32556 + 1;
      i__30670__auto___32556 = G__32557;
      continue;
    } else {
    }
    break;
  }
  var G__32554 = args32549.length;
  switch(G__32554) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32549.slice(2), 0, null);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq32550) {
  var G__32551 = cljs.core.first(seq32550);
  var seq32550__$1 = cljs.core.next(seq32550);
  var G__32552 = cljs.core.first(seq32550__$1);
  var seq32550__$2 = cljs.core.next(seq32550__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__32551, G__32552, seq32550__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int(var_args) {
  var args32559 = [];
  var len__30669__auto___32565 = arguments.length;
  var i__30670__auto___32566 = 0;
  while (true) {
    if (i__30670__auto___32566 < len__30669__auto___32565) {
      args32559.push(arguments[i__30670__auto___32566]);
      var G__32567 = i__30670__auto___32566 + 1;
      i__30670__auto___32566 = G__32567;
      continue;
    } else {
    }
    break;
  }
  var G__32564 = args32559.length;
  switch(G__32564) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32559.slice(2), 0, null);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq32560) {
  var G__32561 = cljs.core.first(seq32560);
  var seq32560__$1 = cljs.core.next(seq32560);
  var G__32562 = cljs.core.first(seq32560__$1);
  var seq32560__$2 = cljs.core.next(seq32560__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__32561, G__32562, seq32560__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor(var_args) {
  var args32569 = [];
  var len__30669__auto___32575 = arguments.length;
  var i__30670__auto___32576 = 0;
  while (true) {
    if (i__30670__auto___32576 < len__30669__auto___32575) {
      args32569.push(arguments[i__30670__auto___32576]);
      var G__32577 = i__30670__auto___32576 + 1;
      i__30670__auto___32576 = G__32577;
      continue;
    } else {
    }
    break;
  }
  var G__32574 = args32569.length;
  switch(G__32574) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32569.slice(2), 0, null);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq32570) {
  var G__32571 = cljs.core.first(seq32570);
  var seq32570__$1 = cljs.core.next(seq32570);
  var G__32572 = cljs.core.first(seq32570__$1);
  var seq32570__$2 = cljs.core.next(seq32570__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__32571, G__32572, seq32570__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and(var_args) {
  var args32579 = [];
  var len__30669__auto___32585 = arguments.length;
  var i__30670__auto___32586 = 0;
  while (true) {
    if (i__30670__auto___32586 < len__30669__auto___32585) {
      args32579.push(arguments[i__30670__auto___32586]);
      var G__32587 = i__30670__auto___32586 + 1;
      i__30670__auto___32586 = G__32587;
      continue;
    } else {
    }
    break;
  }
  var G__32584 = args32579.length;
  switch(G__32584) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32579.slice(2), 0, null);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq32580) {
  var G__32581 = cljs.core.first(seq32580);
  var seq32580__$1 = cljs.core.next(seq32580);
  var G__32582 = cljs.core.first(seq32580__$1);
  var seq32580__$2 = cljs.core.next(seq32580__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__32581, G__32582, seq32580__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or(var_args) {
  var args32589 = [];
  var len__30669__auto___32595 = arguments.length;
  var i__30670__auto___32596 = 0;
  while (true) {
    if (i__30670__auto___32596 < len__30669__auto___32595) {
      args32589.push(arguments[i__30670__auto___32596]);
      var G__32597 = i__30670__auto___32596 + 1;
      i__30670__auto___32596 = G__32597;
      continue;
    } else {
    }
    break;
  }
  var G__32594 = args32589.length;
  switch(G__32594) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32589.slice(2), 0, null);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq32590) {
  var G__32591 = cljs.core.first(seq32590);
  var seq32590__$1 = cljs.core.next(seq32590);
  var G__32592 = cljs.core.first(seq32590__$1);
  var seq32590__$2 = cljs.core.next(seq32590__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__32591, G__32592, seq32590__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not(var_args) {
  var args32599 = [];
  var len__30669__auto___32605 = arguments.length;
  var i__30670__auto___32606 = 0;
  while (true) {
    if (i__30670__auto___32606 < len__30669__auto___32605) {
      args32599.push(arguments[i__30670__auto___32606]);
      var G__32607 = i__30670__auto___32606 + 1;
      i__30670__auto___32606 = G__32607;
      continue;
    } else {
    }
    break;
  }
  var G__32604 = args32599.length;
  switch(G__32604) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32599.slice(2), 0, null);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq32600) {
  var G__32601 = cljs.core.first(seq32600);
  var seq32600__$1 = cljs.core.next(seq32600);
  var G__32602 = cljs.core.first(seq32600__$1);
  var seq32600__$2 = cljs.core.next(seq32600__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__32601, G__32602, seq32600__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_(var_args) {
  var args32609 = [];
  var len__30669__auto___32615 = arguments.length;
  var i__30670__auto___32616 = 0;
  while (true) {
    if (i__30670__auto___32616 < len__30669__auto___32615) {
      args32609.push(arguments[i__30670__auto___32616]);
      var G__32617 = i__30670__auto___32616 + 1;
      i__30670__auto___32616 = G__32617;
      continue;
    } else {
    }
    break;
  }
  var G__32614 = args32609.length;
  switch(G__32614) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32609.slice(2), 0, null);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__32619 = y;
        var G__32620 = cljs.core.first(more);
        var G__32621 = cljs.core.next(more);
        x = G__32619;
        y = G__32620;
        more = G__32621;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq32610) {
  var G__32611 = cljs.core.first(seq32610);
  var seq32610__$1 = cljs.core.next(seq32610);
  var G__32612 = cljs.core.first(seq32610__$1);
  var seq32610__$2 = cljs.core.next(seq32610__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__32611, G__32612, seq32610__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__32622 = n__$1 - 1;
      var G__32623 = cljs.core.next(xs);
      n__$1 = G__32622;
      xs = G__32623;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str(var_args) {
  var args32624 = [];
  var len__30669__auto___32629 = arguments.length;
  var i__30670__auto___32630 = 0;
  while (true) {
    if (i__30670__auto___32630 < len__30669__auto___32629) {
      args32624.push(arguments[i__30670__auto___32630]);
      var G__32631 = i__30670__auto___32630 + 1;
      i__30670__auto___32630 = G__32631;
      continue;
    } else {
    }
    break;
  }
  var G__32628 = args32624.length;
  switch(G__32628) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32624.slice(1), 0, null);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30688__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__32633 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__32634 = cljs.core.next(more);
      sb = G__32633;
      more = G__32634;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq32625) {
  var G__32626 = cljs.core.first(seq32625);
  var seq32625__$1 = cljs.core.next(seq32625);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__32626, seq32625__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs(var_args) {
  var args32635 = [];
  var len__30669__auto___32638 = arguments.length;
  var i__30670__auto___32639 = 0;
  while (true) {
    if (i__30670__auto___32639 < len__30669__auto___32638) {
      args32635.push(arguments[i__30670__auto___32639]);
      var G__32640 = i__30670__auto___32639 + 1;
      i__30670__auto___32639 = G__32640;
      continue;
    } else {
    }
    break;
  }
  var G__32637 = args32635.length;
  switch(G__32637) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32635.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__32642 = cljs.core.next(xs);
            var G__32643 = cljs.core.next(ys);
            xs = G__32642;
            ys = G__32643;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__32644 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__32645 = cljs.core.next(s);
        res = G__32644;
        s = G__32645;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__32646 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__32647 = cljs.core.next(s);
      h = G__32646;
      s = G__32647;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__32648 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__32649 = cljs.core.next(s__$1);
      h = G__32648;
      s__$1 = G__32649;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__32656_32662 = cljs.core.seq(fn_map);
  var chunk__32657_32663 = null;
  var count__32658_32664 = 0;
  var i__32659_32665 = 0;
  while (true) {
    if (i__32659_32665 < count__32658_32664) {
      var vec__32660_32666 = chunk__32657_32663.cljs$core$IIndexed$_nth$arity$2(null, i__32659_32665);
      var key_name_32667 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32660_32666, 0, null);
      var f_32668 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32660_32666, 1, null);
      var str_name_32669 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_32667) : cljs.core.name.call(null, key_name_32667);
      obj[str_name_32669] = f_32668;
      var G__32670 = seq__32656_32662;
      var G__32671 = chunk__32657_32663;
      var G__32672 = count__32658_32664;
      var G__32673 = i__32659_32665 + 1;
      seq__32656_32662 = G__32670;
      chunk__32657_32663 = G__32671;
      count__32658_32664 = G__32672;
      i__32659_32665 = G__32673;
      continue;
    } else {
      var temp__4657__auto___32674 = cljs.core.seq(seq__32656_32662);
      if (temp__4657__auto___32674) {
        var seq__32656_32675__$1 = temp__4657__auto___32674;
        if (cljs.core.chunked_seq_QMARK_(seq__32656_32675__$1)) {
          var c__30411__auto___32676 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__32656_32675__$1) : cljs.core.chunk_first.call(null, seq__32656_32675__$1);
          var G__32677 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__32656_32675__$1) : cljs.core.chunk_rest.call(null, seq__32656_32675__$1);
          var G__32678 = c__30411__auto___32676;
          var G__32679 = cljs.core.count(c__30411__auto___32676);
          var G__32680 = 0;
          seq__32656_32662 = G__32677;
          chunk__32657_32663 = G__32678;
          count__32658_32664 = G__32679;
          i__32659_32665 = G__32680;
          continue;
        } else {
          var vec__32661_32681 = cljs.core.first(seq__32656_32675__$1);
          var key_name_32682 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32661_32681, 0, null);
          var f_32683 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__32661_32681, 1, null);
          var str_name_32684 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_32682) : cljs.core.name.call(null, key_name_32682);
          obj[str_name_32684] = f_32683;
          var G__32685 = cljs.core.next(seq__32656_32675__$1);
          var G__32686 = null;
          var G__32687 = 0;
          var G__32688 = 0;
          seq__32656_32662 = G__32685;
          chunk__32657_32663 = G__32686;
          count__32658_32664 = G__32687;
          i__32659_32665 = G__32688;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.indexOf = function() {
  var G__32689 = null;
  var G__32689__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__32689__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32689 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32689__1.call(this, x);
      case 2:
        return G__32689__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32689.cljs$core$IFn$_invoke$arity$1 = G__32689__1;
  G__32689.cljs$core$IFn$_invoke$arity$2 = G__32689__2;
  return G__32689;
}();
cljs.core.List.prototype.lastIndexOf = function() {
  var G__32690 = null;
  var G__32690__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count);
  };
  var G__32690__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32690 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32690__1.call(this, x);
      case 2:
        return G__32690__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32690.cljs$core$IFn$_invoke$arity$1 = G__32690__1;
  G__32690.cljs$core$IFn$_invoke$arity$2 = G__32690__2;
  return G__32690;
}();
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.indexOf = function() {
  var G__32693 = null;
  var G__32693__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__32693__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32693 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32693__1.call(this, x);
      case 2:
        return G__32693__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32693.cljs$core$IFn$_invoke$arity$1 = G__32693__1;
  G__32693.cljs$core$IFn$_invoke$arity$2 = G__32693__2;
  return G__32693;
}();
cljs.core.EmptyList.prototype.lastIndexOf = function() {
  var G__32694 = null;
  var G__32694__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__32694__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32694 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32694__1.call(this, x);
      case 2:
        return G__32694__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32694.cljs$core$IFn$_invoke$arity$1 = G__32694__1;
  G__32694.cljs$core$IFn$_invoke$arity$2 = G__32694__2;
  return G__32694;
}();
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(rev) {
  return cljs.core._rseq(rev);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___32698 = arguments.length;
  var i__30670__auto___32699 = 0;
  while (true) {
    if (i__30670__auto___32699 < len__30669__auto___32698) {
      args__30676__auto__.push(arguments[i__30670__auto___32699]);
      var G__32700 = i__30670__auto___32699 + 1;
      i__30670__auto___32699 = G__32700;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__32701 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__32701;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__32702 = i - 1;
      var G__32703 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__32702;
      r = G__32703;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq32697) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq32697));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.indexOf = function() {
  var G__32704 = null;
  var G__32704__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__32704__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32704 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32704__1.call(this, x);
      case 2:
        return G__32704__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32704.cljs$core$IFn$_invoke$arity$1 = G__32704__1;
  G__32704.cljs$core$IFn$_invoke$arity$2 = G__32704__2;
  return G__32704;
}();
cljs.core.Cons.prototype.lastIndexOf = function() {
  var G__32705 = null;
  var G__32705__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__32705__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32705 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32705__1.call(this, x);
      case 2:
        return G__32705__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32705.cljs$core$IFn$_invoke$arity$1 = G__32705__1;
  G__32705.cljs$core$IFn$_invoke$arity$2 = G__32705__2;
  return G__32705;
}();
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, null);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__29600__auto__ = coll == null;
    if (or__29600__auto__) {
      return or__29600__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = cljs.core.not(a.ns);
      if (and__29588__auto__) {
        return b.ns;
      } else {
        return and__29588__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__32716 = a.ns;
            var G__32717 = b.ns;
            return goog.array.defaultCompare(G__32716, G__32717);
          }();
          if (0 === nsc) {
            var G__32718 = a.name;
            var G__32719 = b.name;
            return goog.array.defaultCompare(G__32718, G__32719);
          } else {
            return nsc;
          }
        }
      } else {
        var G__32720 = a.name;
        var G__32721 = b.name;
        return goog.array.defaultCompare(G__32720, G__32721);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__32723 = null;
  var G__32723__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__32723__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__32723 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__32723__2.call(this, self__, coll);
      case 3:
        return G__32723__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32723.cljs$core$IFn$_invoke$arity$2 = G__32723__2;
  G__32723.cljs$core$IFn$_invoke$arity$3 = G__32723__3;
  return G__32723;
}();
cljs.core.Keyword.prototype.apply = function(self__, args32722) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args32722)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__30035__auto__ = self__._hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword(var_args) {
  var args32726 = [];
  var len__30669__auto___32729 = arguments.length;
  var i__30670__auto___32730 = 0;
  while (true) {
    if (i__30670__auto___32730 < len__30669__auto___32729) {
      args32726.push(arguments[i__30670__auto___32730]);
      var G__32731 = i__30670__auto___32730 + 1;
      i__30670__auto___32730 = G__32731;
      continue;
    } else {
    }
    break;
  }
  var G__32728 = args32726.length;
  switch(G__32728) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32726.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.indexOf = function() {
  var G__32733 = null;
  var G__32733__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__32733__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32733 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32733__1.call(this, x);
      case 2:
        return G__32733__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32733.cljs$core$IFn$_invoke$arity$1 = G__32733__1;
  G__32733.cljs$core$IFn$_invoke$arity$2 = G__32733__2;
  return G__32733;
}();
cljs.core.LazySeq.prototype.lastIndexOf = function() {
  var G__32734 = null;
  var G__32734__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__32734__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32734 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32734__1.call(this, x);
      case 2:
        return G__32734__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32734.cljs$core$IFn$_invoke$arity$1 = G__32734__1;
  G__32734.cljs$core$IFn$_invoke$arity$2 = G__32734__2;
  return G__32734;
}();
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
  var self__ = this;
  var x__$1 = this;
  return cljs.core.not(self__.fn);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__32735 = ls.sval();
        ls = G__32735;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk(var_args) {
  var args32736 = [];
  var len__30669__auto___32739 = arguments.length;
  var i__30670__auto___32740 = 0;
  while (true) {
    if (i__30670__auto___32740 < len__30669__auto___32739) {
      args32736.push(arguments[i__30670__auto___32740]);
      var G__32741 = i__30670__auto___32740 + 1;
      i__30670__auto___32740 = G__32741;
      continue;
    } else {
    }
    break;
  }
  var G__32738 = args32736.length;
  switch(G__32738) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32736.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.indexOf = function() {
  var G__32743 = null;
  var G__32743__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__32743__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32743 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32743__1.call(this, x);
      case 2:
        return G__32743__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32743.cljs$core$IFn$_invoke$arity$1 = G__32743__1;
  G__32743.cljs$core$IFn$_invoke$arity$2 = G__32743__2;
  return G__32743;
}();
cljs.core.ChunkedCons.prototype.lastIndexOf = function() {
  var G__32744 = null;
  var G__32744__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__32744__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32744 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32744__1.call(this, x);
      case 2:
        return G__32744__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32744.cljs$core$IFn$_invoke$arity$1 = G__32744__1;
  G__32744.cljs$core$IFn$_invoke$arity$2 = G__32744__2;
  return G__32744;
}();
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__32747 = cljs.core.next(s__$1);
      s__$1 = G__32747;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_32748 = 0;
  var xs_32749 = cljs.core.seq(coll);
  while (true) {
    if (xs_32749) {
      ret[i_32748] = cljs.core.to_array(cljs.core.first(xs_32749));
      var G__32750 = i_32748 + 1;
      var G__32751 = cljs.core.next(xs_32749);
      i_32748 = G__32750;
      xs_32749 = G__32751;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array(var_args) {
  var args32752 = [];
  var len__30669__auto___32755 = arguments.length;
  var i__30670__auto___32756 = 0;
  while (true) {
    if (i__30670__auto___32756 < len__30669__auto___32755) {
      args32752.push(arguments[i__30670__auto___32756]);
      var G__32757 = i__30670__auto___32756 + 1;
      i__30670__auto___32756 = G__32757;
      continue;
    } else {
    }
    break;
  }
  var G__32754 = args32752.length;
  switch(G__32754) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32752.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__32759 = i + 1;
        var G__32760 = cljs.core.next(s__$1);
        i = G__32759;
        s__$1 = G__32760;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__30514__auto___32761 = size;
    var i_32762 = 0;
    while (true) {
      if (i_32762 < n__30514__auto___32761) {
        a[i_32762] = init_val_or_seq;
        var G__32763 = i_32762 + 1;
        i_32762 = G__32763;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array(var_args) {
  var args32764 = [];
  var len__30669__auto___32767 = arguments.length;
  var i__30670__auto___32768 = 0;
  while (true) {
    if (i__30670__auto___32768 < len__30669__auto___32767) {
      args32764.push(arguments[i__30670__auto___32768]);
      var G__32769 = i__30670__auto___32768 + 1;
      i__30670__auto___32768 = G__32769;
      continue;
    } else {
    }
    break;
  }
  var G__32766 = args32764.length;
  switch(G__32766) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32764.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__32771 = i + 1;
        var G__32772 = cljs.core.next(s__$1);
        i = G__32771;
        s__$1 = G__32772;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__30514__auto___32773 = size;
    var i_32774 = 0;
    while (true) {
      if (i_32774 < n__30514__auto___32773) {
        a[i_32774] = init_val_or_seq;
        var G__32775 = i_32774 + 1;
        i_32774 = G__32775;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array(var_args) {
  var args32776 = [];
  var len__30669__auto___32779 = arguments.length;
  var i__30670__auto___32780 = 0;
  while (true) {
    if (i__30670__auto___32780 < len__30669__auto___32779) {
      args32776.push(arguments[i__30670__auto___32780]);
      var G__32781 = i__30670__auto___32780 + 1;
      i__30670__auto___32780 = G__32781;
      continue;
    } else {
    }
    break;
  }
  var G__32778 = args32776.length;
  switch(G__32778) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32776.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__32783 = i + 1;
        var G__32784 = cljs.core.next(s__$1);
        i = G__32783;
        s__$1 = G__32784;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__30514__auto___32785 = size;
    var i_32786 = 0;
    while (true) {
      if (i_32786 < n__30514__auto___32785) {
        a[i_32786] = init_val_or_seq;
        var G__32787 = i_32786 + 1;
        i_32786 = G__32787;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array(var_args) {
  var args32788 = [];
  var len__30669__auto___32791 = arguments.length;
  var i__30670__auto___32792 = 0;
  while (true) {
    if (i__30670__auto___32792 < len__30669__auto___32791) {
      args32788.push(arguments[i__30670__auto___32792]);
      var G__32793 = i__30670__auto___32792 + 1;
      i__30670__auto___32792 = G__32793;
      continue;
    } else {
    }
    break;
  }
  var G__32790 = args32788.length;
  switch(G__32790) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32788.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__32795 = i + 1;
        var G__32796 = cljs.core.next(s__$1);
        i = G__32795;
        s__$1 = G__32796;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__30514__auto___32797 = size;
    var i_32798 = 0;
    while (true) {
      if (i_32798 < n__30514__auto___32797) {
        a[i_32798] = init_val_or_seq;
        var G__32799 = i_32798 + 1;
        i_32798 = G__32799;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__32800 = cljs.core.next(s__$1);
        var G__32801 = i - 1;
        var G__32802 = sum + 1;
        s__$1 = G__32800;
        i = G__32801;
        sum = G__32802;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat(var_args) {
  var args32804 = [];
  var len__30669__auto___32816 = arguments.length;
  var i__30670__auto___32817 = 0;
  while (true) {
    if (i__30670__auto___32817 < len__30669__auto___32816) {
      args32804.push(arguments[i__30670__auto___32817]);
      var G__32818 = i__30670__auto___32817 + 1;
      i__30670__auto___32817 = G__32818;
      continue;
    } else {
    }
    break;
  }
  var G__32809 = args32804.length;
  switch(G__32809) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32804.slice(2), 0, null);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq32805) {
  var G__32806 = cljs.core.first(seq32805);
  var seq32805__$1 = cljs.core.next(seq32805);
  var G__32807 = cljs.core.first(seq32805__$1);
  var seq32805__$2 = cljs.core.next(seq32805__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__32806, G__32807, seq32805__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_(var_args) {
  var args32820 = [];
  var len__30669__auto___32828 = arguments.length;
  var i__30670__auto___32829 = 0;
  while (true) {
    if (i__30670__auto___32829 < len__30669__auto___32828) {
      args32820.push(arguments[i__30670__auto___32829]);
      var G__32830 = i__30670__auto___32829 + 1;
      i__30670__auto___32829 = G__32830;
      continue;
    } else {
    }
    break;
  }
  var G__32827 = args32820.length;
  switch(G__32827) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32820.slice(4), 0, null);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__30688__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq32821) {
  var G__32822 = cljs.core.first(seq32821);
  var seq32821__$1 = cljs.core.next(seq32821);
  var G__32823 = cljs.core.first(seq32821__$1);
  var seq32821__$2 = cljs.core.next(seq32821__$1);
  var G__32824 = cljs.core.first(seq32821__$2);
  var seq32821__$3 = cljs.core.next(seq32821__$2);
  var G__32825 = cljs.core.first(seq32821__$3);
  var seq32821__$4 = cljs.core.next(seq32821__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__32822, G__32823, G__32824, G__32825, seq32821__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_(var_args) {
  var args32832 = [];
  var len__30669__auto___32838 = arguments.length;
  var i__30670__auto___32839 = 0;
  while (true) {
    if (i__30670__auto___32839 < len__30669__auto___32838) {
      args32832.push(arguments[i__30670__auto___32839]);
      var G__32840 = i__30670__auto___32839 + 1;
      i__30670__auto___32839 = G__32840;
      continue;
    } else {
    }
    break;
  }
  var G__32837 = args32832.length;
  switch(G__32837) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32832.slice(2), 0, null);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__32842 = ntcoll;
      var G__32843 = cljs.core.first(vals);
      var G__32844 = cljs.core.next(vals);
      tcoll = G__32842;
      val = G__32843;
      vals = G__32844;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq32833) {
  var G__32834 = cljs.core.first(seq32833);
  var seq32833__$1 = cljs.core.next(seq32833);
  var G__32835 = cljs.core.first(seq32833__$1);
  var seq32833__$2 = cljs.core.next(seq32833__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__32834, G__32835, seq32833__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_(var_args) {
  var args32845 = [];
  var len__30669__auto___32852 = arguments.length;
  var i__30670__auto___32853 = 0;
  while (true) {
    if (i__30670__auto___32853 < len__30669__auto___32852) {
      args32845.push(arguments[i__30670__auto___32853]);
      var G__32854 = i__30670__auto___32853 + 1;
      i__30670__auto___32853 = G__32854;
      continue;
    } else {
    }
    break;
  }
  var G__32851 = args32845.length;
  switch(G__32851) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32845.slice(3), 0, null);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__32856 = ntcoll;
      var G__32857 = cljs.core.first(kvs);
      var G__32858 = cljs.core.second(kvs);
      var G__32859 = cljs.core.nnext(kvs);
      tcoll = G__32856;
      key = G__32857;
      val = G__32858;
      kvs = G__32859;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq32846) {
  var G__32847 = cljs.core.first(seq32846);
  var seq32846__$1 = cljs.core.next(seq32846);
  var G__32848 = cljs.core.first(seq32846__$1);
  var seq32846__$2 = cljs.core.next(seq32846__$1);
  var G__32849 = cljs.core.first(seq32846__$2);
  var seq32846__$3 = cljs.core.next(seq32846__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__32847, G__32848, G__32849, seq32846__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_(var_args) {
  var args32860 = [];
  var len__30669__auto___32866 = arguments.length;
  var i__30670__auto___32867 = 0;
  while (true) {
    if (i__30670__auto___32867 < len__30669__auto___32866) {
      args32860.push(arguments[i__30670__auto___32867]);
      var G__32868 = i__30670__auto___32867 + 1;
      i__30670__auto___32867 = G__32868;
      continue;
    } else {
    }
    break;
  }
  var G__32865 = args32860.length;
  switch(G__32865) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32860.slice(2), 0, null);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__32870 = ntcoll;
      var G__32871 = cljs.core.first(ks);
      var G__32872 = cljs.core.next(ks);
      tcoll = G__32870;
      key = G__32871;
      ks = G__32872;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq32861) {
  var G__32862 = cljs.core.first(seq32861);
  var seq32861__$1 = cljs.core.next(seq32861);
  var G__32863 = cljs.core.first(seq32861__$1);
  var seq32861__$2 = cljs.core.next(seq32861__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__32862, G__32863, seq32861__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_(var_args) {
  var args32873 = [];
  var len__30669__auto___32879 = arguments.length;
  var i__30670__auto___32880 = 0;
  while (true) {
    if (i__30670__auto___32880 < len__30669__auto___32879) {
      args32873.push(arguments[i__30670__auto___32880]);
      var G__32881 = i__30670__auto___32880 + 1;
      i__30670__auto___32880 = G__32881;
      continue;
    } else {
    }
    break;
  }
  var G__32878 = args32873.length;
  switch(G__32878) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32873.slice(2), 0, null);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__32883 = ntcoll;
      var G__32884 = cljs.core.first(vals);
      var G__32885 = cljs.core.next(vals);
      tcoll = G__32883;
      val = G__32884;
      vals = G__32885;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq32874) {
  var G__32875 = cljs.core.first(seq32874);
  var seq32874__$1 = cljs.core.next(seq32874);
  var G__32876 = cljs.core.first(seq32874__$1);
  var seq32874__$2 = cljs.core.next(seq32874__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__32875, G__32876, seq32874__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a30558 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a30558);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a30558) : f.call(null, a30558);
      }
    } else {
      var b30559 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a30558, b30559);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a30558, b30559) : f.call(null, a30558, b30559);
        }
      } else {
        var c30560 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a30558, b30559, c30560);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a30558, b30559, c30560) : f.call(null, a30558, b30559, c30560);
          }
        } else {
          var d30561 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a30558, b30559, c30560, d30561);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a30558, b30559, c30560, d30561) : f.call(null, a30558, b30559, c30560, d30561);
            }
          } else {
            var e30562 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a30558, b30559, c30560, d30561, e30562);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a30558, b30559, c30560, d30561, e30562) : f.call(null, a30558, b30559, c30560, d30561, e30562);
              }
            } else {
              var f30563 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a30558, b30559, c30560, d30561, e30562, f30563);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a30558, b30559, c30560, d30561, e30562, f30563) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563);
                }
              } else {
                var g30564 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a30558, b30559, c30560, d30561, e30562, f30563, g30564);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a30558, b30559, c30560, d30561, e30562, f30563, g30564) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564);
                  }
                } else {
                  var h30565 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565);
                    }
                  } else {
                    var i30566 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566);
                      }
                    } else {
                      var j30567 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567);
                        }
                      } else {
                        var k30568 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568);
                          }
                        } else {
                          var l30569 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569);
                            }
                          } else {
                            var m30570 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570);
                              }
                            } else {
                              var n30571 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571);
                                }
                              } else {
                                var o30572 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572);
                                  }
                                } else {
                                  var p30573 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573);
                                    }
                                  } else {
                                    var q30574 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574);
                                      }
                                    } else {
                                      var r30575 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575);
                                        }
                                      } else {
                                        var s30576 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575, s30576);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575, s30576) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575, s30576);
                                          }
                                        } else {
                                          var t30577 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575, s30576, t30577);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575, s30576, t30577) : f.call(null, a30558, b30559, c30560, d30561, e30562, f30563, g30564, h30565, i30566, j30567, k30568, l30569, m30570, n30571, o30572, p30573, q30574, r30575, s30576, t30577);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply(var_args) {
  var args32886 = [];
  var len__30669__auto___32895 = arguments.length;
  var i__30670__auto___32896 = 0;
  while (true) {
    if (i__30670__auto___32896 < len__30669__auto___32895) {
      args32886.push(arguments[i__30670__auto___32896]);
      var G__32897 = i__30670__auto___32896 + 1;
      i__30670__auto___32896 = G__32897;
      continue;
    } else {
    }
    break;
  }
  var G__32894 = args32886.length;
  switch(G__32894) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32886.slice(5), 0, null);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__30688__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq32887) {
  var G__32888 = cljs.core.first(seq32887);
  var seq32887__$1 = cljs.core.next(seq32887);
  var G__32889 = cljs.core.first(seq32887__$1);
  var seq32887__$2 = cljs.core.next(seq32887__$1);
  var G__32890 = cljs.core.first(seq32887__$2);
  var seq32887__$3 = cljs.core.next(seq32887__$2);
  var G__32891 = cljs.core.first(seq32887__$3);
  var seq32887__$4 = cljs.core.next(seq32887__$3);
  var G__32892 = cljs.core.first(seq32887__$4);
  var seq32887__$5 = cljs.core.next(seq32887__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__32888, G__32889, G__32890, G__32891, G__32892, seq32887__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta(var_args) {
  var args32899 = [];
  var len__30669__auto___32924 = arguments.length;
  var i__30670__auto___32925 = 0;
  while (true) {
    if (i__30670__auto___32925 < len__30669__auto___32924) {
      args32899.push(arguments[i__30670__auto___32925]);
      var G__32926 = i__30670__auto___32925 + 1;
      i__30670__auto___32925 = G__32926;
      continue;
    } else {
    }
    break;
  }
  var G__32908 = args32899.length;
  switch(G__32908) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32899.slice(6), 0, null);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__30688__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__32909 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__32909) : f.call(null, G__32909);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__32910 = cljs.core.meta(obj);
    var G__32911 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__32910, G__32911) : f.call(null, G__32910, G__32911);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__32912 = cljs.core.meta(obj);
    var G__32913 = a;
    var G__32914 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__32912, G__32913, G__32914) : f.call(null, G__32912, G__32913, G__32914);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__32915 = cljs.core.meta(obj);
    var G__32916 = a;
    var G__32917 = b;
    var G__32918 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__32915, G__32916, G__32917, G__32918) : f.call(null, G__32915, G__32916, G__32917, G__32918);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__32919 = cljs.core.meta(obj);
    var G__32920 = a;
    var G__32921 = b;
    var G__32922 = c;
    var G__32923 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__32919, G__32920, G__32921, G__32922, G__32923) : f.call(null, G__32919, G__32920, G__32921, G__32922, G__32923);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq32900) {
  var G__32901 = cljs.core.first(seq32900);
  var seq32900__$1 = cljs.core.next(seq32900);
  var G__32902 = cljs.core.first(seq32900__$1);
  var seq32900__$2 = cljs.core.next(seq32900__$1);
  var G__32903 = cljs.core.first(seq32900__$2);
  var seq32900__$3 = cljs.core.next(seq32900__$2);
  var G__32904 = cljs.core.first(seq32900__$3);
  var seq32900__$4 = cljs.core.next(seq32900__$3);
  var G__32905 = cljs.core.first(seq32900__$4);
  var seq32900__$5 = cljs.core.next(seq32900__$4);
  var G__32906 = cljs.core.first(seq32900__$5);
  var seq32900__$6 = cljs.core.next(seq32900__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__32901, G__32902, G__32903, G__32904, G__32905, G__32906, seq32900__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_(var_args) {
  var args32928 = [];
  var len__30669__auto___32934 = arguments.length;
  var i__30670__auto___32935 = 0;
  while (true) {
    if (i__30670__auto___32935 < len__30669__auto___32934) {
      args32928.push(arguments[i__30670__auto___32935]);
      var G__32936 = i__30670__auto___32935 + 1;
      i__30670__auto___32935 = G__32936;
      continue;
    } else {
    }
    break;
  }
  var G__32933 = args32928.length;
  switch(G__32933) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32928.slice(2), 0, null);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq32929) {
  var G__32930 = cljs.core.first(seq32929);
  var seq32929__$1 = cljs.core.next(seq32929);
  var G__32931 = cljs.core.first(seq32929__$1);
  var seq32929__$2 = cljs.core.next(seq32929__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__32930, G__32931, seq32929__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t_cljs$core32941 !== "undefined") {
  } else {
    cljs.core.t_cljs$core32941 = function(nil_iter, meta32942) {
      this.nil_iter = nil_iter;
      this.meta32942 = meta32942;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t_cljs$core32941.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_32943, meta32942__$1) {
      var self__ = this;
      var _32943__$1 = this;
      return new cljs.core.t_cljs$core32941(self__.nil_iter, meta32942__$1);
    };
    cljs.core.t_cljs$core32941.prototype.cljs$core$IMeta$_meta$arity$1 = function(_32943) {
      var self__ = this;
      var _32943__$1 = this;
      return self__.meta32942;
    };
    cljs.core.t_cljs$core32941.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t_cljs$core32941.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t_cljs$core32941.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t_cljs$core32941.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), new cljs.core.Symbol(null, "meta32942", "meta32942", 1875900576, null)], 
      null);
    };
    cljs.core.t_cljs$core32941.cljs$lang$type = true;
    cljs.core.t_cljs$core32941.cljs$lang$ctorStr = "cljs.core/t_cljs$core32941";
    cljs.core.t_cljs$core32941.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
      return cljs.core._write(writer__30207__auto__, "cljs.core/t_cljs$core32941");
    };
    cljs.core.__GT_t_cljs$core32941 = function cljs$core$nil_iter_$___GT_t_cljs$core32941(nil_iter__$1, meta32942) {
      return new cljs.core.t_cljs$core32941(nil_iter__$1, meta32942);
    };
  }
  return new cljs.core.t_cljs$core32941(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = !(lt.stepper == null);
      if (and__29588__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__29588__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__32944 = lt;
        var G__32945 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__32944, G__32945) : self__.xform.call(null, G__32944, G__32945);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__32946 = cljs.core.next(iters__$1);
        iters__$1 = G__32946;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__30514__auto___32947 = self__.iters.length;
  var i_32948 = 0;
  while (true) {
    if (i_32948 < n__30514__auto___32947) {
      self__.nexts[i_32948] = self__.iters[i_32948].next();
      var G__32949 = i_32948 + 1;
      i_32948 = G__32949;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = !(lt.stepper == null);
      if (and__29588__auto__) {
        return this$.hasNext();
      } else {
        return and__29588__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper(var_args) {
  var args32950 = [];
  var len__30669__auto___32953 = arguments.length;
  var i__30670__auto___32954 = 0;
  while (true) {
    if (i__30670__auto___32954 < len__30669__auto___32953) {
      args32950.push(arguments[i__30670__auto___32954]);
      var G__32955 = i__30670__auto___32954 + 1;
      i__30670__auto___32954 = G__32955;
      continue;
    } else {
    }
    break;
  }
  var G__32952 = args32950.length;
  switch(G__32952) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args32950.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31850700;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.indexOf = function() {
  var G__32957 = null;
  var G__32957__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__32957__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32957 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32957__1.call(this, x);
      case 2:
        return G__32957__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32957.cljs$core$IFn$_invoke$arity$1 = G__32957__1;
  G__32957.cljs$core$IFn$_invoke$arity$2 = G__32957__2;
  return G__32957;
}();
cljs.core.LazyTransformer.prototype.lastIndexOf = function() {
  var G__32958 = null;
  var G__32958__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__32958__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__32958 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__32958__1.call(this, x);
      case 2:
        return G__32958__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32958.cljs$core$IFn$_invoke$arity$1 = G__32958__1;
  G__32958.cljs$core$IFn$_invoke$arity$2 = G__32958__2;
  return G__32958;
}();
cljs.core.LazyTransformer.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.meta;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__32959_32963 = cljs.core.seq(colls);
  var chunk__32960_32964 = null;
  var count__32961_32965 = 0;
  var i__32962_32966 = 0;
  while (true) {
    if (i__32962_32966 < count__32961_32965) {
      var coll_32967 = chunk__32960_32964.cljs$core$IIndexed$_nth$arity$2(null, i__32962_32966);
      iters.push(cljs.core.iter(coll_32967));
      var G__32968 = seq__32959_32963;
      var G__32969 = chunk__32960_32964;
      var G__32970 = count__32961_32965;
      var G__32971 = i__32962_32966 + 1;
      seq__32959_32963 = G__32968;
      chunk__32960_32964 = G__32969;
      count__32961_32965 = G__32970;
      i__32962_32966 = G__32971;
      continue;
    } else {
      var temp__4657__auto___32972 = cljs.core.seq(seq__32959_32963);
      if (temp__4657__auto___32972) {
        var seq__32959_32973__$1 = temp__4657__auto___32972;
        if (cljs.core.chunked_seq_QMARK_(seq__32959_32973__$1)) {
          var c__30411__auto___32974 = cljs.core.chunk_first(seq__32959_32973__$1);
          var G__32975 = cljs.core.chunk_rest(seq__32959_32973__$1);
          var G__32976 = c__30411__auto___32974;
          var G__32977 = cljs.core.count(c__30411__auto___32974);
          var G__32978 = 0;
          seq__32959_32963 = G__32975;
          chunk__32960_32964 = G__32976;
          count__32961_32965 = G__32977;
          i__32962_32966 = G__32978;
          continue;
        } else {
          var coll_32979 = cljs.core.first(seq__32959_32973__$1);
          iters.push(cljs.core.iter(coll_32979));
          var G__32980 = cljs.core.next(seq__32959_32973__$1);
          var G__32981 = null;
          var G__32982 = 0;
          var G__32983 = 0;
          seq__32959_32963 = G__32980;
          chunk__32960_32964 = G__32981;
          count__32961_32965 = G__32982;
          i__32962_32966 = G__32983;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence(var_args) {
  var args32984 = [];
  var len__30669__auto___32990 = arguments.length;
  var i__30670__auto___32991 = 0;
  while (true) {
    if (i__30670__auto___32991 < len__30669__auto___32990) {
      args32984.push(arguments[i__30670__auto___32991]);
      var G__32992 = i__30670__auto___32991 + 1;
      i__30670__auto___32991 = G__32992;
      continue;
    } else {
    }
    break;
  }
  var G__32989 = args32984.length;
  switch(G__32989) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args32984.slice(2), 0, null);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__29600__auto__ = cljs.core.seq(coll);
    if (or__29600__auto__) {
      return or__29600__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq32985) {
  var G__32986 = cljs.core.first(seq32985);
  var seq32985__$1 = cljs.core.next(seq32985);
  var G__32987 = cljs.core.first(seq32985__$1);
  var seq32985__$2 = cljs.core.next(seq32985__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__32986, G__32987, seq32985__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__32995 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__32995) : pred.call(null, G__32995);
      }())) {
        var G__32996 = pred;
        var G__32997 = cljs.core.next(coll);
        pred = G__32996;
        coll = G__32997;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__29600__auto__ = function() {
        var G__33001 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__33001) : pred.call(null, G__33001);
      }();
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var G__33002 = pred;
        var G__33003 = cljs.core.next(coll);
        pred = G__33002;
        coll = G__33003;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__33004 = null;
    var G__33004__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__33004__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__33004__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__33004__3 = function() {
      var G__33005__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__33005 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__33006__i = 0, G__33006__a = new Array(arguments.length - 2);
          while (G__33006__i < G__33006__a.length) {
            G__33006__a[G__33006__i] = arguments[G__33006__i + 2];
            ++G__33006__i;
          }
          zs = new cljs.core.IndexedSeq(G__33006__a, 0);
        }
        return G__33005__delegate.call(this, x, y, zs);
      };
      G__33005.cljs$lang$maxFixedArity = 2;
      G__33005.cljs$lang$applyTo = function(arglist__33007) {
        var x = cljs.core.first(arglist__33007);
        arglist__33007 = cljs.core.next(arglist__33007);
        var y = cljs.core.first(arglist__33007);
        var zs = cljs.core.rest(arglist__33007);
        return G__33005__delegate(x, y, zs);
      };
      G__33005.cljs$core$IFn$_invoke$arity$variadic = G__33005__delegate;
      return G__33005;
    }();
    G__33004 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__33004__0.call(this);
        case 1:
          return G__33004__1.call(this, x);
        case 2:
          return G__33004__2.call(this, x, y);
        default:
          var G__33008 = null;
          if (arguments.length > 2) {
            var G__33009__i = 0, G__33009__a = new Array(arguments.length - 2);
            while (G__33009__i < G__33009__a.length) {
              G__33009__a[G__33009__i] = arguments[G__33009__i + 2];
              ++G__33009__i;
            }
            G__33008 = new cljs.core.IndexedSeq(G__33009__a, 0);
          }
          return G__33004__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__33008);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33004.cljs$lang$maxFixedArity = 2;
    G__33004.cljs$lang$applyTo = G__33004__3.cljs$lang$applyTo;
    G__33004.cljs$core$IFn$_invoke$arity$0 = G__33004__0;
    G__33004.cljs$core$IFn$_invoke$arity$1 = G__33004__1;
    G__33004.cljs$core$IFn$_invoke$arity$2 = G__33004__2;
    G__33004.cljs$core$IFn$_invoke$arity$variadic = G__33004__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__33004;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__33010__delegate = function(args) {
      return x;
    };
    var G__33010 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__33011__i = 0, G__33011__a = new Array(arguments.length - 0);
        while (G__33011__i < G__33011__a.length) {
          G__33011__a[G__33011__i] = arguments[G__33011__i + 0];
          ++G__33011__i;
        }
        args = new cljs.core.IndexedSeq(G__33011__a, 0);
      }
      return G__33010__delegate.call(this, args);
    };
    G__33010.cljs$lang$maxFixedArity = 0;
    G__33010.cljs$lang$applyTo = function(arglist__33012) {
      var args = cljs.core.seq(arglist__33012);
      return G__33010__delegate(args);
    };
    G__33010.cljs$core$IFn$_invoke$arity$variadic = G__33010__delegate;
    return G__33010;
  }();
};
cljs.core.comp = function cljs$core$comp(var_args) {
  var args33013 = [];
  var len__30669__auto___33040 = arguments.length;
  var i__30670__auto___33041 = 0;
  while (true) {
    if (i__30670__auto___33041 < len__30669__auto___33040) {
      args33013.push(arguments[i__30670__auto___33041]);
      var G__33042 = i__30670__auto___33041 + 1;
      i__30670__auto___33041 = G__33042;
      continue;
    } else {
    }
    break;
  }
  var G__33019 = args33013.length;
  switch(G__33019) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33013.slice(3), 0, null);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__33044 = null;
    var G__33044__0 = function() {
      var G__33020 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33020) : f.call(null, G__33020);
    };
    var G__33044__1 = function(x) {
      var G__33021 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33021) : f.call(null, G__33021);
    };
    var G__33044__2 = function(x, y) {
      var G__33022 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33022) : f.call(null, G__33022);
    };
    var G__33044__3 = function(x, y, z) {
      var G__33023 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33023) : f.call(null, G__33023);
    };
    var G__33044__4 = function() {
      var G__33045__delegate = function(x, y, z, args) {
        var G__33024 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33024) : f.call(null, G__33024);
      };
      var G__33045 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33046__i = 0, G__33046__a = new Array(arguments.length - 3);
          while (G__33046__i < G__33046__a.length) {
            G__33046__a[G__33046__i] = arguments[G__33046__i + 3];
            ++G__33046__i;
          }
          args = new cljs.core.IndexedSeq(G__33046__a, 0);
        }
        return G__33045__delegate.call(this, x, y, z, args);
      };
      G__33045.cljs$lang$maxFixedArity = 3;
      G__33045.cljs$lang$applyTo = function(arglist__33047) {
        var x = cljs.core.first(arglist__33047);
        arglist__33047 = cljs.core.next(arglist__33047);
        var y = cljs.core.first(arglist__33047);
        arglist__33047 = cljs.core.next(arglist__33047);
        var z = cljs.core.first(arglist__33047);
        var args = cljs.core.rest(arglist__33047);
        return G__33045__delegate(x, y, z, args);
      };
      G__33045.cljs$core$IFn$_invoke$arity$variadic = G__33045__delegate;
      return G__33045;
    }();
    G__33044 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__33044__0.call(this);
        case 1:
          return G__33044__1.call(this, x);
        case 2:
          return G__33044__2.call(this, x, y);
        case 3:
          return G__33044__3.call(this, x, y, z);
        default:
          var G__33048 = null;
          if (arguments.length > 3) {
            var G__33049__i = 0, G__33049__a = new Array(arguments.length - 3);
            while (G__33049__i < G__33049__a.length) {
              G__33049__a[G__33049__i] = arguments[G__33049__i + 3];
              ++G__33049__i;
            }
            G__33048 = new cljs.core.IndexedSeq(G__33049__a, 0);
          }
          return G__33044__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33048);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33044.cljs$lang$maxFixedArity = 3;
    G__33044.cljs$lang$applyTo = G__33044__4.cljs$lang$applyTo;
    G__33044.cljs$core$IFn$_invoke$arity$0 = G__33044__0;
    G__33044.cljs$core$IFn$_invoke$arity$1 = G__33044__1;
    G__33044.cljs$core$IFn$_invoke$arity$2 = G__33044__2;
    G__33044.cljs$core$IFn$_invoke$arity$3 = G__33044__3;
    G__33044.cljs$core$IFn$_invoke$arity$variadic = G__33044__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__33044;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__33050 = null;
    var G__33050__0 = function() {
      var G__33026 = function() {
        var G__33027 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__33027) : g.call(null, G__33027);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33026) : f.call(null, G__33026);
    };
    var G__33050__1 = function(x) {
      var G__33029 = function() {
        var G__33030 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__33030) : g.call(null, G__33030);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33029) : f.call(null, G__33029);
    };
    var G__33050__2 = function(x, y) {
      var G__33032 = function() {
        var G__33033 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__33033) : g.call(null, G__33033);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33032) : f.call(null, G__33032);
    };
    var G__33050__3 = function(x, y, z) {
      var G__33035 = function() {
        var G__33036 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__33036) : g.call(null, G__33036);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33035) : f.call(null, G__33035);
    };
    var G__33050__4 = function() {
      var G__33051__delegate = function(x, y, z, args) {
        var G__33038 = function() {
          var G__33039 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__33039) : g.call(null, G__33039);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33038) : f.call(null, G__33038);
      };
      var G__33051 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33052__i = 0, G__33052__a = new Array(arguments.length - 3);
          while (G__33052__i < G__33052__a.length) {
            G__33052__a[G__33052__i] = arguments[G__33052__i + 3];
            ++G__33052__i;
          }
          args = new cljs.core.IndexedSeq(G__33052__a, 0);
        }
        return G__33051__delegate.call(this, x, y, z, args);
      };
      G__33051.cljs$lang$maxFixedArity = 3;
      G__33051.cljs$lang$applyTo = function(arglist__33053) {
        var x = cljs.core.first(arglist__33053);
        arglist__33053 = cljs.core.next(arglist__33053);
        var y = cljs.core.first(arglist__33053);
        arglist__33053 = cljs.core.next(arglist__33053);
        var z = cljs.core.first(arglist__33053);
        var args = cljs.core.rest(arglist__33053);
        return G__33051__delegate(x, y, z, args);
      };
      G__33051.cljs$core$IFn$_invoke$arity$variadic = G__33051__delegate;
      return G__33051;
    }();
    G__33050 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__33050__0.call(this);
        case 1:
          return G__33050__1.call(this, x);
        case 2:
          return G__33050__2.call(this, x, y);
        case 3:
          return G__33050__3.call(this, x, y, z);
        default:
          var G__33054 = null;
          if (arguments.length > 3) {
            var G__33055__i = 0, G__33055__a = new Array(arguments.length - 3);
            while (G__33055__i < G__33055__a.length) {
              G__33055__a[G__33055__i] = arguments[G__33055__i + 3];
              ++G__33055__i;
            }
            G__33054 = new cljs.core.IndexedSeq(G__33055__a, 0);
          }
          return G__33050__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33054);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33050.cljs$lang$maxFixedArity = 3;
    G__33050.cljs$lang$applyTo = G__33050__4.cljs$lang$applyTo;
    G__33050.cljs$core$IFn$_invoke$arity$0 = G__33050__0;
    G__33050.cljs$core$IFn$_invoke$arity$1 = G__33050__1;
    G__33050.cljs$core$IFn$_invoke$arity$2 = G__33050__2;
    G__33050.cljs$core$IFn$_invoke$arity$3 = G__33050__3;
    G__33050.cljs$core$IFn$_invoke$arity$variadic = G__33050__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__33050;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__33056__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__33057 = cljs.core.first(fs__$2).call(null, ret);
            var G__33058 = cljs.core.next(fs__$2);
            ret = G__33057;
            fs__$2 = G__33058;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__33056 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__33059__i = 0, G__33059__a = new Array(arguments.length - 0);
          while (G__33059__i < G__33059__a.length) {
            G__33059__a[G__33059__i] = arguments[G__33059__i + 0];
            ++G__33059__i;
          }
          args = new cljs.core.IndexedSeq(G__33059__a, 0);
        }
        return G__33056__delegate.call(this, args);
      };
      G__33056.cljs$lang$maxFixedArity = 0;
      G__33056.cljs$lang$applyTo = function(arglist__33060) {
        var args = cljs.core.seq(arglist__33060);
        return G__33056__delegate(args);
      };
      G__33056.cljs$core$IFn$_invoke$arity$variadic = G__33056__delegate;
      return G__33056;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq33014) {
  var G__33015 = cljs.core.first(seq33014);
  var seq33014__$1 = cljs.core.next(seq33014);
  var G__33016 = cljs.core.first(seq33014__$1);
  var seq33014__$2 = cljs.core.next(seq33014__$1);
  var G__33017 = cljs.core.first(seq33014__$2);
  var seq33014__$3 = cljs.core.next(seq33014__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__33015, G__33016, G__33017, seq33014__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial(var_args) {
  var args33061 = [];
  var len__30669__auto___33069 = arguments.length;
  var i__30670__auto___33070 = 0;
  while (true) {
    if (i__30670__auto___33070 < len__30669__auto___33069) {
      args33061.push(arguments[i__30670__auto___33070]);
      var G__33071 = i__30670__auto___33070 + 1;
      i__30670__auto___33070 = G__33071;
      continue;
    } else {
    }
    break;
  }
  var G__33068 = args33061.length;
  switch(G__33068) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33061.slice(4), 0, null);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__30688__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__33073 = null;
    var G__33073__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__33073__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__33073__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__33073__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__33073__4 = function() {
      var G__33074__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__33074 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33075__i = 0, G__33075__a = new Array(arguments.length - 3);
          while (G__33075__i < G__33075__a.length) {
            G__33075__a[G__33075__i] = arguments[G__33075__i + 3];
            ++G__33075__i;
          }
          args = new cljs.core.IndexedSeq(G__33075__a, 0);
        }
        return G__33074__delegate.call(this, x, y, z, args);
      };
      G__33074.cljs$lang$maxFixedArity = 3;
      G__33074.cljs$lang$applyTo = function(arglist__33076) {
        var x = cljs.core.first(arglist__33076);
        arglist__33076 = cljs.core.next(arglist__33076);
        var y = cljs.core.first(arglist__33076);
        arglist__33076 = cljs.core.next(arglist__33076);
        var z = cljs.core.first(arglist__33076);
        var args = cljs.core.rest(arglist__33076);
        return G__33074__delegate(x, y, z, args);
      };
      G__33074.cljs$core$IFn$_invoke$arity$variadic = G__33074__delegate;
      return G__33074;
    }();
    G__33073 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__33073__0.call(this);
        case 1:
          return G__33073__1.call(this, x);
        case 2:
          return G__33073__2.call(this, x, y);
        case 3:
          return G__33073__3.call(this, x, y, z);
        default:
          var G__33077 = null;
          if (arguments.length > 3) {
            var G__33078__i = 0, G__33078__a = new Array(arguments.length - 3);
            while (G__33078__i < G__33078__a.length) {
              G__33078__a[G__33078__i] = arguments[G__33078__i + 3];
              ++G__33078__i;
            }
            G__33077 = new cljs.core.IndexedSeq(G__33078__a, 0);
          }
          return G__33073__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33077);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33073.cljs$lang$maxFixedArity = 3;
    G__33073.cljs$lang$applyTo = G__33073__4.cljs$lang$applyTo;
    G__33073.cljs$core$IFn$_invoke$arity$0 = G__33073__0;
    G__33073.cljs$core$IFn$_invoke$arity$1 = G__33073__1;
    G__33073.cljs$core$IFn$_invoke$arity$2 = G__33073__2;
    G__33073.cljs$core$IFn$_invoke$arity$3 = G__33073__3;
    G__33073.cljs$core$IFn$_invoke$arity$variadic = G__33073__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__33073;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__33079 = null;
    var G__33079__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__33079__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__33079__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__33079__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__33079__4 = function() {
      var G__33080__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__33080 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33081__i = 0, G__33081__a = new Array(arguments.length - 3);
          while (G__33081__i < G__33081__a.length) {
            G__33081__a[G__33081__i] = arguments[G__33081__i + 3];
            ++G__33081__i;
          }
          args = new cljs.core.IndexedSeq(G__33081__a, 0);
        }
        return G__33080__delegate.call(this, x, y, z, args);
      };
      G__33080.cljs$lang$maxFixedArity = 3;
      G__33080.cljs$lang$applyTo = function(arglist__33082) {
        var x = cljs.core.first(arglist__33082);
        arglist__33082 = cljs.core.next(arglist__33082);
        var y = cljs.core.first(arglist__33082);
        arglist__33082 = cljs.core.next(arglist__33082);
        var z = cljs.core.first(arglist__33082);
        var args = cljs.core.rest(arglist__33082);
        return G__33080__delegate(x, y, z, args);
      };
      G__33080.cljs$core$IFn$_invoke$arity$variadic = G__33080__delegate;
      return G__33080;
    }();
    G__33079 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__33079__0.call(this);
        case 1:
          return G__33079__1.call(this, x);
        case 2:
          return G__33079__2.call(this, x, y);
        case 3:
          return G__33079__3.call(this, x, y, z);
        default:
          var G__33083 = null;
          if (arguments.length > 3) {
            var G__33084__i = 0, G__33084__a = new Array(arguments.length - 3);
            while (G__33084__i < G__33084__a.length) {
              G__33084__a[G__33084__i] = arguments[G__33084__i + 3];
              ++G__33084__i;
            }
            G__33083 = new cljs.core.IndexedSeq(G__33084__a, 0);
          }
          return G__33079__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33083);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33079.cljs$lang$maxFixedArity = 3;
    G__33079.cljs$lang$applyTo = G__33079__4.cljs$lang$applyTo;
    G__33079.cljs$core$IFn$_invoke$arity$0 = G__33079__0;
    G__33079.cljs$core$IFn$_invoke$arity$1 = G__33079__1;
    G__33079.cljs$core$IFn$_invoke$arity$2 = G__33079__2;
    G__33079.cljs$core$IFn$_invoke$arity$3 = G__33079__3;
    G__33079.cljs$core$IFn$_invoke$arity$variadic = G__33079__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__33079;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__33085 = null;
    var G__33085__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__33085__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__33085__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__33085__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__33085__4 = function() {
      var G__33086__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__33086 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33087__i = 0, G__33087__a = new Array(arguments.length - 3);
          while (G__33087__i < G__33087__a.length) {
            G__33087__a[G__33087__i] = arguments[G__33087__i + 3];
            ++G__33087__i;
          }
          args = new cljs.core.IndexedSeq(G__33087__a, 0);
        }
        return G__33086__delegate.call(this, x, y, z, args);
      };
      G__33086.cljs$lang$maxFixedArity = 3;
      G__33086.cljs$lang$applyTo = function(arglist__33088) {
        var x = cljs.core.first(arglist__33088);
        arglist__33088 = cljs.core.next(arglist__33088);
        var y = cljs.core.first(arglist__33088);
        arglist__33088 = cljs.core.next(arglist__33088);
        var z = cljs.core.first(arglist__33088);
        var args = cljs.core.rest(arglist__33088);
        return G__33086__delegate(x, y, z, args);
      };
      G__33086.cljs$core$IFn$_invoke$arity$variadic = G__33086__delegate;
      return G__33086;
    }();
    G__33085 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__33085__0.call(this);
        case 1:
          return G__33085__1.call(this, x);
        case 2:
          return G__33085__2.call(this, x, y);
        case 3:
          return G__33085__3.call(this, x, y, z);
        default:
          var G__33089 = null;
          if (arguments.length > 3) {
            var G__33090__i = 0, G__33090__a = new Array(arguments.length - 3);
            while (G__33090__i < G__33090__a.length) {
              G__33090__a[G__33090__i] = arguments[G__33090__i + 3];
              ++G__33090__i;
            }
            G__33089 = new cljs.core.IndexedSeq(G__33090__a, 0);
          }
          return G__33085__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33089);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33085.cljs$lang$maxFixedArity = 3;
    G__33085.cljs$lang$applyTo = G__33085__4.cljs$lang$applyTo;
    G__33085.cljs$core$IFn$_invoke$arity$0 = G__33085__0;
    G__33085.cljs$core$IFn$_invoke$arity$1 = G__33085__1;
    G__33085.cljs$core$IFn$_invoke$arity$2 = G__33085__2;
    G__33085.cljs$core$IFn$_invoke$arity$3 = G__33085__3;
    G__33085.cljs$core$IFn$_invoke$arity$variadic = G__33085__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__33085;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__33091__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__33091 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__33092__i = 0, G__33092__a = new Array(arguments.length - 0);
        while (G__33092__i < G__33092__a.length) {
          G__33092__a[G__33092__i] = arguments[G__33092__i + 0];
          ++G__33092__i;
        }
        args = new cljs.core.IndexedSeq(G__33092__a, 0);
      }
      return G__33091__delegate.call(this, args);
    };
    G__33091.cljs$lang$maxFixedArity = 0;
    G__33091.cljs$lang$applyTo = function(arglist__33093) {
      var args = cljs.core.seq(arglist__33093);
      return G__33091__delegate(args);
    };
    G__33091.cljs$core$IFn$_invoke$arity$variadic = G__33091__delegate;
    return G__33091;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq33062) {
  var G__33063 = cljs.core.first(seq33062);
  var seq33062__$1 = cljs.core.next(seq33062);
  var G__33064 = cljs.core.first(seq33062__$1);
  var seq33062__$2 = cljs.core.next(seq33062__$1);
  var G__33065 = cljs.core.first(seq33062__$2);
  var seq33062__$3 = cljs.core.next(seq33062__$2);
  var G__33066 = cljs.core.first(seq33062__$3);
  var seq33062__$4 = cljs.core.next(seq33062__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__33063, G__33064, G__33065, G__33066, seq33062__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil(var_args) {
  var args33094 = [];
  var len__30669__auto___33113 = arguments.length;
  var i__30670__auto___33114 = 0;
  while (true) {
    if (i__30670__auto___33114 < len__30669__auto___33113) {
      args33094.push(arguments[i__30670__auto___33114]);
      var G__33115 = i__30670__auto___33114 + 1;
      i__30670__auto___33114 = G__33115;
      continue;
    } else {
    }
    break;
  }
  var G__33096 = args33094.length;
  switch(G__33096) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33094.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__33117 = null;
    var G__33117__1 = function(a) {
      var G__33097 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33097) : f.call(null, G__33097);
    };
    var G__33117__2 = function(a, b) {
      var G__33098 = a == null ? x : a;
      var G__33099 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33098, G__33099) : f.call(null, G__33098, G__33099);
    };
    var G__33117__3 = function(a, b, c) {
      var G__33100 = a == null ? x : a;
      var G__33101 = b;
      var G__33102 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33100, G__33101, G__33102) : f.call(null, G__33100, G__33101, G__33102);
    };
    var G__33117__4 = function() {
      var G__33118__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__33118 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__33119__i = 0, G__33119__a = new Array(arguments.length - 3);
          while (G__33119__i < G__33119__a.length) {
            G__33119__a[G__33119__i] = arguments[G__33119__i + 3];
            ++G__33119__i;
          }
          ds = new cljs.core.IndexedSeq(G__33119__a, 0);
        }
        return G__33118__delegate.call(this, a, b, c, ds);
      };
      G__33118.cljs$lang$maxFixedArity = 3;
      G__33118.cljs$lang$applyTo = function(arglist__33120) {
        var a = cljs.core.first(arglist__33120);
        arglist__33120 = cljs.core.next(arglist__33120);
        var b = cljs.core.first(arglist__33120);
        arglist__33120 = cljs.core.next(arglist__33120);
        var c = cljs.core.first(arglist__33120);
        var ds = cljs.core.rest(arglist__33120);
        return G__33118__delegate(a, b, c, ds);
      };
      G__33118.cljs$core$IFn$_invoke$arity$variadic = G__33118__delegate;
      return G__33118;
    }();
    G__33117 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__33117__1.call(this, a);
        case 2:
          return G__33117__2.call(this, a, b);
        case 3:
          return G__33117__3.call(this, a, b, c);
        default:
          var G__33121 = null;
          if (arguments.length > 3) {
            var G__33122__i = 0, G__33122__a = new Array(arguments.length - 3);
            while (G__33122__i < G__33122__a.length) {
              G__33122__a[G__33122__i] = arguments[G__33122__i + 3];
              ++G__33122__i;
            }
            G__33121 = new cljs.core.IndexedSeq(G__33122__a, 0);
          }
          return G__33117__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__33121);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33117.cljs$lang$maxFixedArity = 3;
    G__33117.cljs$lang$applyTo = G__33117__4.cljs$lang$applyTo;
    G__33117.cljs$core$IFn$_invoke$arity$1 = G__33117__1;
    G__33117.cljs$core$IFn$_invoke$arity$2 = G__33117__2;
    G__33117.cljs$core$IFn$_invoke$arity$3 = G__33117__3;
    G__33117.cljs$core$IFn$_invoke$arity$variadic = G__33117__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__33117;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__33123 = null;
    var G__33123__2 = function(a, b) {
      var G__33103 = a == null ? x : a;
      var G__33104 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33103, G__33104) : f.call(null, G__33103, G__33104);
    };
    var G__33123__3 = function(a, b, c) {
      var G__33105 = a == null ? x : a;
      var G__33106 = b == null ? y : b;
      var G__33107 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33105, G__33106, G__33107) : f.call(null, G__33105, G__33106, G__33107);
    };
    var G__33123__4 = function() {
      var G__33124__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__33124 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__33125__i = 0, G__33125__a = new Array(arguments.length - 3);
          while (G__33125__i < G__33125__a.length) {
            G__33125__a[G__33125__i] = arguments[G__33125__i + 3];
            ++G__33125__i;
          }
          ds = new cljs.core.IndexedSeq(G__33125__a, 0);
        }
        return G__33124__delegate.call(this, a, b, c, ds);
      };
      G__33124.cljs$lang$maxFixedArity = 3;
      G__33124.cljs$lang$applyTo = function(arglist__33126) {
        var a = cljs.core.first(arglist__33126);
        arglist__33126 = cljs.core.next(arglist__33126);
        var b = cljs.core.first(arglist__33126);
        arglist__33126 = cljs.core.next(arglist__33126);
        var c = cljs.core.first(arglist__33126);
        var ds = cljs.core.rest(arglist__33126);
        return G__33124__delegate(a, b, c, ds);
      };
      G__33124.cljs$core$IFn$_invoke$arity$variadic = G__33124__delegate;
      return G__33124;
    }();
    G__33123 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__33123__2.call(this, a, b);
        case 3:
          return G__33123__3.call(this, a, b, c);
        default:
          var G__33127 = null;
          if (arguments.length > 3) {
            var G__33128__i = 0, G__33128__a = new Array(arguments.length - 3);
            while (G__33128__i < G__33128__a.length) {
              G__33128__a[G__33128__i] = arguments[G__33128__i + 3];
              ++G__33128__i;
            }
            G__33127 = new cljs.core.IndexedSeq(G__33128__a, 0);
          }
          return G__33123__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__33127);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33123.cljs$lang$maxFixedArity = 3;
    G__33123.cljs$lang$applyTo = G__33123__4.cljs$lang$applyTo;
    G__33123.cljs$core$IFn$_invoke$arity$2 = G__33123__2;
    G__33123.cljs$core$IFn$_invoke$arity$3 = G__33123__3;
    G__33123.cljs$core$IFn$_invoke$arity$variadic = G__33123__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__33123;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__33129 = null;
    var G__33129__2 = function(a, b) {
      var G__33108 = a == null ? x : a;
      var G__33109 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33108, G__33109) : f.call(null, G__33108, G__33109);
    };
    var G__33129__3 = function(a, b, c) {
      var G__33110 = a == null ? x : a;
      var G__33111 = b == null ? y : b;
      var G__33112 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33110, G__33111, G__33112) : f.call(null, G__33110, G__33111, G__33112);
    };
    var G__33129__4 = function() {
      var G__33130__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__33130 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__33131__i = 0, G__33131__a = new Array(arguments.length - 3);
          while (G__33131__i < G__33131__a.length) {
            G__33131__a[G__33131__i] = arguments[G__33131__i + 3];
            ++G__33131__i;
          }
          ds = new cljs.core.IndexedSeq(G__33131__a, 0);
        }
        return G__33130__delegate.call(this, a, b, c, ds);
      };
      G__33130.cljs$lang$maxFixedArity = 3;
      G__33130.cljs$lang$applyTo = function(arglist__33132) {
        var a = cljs.core.first(arglist__33132);
        arglist__33132 = cljs.core.next(arglist__33132);
        var b = cljs.core.first(arglist__33132);
        arglist__33132 = cljs.core.next(arglist__33132);
        var c = cljs.core.first(arglist__33132);
        var ds = cljs.core.rest(arglist__33132);
        return G__33130__delegate(a, b, c, ds);
      };
      G__33130.cljs$core$IFn$_invoke$arity$variadic = G__33130__delegate;
      return G__33130;
    }();
    G__33129 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__33129__2.call(this, a, b);
        case 3:
          return G__33129__3.call(this, a, b, c);
        default:
          var G__33133 = null;
          if (arguments.length > 3) {
            var G__33134__i = 0, G__33134__a = new Array(arguments.length - 3);
            while (G__33134__i < G__33134__a.length) {
              G__33134__a[G__33134__i] = arguments[G__33134__i + 3];
              ++G__33134__i;
            }
            G__33133 = new cljs.core.IndexedSeq(G__33134__a, 0);
          }
          return G__33129__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__33133);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__33129.cljs$lang$maxFixedArity = 3;
    G__33129.cljs$lang$applyTo = G__33129__4.cljs$lang$applyTo;
    G__33129.cljs$core$IFn$_invoke$arity$2 = G__33129__2;
    G__33129.cljs$core$IFn$_invoke$arity$3 = G__33129__3;
    G__33129.cljs$core$IFn$_invoke$arity$variadic = G__33129__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__33129;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed(var_args) {
  var args33135 = [];
  var len__30669__auto___33168 = arguments.length;
  var i__30670__auto___33169 = 0;
  while (true) {
    if (i__30670__auto___33169 < len__30669__auto___33168) {
      args33135.push(arguments[i__30670__auto___33169]);
      var G__33170 = i__30670__auto___33169 + 1;
      i__30670__auto___33169 = G__33170;
      continue;
    } else {
    }
    break;
  }
  var G__33137 = args33135.length;
  switch(G__33137) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33135.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__33172 = null;
        var G__33172__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__33172__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__33172__2 = function(result, input) {
          var G__33140 = result;
          var G__33141 = function() {
            var G__33142 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__33143 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33142, G__33143) : f.call(null, G__33142, G__33143);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__33140, G__33141) : rf.call(null, G__33140, G__33141);
        };
        G__33172 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__33172__0.call(this);
            case 1:
              return G__33172__1.call(this, result);
            case 2:
              return G__33172__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__33172.cljs$core$IFn$_invoke$arity$0 = G__33172__0;
        G__33172.cljs$core$IFn$_invoke$arity$1 = G__33172__1;
        G__33172.cljs$core$IFn$_invoke$arity$2 = G__33172__2;
        return G__33172;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll__$1);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__30514__auto___33173 = size;
          var i_33174 = 0;
          while (true) {
            if (i_33174 < n__30514__auto___33173) {
              cljs.core.chunk_append(b, function() {
                var G__33164 = idx + i_33174;
                var G__33165 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_33174);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33164, G__33165) : f.call(null, G__33164, G__33165);
              }());
              var G__33175 = i_33174 + 1;
              i_33174 = G__33175;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__33166 = idx;
            var G__33167 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33166, G__33167) : f.call(null, G__33166, G__33167);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep(var_args) {
  var args33176 = [];
  var len__30669__auto___33181 = arguments.length;
  var i__30670__auto___33182 = 0;
  while (true) {
    if (i__30670__auto___33182 < len__30669__auto___33181) {
      args33176.push(arguments[i__30670__auto___33182]);
      var G__33183 = i__30670__auto___33182 + 1;
      i__30670__auto___33182 = G__33183;
      continue;
    } else {
    }
    break;
  }
  var G__33178 = args33176.length;
  switch(G__33178) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33176.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__33185 = null;
      var G__33185__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__33185__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__33185__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__33185 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__33185__0.call(this);
          case 1:
            return G__33185__1.call(this, result);
          case 2:
            return G__33185__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__33185.cljs$core$IFn$_invoke$arity$0 = G__33185__0;
      G__33185.cljs$core$IFn$_invoke$arity$1 = G__33185__1;
      G__33185.cljs$core$IFn$_invoke$arity$2 = G__33185__2;
      return G__33185;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__30514__auto___33186 = size;
        var i_33187 = 0;
        while (true) {
          if (i_33187 < n__30514__auto___33186) {
            var x_33188 = function() {
              var G__33179 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_33187);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33179) : f.call(null, G__33179);
            }();
            if (x_33188 == null) {
            } else {
              cljs.core.chunk_append(b, x_33188);
            }
            var G__33189 = i_33187 + 1;
            i_33187 = G__33189;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__33180 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33180) : f.call(null, G__33180);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__33190 = cljs.core.seq(self__.watches);
  var chunk__33191 = null;
  var count__33192 = 0;
  var i__33193 = 0;
  while (true) {
    if (i__33193 < count__33192) {
      var vec__33194 = chunk__33191.cljs$core$IIndexed$_nth$arity$2(null, i__33193);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33194, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33194, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__33196 = seq__33190;
      var G__33197 = chunk__33191;
      var G__33198 = count__33192;
      var G__33199 = i__33193 + 1;
      seq__33190 = G__33196;
      chunk__33191 = G__33197;
      count__33192 = G__33198;
      i__33193 = G__33199;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__33190);
      if (temp__4657__auto__) {
        var seq__33190__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__33190__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first(seq__33190__$1);
          var G__33200 = cljs.core.chunk_rest(seq__33190__$1);
          var G__33201 = c__30411__auto__;
          var G__33202 = cljs.core.count(c__30411__auto__);
          var G__33203 = 0;
          seq__33190 = G__33200;
          chunk__33191 = G__33201;
          count__33192 = G__33202;
          i__33193 = G__33203;
          continue;
        } else {
          var vec__33195 = cljs.core.first(seq__33190__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33195, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33195, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__33204 = cljs.core.next(seq__33190__$1);
          var G__33205 = null;
          var G__33206 = 0;
          var G__33207 = 0;
          seq__33190 = G__33204;
          chunk__33191 = G__33205;
          count__33192 = G__33206;
          i__33193 = G__33207;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom(var_args) {
  var args33208 = [];
  var len__30669__auto___33216 = arguments.length;
  var i__30670__auto___33217 = 0;
  while (true) {
    if (i__30670__auto___33217 < len__30669__auto___33216) {
      args33208.push(arguments[i__30670__auto___33217]);
      var G__33218 = i__30670__auto___33217 + 1;
      i__30670__auto___33217 = G__33218;
      continue;
    } else {
    }
    break;
  }
  var G__33212 = args33208.length;
  switch(G__33212) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33208.slice(1), 0, null);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30688__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__33213) {
  var map__33214 = p__33213;
  var map__33214__$1 = (!(map__33214 == null) ? map__33214.cljs$lang$protocol_mask$partition0$ & 64 || map__33214.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__33214) : map__33214;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33214__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__33214__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq33209) {
  var G__33210 = cljs.core.first(seq33209);
  var seq33209__$1 = cljs.core.next(seq33209);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__33210, seq33209__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str("(validate new-value)")].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_(var_args) {
  var args33220 = [];
  var len__30669__auto___33234 = arguments.length;
  var i__30670__auto___33235 = 0;
  while (true) {
    if (i__30670__auto___33235 < len__30669__auto___33234) {
      args33220.push(arguments[i__30670__auto___33235]);
      var G__33236 = i__30670__auto___33235 + 1;
      i__30670__auto___33235 = G__33236;
      continue;
    } else {
    }
    break;
  }
  var G__33227 = args33220.length;
  switch(G__33227) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33220.slice(4), 0, null);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__30688__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__33228 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33228) : f.call(null, G__33228);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__33229 = a.state;
      var G__33230 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33229, G__33230) : f.call(null, G__33229, G__33230);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__33231 = a.state;
      var G__33232 = x;
      var G__33233 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33231, G__33232, G__33233) : f.call(null, G__33231, G__33232, G__33233);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq33221) {
  var G__33222 = cljs.core.first(seq33221);
  var seq33221__$1 = cljs.core.next(seq33221);
  var G__33223 = cljs.core.first(seq33221__$1);
  var seq33221__$2 = cljs.core.next(seq33221__$1);
  var G__33224 = cljs.core.first(seq33221__$2);
  var seq33221__$3 = cljs.core.next(seq33221__$2);
  var G__33225 = cljs.core.first(seq33221__$3);
  var seq33221__$4 = cljs.core.next(seq33221__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__33222, G__33223, G__33224, G__33225, seq33221__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed(var_args) {
  var args33238 = [];
  var len__30669__auto___33269 = arguments.length;
  var i__30670__auto___33270 = 0;
  while (true) {
    if (i__30670__auto___33270 < len__30669__auto___33269) {
      args33238.push(arguments[i__30670__auto___33270]);
      var G__33271 = i__30670__auto___33270 + 1;
      i__30670__auto___33270 = G__33271;
      continue;
    } else {
    }
    break;
  }
  var G__33240 = args33238.length;
  switch(G__33240) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33238.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__33273 = null;
        var G__33273__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__33273__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__33273__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__33273 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__33273__0.call(this);
            case 1:
              return G__33273__1.call(this, result);
            case 2:
              return G__33273__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__33273.cljs$core$IFn$_invoke$arity$0 = G__33273__0;
        G__33273.cljs$core$IFn$_invoke$arity$1 = G__33273__1;
        G__33273.cljs$core$IFn$_invoke$arity$2 = G__33273__2;
        return G__33273;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll__$1);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__30514__auto___33274 = size;
          var i_33275 = 0;
          while (true) {
            if (i_33275 < n__30514__auto___33274) {
              var x_33276 = function() {
                var G__33265 = idx + i_33275;
                var G__33266 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_33275);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33265, G__33266) : f.call(null, G__33265, G__33266);
              }();
              if (x_33276 == null) {
              } else {
                cljs.core.chunk_append(b, x_33276);
              }
              var G__33277 = i_33275 + 1;
              i_33275 = G__33277;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__33267 = idx;
            var G__33268 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33267, G__33268) : f.call(null, G__33267, G__33268);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred(var_args) {
  var args33284 = [];
  var len__30669__auto___33291 = arguments.length;
  var i__30670__auto___33292 = 0;
  while (true) {
    if (i__30670__auto___33292 < len__30669__auto___33291) {
      args33284.push(arguments[i__30670__auto___33292]);
      var G__33293 = i__30670__auto___33292 + 1;
      i__30670__auto___33292 = G__33293;
      continue;
    } else {
    }
    break;
  }
  var G__33290 = args33284.length;
  switch(G__33290) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33284.slice(3), 0, null);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__29588__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__29588__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__29588__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__29588__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__29588__auto__)) {
          var and__29588__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__29588__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__29588__auto____$1;
          }
        } else {
          return and__29588__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__33295__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__29588__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__29588__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__29588__auto__;
          }
        }());
      };
      var G__33295 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33296__i = 0, G__33296__a = new Array(arguments.length - 3);
          while (G__33296__i < G__33296__a.length) {
            G__33296__a[G__33296__i] = arguments[G__33296__i + 3];
            ++G__33296__i;
          }
          args = new cljs.core.IndexedSeq(G__33296__a, 0);
        }
        return G__33295__delegate.call(this, x, y, z, args);
      };
      G__33295.cljs$lang$maxFixedArity = 3;
      G__33295.cljs$lang$applyTo = function(arglist__33297) {
        var x = cljs.core.first(arglist__33297);
        arglist__33297 = cljs.core.next(arglist__33297);
        var y = cljs.core.first(arglist__33297);
        arglist__33297 = cljs.core.next(arglist__33297);
        var z = cljs.core.first(arglist__33297);
        var args = cljs.core.rest(arglist__33297);
        return G__33295__delegate(x, y, z, args);
      };
      G__33295.cljs$core$IFn$_invoke$arity$variadic = G__33295__delegate;
      return G__33295;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__33298 = null;
          if (arguments.length > 3) {
            var G__33299__i = 0, G__33299__a = new Array(arguments.length - 3);
            while (G__33299__i < G__33299__a.length) {
              G__33299__a[G__33299__i] = arguments[G__33299__i + 3];
              ++G__33299__i;
            }
            G__33298 = new cljs.core.IndexedSeq(G__33299__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33298);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__29588__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__29588__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__29588__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__29588__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__29588__auto__)) {
          var and__29588__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__29588__auto____$1)) {
            var and__29588__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__29588__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__29588__auto____$2;
            }
          } else {
            return and__29588__auto____$1;
          }
        } else {
          return and__29588__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__29588__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__29588__auto__)) {
          var and__29588__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__29588__auto____$1)) {
            var and__29588__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__29588__auto____$2)) {
              var and__29588__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__29588__auto____$3)) {
                var and__29588__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__29588__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__29588__auto____$4;
                }
              } else {
                return and__29588__auto____$3;
              }
            } else {
              return and__29588__auto____$2;
            }
          } else {
            return and__29588__auto____$1;
          }
        } else {
          return and__29588__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__33300__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__29588__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__29588__auto__)) {
            return cljs.core.every_QMARK_(function(and__29588__auto__) {
              return function(p1__33278_SHARP_) {
                var and__29588__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__33278_SHARP_) : p1.call(null, p1__33278_SHARP_);
                if (cljs.core.truth_(and__29588__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__33278_SHARP_) : p2.call(null, p1__33278_SHARP_);
                } else {
                  return and__29588__auto____$1;
                }
              };
            }(and__29588__auto__), args);
          } else {
            return and__29588__auto__;
          }
        }());
      };
      var G__33300 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33301__i = 0, G__33301__a = new Array(arguments.length - 3);
          while (G__33301__i < G__33301__a.length) {
            G__33301__a[G__33301__i] = arguments[G__33301__i + 3];
            ++G__33301__i;
          }
          args = new cljs.core.IndexedSeq(G__33301__a, 0);
        }
        return G__33300__delegate.call(this, x, y, z, args);
      };
      G__33300.cljs$lang$maxFixedArity = 3;
      G__33300.cljs$lang$applyTo = function(arglist__33302) {
        var x = cljs.core.first(arglist__33302);
        arglist__33302 = cljs.core.next(arglist__33302);
        var y = cljs.core.first(arglist__33302);
        arglist__33302 = cljs.core.next(arglist__33302);
        var z = cljs.core.first(arglist__33302);
        var args = cljs.core.rest(arglist__33302);
        return G__33300__delegate(x, y, z, args);
      };
      G__33300.cljs$core$IFn$_invoke$arity$variadic = G__33300__delegate;
      return G__33300;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__33303 = null;
          if (arguments.length > 3) {
            var G__33304__i = 0, G__33304__a = new Array(arguments.length - 3);
            while (G__33304__i < G__33304__a.length) {
              G__33304__a[G__33304__i] = arguments[G__33304__i + 3];
              ++G__33304__i;
            }
            G__33303 = new cljs.core.IndexedSeq(G__33304__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33303);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__29588__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__29588__auto__)) {
          var and__29588__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__29588__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__29588__auto____$1;
          }
        } else {
          return and__29588__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__29588__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__29588__auto__)) {
          var and__29588__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__29588__auto____$1)) {
            var and__29588__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__29588__auto____$2)) {
              var and__29588__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__29588__auto____$3)) {
                var and__29588__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__29588__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__29588__auto____$4;
                }
              } else {
                return and__29588__auto____$3;
              }
            } else {
              return and__29588__auto____$2;
            }
          } else {
            return and__29588__auto____$1;
          }
        } else {
          return and__29588__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__29588__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__29588__auto__)) {
          var and__29588__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__29588__auto____$1)) {
            var and__29588__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__29588__auto____$2)) {
              var and__29588__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__29588__auto____$3)) {
                var and__29588__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__29588__auto____$4)) {
                  var and__29588__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__29588__auto____$5)) {
                    var and__29588__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__29588__auto____$6)) {
                      var and__29588__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__29588__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__29588__auto____$7;
                      }
                    } else {
                      return and__29588__auto____$6;
                    }
                  } else {
                    return and__29588__auto____$5;
                  }
                } else {
                  return and__29588__auto____$4;
                }
              } else {
                return and__29588__auto____$3;
              }
            } else {
              return and__29588__auto____$2;
            }
          } else {
            return and__29588__auto____$1;
          }
        } else {
          return and__29588__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__33305__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__29588__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__29588__auto__)) {
            return cljs.core.every_QMARK_(function(and__29588__auto__) {
              return function(p1__33279_SHARP_) {
                var and__29588__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__33279_SHARP_) : p1.call(null, p1__33279_SHARP_);
                if (cljs.core.truth_(and__29588__auto____$1)) {
                  var and__29588__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__33279_SHARP_) : p2.call(null, p1__33279_SHARP_);
                  if (cljs.core.truth_(and__29588__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__33279_SHARP_) : p3.call(null, p1__33279_SHARP_);
                  } else {
                    return and__29588__auto____$2;
                  }
                } else {
                  return and__29588__auto____$1;
                }
              };
            }(and__29588__auto__), args);
          } else {
            return and__29588__auto__;
          }
        }());
      };
      var G__33305 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33306__i = 0, G__33306__a = new Array(arguments.length - 3);
          while (G__33306__i < G__33306__a.length) {
            G__33306__a[G__33306__i] = arguments[G__33306__i + 3];
            ++G__33306__i;
          }
          args = new cljs.core.IndexedSeq(G__33306__a, 0);
        }
        return G__33305__delegate.call(this, x, y, z, args);
      };
      G__33305.cljs$lang$maxFixedArity = 3;
      G__33305.cljs$lang$applyTo = function(arglist__33307) {
        var x = cljs.core.first(arglist__33307);
        arglist__33307 = cljs.core.next(arglist__33307);
        var y = cljs.core.first(arglist__33307);
        arglist__33307 = cljs.core.next(arglist__33307);
        var z = cljs.core.first(arglist__33307);
        var args = cljs.core.rest(arglist__33307);
        return G__33305__delegate(x, y, z, args);
      };
      G__33305.cljs$core$IFn$_invoke$arity$variadic = G__33305__delegate;
      return G__33305;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__33308 = null;
          if (arguments.length > 3) {
            var G__33309__i = 0, G__33309__a = new Array(arguments.length - 3);
            while (G__33309__i < G__33309__a.length) {
              G__33309__a[G__33309__i] = arguments[G__33309__i + 3];
              ++G__33309__i;
            }
            G__33308 = new cljs.core.IndexedSeq(G__33309__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33308);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__33280_SHARP_) {
            return p1__33280_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33280_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__33280_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__33281_SHARP_) {
            var and__29588__auto__ = p1__33281_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33281_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__33281_SHARP_.call(null, x);
            if (cljs.core.truth_(and__29588__auto__)) {
              return p1__33281_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33281_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__33281_SHARP_.call(null, y);
            } else {
              return and__29588__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__33282_SHARP_) {
            var and__29588__auto__ = p1__33282_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33282_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__33282_SHARP_.call(null, x);
            if (cljs.core.truth_(and__29588__auto__)) {
              var and__29588__auto____$1 = p1__33282_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33282_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__33282_SHARP_.call(null, y);
              if (cljs.core.truth_(and__29588__auto____$1)) {
                return p1__33282_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33282_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__33282_SHARP_.call(null, z);
              } else {
                return and__29588__auto____$1;
              }
            } else {
              return and__29588__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__33310__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__29588__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__29588__auto__)) {
              return cljs.core.every_QMARK_(function(and__29588__auto__, ps__$1) {
                return function(p1__33283_SHARP_) {
                  return cljs.core.every_QMARK_(p1__33283_SHARP_, args);
                };
              }(and__29588__auto__, ps__$1), ps__$1);
            } else {
              return and__29588__auto__;
            }
          }());
        };
        var G__33310 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__33311__i = 0, G__33311__a = new Array(arguments.length - 3);
            while (G__33311__i < G__33311__a.length) {
              G__33311__a[G__33311__i] = arguments[G__33311__i + 3];
              ++G__33311__i;
            }
            args = new cljs.core.IndexedSeq(G__33311__a, 0);
          }
          return G__33310__delegate.call(this, x, y, z, args);
        };
        G__33310.cljs$lang$maxFixedArity = 3;
        G__33310.cljs$lang$applyTo = function(arglist__33312) {
          var x = cljs.core.first(arglist__33312);
          arglist__33312 = cljs.core.next(arglist__33312);
          var y = cljs.core.first(arglist__33312);
          arglist__33312 = cljs.core.next(arglist__33312);
          var z = cljs.core.first(arglist__33312);
          var args = cljs.core.rest(arglist__33312);
          return G__33310__delegate(x, y, z, args);
        };
        G__33310.cljs$core$IFn$_invoke$arity$variadic = G__33310__delegate;
        return G__33310;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__33313 = null;
            if (arguments.length > 3) {
              var G__33314__i = 0, G__33314__a = new Array(arguments.length - 3);
              while (G__33314__i < G__33314__a.length) {
                G__33314__a[G__33314__i] = arguments[G__33314__i + 3];
                ++G__33314__i;
              }
              G__33313 = new cljs.core.IndexedSeq(G__33314__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33313);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq33285) {
  var G__33286 = cljs.core.first(seq33285);
  var seq33285__$1 = cljs.core.next(seq33285);
  var G__33287 = cljs.core.first(seq33285__$1);
  var seq33285__$2 = cljs.core.next(seq33285__$1);
  var G__33288 = cljs.core.first(seq33285__$2);
  var seq33285__$3 = cljs.core.next(seq33285__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__33286, G__33287, G__33288, seq33285__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn(var_args) {
  var args33321 = [];
  var len__30669__auto___33328 = arguments.length;
  var i__30670__auto___33329 = 0;
  while (true) {
    if (i__30670__auto___33329 < len__30669__auto___33328) {
      args33321.push(arguments[i__30670__auto___33329]);
      var G__33330 = i__30670__auto___33329 + 1;
      i__30670__auto___33329 = G__33330;
      continue;
    } else {
    }
    break;
  }
  var G__33327 = args33321.length;
  switch(G__33327) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33321.slice(3), 0, null);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__29600__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__29600__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var or__29600__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__29600__auto____$1)) {
          return or__29600__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__33332__delegate = function(x, y, z, args) {
        var or__29600__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__33332 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33333__i = 0, G__33333__a = new Array(arguments.length - 3);
          while (G__33333__i < G__33333__a.length) {
            G__33333__a[G__33333__i] = arguments[G__33333__i + 3];
            ++G__33333__i;
          }
          args = new cljs.core.IndexedSeq(G__33333__a, 0);
        }
        return G__33332__delegate.call(this, x, y, z, args);
      };
      G__33332.cljs$lang$maxFixedArity = 3;
      G__33332.cljs$lang$applyTo = function(arglist__33334) {
        var x = cljs.core.first(arglist__33334);
        arglist__33334 = cljs.core.next(arglist__33334);
        var y = cljs.core.first(arglist__33334);
        arglist__33334 = cljs.core.next(arglist__33334);
        var z = cljs.core.first(arglist__33334);
        var args = cljs.core.rest(arglist__33334);
        return G__33332__delegate(x, y, z, args);
      };
      G__33332.cljs$core$IFn$_invoke$arity$variadic = G__33332__delegate;
      return G__33332;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__33335 = null;
          if (arguments.length > 3) {
            var G__33336__i = 0, G__33336__a = new Array(arguments.length - 3);
            while (G__33336__i < G__33336__a.length) {
              G__33336__a[G__33336__i] = arguments[G__33336__i + 3];
              ++G__33336__i;
            }
            G__33335 = new cljs.core.IndexedSeq(G__33336__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33335);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__29600__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__29600__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var or__29600__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__29600__auto____$1)) {
          return or__29600__auto____$1;
        } else {
          var or__29600__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__29600__auto____$2)) {
            return or__29600__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__29600__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var or__29600__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__29600__auto____$1)) {
          return or__29600__auto____$1;
        } else {
          var or__29600__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__29600__auto____$2)) {
            return or__29600__auto____$2;
          } else {
            var or__29600__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__29600__auto____$3)) {
              return or__29600__auto____$3;
            } else {
              var or__29600__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__29600__auto____$4)) {
                return or__29600__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__33337__delegate = function(x, y, z, args) {
        var or__29600__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.some(function(or__29600__auto__) {
            return function(p1__33315_SHARP_) {
              var or__29600__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__33315_SHARP_) : p1.call(null, p1__33315_SHARP_);
              if (cljs.core.truth_(or__29600__auto____$1)) {
                return or__29600__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__33315_SHARP_) : p2.call(null, p1__33315_SHARP_);
              }
            };
          }(or__29600__auto__), args);
        }
      };
      var G__33337 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33338__i = 0, G__33338__a = new Array(arguments.length - 3);
          while (G__33338__i < G__33338__a.length) {
            G__33338__a[G__33338__i] = arguments[G__33338__i + 3];
            ++G__33338__i;
          }
          args = new cljs.core.IndexedSeq(G__33338__a, 0);
        }
        return G__33337__delegate.call(this, x, y, z, args);
      };
      G__33337.cljs$lang$maxFixedArity = 3;
      G__33337.cljs$lang$applyTo = function(arglist__33339) {
        var x = cljs.core.first(arglist__33339);
        arglist__33339 = cljs.core.next(arglist__33339);
        var y = cljs.core.first(arglist__33339);
        arglist__33339 = cljs.core.next(arglist__33339);
        var z = cljs.core.first(arglist__33339);
        var args = cljs.core.rest(arglist__33339);
        return G__33337__delegate(x, y, z, args);
      };
      G__33337.cljs$core$IFn$_invoke$arity$variadic = G__33337__delegate;
      return G__33337;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__33340 = null;
          if (arguments.length > 3) {
            var G__33341__i = 0, G__33341__a = new Array(arguments.length - 3);
            while (G__33341__i < G__33341__a.length) {
              G__33341__a[G__33341__i] = arguments[G__33341__i + 3];
              ++G__33341__i;
            }
            G__33340 = new cljs.core.IndexedSeq(G__33341__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33340);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__29600__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var or__29600__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__29600__auto____$1)) {
          return or__29600__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__29600__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var or__29600__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__29600__auto____$1)) {
          return or__29600__auto____$1;
        } else {
          var or__29600__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__29600__auto____$2)) {
            return or__29600__auto____$2;
          } else {
            var or__29600__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__29600__auto____$3)) {
              return or__29600__auto____$3;
            } else {
              var or__29600__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__29600__auto____$4)) {
                return or__29600__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__29600__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var or__29600__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__29600__auto____$1)) {
          return or__29600__auto____$1;
        } else {
          var or__29600__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__29600__auto____$2)) {
            return or__29600__auto____$2;
          } else {
            var or__29600__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__29600__auto____$3)) {
              return or__29600__auto____$3;
            } else {
              var or__29600__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__29600__auto____$4)) {
                return or__29600__auto____$4;
              } else {
                var or__29600__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__29600__auto____$5)) {
                  return or__29600__auto____$5;
                } else {
                  var or__29600__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__29600__auto____$6)) {
                    return or__29600__auto____$6;
                  } else {
                    var or__29600__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__29600__auto____$7)) {
                      return or__29600__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__33342__delegate = function(x, y, z, args) {
        var or__29600__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.some(function(or__29600__auto__) {
            return function(p1__33316_SHARP_) {
              var or__29600__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__33316_SHARP_) : p1.call(null, p1__33316_SHARP_);
              if (cljs.core.truth_(or__29600__auto____$1)) {
                return or__29600__auto____$1;
              } else {
                var or__29600__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__33316_SHARP_) : p2.call(null, p1__33316_SHARP_);
                if (cljs.core.truth_(or__29600__auto____$2)) {
                  return or__29600__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__33316_SHARP_) : p3.call(null, p1__33316_SHARP_);
                }
              }
            };
          }(or__29600__auto__), args);
        }
      };
      var G__33342 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__33343__i = 0, G__33343__a = new Array(arguments.length - 3);
          while (G__33343__i < G__33343__a.length) {
            G__33343__a[G__33343__i] = arguments[G__33343__i + 3];
            ++G__33343__i;
          }
          args = new cljs.core.IndexedSeq(G__33343__a, 0);
        }
        return G__33342__delegate.call(this, x, y, z, args);
      };
      G__33342.cljs$lang$maxFixedArity = 3;
      G__33342.cljs$lang$applyTo = function(arglist__33344) {
        var x = cljs.core.first(arglist__33344);
        arglist__33344 = cljs.core.next(arglist__33344);
        var y = cljs.core.first(arglist__33344);
        arglist__33344 = cljs.core.next(arglist__33344);
        var z = cljs.core.first(arglist__33344);
        var args = cljs.core.rest(arglist__33344);
        return G__33342__delegate(x, y, z, args);
      };
      G__33342.cljs$core$IFn$_invoke$arity$variadic = G__33342__delegate;
      return G__33342;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__33345 = null;
          if (arguments.length > 3) {
            var G__33346__i = 0, G__33346__a = new Array(arguments.length - 3);
            while (G__33346__i < G__33346__a.length) {
              G__33346__a[G__33346__i] = arguments[G__33346__i + 3];
              ++G__33346__i;
            }
            G__33345 = new cljs.core.IndexedSeq(G__33346__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33345);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__33317_SHARP_) {
            return p1__33317_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33317_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__33317_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__33318_SHARP_) {
            var or__29600__auto__ = p1__33318_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33318_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__33318_SHARP_.call(null, x);
            if (cljs.core.truth_(or__29600__auto__)) {
              return or__29600__auto__;
            } else {
              return p1__33318_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33318_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__33318_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__33319_SHARP_) {
            var or__29600__auto__ = p1__33319_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33319_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__33319_SHARP_.call(null, x);
            if (cljs.core.truth_(or__29600__auto__)) {
              return or__29600__auto__;
            } else {
              var or__29600__auto____$1 = p1__33319_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33319_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__33319_SHARP_.call(null, y);
              if (cljs.core.truth_(or__29600__auto____$1)) {
                return or__29600__auto____$1;
              } else {
                return p1__33319_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__33319_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__33319_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__33347__delegate = function(x, y, z, args) {
          var or__29600__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__29600__auto__)) {
            return or__29600__auto__;
          } else {
            return cljs.core.some(function(or__29600__auto__, ps__$1) {
              return function(p1__33320_SHARP_) {
                return cljs.core.some(p1__33320_SHARP_, args);
              };
            }(or__29600__auto__, ps__$1), ps__$1);
          }
        };
        var G__33347 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__33348__i = 0, G__33348__a = new Array(arguments.length - 3);
            while (G__33348__i < G__33348__a.length) {
              G__33348__a[G__33348__i] = arguments[G__33348__i + 3];
              ++G__33348__i;
            }
            args = new cljs.core.IndexedSeq(G__33348__a, 0);
          }
          return G__33347__delegate.call(this, x, y, z, args);
        };
        G__33347.cljs$lang$maxFixedArity = 3;
        G__33347.cljs$lang$applyTo = function(arglist__33349) {
          var x = cljs.core.first(arglist__33349);
          arglist__33349 = cljs.core.next(arglist__33349);
          var y = cljs.core.first(arglist__33349);
          arglist__33349 = cljs.core.next(arglist__33349);
          var z = cljs.core.first(arglist__33349);
          var args = cljs.core.rest(arglist__33349);
          return G__33347__delegate(x, y, z, args);
        };
        G__33347.cljs$core$IFn$_invoke$arity$variadic = G__33347__delegate;
        return G__33347;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__33350 = null;
            if (arguments.length > 3) {
              var G__33351__i = 0, G__33351__a = new Array(arguments.length - 3);
              while (G__33351__i < G__33351__a.length) {
                G__33351__a[G__33351__i] = arguments[G__33351__i + 3];
                ++G__33351__i;
              }
              G__33350 = new cljs.core.IndexedSeq(G__33351__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__33350);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq33322) {
  var G__33323 = cljs.core.first(seq33322);
  var seq33322__$1 = cljs.core.next(seq33322);
  var G__33324 = cljs.core.first(seq33322__$1);
  var seq33322__$2 = cljs.core.next(seq33322__$1);
  var G__33325 = cljs.core.first(seq33322__$2);
  var seq33322__$3 = cljs.core.next(seq33322__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__33323, G__33324, G__33325, seq33322__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map(var_args) {
  var args33353 = [];
  var len__30669__auto___33373 = arguments.length;
  var i__30670__auto___33374 = 0;
  while (true) {
    if (i__30670__auto___33374 < len__30669__auto___33373) {
      args33353.push(arguments[i__30670__auto___33374]);
      var G__33375 = i__30670__auto___33374 + 1;
      i__30670__auto___33374 = G__33375;
      continue;
    } else {
    }
    break;
  }
  var G__33360 = args33353.length;
  switch(G__33360) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33353.slice(4), 0, null);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__30688__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__33377 = null;
      var G__33377__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__33377__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__33377__2 = function(result, input) {
        var G__33361 = result;
        var G__33362 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__33361, G__33362) : rf.call(null, G__33361, G__33362);
      };
      var G__33377__3 = function() {
        var G__33378__delegate = function(result, input, inputs) {
          var G__33363 = result;
          var G__33364 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__33363, G__33364) : rf.call(null, G__33363, G__33364);
        };
        var G__33378 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__33379__i = 0, G__33379__a = new Array(arguments.length - 2);
            while (G__33379__i < G__33379__a.length) {
              G__33379__a[G__33379__i] = arguments[G__33379__i + 2];
              ++G__33379__i;
            }
            inputs = new cljs.core.IndexedSeq(G__33379__a, 0);
          }
          return G__33378__delegate.call(this, result, input, inputs);
        };
        G__33378.cljs$lang$maxFixedArity = 2;
        G__33378.cljs$lang$applyTo = function(arglist__33380) {
          var result = cljs.core.first(arglist__33380);
          arglist__33380 = cljs.core.next(arglist__33380);
          var input = cljs.core.first(arglist__33380);
          var inputs = cljs.core.rest(arglist__33380);
          return G__33378__delegate(result, input, inputs);
        };
        G__33378.cljs$core$IFn$_invoke$arity$variadic = G__33378__delegate;
        return G__33378;
      }();
      G__33377 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__33377__0.call(this);
          case 1:
            return G__33377__1.call(this, result);
          case 2:
            return G__33377__2.call(this, result, input);
          default:
            var G__33381 = null;
            if (arguments.length > 2) {
              var G__33382__i = 0, G__33382__a = new Array(arguments.length - 2);
              while (G__33382__i < G__33382__a.length) {
                G__33382__a[G__33382__i] = arguments[G__33382__i + 2];
                ++G__33382__i;
              }
              G__33381 = new cljs.core.IndexedSeq(G__33382__a, 0);
            }
            return G__33377__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__33381);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__33377.cljs$lang$maxFixedArity = 2;
      G__33377.cljs$lang$applyTo = G__33377__3.cljs$lang$applyTo;
      G__33377.cljs$core$IFn$_invoke$arity$0 = G__33377__0;
      G__33377.cljs$core$IFn$_invoke$arity$1 = G__33377__1;
      G__33377.cljs$core$IFn$_invoke$arity$2 = G__33377__2;
      G__33377.cljs$core$IFn$_invoke$arity$variadic = G__33377__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__33377;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__30514__auto___33383 = size;
        var i_33384 = 0;
        while (true) {
          if (i_33384 < n__30514__auto___33383) {
            cljs.core.chunk_append(b, function() {
              var G__33365 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_33384);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33365) : f.call(null, G__33365);
            }());
            var G__33385 = i_33384 + 1;
            i_33384 = G__33385;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__33366 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33366) : f.call(null, G__33366);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__33367 = cljs.core.first(s1);
        var G__33368 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33367, G__33368) : f.call(null, G__33367, G__33368);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__33369 = cljs.core.first(s1);
        var G__33370 = cljs.core.first(s2);
        var G__33371 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33369, G__33370, G__33371) : f.call(null, G__33369, G__33370, G__33371);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__33352_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__33352_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq33354) {
  var G__33355 = cljs.core.first(seq33354);
  var seq33354__$1 = cljs.core.next(seq33354);
  var G__33356 = cljs.core.first(seq33354__$1);
  var seq33354__$2 = cljs.core.next(seq33354__$1);
  var G__33357 = cljs.core.first(seq33354__$2);
  var seq33354__$3 = cljs.core.next(seq33354__$2);
  var G__33358 = cljs.core.first(seq33354__$3);
  var seq33354__$4 = cljs.core.next(seq33354__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__33355, G__33356, G__33357, G__33358, seq33354__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take(var_args) {
  var args33386 = [];
  var len__30669__auto___33389 = arguments.length;
  var i__30670__auto___33390 = 0;
  while (true) {
    if (i__30670__auto___33390 < len__30669__auto___33389) {
      args33386.push(arguments[i__30670__auto___33390]);
      var G__33391 = i__30670__auto___33390 + 1;
      i__30670__auto___33390 = G__33391;
      continue;
    } else {
    }
    break;
  }
  var G__33388 = args33386.length;
  switch(G__33388) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33386.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__33393 = null;
        var G__33393__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__33393__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__33393__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__33393 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__33393__0.call(this);
            case 1:
              return G__33393__1.call(this, result);
            case 2:
              return G__33393__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__33393.cljs$core$IFn$_invoke$arity$0 = G__33393__0;
        G__33393.cljs$core$IFn$_invoke$arity$1 = G__33393__1;
        G__33393.cljs$core$IFn$_invoke$arity$2 = G__33393__2;
        return G__33393;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4657__auto__ = cljs.core.seq(coll);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop(var_args) {
  var args33394 = [];
  var len__30669__auto___33397 = arguments.length;
  var i__30670__auto___33398 = 0;
  while (true) {
    if (i__30670__auto___33398 < len__30669__auto___33397) {
      args33394.push(arguments[i__30670__auto___33398]);
      var G__33399 = i__30670__auto___33398 + 1;
      i__30670__auto___33398 = G__33399;
      continue;
    } else {
    }
    break;
  }
  var G__33396 = args33394.length;
  switch(G__33396) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33394.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__33401 = null;
        var G__33401__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__33401__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__33401__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__33401 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__33401__0.call(this);
            case 1:
              return G__33401__1.call(this, result);
            case 2:
              return G__33401__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__33401.cljs$core$IFn$_invoke$arity$0 = G__33401__0;
        G__33401.cljs$core$IFn$_invoke$arity$1 = G__33401__1;
        G__33401.cljs$core$IFn$_invoke$arity$2 = G__33401__2;
        return G__33401;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__33402 = n__$1 - 1;
        var G__33403 = cljs.core.rest(s);
        n__$1 = G__33402;
        coll__$1 = G__33403;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last(var_args) {
  var args33404 = [];
  var len__30669__auto___33407 = arguments.length;
  var i__30670__auto___33408 = 0;
  while (true) {
    if (i__30670__auto___33408 < len__30669__auto___33407) {
      args33404.push(arguments[i__30670__auto___33408]);
      var G__33409 = i__30670__auto___33408 + 1;
      i__30670__auto___33408 = G__33409;
      continue;
    } else {
    }
    break;
  }
  var G__33406 = args33404.length;
  switch(G__33406) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33404.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__33411 = cljs.core.next(s);
      var G__33412 = cljs.core.next(lead);
      s = G__33411;
      lead = G__33412;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while(var_args) {
  var args33413 = [];
  var len__30669__auto___33418 = arguments.length;
  var i__30670__auto___33419 = 0;
  while (true) {
    if (i__30670__auto___33419 < len__30669__auto___33418) {
      args33413.push(arguments[i__30670__auto___33419]);
      var G__33420 = i__30670__auto___33419 + 1;
      i__30670__auto___33419 = G__33420;
      continue;
    } else {
    }
    break;
  }
  var G__33415 = args33413.length;
  switch(G__33415) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33413.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__33422 = null;
        var G__33422__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__33422__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__33422__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__29588__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__29588__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__29588__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__33422 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__33422__0.call(this);
            case 1:
              return G__33422__1.call(this, result);
            case 2:
              return G__33422__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__33422.cljs$core$IFn$_invoke$arity$0 = G__33422__0;
        G__33422.cljs$core$IFn$_invoke$arity$1 = G__33422__1;
        G__33422.cljs$core$IFn$_invoke$arity$2 = G__33422__2;
        return G__33422;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__29588__auto__ = s;
        if (and__29588__auto__) {
          var G__33417 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__33417) : pred__$1.call(null, G__33417);
        } else {
          return and__29588__auto__;
        }
      }())) {
        var G__33423 = pred__$1;
        var G__33424 = cljs.core.rest(s);
        pred__$1 = G__33423;
        coll__$1 = G__33424;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat(var_args) {
  var args33425 = [];
  var len__30669__auto___33428 = arguments.length;
  var i__30670__auto___33429 = 0;
  while (true) {
    if (i__30670__auto___33429 < len__30669__auto___33428) {
      args33425.push(arguments[i__30670__auto___33429]);
      var G__33430 = i__30670__auto___33429 + 1;
      i__30670__auto___33429 = G__33430;
      continue;
    } else {
    }
    break;
  }
  var G__33427 = args33425.length;
  switch(G__33427) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33425.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly(var_args) {
  var args33432 = [];
  var len__30669__auto___33435 = arguments.length;
  var i__30670__auto___33436 = 0;
  while (true) {
    if (i__30670__auto___33436 < len__30669__auto___33435) {
      args33432.push(arguments[i__30670__auto___33436]);
      var G__33437 = i__30670__auto___33436 + 1;
      i__30670__auto___33436 = G__33437;
      continue;
    } else {
    }
    break;
  }
  var G__33434 = args33432.length;
  switch(G__33434) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33432.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave(var_args) {
  var args33441 = [];
  var len__30669__auto___33447 = arguments.length;
  var i__30670__auto___33448 = 0;
  while (true) {
    if (i__30670__auto___33448 < len__30669__auto___33447) {
      args33441.push(arguments[i__30670__auto___33448]);
      var G__33449 = i__30670__auto___33448 + 1;
      i__30670__auto___33448 = G__33449;
      continue;
    } else {
    }
    break;
  }
  var G__33446 = args33441.length;
  switch(G__33446) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33441.slice(2), 0, null);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq33442) {
  var G__33443 = cljs.core.first(seq33442);
  var seq33442__$1 = cljs.core.next(seq33442);
  var G__33444 = cljs.core.first(seq33442__$1);
  var seq33442__$2 = cljs.core.next(seq33442__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__33443, G__33444, seq33442__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose(var_args) {
  var args33451 = [];
  var len__30669__auto___33454 = arguments.length;
  var i__30670__auto___33455 = 0;
  while (true) {
    if (i__30670__auto___33455 < len__30669__auto___33454) {
      args33451.push(arguments[i__30670__auto___33455]);
      var G__33456 = i__30670__auto___33455 + 1;
      i__30670__auto___33455 = G__33456;
      continue;
    } else {
    }
    break;
  }
  var G__33453 = args33451.length;
  switch(G__33453) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33451.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__33458 = null;
        var G__33458__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__33458__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__33458__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__33458 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__33458__0.call(this);
            case 1:
              return G__33458__1.call(this, result);
            case 2:
              return G__33458__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__33458.cljs$core$IFn$_invoke$arity$0 = G__33458__0;
        G__33458.cljs$core$IFn$_invoke$arity$1 = G__33458__1;
        G__33458.cljs$core$IFn$_invoke$arity$2 = G__33458__2;
        return G__33458;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4655__auto__ = cljs.core.seq(coll);
      if (temp__4655__auto__) {
        var coll__$1 = temp__4655__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat(var_args) {
  var args33467 = [];
  var len__30669__auto___33472 = arguments.length;
  var i__30670__auto___33473 = 0;
  while (true) {
    if (i__30670__auto___33473 < len__30669__auto___33472) {
      args33467.push(arguments[i__30670__auto___33473]);
      var G__33474 = i__30670__auto___33473 + 1;
      i__30670__auto___33473 = G__33474;
      continue;
    } else {
    }
    break;
  }
  var G__33471 = args33467.length;
  switch(G__33471) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33467.slice(1), 0, null);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30688__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq33468) {
  var G__33469 = cljs.core.first(seq33468);
  var seq33468__$1 = cljs.core.next(seq33468);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__33469, seq33468__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter(var_args) {
  var args33476 = [];
  var len__30669__auto___33480 = arguments.length;
  var i__30670__auto___33481 = 0;
  while (true) {
    if (i__30670__auto___33481 < len__30669__auto___33480) {
      args33476.push(arguments[i__30670__auto___33481]);
      var G__33482 = i__30670__auto___33481 + 1;
      i__30670__auto___33481 = G__33482;
      continue;
    } else {
    }
    break;
  }
  var G__33478 = args33476.length;
  switch(G__33478) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33476.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__33484 = null;
      var G__33484__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__33484__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__33484__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__33484 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__33484__0.call(this);
          case 1:
            return G__33484__1.call(this, result);
          case 2:
            return G__33484__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__33484.cljs$core$IFn$_invoke$arity$0 = G__33484__0;
      G__33484.cljs$core$IFn$_invoke$arity$1 = G__33484__1;
      G__33484.cljs$core$IFn$_invoke$arity$2 = G__33484__2;
      return G__33484;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__30514__auto___33485 = size;
        var i_33486 = 0;
        while (true) {
          if (i_33486 < n__30514__auto___33485) {
            if (cljs.core.truth_(function() {
              var G__33479 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_33486);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__33479) : pred.call(null, G__33479);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_33486));
            } else {
            }
            var G__33487 = i_33486 + 1;
            i_33486 = G__33487;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove(var_args) {
  var args33488 = [];
  var len__30669__auto___33491 = arguments.length;
  var i__30670__auto___33492 = 0;
  while (true) {
    if (i__30670__auto___33492 < len__30669__auto___33491) {
      args33488.push(arguments[i__30670__auto___33492]);
      var G__33493 = i__30670__auto___33492 + 1;
      i__30670__auto___33492 = G__33493;
      continue;
    } else {
    }
    break;
  }
  var G__33490 = args33488.length;
  switch(G__33490) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33488.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__33495_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__33495_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into(var_args) {
  var args33496 = [];
  var len__30669__auto___33501 = arguments.length;
  var i__30670__auto___33502 = 0;
  while (true) {
    if (i__30670__auto___33502 < len__30669__auto___33501) {
      args33496.push(arguments[i__30670__auto___33502]);
      var G__33503 = i__30670__auto___33502 + 1;
      i__30670__auto___33502 = G__33503;
      continue;
    } else {
    }
    break;
  }
  var G__33498 = args33496.length;
  switch(G__33498) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33496.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv(var_args) {
  var args33505 = [];
  var len__30669__auto___33513 = arguments.length;
  var i__30670__auto___33514 = 0;
  while (true) {
    if (i__30670__auto___33514 < len__30669__auto___33513) {
      args33505.push(arguments[i__30670__auto___33514]);
      var G__33515 = i__30670__auto___33514 + 1;
      i__30670__auto___33514 = G__33515;
      continue;
    } else {
    }
    break;
  }
  var G__33512 = args33505.length;
  switch(G__33512) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33505.slice(4), 0, null);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__30688__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq33506) {
  var G__33507 = cljs.core.first(seq33506);
  var seq33506__$1 = cljs.core.next(seq33506);
  var G__33508 = cljs.core.first(seq33506__$1);
  var seq33506__$2 = cljs.core.next(seq33506__$1);
  var G__33509 = cljs.core.first(seq33506__$2);
  var seq33506__$3 = cljs.core.next(seq33506__$2);
  var G__33510 = cljs.core.first(seq33506__$3);
  var seq33506__$4 = cljs.core.next(seq33506__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__33507, G__33508, G__33509, G__33510, seq33506__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition(var_args) {
  var args33517 = [];
  var len__30669__auto___33520 = arguments.length;
  var i__30670__auto___33521 = 0;
  while (true) {
    if (i__30670__auto___33521 < len__30669__auto___33520) {
      args33517.push(arguments[i__30670__auto___33521]);
      var G__33522 = i__30670__auto___33521 + 1;
      i__30670__auto___33521 = G__33522;
      continue;
    } else {
    }
    break;
  }
  var G__33519 = args33517.length;
  switch(G__33519) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33517.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in(var_args) {
  var args33524 = [];
  var len__30669__auto___33528 = arguments.length;
  var i__30670__auto___33529 = 0;
  while (true) {
    if (i__30670__auto___33529 < len__30669__auto___33528) {
      args33524.push(arguments[i__30670__auto___33529]);
      var G__33530 = i__30670__auto___33529 + 1;
      i__30670__auto___33529 = G__33530;
      continue;
    } else {
    }
    break;
  }
  var G__33526 = args33524.length;
  switch(G__33526) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33524.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.get, m, ks);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!(!(m__$1 == null) ? m__$1.cljs$lang$protocol_mask$partition0$ & 256 || m__$1.cljs$core$ILookup$ ? true : !m__$1.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1))) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__33532 = sentinel;
          var G__33533 = m__$2;
          var G__33534 = cljs.core.next(ks__$1);
          sentinel = G__33532;
          m__$1 = G__33533;
          ks__$1 = G__33534;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__33535, v) {
  var vec__33540 = p__33535;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33540, 0, null);
  var ks = cljs.core.nthnext(vec__33540, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in(var_args) {
  var args33541 = [];
  var len__30669__auto___33571 = arguments.length;
  var i__30670__auto___33572 = 0;
  while (true) {
    if (i__30670__auto___33572 < len__30669__auto___33571) {
      args33541.push(arguments[i__30670__auto___33572]);
      var G__33573 = i__30670__auto___33572 + 1;
      i__30670__auto___33572 = G__33573;
      continue;
    } else {
    }
    break;
  }
  var G__33550 = args33541.length;
  switch(G__33550) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33541.slice(6), 0, null);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__30688__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__33551, f) {
  var vec__33552 = p__33551;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33552, 0, null);
  var ks = cljs.core.nthnext(vec__33552, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__33553 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33553) : f.call(null, G__33553);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__33554, f, a) {
  var vec__33555 = p__33554;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33555, 0, null);
  var ks = cljs.core.nthnext(vec__33555, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__33556 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__33557 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33556, G__33557) : f.call(null, G__33556, G__33557);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__33558, f, a, b) {
  var vec__33559 = p__33558;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33559, 0, null);
  var ks = cljs.core.nthnext(vec__33559, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__33560 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__33561 = a;
      var G__33562 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33560, G__33561, G__33562) : f.call(null, G__33560, G__33561, G__33562);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__33563, f, a, b, c) {
  var vec__33564 = p__33563;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33564, 0, null);
  var ks = cljs.core.nthnext(vec__33564, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__33565 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__33566 = a;
      var G__33567 = b;
      var G__33568 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__33565, G__33566, G__33567, G__33568) : f.call(null, G__33565, G__33566, G__33567, G__33568);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__33569, f, a, b, c, args) {
  var vec__33570 = p__33569;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33570, 0, null);
  var ks = cljs.core.nthnext(vec__33570, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq33542) {
  var G__33543 = cljs.core.first(seq33542);
  var seq33542__$1 = cljs.core.next(seq33542);
  var G__33544 = cljs.core.first(seq33542__$1);
  var seq33542__$2 = cljs.core.next(seq33542__$1);
  var G__33545 = cljs.core.first(seq33542__$2);
  var seq33542__$3 = cljs.core.next(seq33542__$2);
  var G__33546 = cljs.core.first(seq33542__$3);
  var seq33542__$4 = cljs.core.next(seq33542__$3);
  var G__33547 = cljs.core.first(seq33542__$4);
  var seq33542__$5 = cljs.core.next(seq33542__$4);
  var G__33548 = cljs.core.first(seq33542__$5);
  var seq33542__$6 = cljs.core.next(seq33542__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__33543, G__33544, G__33545, G__33546, G__33547, G__33548, seq33542__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update(var_args) {
  var args33575 = [];
  var len__30669__auto___33595 = arguments.length;
  var i__30670__auto___33596 = 0;
  while (true) {
    if (i__30670__auto___33596 < len__30669__auto___33595) {
      args33575.push(arguments[i__30670__auto___33596]);
      var G__33597 = i__30670__auto___33596 + 1;
      i__30670__auto___33596 = G__33597;
      continue;
    } else {
    }
    break;
  }
  var G__33584 = args33575.length;
  switch(G__33584) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args33575.slice(6), 0, null);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__30688__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__33585 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__33585) : f.call(null, G__33585);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__33586 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__33587 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33586, G__33587) : f.call(null, G__33586, G__33587);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__33588 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__33589 = x;
    var G__33590 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33588, G__33589, G__33590) : f.call(null, G__33588, G__33589, G__33590);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__33591 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__33592 = x;
    var G__33593 = y;
    var G__33594 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__33591, G__33592, G__33593, G__33594) : f.call(null, G__33591, G__33592, G__33593, G__33594);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq33576) {
  var G__33577 = cljs.core.first(seq33576);
  var seq33576__$1 = cljs.core.next(seq33576);
  var G__33578 = cljs.core.first(seq33576__$1);
  var seq33576__$2 = cljs.core.next(seq33576__$1);
  var G__33579 = cljs.core.first(seq33576__$2);
  var seq33576__$3 = cljs.core.next(seq33576__$2);
  var G__33580 = cljs.core.first(seq33576__$3);
  var seq33576__$4 = cljs.core.next(seq33576__$3);
  var G__33581 = cljs.core.first(seq33576__$4);
  var seq33576__$5 = cljs.core.next(seq33576__$4);
  var G__33582 = cljs.core.first(seq33576__$5);
  var seq33576__$6 = cljs.core.next(seq33576__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__33577, G__33578, G__33579, G__33580, G__33581, G__33582, seq33576__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__33599 = ll - 5;
      var G__33600 = r;
      ll = G__33599;
      ret = G__33600;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__33605 = cljs.core.pv_aget(node, 0);
      var G__33606 = level - 5;
      node = G__33605;
      level = G__33606;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__33607 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__33608 = level - 5;
        node = G__33607;
        level = G__33608;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.indexOf = function() {
  var G__33627 = null;
  var G__33627__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33627__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33627 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33627__1.call(this, x);
      case 2:
        return G__33627__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33627.cljs$core$IFn$_invoke$arity$1 = G__33627__1;
  G__33627.cljs$core$IFn$_invoke$arity$2 = G__33627__2;
  return G__33627;
}();
cljs.core.PersistentVector.prototype.lastIndexOf = function() {
  var G__33628 = null;
  var G__33628__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33628__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33628 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33628__1.call(this, x);
      case 2:
        return G__33628__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33628.cljs$core$IFn$_invoke$arity$1 = G__33628__1;
  G__33628.cljs$core$IFn$_invoke$arity$2 = G__33628__2;
  return G__33628;
}();
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__33618 = init__$2;
              var G__33619 = j + i;
              var G__33620 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33618, G__33619, G__33620) : f.call(null, G__33618, G__33619, G__33620);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__33629 = j + 1;
              var G__33630 = init__$3;
              j = G__33629;
              init__$2 = G__33630;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__33631 = i + len;
        var G__33632 = init__$2;
        i = G__33631;
        init__$1 = G__33632;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__33621 = init__$2;
              var G__33622 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__33621, G__33622) : f.call(null, G__33621, G__33622);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__33633 = j + 1;
              var G__33634 = init__$3;
              j = G__33633;
              init__$2 = G__33634;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__33635 = i + len;
        var G__33636 = init__$2;
        i = G__33635;
        init__$1 = G__33636;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0, null);
    } else {
      var G__33623 = coll__$1;
      var G__33624 = cljs.core.first_array_for_longvec(coll__$1);
      var G__33625 = 0;
      var G__33626 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__33623, G__33624, G__33625, G__33626) : cljs.core.chunked_seq.call(null, G__33623, G__33624, G__33625, G__33626);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__30514__auto___33637 = len;
    var i_33638 = 0;
    while (true) {
      if (i_33638 < n__30514__auto___33637) {
        new_tail[i_33638] = self__.tail[i_33638];
        var G__33639 = i_33638 + 1;
        i_33638 = G__33639;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__33640 = null;
  var G__33640__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__33640__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__33640 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33640__2.call(this, self__, k);
      case 3:
        return G__33640__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33640.cljs$core$IFn$_invoke$arity$2 = G__33640__2;
  G__33640.cljs$core$IFn$_invoke$arity$3 = G__33640__3;
  return G__33640;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args33617) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args33617)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__33641 = i + 1;
        var G__33642 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__33641;
        out = G__33642;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___33644 = arguments.length;
  var i__30670__auto___33645 = 0;
  while (true) {
    if (i__30670__auto___33645 < len__30669__auto___33644) {
      args__30676__auto__.push(arguments[i__30670__auto___33645]);
      var G__33646 = i__30670__auto___33645 + 1;
      i__30670__auto___33645 = G__33646;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq33643) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq33643));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.indexOf = function() {
  var G__33669 = null;
  var G__33669__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33669__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33669 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33669__1.call(this, x);
      case 2:
        return G__33669__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33669.cljs$core$IFn$_invoke$arity$1 = G__33669__1;
  G__33669.cljs$core$IFn$_invoke$arity$2 = G__33669__2;
  return G__33669;
}();
cljs.core.ChunkedSeq.prototype.lastIndexOf = function() {
  var G__33670 = null;
  var G__33670__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33670__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33670 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33670__1.call(this, x);
      case 2:
        return G__33670__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33670.cljs$core$IFn$_invoke$arity$1 = G__33670__1;
  G__33670.cljs$core$IFn$_invoke$arity$2 = G__33670__2;
  return G__33670;
}();
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__33647 = self__.vec;
      var G__33648 = self__.node;
      var G__33649 = self__.i;
      var G__33650 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__33647, G__33648, G__33649, G__33650) : cljs.core.chunked_seq.call(null, G__33647, G__33648, G__33649, G__33650);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__33651 = self__.vec;
    var G__33652 = self__.i + self__.off;
    var G__33653 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__33651, G__33652, G__33653) : cljs.core.subvec.call(null, G__33651, G__33652, G__33653);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__33654 = self__.vec;
    var G__33655 = self__.i + self__.off;
    var G__33656 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__33654, G__33655, G__33656) : cljs.core.subvec.call(null, G__33654, G__33655, G__33656);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__33657 = self__.vec;
      var G__33658 = self__.node;
      var G__33659 = self__.i;
      var G__33660 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__33657, G__33658, G__33659, G__33660) : cljs.core.chunked_seq.call(null, G__33657, G__33658, G__33659, G__33660);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__33661 = self__.vec;
    var G__33662 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__33663 = end;
    var G__33664 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__33661, G__33662, G__33663, G__33664) : cljs.core.chunked_seq.call(null, G__33661, G__33662, G__33663, G__33664);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__33665 = self__.vec;
    var G__33666 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__33667 = end;
    var G__33668 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__33665, G__33666, G__33667, G__33668) : cljs.core.chunked_seq.call(null, G__33665, G__33666, G__33667, G__33668);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq(var_args) {
  var args33671 = [];
  var len__30669__auto___33674 = arguments.length;
  var i__30670__auto___33675 = 0;
  while (true) {
    if (i__30670__auto___33675 < len__30669__auto___33674) {
      args33671.push(arguments[i__30670__auto___33675]);
      var G__33676 = i__30670__auto___33675 + 1;
      i__30670__auto___33675 = G__33676;
      continue;
    } else {
    }
    break;
  }
  var G__33673 = args33671.length;
  switch(G__33673) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33671.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.indexOf = function() {
  var G__33698 = null;
  var G__33698__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33698__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__33698 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__33698__1.call(this, x);
      case 2:
        return G__33698__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33698.cljs$core$IFn$_invoke$arity$1 = G__33698__1;
  G__33698.cljs$core$IFn$_invoke$arity$2 = G__33698__2;
  return G__33698;
}();
cljs.core.Subvec.prototype.lastIndexOf = function() {
  var G__33699 = null;
  var G__33699__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33699__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__33699 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__33699__1.call(this, x);
      case 2:
        return G__33699__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33699.cljs$core$IFn$_invoke$arity$1 = G__33699__1;
  G__33699.cljs$core$IFn$_invoke$arity$2 = G__33699__2;
  return G__33699;
}();
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__33679 = init__$1;
        var G__33680 = j;
        var G__33681 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33679, G__33680, G__33681) : f.call(null, G__33679, G__33680, G__33681);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__33700 = i + 1;
        var G__33701 = j + 1;
        var G__33702 = init__$2;
        i = G__33700;
        j = G__33701;
        init__$1 = G__33702;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__33682 = self__.meta;
  var G__33683 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__33684 = self__.start;
  var G__33685 = function() {
    var x__29931__auto__ = self__.end;
    var y__29932__auto__ = v_pos + 1;
    return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
  }();
  var G__33686 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__33682, G__33683, G__33684, G__33685, G__33686) : cljs.core.build_subvec.call(null, G__33682, G__33683, G__33684, G__33685, G__33686);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__33687 = self__.meta;
    var G__33688 = self__.v;
    var G__33689 = self__.start;
    var G__33690 = self__.end - 1;
    var G__33691 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__33687, G__33688, G__33689, G__33690, G__33691) : cljs.core.build_subvec.call(null, G__33687, G__33688, G__33689, G__33690, G__33691);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__33693 = self__.meta;
  var G__33694 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__33695 = self__.start;
  var G__33696 = self__.end + 1;
  var G__33697 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__33693, G__33694, G__33695, G__33696, G__33697) : cljs.core.build_subvec.call(null, G__33693, G__33694, G__33695, G__33696, G__33697);
};
cljs.core.Subvec.prototype.call = function() {
  var G__33703 = null;
  var G__33703__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__33703__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__33703 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33703__2.call(this, self__, k);
      case 3:
        return G__33703__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33703.cljs$core$IFn$_invoke$arity$2 = G__33703__2;
  G__33703.cljs$core$IFn$_invoke$arity$3 = G__33703__3;
  return G__33703;
}();
cljs.core.Subvec.prototype.apply = function(self__, args33678) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args33678)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__33704 = meta;
      var G__33705 = v.v;
      var G__33706 = v.start + start;
      var G__33707 = v.start + end;
      var G__33708 = __hash;
      meta = G__33704;
      v = G__33705;
      start = G__33706;
      end = G__33707;
      __hash = G__33708;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec(var_args) {
  var args33709 = [];
  var len__30669__auto___33712 = arguments.length;
  var i__30670__auto___33713 = 0;
  while (true) {
    if (i__30670__auto___33713 < len__30669__auto___33712) {
      args33709.push(arguments[i__30670__auto___33713]);
      var G__33714 = i__30670__auto___33713 + 1;
      i__30670__auto___33713 = G__33714;
      continue;
    } else {
    }
    break;
  }
  var G__33711 = args33709.length;
  switch(G__33711) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33709.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__33727 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__33728 = level - 5;
        node = G__33727;
        level = G__33728;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__33732 = null;
  var G__33732__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__33732__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__33732 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33732__2.call(this, self__, k);
      case 3:
        return G__33732__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33732.cljs$core$IFn$_invoke$arity$2 = G__33732__2;
  G__33732.cljs$core$IFn$_invoke$arity$3 = G__33732__3;
  return G__33732;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args33729) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args33729)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__29600__auto__ = cljs.core.some_QMARK_(self__.fseq) && cljs.core.seq(self__.fseq);
  if (or__29600__auto__) {
    return or__29600__auto__;
  } else {
    var and__29588__auto__ = cljs.core.some_QMARK_(self__.riter);
    if (and__29588__auto__) {
      return self__.riter.hasNext();
    } else {
      return and__29588__auto__;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (cljs.core.some_QMARK_(self__.fseq)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.riter) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "riter", "riter", -237834262, null)], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.indexOf = function() {
  var G__33733 = null;
  var G__33733__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33733__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33733 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33733__1.call(this, x);
      case 2:
        return G__33733__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33733.cljs$core$IFn$_invoke$arity$1 = G__33733__1;
  G__33733.cljs$core$IFn$_invoke$arity$2 = G__33733__2;
  return G__33733;
}();
cljs.core.PersistentQueueSeq.prototype.lastIndexOf = function() {
  var G__33734 = null;
  var G__33734__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33734__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33734 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33734__1.call(this, x);
      case 2:
        return G__33734__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33734.cljs$core$IFn$_invoke$arity$1 = G__33734__1;
  G__33734.cljs$core$IFn$_invoke$arity$2 = G__33734__2;
  return G__33734;
}();
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4655__auto__ = cljs.core.next(self__.front);
  if (temp__4655__auto__) {
    var f1 = temp__4655__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.indexOf = function() {
  var G__33735 = null;
  var G__33735__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33735__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33735 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33735__1.call(this, x);
      case 2:
        return G__33735__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33735.cljs$core$IFn$_invoke$arity$1 = G__33735__1;
  G__33735.cljs$core$IFn$_invoke$arity$2 = G__33735__2;
  return G__33735;
}();
cljs.core.PersistentQueue.prototype.lastIndexOf = function() {
  var G__33736 = null;
  var G__33736__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count.cljs$core$IFn$_invoke$arity$1 ? self__.count.cljs$core$IFn$_invoke$arity$1(coll) : self__.count.call(null, coll));
  };
  var G__33736__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33736 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33736__1.call(this, x);
      case 2:
        return G__33736__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33736.cljs$core$IFn$_invoke$arity$1 = G__33736__1;
  G__33736.cljs$core$IFn$_invoke$arity$2 = G__33736__2;
  return G__33736;
}();
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4655__auto__ = cljs.core.next(self__.front);
    if (temp__4655__auto__) {
      var f1 = temp__4655__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = self__.front;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__29600__auto__ = self__.rear;
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__33737 = i + incr;
        i = G__33737;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__33738 = i + 1;
      var G__33739 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__33738;
      out = G__33739;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_33744 = 0;
  while (true) {
    if (i_33744 < l) {
      var k_33745 = ks[i_33744];
      new_obj[k_33745] = obj[k_33745];
      var G__33746 = i_33744 + 1;
      i_33744 = G__33746;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__33749 = init__$1;
        var G__33750 = k;
        var G__33751 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33749, G__33750, G__33751) : f.call(null, G__33749, G__33750, G__33751);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__33752 = cljs.core.rest(keys__$1);
        var G__33753 = init__$2;
        keys__$1 = G__33752;
        init__$1 = G__33753;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__33747_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__33747_SHARP_, self__.strobj[p1__33747_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__33754 = null;
  var G__33754__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__33754__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__33754 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33754__2.call(this, self__, k);
      case 3:
        return G__33754__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33754.cljs$core$IFn$_invoke$arity$2 = G__33754__2;
  G__33754.cljs$core$IFn$_invoke$arity$3 = G__33754__3;
  return G__33754;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args33748) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args33748)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__29600__auto__ = self__.i < self__.base_count;
  if (or__29600__auto__) {
    return or__29600__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k)], null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "record", "record", 861424668, null), new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, 
  "ext-map-iter", "ext-map-iter", -1215982757, null)], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__33757 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33757, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33757, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__33758 = i + 2;
        i = G__33758;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__33759 = i + 2;
        i = G__33759;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__33760 = i + 2;
        i = G__33760;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__33761 = i + 2;
        i = G__33761;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__33762 = i + 2;
        i = G__33762;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_33763 = 0;
  while (true) {
    if (i_33763 < l) {
      narr[i_33763] = arr[i_33763];
      var G__33764 = i_33763 + 1;
      i_33763 = G__33764;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.indexOf = function() {
  var G__33765 = null;
  var G__33765__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33765__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33765 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33765__1.call(this, x);
      case 2:
        return G__33765__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33765.cljs$core$IFn$_invoke$arity$1 = G__33765__1;
  G__33765.cljs$core$IFn$_invoke$arity$2 = G__33765__2;
  return G__33765;
}();
cljs.core.PersistentArrayMapSeq.prototype.lastIndexOf = function() {
  var G__33766 = null;
  var G__33766__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33766__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33766 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33766__1.call(this, x);
      case 2:
        return G__33766__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33766.cljs$core$IFn$_invoke$arity$1 = G__33766__1;
  G__33766.cljs$core$IFn$_invoke$arity$2 = G__33766__2;
  return G__33766;
}();
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__33768 = cljs.core.seq(coll);
  var chunk__33769 = null;
  var count__33770 = 0;
  var i__33771 = 0;
  while (true) {
    if (i__33771 < count__33770) {
      var vec__33772 = chunk__33769.cljs$core$IIndexed$_nth$arity$2(null, i__33771);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33772, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33772, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__33781 = seq__33768;
      var G__33782 = chunk__33769;
      var G__33783 = count__33770;
      var G__33784 = i__33771 + 1;
      seq__33768 = G__33781;
      chunk__33769 = G__33782;
      count__33770 = G__33783;
      i__33771 = G__33784;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__33768);
      if (temp__4657__auto__) {
        var seq__33768__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__33768__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first(seq__33768__$1);
          var G__33785 = cljs.core.chunk_rest(seq__33768__$1);
          var G__33786 = c__30411__auto__;
          var G__33787 = cljs.core.count(c__30411__auto__);
          var G__33788 = 0;
          seq__33768 = G__33785;
          chunk__33769 = G__33786;
          count__33770 = G__33787;
          i__33771 = G__33788;
          continue;
        } else {
          var vec__33773 = cljs.core.first(seq__33768__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33773, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33773, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__33789 = cljs.core.next(seq__33768__$1);
          var G__33790 = null;
          var G__33791 = 0;
          var G__33792 = 0;
          seq__33768 = G__33789;
          chunk__33769 = G__33790;
          count__33770 = G__33791;
          i__33771 = G__33792;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__33774 = init__$1;
        var G__33775 = self__.arr[i];
        var G__33776 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33774, G__33775, G__33776) : f.call(null, G__33774, G__33775, G__33776);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__33793 = i + 2;
        var G__33794 = init__$2;
        i = G__33793;
        init__$1 = G__33794;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__33795 = i + 2;
              i = G__33795;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__33796 = s + 2;
            var G__33797 = d;
            s = G__33796;
            d = G__33797;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__33798 = s + 2;
            var G__33799 = d + 2;
            s = G__33798;
            d = G__33799;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__33780 = cljs.core.aclone(self__.arr);
        G__33780[idx + 1] = v;
        return G__33780;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__33800 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__33801 = cljs.core.next(es);
          ret = G__33800;
          es = G__33801;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__33802 = null;
  var G__33802__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__33802__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__33802 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33802__2.call(this, self__, k);
      case 3:
        return G__33802__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33802.cljs$core$IFn$_invoke$arity$2 = G__33802__2;
  G__33802.cljs$core$IFn$_invoke$arity$3 = G__33802__3;
  return G__33802;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args33767) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args33767)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_33803 = 0;
    while (true) {
      if (i_33803 < arr__$1.length) {
        var k_33804 = arr__$1[i_33803];
        var v_33805 = arr__$1[i_33803 + 1];
        var idx_33806 = cljs.core.array_index_of(ret, k_33804);
        if (idx_33806 === -1) {
          ret.push(k_33804);
          ret.push(v_33805);
        } else {
        }
        var G__33807 = i_33803 + 2;
        i_33803 = G__33807;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var cnt = arr__$2.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return cljs.core._assoc_BANG_(tcoll__$1, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4655__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          var G__33810 = cljs.core.next(es);
          var G__33811 = cljs.core._assoc_BANG_(tcoll__$2, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__33810;
          tcoll__$2 = G__33811;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__33809_33812 = self__.arr;
      G__33809_33812.pop();
      G__33809_33812.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__33813 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__33814 = i + 2;
      out = G__33813;
      i = G__33814;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set(var_args) {
  var args33815 = [];
  var len__30669__auto___33820 = arguments.length;
  var i__30670__auto___33821 = 0;
  while (true) {
    if (i__30670__auto___33821 < len__30669__auto___33820) {
      args33815.push(arguments[i__30670__auto___33821]);
      var G__33822 = i__30670__auto___33821 + 1;
      i__30670__auto___33821 = G__33822;
      continue;
    } else {
    }
    break;
  }
  var G__33817 = args33815.length;
  switch(G__33817) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33815.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__33818 = cljs.core.aclone(arr);
  G__33818[i] = a;
  return G__33818;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__33819 = cljs.core.aclone(arr);
  G__33819[i] = a;
  G__33819[j] = b;
  return G__33819;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set(var_args) {
  var args33824 = [];
  var len__30669__auto___33827 = arguments.length;
  var i__30670__auto___33828 = 0;
  while (true) {
    if (i__30670__auto___33828 < len__30669__auto___33827) {
      args33824.push(arguments[i__30670__auto___33828]);
      var G__33829 = i__30670__auto___33828 + 1;
      i__30670__auto___33828 = G__33829;
      continue;
    } else {
    }
    break;
  }
  var G__33826 = args33824.length;
  switch(G__33826) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33824.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__33834 = init__$1;
          var G__33835 = k;
          var G__33836 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33834, G__33835, G__33836) : f.call(null, G__33834, G__33835, G__33836);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__33837 = i + 2;
        var G__33838 = init__$2;
        i = G__33837;
        init__$1 = G__33838;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = cljs.core.some_QMARK_(key) ? self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, node_or_val], null) : cljs.core.some_QMARK_(node_or_val) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__29600__auto__ = cljs.core.some_QMARK_(self__.next_entry);
  if (or__29600__auto__) {
    return or__29600__auto__;
  } else {
    var or__29600__auto____$1 = cljs.core.some_QMARK_(self__.next_iter);
    if (or__29600__auto____$1) {
      return or__29600__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.some_QMARK_(self__.next_entry)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.next_iter)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_33852 = 0;
        var j_33853 = 0;
        while (true) {
          if (i_33852 < 32) {
            if ((self__.bitmap >>> i_33852 & 1) === 0) {
              var G__33854 = i_33852 + 1;
              var G__33855 = j_33853;
              i_33852 = G__33854;
              j_33853 = G__33855;
              continue;
            } else {
              nodes[i_33852] = !(self__.arr[j_33853] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_33853]), self__.arr[j_33853], self__.arr[j_33853 + 1], added_leaf_QMARK_) : self__.arr[j_33853 + 1];
              var G__33856 = i_33852 + 1;
              var G__33857 = j_33853 + 2;
              i_33852 = G__33856;
              j_33853 = G__33857;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__33839 = edit__$1;
          var G__33840 = shift + 5;
          var G__33841 = key_or_nil;
          var G__33842 = val_or_node;
          var G__33843 = hash;
          var G__33844 = key;
          var G__33845 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__33839, G__33840, G__33841, G__33842, G__33843, G__33844, G__33845) : cljs.core.create_node.call(null, G__33839, G__33840, G__33841, G__33842, G__33843, G__33844, G__33845);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_33858 = 0;
      var j_33859 = 0;
      while (true) {
        if (i_33858 < 32) {
          if ((self__.bitmap >>> i_33858 & 1) === 0) {
            var G__33860 = i_33858 + 1;
            var G__33861 = j_33859;
            i_33858 = G__33860;
            j_33859 = G__33861;
            continue;
          } else {
            nodes[i_33858] = !(self__.arr[j_33859] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_33859]), self__.arr[j_33859], self__.arr[j_33859 + 1], added_leaf_QMARK_) : self__.arr[j_33859 + 1];
            var G__33862 = i_33858 + 1;
            var G__33863 = j_33859 + 2;
            i_33858 = G__33862;
            j_33859 = G__33863;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__33846 = shift + 5;
          var G__33847 = key_or_nil;
          var G__33848 = val_or_node;
          var G__33849 = hash;
          var G__33850 = key;
          var G__33851 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__33846, G__33847, G__33848, G__33849, G__33850, G__33851) : cljs.core.create_node.call(null, G__33846, G__33847, G__33848, G__33849, G__33850, G__33851);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = true;
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__33864 = i + 1;
        var G__33865 = j + 2;
        var G__33866 = bitmap | 1 << i;
        i = G__33864;
        j = G__33865;
        bitmap = G__33866;
        continue;
      } else {
        var G__33867 = i + 1;
        var G__33868 = j;
        var G__33869 = bitmap;
        i = G__33867;
        j = G__33868;
        bitmap = G__33869;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(cljs.core.some_QMARK_(self__.next_iter) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (cljs.core.some_QMARK_(node)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__33870 = i + 1;
          var G__33871 = init__$2;
          i = G__33870;
          init__$1 = G__33871;
          continue;
        }
      } else {
        var G__33872 = i + 1;
        var G__33873 = init__$1;
        i = G__33872;
        init__$1 = G__33873;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = true;
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__33874 = i + 2;
        i = G__33874;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = true;
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node(var_args) {
  var args33875 = [];
  var len__30669__auto___33878 = arguments.length;
  var i__30670__auto___33879 = 0;
  while (true) {
    if (i__30670__auto___33879 < len__30669__auto___33878) {
      args33875.push(arguments[i__30670__auto___33879]);
      var G__33880 = i__30670__auto___33879 + 1;
      i__30670__auto___33879 = G__33880;
      continue;
    } else {
    }
    break;
  }
  var G__33877 = args33875.length;
  switch(G__33877) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33875.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.indexOf = function() {
  var G__33888 = null;
  var G__33888__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33888__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33888 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33888__1.call(this, x);
      case 2:
        return G__33888__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33888.cljs$core$IFn$_invoke$arity$1 = G__33888__1;
  G__33888.cljs$core$IFn$_invoke$arity$2 = G__33888__2;
  return G__33888;
}();
cljs.core.NodeSeq.prototype.lastIndexOf = function() {
  var G__33889 = null;
  var G__33889__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33889__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33889 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33889__1.call(this, x);
      case 2:
        return G__33889__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33889.cljs$core$IFn$_invoke$arity$1 = G__33889__1;
  G__33889.cljs$core$IFn$_invoke$arity$2 = G__33889__2;
  return G__33889;
}();
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__33882 = self__.nodes;
    var G__33883 = self__.i + 2;
    var G__33884 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__33882, G__33883, G__33884) : cljs.core.create_inode_seq.call(null, G__33882, G__33883, G__33884);
  } else {
    var G__33885 = self__.nodes;
    var G__33886 = self__.i;
    var G__33887 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__33885, G__33886, G__33887) : cljs.core.create_inode_seq.call(null, G__33885, G__33886, G__33887);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq(var_args) {
  var args33890 = [];
  var len__30669__auto___33893 = arguments.length;
  var i__30670__auto___33894 = 0;
  while (true) {
    if (i__30670__auto___33894 < len__30669__auto___33893) {
      args33890.push(arguments[i__30670__auto___33894]);
      var G__33895 = i__30670__auto___33894 + 1;
      i__30670__auto___33894 = G__33895;
      continue;
    } else {
    }
    break;
  }
  var G__33892 = args33890.length;
  switch(G__33892) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33890.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4655__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4655__auto__)) {
            var node = temp__4655__auto__;
            var temp__4655__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4655__auto____$1)) {
              var node_seq = temp__4655__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__33897 = j + 2;
              j = G__33897;
              continue;
            }
          } else {
            var G__33898 = j + 2;
            j = G__33898;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.indexOf = function() {
  var G__33903 = null;
  var G__33903__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33903__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33903 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33903__1.call(this, x);
      case 2:
        return G__33903__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33903.cljs$core$IFn$_invoke$arity$1 = G__33903__1;
  G__33903.cljs$core$IFn$_invoke$arity$2 = G__33903__2;
  return G__33903;
}();
cljs.core.ArrayNodeSeq.prototype.lastIndexOf = function() {
  var G__33904 = null;
  var G__33904__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33904__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33904 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33904__1.call(this, x);
      case 2:
        return G__33904__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33904.cljs$core$IFn$_invoke$arity$1 = G__33904__1;
  G__33904.cljs$core$IFn$_invoke$arity$2 = G__33904__2;
  return G__33904;
}();
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__33899 = null;
  var G__33900 = self__.nodes;
  var G__33901 = self__.i;
  var G__33902 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__33899, G__33900, G__33901, G__33902) : cljs.core.create_array_node_seq.call(null, G__33899, G__33900, G__33901, G__33902);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq(var_args) {
  var args33905 = [];
  var len__30669__auto___33908 = arguments.length;
  var i__30670__auto___33909 = 0;
  while (true) {
    if (i__30670__auto___33909 < len__30669__auto___33908) {
      args33905.push(arguments[i__30670__auto___33909]);
      var G__33910 = i__30670__auto___33909 + 1;
      i__30670__auto___33909 = G__33910;
      continue;
    } else {
    }
    break;
  }
  var G__33907 = args33905.length;
  switch(G__33907) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args33905.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4655__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4655__auto__)) {
          var nj = temp__4655__auto__;
          var temp__4655__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4655__auto____$1)) {
            var ns = temp__4655__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__33912 = j + 1;
            j = G__33912;
            continue;
          }
        } else {
          var G__33913 = j + 1;
          j = G__33913;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.seen && self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return self__.nil_val;
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__33915 = cljs.core.seq(coll);
  var chunk__33916 = null;
  var count__33917 = 0;
  var i__33918 = 0;
  while (true) {
    if (i__33918 < count__33917) {
      var vec__33919 = chunk__33916.cljs$core$IIndexed$_nth$arity$2(null, i__33918);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33919, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33919, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__33923 = seq__33915;
      var G__33924 = chunk__33916;
      var G__33925 = count__33917;
      var G__33926 = i__33918 + 1;
      seq__33915 = G__33923;
      chunk__33916 = G__33924;
      count__33917 = G__33925;
      i__33918 = G__33926;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__33915);
      if (temp__4657__auto__) {
        var seq__33915__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__33915__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first(seq__33915__$1);
          var G__33927 = cljs.core.chunk_rest(seq__33915__$1);
          var G__33928 = c__30411__auto__;
          var G__33929 = cljs.core.count(c__30411__auto__);
          var G__33930 = 0;
          seq__33915 = G__33927;
          chunk__33916 = G__33928;
          count__33917 = G__33929;
          i__33918 = G__33930;
          continue;
        } else {
          var vec__33920 = cljs.core.first(seq__33915__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33920, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__33920, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__33931 = cljs.core.next(seq__33915__$1);
          var G__33932 = null;
          var G__33933 = 0;
          var G__33934 = 0;
          seq__33915 = G__33931;
          chunk__33916 = G__33932;
          count__33917 = G__33933;
          i__33918 = G__33934;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter;
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__33935 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__33936 = cljs.core.next(es);
          ret = G__33935;
          es = G__33936;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__33937 = null;
  var G__33937__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__33937__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__33937 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33937__2.call(this, self__, k);
      case 3:
        return G__33937__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33937.cljs$core$IFn$_invoke$arity$2 = G__33937__2;
  G__33937.cljs$core$IFn$_invoke$arity$3 = G__33937__3;
  return G__33937;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args33914) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args33914)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__33938 = i + 2;
      var G__33939 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__33938;
      ret = G__33939;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__33940 = i + 1;
      var G__33941 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__33940;
      out = G__33941;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4655__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          var G__33943 = cljs.core.next(es);
          var G__33944 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__33943;
          tcoll__$1 = G__33944;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__33945 = ascending_QMARK_ ? t.left : t.right;
      var G__33946 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__33945;
      stack__$1 = G__33946;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.indexOf = function() {
  var G__33947 = null;
  var G__33947__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33947__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33947 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33947__1.call(this, x);
      case 2:
        return G__33947__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33947.cljs$core$IFn$_invoke$arity$1 = G__33947__1;
  G__33947.cljs$core$IFn$_invoke$arity$2 = G__33947__2;
  return G__33947;
}();
cljs.core.PersistentTreeMapSeq.prototype.lastIndexOf = function() {
  var G__33948 = null;
  var G__33948__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33948__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33948 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33948__1.call(this, x);
      case 2:
        return G__33948__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33948.cljs$core$IFn$_invoke$arity$1 = G__33948__1;
  G__33948.cljs$core$IFn$_invoke$arity$2 = G__33948__2;
  return G__33948;
}();
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__33958 = init__$1;
      var G__33959 = node.key;
      var G__33960 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__33958, G__33959, G__33960) : f.call(null, G__33958, G__33959, G__33960);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.lastIndexOf = function() {
  var G__33962 = null;
  var G__33962__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33962__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33962 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33962__1.call(this, x);
      case 2:
        return G__33962__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33962.cljs$core$IFn$_invoke$arity$1 = G__33962__1;
  G__33962.cljs$core$IFn$_invoke$arity$2 = G__33962__2;
  return G__33962;
}();
cljs.core.BlackNode.prototype.indexOf = function() {
  var G__33963 = null;
  var G__33963__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33963__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33963 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33963__1.call(this, x);
      case 2:
        return G__33963__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33963.cljs$core$IFn$_invoke$arity$1 = G__33963__1;
  G__33963.cljs$core$IFn$_invoke$arity$2 = G__33963__2;
  return G__33963;
}();
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__33964 = null;
  var G__33964__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__33964__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__33964 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33964__2.call(this, self__, k);
      case 3:
        return G__33964__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33964.cljs$core$IFn$_invoke$arity$2 = G__33964__2;
  G__33964.cljs$core$IFn$_invoke$arity$3 = G__33964__3;
  return G__33964;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args33961) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args33961)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.lastIndexOf = function() {
  var G__33966 = null;
  var G__33966__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__33966__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33966 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33966__1.call(this, x);
      case 2:
        return G__33966__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33966.cljs$core$IFn$_invoke$arity$1 = G__33966__1;
  G__33966.cljs$core$IFn$_invoke$arity$2 = G__33966__2;
  return G__33966;
}();
cljs.core.RedNode.prototype.indexOf = function() {
  var G__33967 = null;
  var G__33967__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__33967__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__33967 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__33967__1.call(this, x);
      case 2:
        return G__33967__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33967.cljs$core$IFn$_invoke$arity$1 = G__33967__1;
  G__33967.cljs$core$IFn$_invoke$arity$2 = G__33967__2;
  return G__33967;
}();
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__33968 = null;
  var G__33968__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__33968__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__33968 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__33968__2.call(this, self__, k);
      case 3:
        return G__33968__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__33968.cljs$core$IFn$_invoke$arity$2 = G__33968__2;
  G__33968.cljs$core$IFn$_invoke$arity$3 = G__33968__3;
  return G__33968;
}();
cljs.core.RedNode.prototype.apply = function(self__, args33965) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args33965)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__33981 = k;
      var G__33982 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__33981, G__33982) : comp.call(null, G__33981, G__33982);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__34001 = k;
      var G__34002 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__34001, G__34002) : comp.call(null, G__34001, G__34002);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__34012 = cljs.core.seq(coll);
  var chunk__34013 = null;
  var count__34014 = 0;
  var i__34015 = 0;
  while (true) {
    if (i__34015 < count__34014) {
      var vec__34016 = chunk__34013.cljs$core$IIndexed$_nth$arity$2(null, i__34015);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34016, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34016, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__34022 = seq__34012;
      var G__34023 = chunk__34013;
      var G__34024 = count__34014;
      var G__34025 = i__34015 + 1;
      seq__34012 = G__34022;
      chunk__34013 = G__34023;
      count__34014 = G__34024;
      i__34015 = G__34025;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__34012);
      if (temp__4657__auto__) {
        var seq__34012__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__34012__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first(seq__34012__$1);
          var G__34026 = cljs.core.chunk_rest(seq__34012__$1);
          var G__34027 = c__30411__auto__;
          var G__34028 = cljs.core.count(c__30411__auto__);
          var G__34029 = 0;
          seq__34012 = G__34026;
          chunk__34013 = G__34027;
          count__34014 = G__34028;
          i__34015 = G__34029;
          continue;
        } else {
          var vec__34017 = cljs.core.first(seq__34012__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34017, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34017, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__34030 = cljs.core.next(seq__34012__$1);
          var G__34031 = null;
          var G__34032 = 0;
          var G__34033 = 0;
          seq__34012 = G__34030;
          chunk__34013 = G__34031;
          count__34014 = G__34032;
          i__34015 = G__34033;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__34018 = k;
        var G__34019 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__34018, G__34019) : self__.comp.call(null, G__34018, G__34019);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__34034 = t.left;
          t = G__34034;
          continue;
        } else {
          var G__34035 = t.right;
          t = G__34035;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__34036 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__34037 = cljs.core.next(es);
          ret = G__34036;
          es = G__34037;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__34038 = null;
  var G__34038__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34038__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34038 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34038__2.call(this, self__, k);
      case 3:
        return G__34038__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34038.cljs$core$IFn$_invoke$arity$2 = G__34038__2;
  G__34038.cljs$core$IFn$_invoke$arity$3 = G__34038__3;
  return G__34038;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args34011) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args34011)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__34020 = k;
          var G__34021 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__34020, G__34021) : self__.comp.call(null, G__34020, G__34021);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__34039 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__34040 = t.left;
              stack = G__34039;
              t = G__34040;
              continue;
            } else {
              var G__34041 = stack;
              var G__34042 = t.right;
              stack = G__34041;
              t = G__34042;
              continue;
            }
          } else {
            if (c > 0) {
              var G__34043 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__34044 = t.right;
              stack = G__34043;
              t = G__34044;
              continue;
            } else {
              var G__34045 = stack;
              var G__34046 = t.left;
              stack = G__34045;
              t = G__34046;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34048 = arguments.length;
  var i__30670__auto___34049 = 0;
  while (true) {
    if (i__30670__auto___34049 < len__30669__auto___34048) {
      args__30676__auto__.push(arguments[i__30670__auto___34049]);
      var G__34050 = i__30670__auto___34049 + 1;
      i__30670__auto___34049 = G__34050;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__34051 = cljs.core.nnext(in$);
      var G__34052 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__34051;
      out = G__34052;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq34047) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34047));
};
cljs.core.array_map = function cljs$core$array_map(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34054 = arguments.length;
  var i__30670__auto___34055 = 0;
  while (true) {
    if (i__30670__auto___34055 < len__30669__auto___34054) {
      args__30676__auto__.push(arguments[i__30670__auto___34055]);
      var G__34056 = i__30670__auto___34055 + 1;
      i__30670__auto___34055 = G__34056;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq34053) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34053));
};
cljs.core.obj_map = function cljs$core$obj_map(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34060 = arguments.length;
  var i__30670__auto___34061 = 0;
  while (true) {
    if (i__30670__auto___34061 < len__30669__auto___34060) {
      args__30676__auto__.push(arguments[i__30670__auto___34061]);
      var G__34062 = i__30670__auto___34061 + 1;
      i__30670__auto___34061 = G__34062;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__34063 = cljs.core.nnext(kvs);
      kvs = G__34063;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq34057) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34057));
};
cljs.core.sorted_map = function cljs$core$sorted_map(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34065 = arguments.length;
  var i__30670__auto___34066 = 0;
  while (true) {
    if (i__30670__auto___34066 < len__30669__auto___34065) {
      args__30676__auto__.push(arguments[i__30670__auto___34066]);
      var G__34067 = i__30670__auto___34066 + 1;
      i__30670__auto___34066 = G__34067;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__34068 = cljs.core.nnext(in$);
      var G__34069 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__34068;
      out = G__34069;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq34064) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34064));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34072 = arguments.length;
  var i__30670__auto___34073 = 0;
  while (true) {
    if (i__30670__auto___34073 < len__30669__auto___34072) {
      args__30676__auto__.push(arguments[i__30670__auto___34073]);
      var G__34074 = i__30670__auto___34073 + 1;
      i__30670__auto___34073 = G__34074;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__34075 = cljs.core.nnext(in$);
      var G__34076 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__34075;
      out = G__34076;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq34070) {
  var G__34071 = cljs.core.first(seq34070);
  var seq34070__$1 = cljs.core.next(seq34070);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__34071, seq34070__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.indexOf = function() {
  var G__34079 = null;
  var G__34079__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__34079__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__34079 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__34079__1.call(this, x);
      case 2:
        return G__34079__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34079.cljs$core$IFn$_invoke$arity$1 = G__34079__1;
  G__34079.cljs$core$IFn$_invoke$arity$2 = G__34079__2;
  return G__34079;
}();
cljs.core.KeySeq.prototype.lastIndexOf = function() {
  var G__34080 = null;
  var G__34080__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__34080__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__34080 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__34080__1.call(this, x);
      case 2:
        return G__34080__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34080.cljs$core$IFn$_invoke$arity$1 = G__34080__1;
  G__34080.cljs$core$IFn$_invoke$arity$2 = G__34080__2;
  return G__34080;
}();
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4657__auto__ = cljs.core.seq(hash_map);
  if (temp__4657__auto__) {
    var mseq = temp__4657__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.indexOf = function() {
  var G__34083 = null;
  var G__34083__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__34083__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__34083 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__34083__1.call(this, x);
      case 2:
        return G__34083__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34083.cljs$core$IFn$_invoke$arity$1 = G__34083__1;
  G__34083.cljs$core$IFn$_invoke$arity$2 = G__34083__2;
  return G__34083;
}();
cljs.core.ValSeq.prototype.lastIndexOf = function() {
  var G__34084 = null;
  var G__34084__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__34084__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__34084 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__34084__1.call(this, x);
      case 2:
        return G__34084__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34084.cljs$core$IFn$_invoke$arity$1 = G__34084__1;
  G__34084.cljs$core$IFn$_invoke$arity$2 = G__34084__2;
  return G__34084;
}();
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4657__auto__ = cljs.core.seq(hash_map);
  if (temp__4657__auto__) {
    var mseq = temp__4657__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34088 = arguments.length;
  var i__30670__auto___34089 = 0;
  while (true) {
    if (i__30670__auto___34089 < len__30669__auto___34088) {
      args__30676__auto__.push(arguments[i__30670__auto___34089]);
      var G__34090 = i__30670__auto___34089 + 1;
      i__30670__auto___34089 = G__34090;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__34085_SHARP_, p2__34086_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__29600__auto__ = p1__34085_SHARP_;
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__34086_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq34087) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34087));
};
cljs.core.merge_with = function cljs$core$merge_with(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34095 = arguments.length;
  var i__30670__auto___34096 = 0;
  while (true) {
    if (i__30670__auto___34096 < len__30669__auto___34095) {
      args__30676__auto__.push(arguments[i__30670__auto___34096]);
      var G__34097 = i__30670__auto___34096 + 1;
      i__30670__auto___34096 = G__34097;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__34093 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__34094 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__34093, G__34094) : f.call(null, G__34093, G__34094);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__29600__auto__ = m1;
          if (cljs.core.truth_(or__29600__auto__)) {
            return or__29600__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq34091) {
  var G__34092 = cljs.core.first(seq34091);
  var seq34091__$1 = cljs.core.next(seq34091);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__34092, seq34091__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__34098 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__34099 = cljs.core.next(keys);
      ret = G__34098;
      keys = G__34099;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().tail[0];
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__34102 = cljs.core.seq(coll);
  var chunk__34103 = null;
  var count__34104 = 0;
  var i__34105 = 0;
  while (true) {
    if (i__34105 < count__34104) {
      var vec__34106 = chunk__34103.cljs$core$IIndexed$_nth$arity$2(null, i__34105);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34106, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34106, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__34108 = seq__34102;
      var G__34109 = chunk__34103;
      var G__34110 = count__34104;
      var G__34111 = i__34105 + 1;
      seq__34102 = G__34108;
      chunk__34103 = G__34109;
      count__34104 = G__34110;
      i__34105 = G__34111;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__34102);
      if (temp__4657__auto__) {
        var seq__34102__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__34102__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first(seq__34102__$1);
          var G__34112 = cljs.core.chunk_rest(seq__34102__$1);
          var G__34113 = c__30411__auto__;
          var G__34114 = cljs.core.count(c__30411__auto__);
          var G__34115 = 0;
          seq__34102 = G__34112;
          chunk__34103 = G__34113;
          count__34104 = G__34114;
          i__34105 = G__34115;
          continue;
        } else {
          var vec__34107 = cljs.core.first(seq__34102__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34107, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34107, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__34116 = cljs.core.next(seq__34102__$1);
          var G__34117 = null;
          var G__34118 = 0;
          var G__34119 = 0;
          seq__34102 = G__34116;
          chunk__34103 = G__34117;
          count__34104 = G__34118;
          i__34105 = G__34119;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__34100_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__34100_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__34120 = null;
  var G__34120__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34120__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34120 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34120__2.call(this, self__, k);
      case 3:
        return G__34120__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34120.cljs$core$IFn$_invoke$arity$2 = G__34120__2;
  G__34120.cljs$core$IFn$_invoke$arity$3 = G__34120__3;
  return G__34120;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args34101) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args34101)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__34121 = i + 1;
        var G__34122 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__34121;
        out = G__34122;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__34123 = i + 1;
        var G__34124 = cljs.core._conj_BANG_(out, items[i]);
        i = G__34123;
        out = G__34124;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__34126 = null;
  var G__34126__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__34126__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__34126 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34126__2.call(this, self__, k);
      case 3:
        return G__34126__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34126.cljs$core$IFn$_invoke$arity$2 = G__34126__2;
  G__34126.cljs$core$IFn$_invoke$arity$3 = G__34126__3;
  return G__34126;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args34125) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args34125)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__34129 = cljs.core.seq(coll);
  var chunk__34130 = null;
  var count__34131 = 0;
  var i__34132 = 0;
  while (true) {
    if (i__34132 < count__34131) {
      var vec__34133 = chunk__34130.cljs$core$IIndexed$_nth$arity$2(null, i__34132);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34133, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34133, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__34135 = seq__34129;
      var G__34136 = chunk__34130;
      var G__34137 = count__34131;
      var G__34138 = i__34132 + 1;
      seq__34129 = G__34135;
      chunk__34130 = G__34136;
      count__34131 = G__34137;
      i__34132 = G__34138;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__34129);
      if (temp__4657__auto__) {
        var seq__34129__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__34129__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first(seq__34129__$1);
          var G__34139 = cljs.core.chunk_rest(seq__34129__$1);
          var G__34140 = c__30411__auto__;
          var G__34141 = cljs.core.count(c__30411__auto__);
          var G__34142 = 0;
          seq__34129 = G__34139;
          chunk__34130 = G__34140;
          count__34131 = G__34141;
          i__34132 = G__34142;
          continue;
        } else {
          var vec__34134 = cljs.core.first(seq__34129__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34134, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34134, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__34143 = cljs.core.next(seq__34129__$1);
          var G__34144 = null;
          var G__34145 = 0;
          var G__34146 = 0;
          seq__34129 = G__34143;
          chunk__34130 = G__34144;
          count__34131 = G__34145;
          i__34132 = G__34146;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__34127_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__34127_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__34147 = null;
  var G__34147__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__34147__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__34147 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__34147__2.call(this, self__, k);
      case 3:
        return G__34147__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34147.cljs$core$IFn$_invoke$arity$2 = G__34147__2;
  G__34147.cljs$core$IFn$_invoke$arity$3 = G__34147__3;
  return G__34147;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args34128) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args34128)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__30508__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__30508__auto__.length) {
        var G__34148 = i + 1;
        var G__34149 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__34148;
        res = G__34149;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__34150 = cljs.core.next(in$__$1);
          var G__34151 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__34150;
          out = G__34151;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set(var_args) {
  var args34152 = [];
  var len__30669__auto___34156 = arguments.length;
  var i__30670__auto___34157 = 0;
  while (true) {
    if (i__30670__auto___34157 < len__30669__auto___34156) {
      args34152.push(arguments[i__30670__auto___34157]);
      var G__34158 = i__30670__auto___34157 + 1;
      i__30670__auto___34157 = G__34158;
      continue;
    } else {
    }
    break;
  }
  var G__34155 = args34152.length;
  switch(G__34155) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args34152.slice(0), 0, null);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__30688__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq34153) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34153));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34161 = arguments.length;
  var i__30670__auto___34162 = 0;
  while (true) {
    if (i__30670__auto___34162 < len__30669__auto___34161) {
      args__30676__auto__.push(arguments[i__30670__auto___34162]);
      var G__34163 = i__30670__auto___34162 + 1;
      i__30670__auto___34162 = G__34163;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq34160) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34160));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34166 = arguments.length;
  var i__30670__auto___34167 = 0;
  while (true) {
    if (i__30670__auto___34167 < len__30669__auto___34166) {
      args__30676__auto__.push(arguments[i__30670__auto___34167]);
      var G__34168 = i__30670__auto___34167 + 1;
      i__30670__auto___34167 = G__34168;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq34164) {
  var G__34165 = cljs.core.first(seq34164);
  var seq34164__$1 = cljs.core.next(seq34164);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__34165, seq34164__$1);
};
cljs.core.replace = function cljs$core$replace(var_args) {
  var args34171 = [];
  var len__30669__auto___34174 = arguments.length;
  var i__30670__auto___34175 = 0;
  while (true) {
    if (i__30670__auto___34175 < len__30669__auto___34174) {
      args34171.push(arguments[i__30670__auto___34175]);
      var G__34176 = i__30670__auto___34175 + 1;
      i__30670__auto___34175 = G__34176;
      continue;
    } else {
    }
    break;
  }
  var G__34173 = args34171.length;
  switch(G__34173) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34171.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__34169_SHARP_) {
    var temp__4655__auto__ = cljs.core.find(smap, p1__34169_SHARP_);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var e = temp__4655__auto__;
      return cljs.core.val(e);
    } else {
      return p1__34169_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4655__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__34170_SHARP_) {
      var temp__4655__auto__ = cljs.core.find(smap, p1__34170_SHARP_);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var e = temp__4655__auto__;
        return cljs.core.second(e);
      } else {
        return p1__34170_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct(var_args) {
  var args34178 = [];
  var len__30669__auto___34187 = arguments.length;
  var i__30670__auto___34188 = 0;
  while (true) {
    if (i__30670__auto___34188 < len__30669__auto___34187) {
      args34178.push(arguments[i__30670__auto___34188]);
      var G__34189 = i__30670__auto___34188 + 1;
      i__30670__auto___34188 = G__34189;
      continue;
    } else {
    }
    break;
  }
  var G__34180 = args34178.length;
  switch(G__34180) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34178.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__34191 = null;
        var G__34191__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__34191__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__34191__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__34191 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__34191__0.call(this);
            case 1:
              return G__34191__1.call(this, result);
            case 2:
              return G__34191__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__34191.cljs$core$IFn$_invoke$arity$0 = G__34191__0;
        G__34191.cljs$core$IFn$_invoke$arity$1 = G__34191__1;
        G__34191.cljs$core$IFn$_invoke$arity$2 = G__34191__2;
        return G__34191;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__34185, seen__$1) {
        while (true) {
          var vec__34186 = p__34185;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34186, 0, null);
          var xs__$1 = vec__34186;
          var temp__4657__auto__ = cljs.core.seq(xs__$1);
          if (temp__4657__auto__) {
            var s = temp__4657__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__34192 = cljs.core.rest(s);
              var G__34193 = seen__$1;
              p__34185 = G__34192;
              seen__$1 = G__34193;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__34194 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__34195 = cljs.core.next(s__$1);
      ret = G__34194;
      s__$1 = G__34195;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__34198 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__34199 = cljs.core.next(ks);
      var G__34200 = cljs.core.next(vs);
      map = G__34198;
      ks = G__34199;
      vs = G__34200;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key(var_args) {
  var args34203 = [];
  var len__30669__auto___34210 = arguments.length;
  var i__30670__auto___34211 = 0;
  while (true) {
    if (i__30670__auto___34211 < len__30669__auto___34210) {
      args34203.push(arguments[i__30670__auto___34211]);
      var G__34212 = i__30670__auto___34211 + 1;
      i__30670__auto___34211 = G__34212;
      continue;
    } else {
    }
    break;
  }
  var G__34209 = args34203.length;
  switch(G__34209) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args34203.slice(3), 0, null);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__34201_SHARP_, p2__34202_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__34201_SHARP_, p2__34202_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq34204) {
  var G__34205 = cljs.core.first(seq34204);
  var seq34204__$1 = cljs.core.next(seq34204);
  var G__34206 = cljs.core.first(seq34204__$1);
  var seq34204__$2 = cljs.core.next(seq34204__$1);
  var G__34207 = cljs.core.first(seq34204__$2);
  var seq34204__$3 = cljs.core.next(seq34204__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__34205, G__34206, G__34207, seq34204__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key(var_args) {
  var args34216 = [];
  var len__30669__auto___34223 = arguments.length;
  var i__30670__auto___34224 = 0;
  while (true) {
    if (i__30670__auto___34224 < len__30669__auto___34223) {
      args34216.push(arguments[i__30670__auto___34224]);
      var G__34225 = i__30670__auto___34224 + 1;
      i__30670__auto___34224 = G__34225;
      continue;
    } else {
    }
    break;
  }
  var G__34222 = args34216.length;
  switch(G__34222) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args34216.slice(3), 0, null);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__34214_SHARP_, p2__34215_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__34214_SHARP_, p2__34215_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq34217) {
  var G__34218 = cljs.core.first(seq34217);
  var seq34217__$1 = cljs.core.next(seq34217);
  var G__34219 = cljs.core.first(seq34217__$1);
  var seq34217__$2 = cljs.core.next(seq34217__$1);
  var G__34220 = cljs.core.first(seq34217__$2);
  var seq34217__$3 = cljs.core.next(seq34217__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__34218, G__34219, G__34220, seq34217__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all(var_args) {
  var args34227 = [];
  var len__30669__auto___34230 = arguments.length;
  var i__30670__auto___34231 = 0;
  while (true) {
    if (i__30670__auto___34231 < len__30669__auto___34230) {
      args34227.push(arguments[i__30670__auto___34231]);
      var G__34232 = i__30670__auto___34231 + 1;
      i__30670__auto___34231 = G__34232;
      continue;
    } else {
    }
    break;
  }
  var G__34229 = args34227.length;
  switch(G__34229) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34227.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__34234 = null;
        var G__34234__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__34234__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__34234__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__34234 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__34234__0.call(this);
            case 1:
              return G__34234__1.call(this, result);
            case 2:
              return G__34234__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__34234.cljs$core$IFn$_invoke$arity$0 = G__34234__0;
        G__34234.cljs$core$IFn$_invoke$arity$1 = G__34234__1;
        G__34234.cljs$core$IFn$_invoke$arity$2 = G__34234__2;
        return G__34234;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while(var_args) {
  var args34235 = [];
  var len__30669__auto___34239 = arguments.length;
  var i__30670__auto___34240 = 0;
  while (true) {
    if (i__30670__auto___34240 < len__30669__auto___34239) {
      args34235.push(arguments[i__30670__auto___34240]);
      var G__34241 = i__30670__auto___34240 + 1;
      i__30670__auto___34240 = G__34241;
      continue;
    } else {
    }
    break;
  }
  var G__34237 = args34235.length;
  switch(G__34237) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34235.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__34243 = null;
      var G__34243__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__34243__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__34243__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__34243 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__34243__0.call(this);
          case 1:
            return G__34243__1.call(this, result);
          case 2:
            return G__34243__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34243.cljs$core$IFn$_invoke$arity$0 = G__34243__0;
      G__34243.cljs$core$IFn$_invoke$arity$1 = G__34243__1;
      G__34243.cljs$core$IFn$_invoke$arity$2 = G__34243__2;
      return G__34243;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.truth_(function() {
        var G__34238 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__34238) : pred.call(null, G__34238);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__34252 = function() {
      var G__34254 = cljs.core._entry_key(sc, e);
      var G__34255 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__34254, G__34255) : comp.call(null, G__34254, G__34255);
    }();
    var G__34253 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__34252, G__34253) : test.call(null, G__34252, G__34253);
  };
};
cljs.core.subseq = function cljs$core$subseq(var_args) {
  var args34256 = [];
  var len__30669__auto___34261 = arguments.length;
  var i__30670__auto___34262 = 0;
  while (true) {
    if (i__30670__auto___34262 < len__30669__auto___34261) {
      args34256.push(arguments[i__30670__auto___34262]);
      var G__34263 = i__30670__auto___34262 + 1;
      i__30670__auto___34262 = G__34263;
      continue;
    } else {
    }
    break;
  }
  var G__34258 = args34256.length;
  switch(G__34258) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34256.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__34259 = temp__4657__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34259, 0, null);
      var s = vec__34259;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__34260 = temp__4657__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34260, 0, null);
    var s = vec__34260;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq(var_args) {
  var args34265 = [];
  var len__30669__auto___34270 = arguments.length;
  var i__30670__auto___34271 = 0;
  while (true) {
    if (i__30670__auto___34271 < len__30669__auto___34270) {
      args34265.push(arguments[i__30670__auto___34271]);
      var G__34272 = i__30670__auto___34271 + 1;
      i__30670__auto___34271 = G__34272;
      continue;
    } else {
    }
    break;
  }
  var G__34267 = args34265.length;
  switch(G__34267) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34265.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__34268 = temp__4657__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34268, 0, null);
      var s = vec__34268;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__34269 = temp__4657__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34269, 0, null);
    var s = vec__34269;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.indexOf = function() {
  var G__34275 = null;
  var G__34275__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__34275__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__34275 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__34275__1.call(this, x);
      case 2:
        return G__34275__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34275.cljs$core$IFn$_invoke$arity$1 = G__34275__1;
  G__34275.cljs$core$IFn$_invoke$arity$2 = G__34275__2;
  return G__34275;
}();
cljs.core.Range.prototype.lastIndexOf = function() {
  var G__34276 = null;
  var G__34276__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__34276__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__34276 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__34276__1.call(this, x);
      case 2:
        return G__34276__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34276.cljs$core$IFn$_invoke$arity$1 = G__34276__1;
  G__34276.cljs$core$IFn$_invoke$arity$2 = G__34276__2;
  return G__34276;
}();
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__34274 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__34274);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__34277 = i + self__.step;
        var G__34278 = ret__$1;
        i = G__34277;
        ret = G__34278;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.step < 0) {
      if (self__.start > self__.end) {
        return rng__$1;
      } else {
        return null;
      }
    } else {
      if (self__.start === self__.end) {
        return null;
      } else {
        return rng__$1;
      }
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.range = function cljs$core$range(var_args) {
  var args34279 = [];
  var len__30669__auto___34282 = arguments.length;
  var i__30670__auto___34283 = 0;
  while (true) {
    if (i__30670__auto___34283 < len__30669__auto___34282) {
      args34279.push(arguments[i__30670__auto___34283]);
      var G__34284 = i__30670__auto___34283 + 1;
      i__30670__auto___34283 = G__34284;
      continue;
    } else {
    }
    break;
  }
  var G__34281 = args34279.length;
  switch(G__34281) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34279.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth(var_args) {
  var args34286 = [];
  var len__30669__auto___34289 = arguments.length;
  var i__30670__auto___34290 = 0;
  while (true) {
    if (i__30670__auto___34290 < len__30669__auto___34289) {
      args34286.push(arguments[i__30670__auto___34290]);
      var G__34291 = i__30670__auto___34290 + 1;
      i__30670__auto___34290 = G__34291;
      continue;
    } else {
    }
    break;
  }
  var G__34288 = args34286.length;
  switch(G__34288) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34286.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__34293 = null;
        var G__34293__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__34293__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__34293__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__34293 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__34293__0.call(this);
            case 1:
              return G__34293__1.call(this, result);
            case 2:
              return G__34293__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__34293.cljs$core$IFn$_invoke$arity$0 = G__34293__0;
        G__34293.cljs$core$IFn$_invoke$arity$1 = G__34293__1;
        G__34293.cljs$core$IFn$_invoke$arity$2 = G__34293__2;
        return G__34293;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by(var_args) {
  var args34295 = [];
  var len__30669__auto___34298 = arguments.length;
  var i__30670__auto___34299 = 0;
  while (true) {
    if (i__30670__auto___34299 < len__30669__auto___34298) {
      args34295.push(arguments[i__30670__auto___34299]);
      var G__34300 = i__30670__auto___34299 + 1;
      i__30670__auto___34299 = G__34300;
      continue;
    } else {
    }
    break;
  }
  var G__34297 = args34295.length;
  switch(G__34297) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34295.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__34302 = null;
        var G__34302__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__34302__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__34302__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__34302 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__34302__0.call(this);
            case 1:
              return G__34302__1.call(this, result);
            case 2:
              return G__34302__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__34302.cljs$core$IFn$_invoke$arity$0 = G__34302__0;
        G__34302.cljs$core$IFn$_invoke$arity$1 = G__34302__1;
        G__34302.cljs$core$IFn$_invoke$arity$2 = G__34302__2;
        return G__34302;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4657__auto__) {
        return function(p1__34294_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__34294_SHARP_) : f.call(null, p1__34294_SHARP_));
        };
      }(fst, fv, s, temp__4657__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions(var_args) {
  var args34303 = [];
  var len__30669__auto___34308 = arguments.length;
  var i__30670__auto___34309 = 0;
  while (true) {
    if (i__30670__auto___34309 < len__30669__auto___34308) {
      args34303.push(arguments[i__30670__auto___34309]);
      var G__34310 = i__30670__auto___34309 + 1;
      i__30670__auto___34309 = G__34310;
      continue;
    } else {
    }
    break;
  }
  var G__34305 = args34303.length;
  switch(G__34305) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34303.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4655__auto__ = cljs.core.seq(coll);
    if (temp__4655__auto__) {
      var s = temp__4655__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__34306 = init;
        var G__34307 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__34306, G__34307) : f.call(null, G__34306, G__34307);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt(var_args) {
  var args34322 = [];
  var len__30669__auto___34329 = arguments.length;
  var i__30670__auto___34330 = 0;
  while (true) {
    if (i__30670__auto___34330 < len__30669__auto___34329) {
      args34322.push(arguments[i__30670__auto___34330]);
      var G__34331 = i__30670__auto___34330 + 1;
      i__30670__auto___34330 = G__34331;
      continue;
    } else {
    }
    break;
  }
  var G__34328 = args34322.length;
  switch(G__34328) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args34322.slice(3), 0, null);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__34333 = null;
    var G__34333__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__34333__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__34333__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__34333__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__34333__4 = function() {
      var G__34334__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__34334 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__34335__i = 0, G__34335__a = new Array(arguments.length - 3);
          while (G__34335__i < G__34335__a.length) {
            G__34335__a[G__34335__i] = arguments[G__34335__i + 3];
            ++G__34335__i;
          }
          args = new cljs.core.IndexedSeq(G__34335__a, 0);
        }
        return G__34334__delegate.call(this, x, y, z, args);
      };
      G__34334.cljs$lang$maxFixedArity = 3;
      G__34334.cljs$lang$applyTo = function(arglist__34336) {
        var x = cljs.core.first(arglist__34336);
        arglist__34336 = cljs.core.next(arglist__34336);
        var y = cljs.core.first(arglist__34336);
        arglist__34336 = cljs.core.next(arglist__34336);
        var z = cljs.core.first(arglist__34336);
        var args = cljs.core.rest(arglist__34336);
        return G__34334__delegate(x, y, z, args);
      };
      G__34334.cljs$core$IFn$_invoke$arity$variadic = G__34334__delegate;
      return G__34334;
    }();
    G__34333 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__34333__0.call(this);
        case 1:
          return G__34333__1.call(this, x);
        case 2:
          return G__34333__2.call(this, x, y);
        case 3:
          return G__34333__3.call(this, x, y, z);
        default:
          var G__34337 = null;
          if (arguments.length > 3) {
            var G__34338__i = 0, G__34338__a = new Array(arguments.length - 3);
            while (G__34338__i < G__34338__a.length) {
              G__34338__a[G__34338__i] = arguments[G__34338__i + 3];
              ++G__34338__i;
            }
            G__34337 = new cljs.core.IndexedSeq(G__34338__a, 0);
          }
          return G__34333__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__34337);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__34333.cljs$lang$maxFixedArity = 3;
    G__34333.cljs$lang$applyTo = G__34333__4.cljs$lang$applyTo;
    G__34333.cljs$core$IFn$_invoke$arity$0 = G__34333__0;
    G__34333.cljs$core$IFn$_invoke$arity$1 = G__34333__1;
    G__34333.cljs$core$IFn$_invoke$arity$2 = G__34333__2;
    G__34333.cljs$core$IFn$_invoke$arity$3 = G__34333__3;
    G__34333.cljs$core$IFn$_invoke$arity$variadic = G__34333__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__34333;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__34339 = null;
    var G__34339__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__34339__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__34339__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__34339__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__34339__4 = function() {
      var G__34340__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__34340 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__34341__i = 0, G__34341__a = new Array(arguments.length - 3);
          while (G__34341__i < G__34341__a.length) {
            G__34341__a[G__34341__i] = arguments[G__34341__i + 3];
            ++G__34341__i;
          }
          args = new cljs.core.IndexedSeq(G__34341__a, 0);
        }
        return G__34340__delegate.call(this, x, y, z, args);
      };
      G__34340.cljs$lang$maxFixedArity = 3;
      G__34340.cljs$lang$applyTo = function(arglist__34342) {
        var x = cljs.core.first(arglist__34342);
        arglist__34342 = cljs.core.next(arglist__34342);
        var y = cljs.core.first(arglist__34342);
        arglist__34342 = cljs.core.next(arglist__34342);
        var z = cljs.core.first(arglist__34342);
        var args = cljs.core.rest(arglist__34342);
        return G__34340__delegate(x, y, z, args);
      };
      G__34340.cljs$core$IFn$_invoke$arity$variadic = G__34340__delegate;
      return G__34340;
    }();
    G__34339 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__34339__0.call(this);
        case 1:
          return G__34339__1.call(this, x);
        case 2:
          return G__34339__2.call(this, x, y);
        case 3:
          return G__34339__3.call(this, x, y, z);
        default:
          var G__34343 = null;
          if (arguments.length > 3) {
            var G__34344__i = 0, G__34344__a = new Array(arguments.length - 3);
            while (G__34344__i < G__34344__a.length) {
              G__34344__a[G__34344__i] = arguments[G__34344__i + 3];
              ++G__34344__i;
            }
            G__34343 = new cljs.core.IndexedSeq(G__34344__a, 0);
          }
          return G__34339__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__34343);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__34339.cljs$lang$maxFixedArity = 3;
    G__34339.cljs$lang$applyTo = G__34339__4.cljs$lang$applyTo;
    G__34339.cljs$core$IFn$_invoke$arity$0 = G__34339__0;
    G__34339.cljs$core$IFn$_invoke$arity$1 = G__34339__1;
    G__34339.cljs$core$IFn$_invoke$arity$2 = G__34339__2;
    G__34339.cljs$core$IFn$_invoke$arity$3 = G__34339__3;
    G__34339.cljs$core$IFn$_invoke$arity$variadic = G__34339__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__34339;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__34345 = null;
    var G__34345__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__34345__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__34345__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__34345__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__34345__4 = function() {
      var G__34346__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__34346 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__34347__i = 0, G__34347__a = new Array(arguments.length - 3);
          while (G__34347__i < G__34347__a.length) {
            G__34347__a[G__34347__i] = arguments[G__34347__i + 3];
            ++G__34347__i;
          }
          args = new cljs.core.IndexedSeq(G__34347__a, 0);
        }
        return G__34346__delegate.call(this, x, y, z, args);
      };
      G__34346.cljs$lang$maxFixedArity = 3;
      G__34346.cljs$lang$applyTo = function(arglist__34348) {
        var x = cljs.core.first(arglist__34348);
        arglist__34348 = cljs.core.next(arglist__34348);
        var y = cljs.core.first(arglist__34348);
        arglist__34348 = cljs.core.next(arglist__34348);
        var z = cljs.core.first(arglist__34348);
        var args = cljs.core.rest(arglist__34348);
        return G__34346__delegate(x, y, z, args);
      };
      G__34346.cljs$core$IFn$_invoke$arity$variadic = G__34346__delegate;
      return G__34346;
    }();
    G__34345 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__34345__0.call(this);
        case 1:
          return G__34345__1.call(this, x);
        case 2:
          return G__34345__2.call(this, x, y);
        case 3:
          return G__34345__3.call(this, x, y, z);
        default:
          var G__34349 = null;
          if (arguments.length > 3) {
            var G__34350__i = 0, G__34350__a = new Array(arguments.length - 3);
            while (G__34350__i < G__34350__a.length) {
              G__34350__a[G__34350__i] = arguments[G__34350__i + 3];
              ++G__34350__i;
            }
            G__34349 = new cljs.core.IndexedSeq(G__34350__a, 0);
          }
          return G__34345__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__34349);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__34345.cljs$lang$maxFixedArity = 3;
    G__34345.cljs$lang$applyTo = G__34345__4.cljs$lang$applyTo;
    G__34345.cljs$core$IFn$_invoke$arity$0 = G__34345__0;
    G__34345.cljs$core$IFn$_invoke$arity$1 = G__34345__1;
    G__34345.cljs$core$IFn$_invoke$arity$2 = G__34345__2;
    G__34345.cljs$core$IFn$_invoke$arity$3 = G__34345__3;
    G__34345.cljs$core$IFn$_invoke$arity$variadic = G__34345__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__34345;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__34351 = null;
      var G__34351__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__34312_SHARP_, p2__34313_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__34312_SHARP_, p2__34313_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__34313_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__34313_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__34351__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__34314_SHARP_, p2__34315_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__34314_SHARP_, p2__34315_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__34315_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__34315_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__34351__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__34316_SHARP_, p2__34317_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__34316_SHARP_, p2__34317_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__34317_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__34317_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__34351__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__34318_SHARP_, p2__34319_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__34318_SHARP_, p2__34319_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__34319_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__34319_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__34351__4 = function() {
        var G__34352__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__34320_SHARP_, p2__34321_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__34320_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__34321_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__34352 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__34353__i = 0, G__34353__a = new Array(arguments.length - 3);
            while (G__34353__i < G__34353__a.length) {
              G__34353__a[G__34353__i] = arguments[G__34353__i + 3];
              ++G__34353__i;
            }
            args = new cljs.core.IndexedSeq(G__34353__a, 0);
          }
          return G__34352__delegate.call(this, x, y, z, args);
        };
        G__34352.cljs$lang$maxFixedArity = 3;
        G__34352.cljs$lang$applyTo = function(arglist__34354) {
          var x = cljs.core.first(arglist__34354);
          arglist__34354 = cljs.core.next(arglist__34354);
          var y = cljs.core.first(arglist__34354);
          arglist__34354 = cljs.core.next(arglist__34354);
          var z = cljs.core.first(arglist__34354);
          var args = cljs.core.rest(arglist__34354);
          return G__34352__delegate(x, y, z, args);
        };
        G__34352.cljs$core$IFn$_invoke$arity$variadic = G__34352__delegate;
        return G__34352;
      }();
      G__34351 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__34351__0.call(this);
          case 1:
            return G__34351__1.call(this, x);
          case 2:
            return G__34351__2.call(this, x, y);
          case 3:
            return G__34351__3.call(this, x, y, z);
          default:
            var G__34355 = null;
            if (arguments.length > 3) {
              var G__34356__i = 0, G__34356__a = new Array(arguments.length - 3);
              while (G__34356__i < G__34356__a.length) {
                G__34356__a[G__34356__i] = arguments[G__34356__i + 3];
                ++G__34356__i;
              }
              G__34355 = new cljs.core.IndexedSeq(G__34356__a, 0);
            }
            return G__34351__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__34355);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34351.cljs$lang$maxFixedArity = 3;
      G__34351.cljs$lang$applyTo = G__34351__4.cljs$lang$applyTo;
      G__34351.cljs$core$IFn$_invoke$arity$0 = G__34351__0;
      G__34351.cljs$core$IFn$_invoke$arity$1 = G__34351__1;
      G__34351.cljs$core$IFn$_invoke$arity$2 = G__34351__2;
      G__34351.cljs$core$IFn$_invoke$arity$3 = G__34351__3;
      G__34351.cljs$core$IFn$_invoke$arity$variadic = G__34351__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__34351;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq34323) {
  var G__34324 = cljs.core.first(seq34323);
  var seq34323__$1 = cljs.core.next(seq34323);
  var G__34325 = cljs.core.first(seq34323__$1);
  var seq34323__$2 = cljs.core.next(seq34323__$1);
  var G__34326 = cljs.core.first(seq34323__$2);
  var seq34323__$3 = cljs.core.next(seq34323__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__34324, G__34325, G__34326, seq34323__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun(var_args) {
  var args34357 = [];
  var len__30669__auto___34360 = arguments.length;
  var i__30670__auto___34361 = 0;
  while (true) {
    if (i__30670__auto___34361 < len__30669__auto___34360) {
      args34357.push(arguments[i__30670__auto___34361]);
      var G__34362 = i__30670__auto___34361 + 1;
      i__30670__auto___34361 = G__34362;
      continue;
    } else {
    }
    break;
  }
  var G__34359 = args34357.length;
  switch(G__34359) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34357.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__34364 = cljs.core.next(coll);
      coll = G__34364;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__34365 = n - 1;
      var G__34366 = cljs.core.next(coll);
      n = G__34365;
      coll = G__34366;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall(var_args) {
  var args34367 = [];
  var len__30669__auto___34370 = arguments.length;
  var i__30670__auto___34371 = 0;
  while (true) {
    if (i__30670__auto___34371 < len__30669__auto___34370) {
      args34367.push(arguments[i__30670__auto___34371]);
      var G__34372 = i__30670__auto___34371 + 1;
      i__30670__auto___34371 = G__34372;
      continue;
    } else {
    }
    break;
  }
  var G__34369 = args34367.length;
  switch(G__34369) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34367.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__34375 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34375, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34375, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__29600__auto__ = flags;
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_34383 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__29600__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__29600__auto__)) {
              return or__29600__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__34384_34390 = cljs.core.first(coll);
          var G__34385_34391 = writer;
          var G__34386_34392 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__34384_34390, G__34385_34391, G__34386_34392) : print_one.call(null, G__34384_34390, G__34385_34391, G__34386_34392);
        } else {
        }
        var coll_34393__$1 = cljs.core.next(coll);
        var n_34394 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_34393__$1 && (n_34394 == null || !(n_34394 === 0))) {
            cljs.core._write(writer, sep);
            var G__34387_34395 = cljs.core.first(coll_34393__$1);
            var G__34388_34396 = writer;
            var G__34389_34397 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__34387_34395, G__34388_34396, G__34389_34397) : print_one.call(null, G__34387_34395, G__34388_34396, G__34389_34397);
            var G__34398 = cljs.core.next(coll_34393__$1);
            var G__34399 = n_34394 - 1;
            coll_34393__$1 = G__34398;
            n_34394 = G__34399;
            continue;
          } else {
            if (cljs.core.seq(coll_34393__$1) && n_34394 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__29600__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__29600__auto__)) {
                  return or__29600__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_34383;
  }
};
cljs.core.write_all = function cljs$core$write_all(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34406 = arguments.length;
  var i__30670__auto___34407 = 0;
  while (true) {
    if (i__30670__auto___34407 < len__30669__auto___34406) {
      args__30676__auto__.push(arguments[i__30670__auto___34407]);
      var G__34408 = i__30670__auto___34407 + 1;
      i__30670__auto___34407 = G__34408;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__34402 = cljs.core.seq(ss);
  var chunk__34403 = null;
  var count__34404 = 0;
  var i__34405 = 0;
  while (true) {
    if (i__34405 < count__34404) {
      var s = chunk__34403.cljs$core$IIndexed$_nth$arity$2(null, i__34405);
      cljs.core._write(writer, s);
      var G__34409 = seq__34402;
      var G__34410 = chunk__34403;
      var G__34411 = count__34404;
      var G__34412 = i__34405 + 1;
      seq__34402 = G__34409;
      chunk__34403 = G__34410;
      count__34404 = G__34411;
      i__34405 = G__34412;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__34402);
      if (temp__4657__auto__) {
        var seq__34402__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__34402__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first(seq__34402__$1);
          var G__34413 = cljs.core.chunk_rest(seq__34402__$1);
          var G__34414 = c__30411__auto__;
          var G__34415 = cljs.core.count(c__30411__auto__);
          var G__34416 = 0;
          seq__34402 = G__34413;
          chunk__34403 = G__34414;
          count__34404 = G__34415;
          i__34405 = G__34416;
          continue;
        } else {
          var s = cljs.core.first(seq__34402__$1);
          cljs.core._write(writer, s);
          var G__34417 = cljs.core.next(seq__34402__$1);
          var G__34418 = null;
          var G__34419 = 0;
          var G__34420 = 0;
          seq__34402 = G__34417;
          chunk__34403 = G__34418;
          count__34404 = G__34419;
          i__34405 = G__34420;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq34400) {
  var G__34401 = cljs.core.first(seq34400);
  var seq34400__$1 = cljs.core.next(seq34400);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__34401, seq34400__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj34422 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj34422;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__29588__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)));
  if (and__29588__auto__) {
    var and__29588__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || obj.cljs$core$IMeta$ ? true : false : false;
    if (and__29588__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__29588__auto____$1;
    }
  } else {
    return and__29588__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      var G__34437_34445 = cljs.core.meta(obj);
      var G__34438_34446 = writer;
      var G__34439_34447 = opts;
      cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__34437_34445, G__34438_34446, G__34439_34447) : cljs.core.pr_writer.call(null, G__34437_34445, G__34438_34446, G__34439_34447);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
        return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
      } else {
        if (obj === true || obj === false || typeof obj === "number") {
          return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
        } else {
          if (cljs.core.object_QMARK_(obj)) {
            cljs.core._write(writer, "#js ");
            var G__34441 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
            }, cljs.core.js_keys(obj));
            var G__34442 = cljs.core.pr_writer;
            var G__34443 = writer;
            var G__34444 = opts;
            return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__34441, G__34442, G__34443, G__34444) : cljs.core.print_map.call(null, G__34441, G__34442, G__34443, G__34444);
          } else {
            if (cljs.core.array_QMARK_(obj)) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
            } else {
              if (goog.isString(obj)) {
                if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                  return cljs.core._write(writer, cljs.core.quote_string(obj));
                } else {
                  return cljs.core._write(writer, obj);
                }
              } else {
                if (goog.isFunction(obj)) {
                  var name = obj.name;
                  var name__$1 = cljs.core.truth_(function() {
                    var or__29600__auto__ = name == null;
                    if (or__29600__auto__) {
                      return or__29600__auto__;
                    } else {
                      return goog.string.isEmpty(name);
                    }
                  }()) ? "Function" : name;
                  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, ' "', [cljs.core.str(obj)].join(""), '"]'], 0));
                } else {
                  if (obj instanceof Date) {
                    var normalize = function(n, len) {
                      var ns = [cljs.core.str(n)].join("");
                      while (true) {
                        if (cljs.core.count(ns) < len) {
                          var G__34448 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                          ns = G__34448;
                          continue;
                        } else {
                          return ns;
                        }
                        break;
                      }
                    };
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                  } else {
                    if (cljs.core.regexp_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                    } else {
                      if (cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)) {
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                      } else {
                        var name = obj.constructor.name;
                        var name__$1 = cljs.core.truth_(function() {
                          var or__29600__auto__ = name == null;
                          if (or__29600__auto__) {
                            return or__29600__auto__;
                          } else {
                            return goog.string.isEmpty(name);
                          }
                        }()) ? "Object" : name;
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, " ", [cljs.core.str(obj)].join(""), "]"], 0));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var alt_impl = temp__4655__auto__;
    var G__34452 = obj;
    var G__34453 = writer;
    var G__34454 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__34452, G__34453, G__34454) : alt_impl.call(null, G__34452, G__34453, G__34454);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__34459 = cljs.core.seq(cljs.core.next(objs));
  var chunk__34460 = null;
  var count__34461 = 0;
  var i__34462 = 0;
  while (true) {
    if (i__34462 < count__34461) {
      var obj = chunk__34460.cljs$core$IIndexed$_nth$arity$2(null, i__34462);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__34463 = seq__34459;
      var G__34464 = chunk__34460;
      var G__34465 = count__34461;
      var G__34466 = i__34462 + 1;
      seq__34459 = G__34463;
      chunk__34460 = G__34464;
      count__34461 = G__34465;
      i__34462 = G__34466;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__34459);
      if (temp__4657__auto__) {
        var seq__34459__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__34459__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first(seq__34459__$1);
          var G__34467 = cljs.core.chunk_rest(seq__34459__$1);
          var G__34468 = c__30411__auto__;
          var G__34469 = cljs.core.count(c__30411__auto__);
          var G__34470 = 0;
          seq__34459 = G__34467;
          chunk__34460 = G__34468;
          count__34461 = G__34469;
          i__34462 = G__34470;
          continue;
        } else {
          var obj = cljs.core.first(seq__34459__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__34471 = cljs.core.next(seq__34459__$1);
          var G__34472 = null;
          var G__34473 = 0;
          var G__34474 = 0;
          seq__34459 = G__34471;
          chunk__34460 = G__34472;
          count__34461 = G__34473;
          i__34462 = G__34474;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(var_args) {
  var args34475 = [];
  var len__30669__auto___34478 = arguments.length;
  var i__30670__auto___34479 = 0;
  while (true) {
    if (i__30670__auto___34479 < len__30669__auto___34478) {
      args34475.push(arguments[i__30670__auto___34479]);
      var G__34480 = i__30670__auto___34479 + 1;
      i__30670__auto___34479 = G__34480;
      continue;
    } else {
    }
    break;
  }
  var G__34477 = args34475.length;
  switch(G__34477) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34475.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34483 = arguments.length;
  var i__30670__auto___34484 = 0;
  while (true) {
    if (i__30670__auto___34484 < len__30669__auto___34483) {
      args__30676__auto__.push(arguments[i__30670__auto___34484]);
      var G__34485 = i__30670__auto___34484 + 1;
      i__30670__auto___34484 = G__34485;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq34482) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34482));
};
cljs.core.prn_str = function cljs$core$prn_str(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34487 = arguments.length;
  var i__30670__auto___34488 = 0;
  while (true) {
    if (i__30670__auto___34488 < len__30669__auto___34487) {
      args__30676__auto__.push(arguments[i__30670__auto___34488]);
      var G__34489 = i__30670__auto___34488 + 1;
      i__30670__auto___34488 = G__34489;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq34486) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34486));
};
cljs.core.pr = function cljs$core$pr(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34491 = arguments.length;
  var i__30670__auto___34492 = 0;
  while (true) {
    if (i__30670__auto___34492 < len__30669__auto___34491) {
      args__30676__auto__.push(arguments[i__30670__auto___34492]);
      var G__34493 = i__30670__auto___34492 + 1;
      i__30670__auto___34492 = G__34493;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq34490) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34490));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__34494__i = 0, G__34494__a = new Array(arguments.length - 0);
      while (G__34494__i < G__34494__a.length) {
        G__34494__a[G__34494__i] = arguments[G__34494__i + 0];
        ++G__34494__i;
      }
      objs = new cljs.core.IndexedSeq(G__34494__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__34495) {
    var objs = cljs.core.seq(arglist__34495);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34497 = arguments.length;
  var i__30670__auto___34498 = 0;
  while (true) {
    if (i__30670__auto___34498 < len__30669__auto___34497) {
      args__30676__auto__.push(arguments[i__30670__auto___34498]);
      var G__34499 = i__30670__auto___34498 + 1;
      i__30670__auto___34498 = G__34499;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq34496) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34496));
};
cljs.core.println = function cljs$core$println(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34501 = arguments.length;
  var i__30670__auto___34502 = 0;
  while (true) {
    if (i__30670__auto___34502 < len__30669__auto___34501) {
      args__30676__auto__.push(arguments[i__30670__auto___34502]);
      var G__34503 = i__30670__auto___34502 + 1;
      i__30670__auto___34502 = G__34503;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq34500) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34500));
};
cljs.core.println_str = function cljs$core$println_str(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34505 = arguments.length;
  var i__30670__auto___34506 = 0;
  while (true) {
    if (i__30670__auto___34506 < len__30669__auto___34505) {
      args__30676__auto__.push(arguments[i__30670__auto___34506]);
      var G__34507 = i__30670__auto___34506 + 1;
      i__30670__auto___34506 = G__34507;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq34504) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34504));
};
cljs.core.prn = function cljs$core$prn(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34509 = arguments.length;
  var i__30670__auto___34510 = 0;
  while (true) {
    if (i__30670__auto___34510 < len__30669__auto___34509) {
      args__30676__auto__.push(arguments[i__30670__auto___34510]);
      var G__34511 = i__30670__auto___34510 + 1;
      i__30670__auto___34510 = G__34511;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq34508) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34508));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__34518_34524 = cljs.core.key(e);
    var G__34519_34525 = w;
    var G__34520_34526 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__34518_34524, G__34519_34525, G__34520_34526) : print_one.call(null, G__34518_34524, G__34519_34525, G__34520_34526);
    cljs.core._write(w, " ");
    var G__34521 = cljs.core.val(e);
    var G__34522 = w;
    var G__34523 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__34521, G__34522, G__34523) : print_one.call(null, G__34521, G__34522, G__34523);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34530 = arguments.length;
  var i__30670__auto___34531 = 0;
  while (true) {
    if (i__30670__auto___34531 < len__30669__auto___34530) {
      args__30676__auto__.push(arguments[i__30670__auto___34531]);
      var G__34532 = i__30670__auto___34531 + 1;
      i__30670__auto___34531 = G__34532;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 2 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(2), 0, null) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30677__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq34527) {
  var G__34528 = cljs.core.first(seq34527);
  var seq34527__$1 = cljs.core.next(seq34527);
  var G__34529 = cljs.core.first(seq34527__$1);
  var seq34527__$2 = cljs.core.next(seq34527__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__34528, G__34529, seq34527__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym(var_args) {
  var args34533 = [];
  var len__30669__auto___34536 = arguments.length;
  var i__30670__auto___34537 = 0;
  while (true) {
    if (i__30670__auto___34537 < len__30669__auto___34536) {
      args34533.push(arguments[i__30670__auto___34537]);
      var G__34538 = i__30670__auto___34537 + 1;
      i__30670__auto___34537 = G__34538;
      continue;
    } else {
    }
    break;
  }
  var G__34535 = args34533.length;
  switch(G__34535) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34533.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
  var self__ = this;
  var x__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(x) {
  return cljs.core._realized_QMARK_(x);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__34540_SHARP_, p2__34541_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__34540_SHARP_, p2__34541_SHARP_) : rf.call(null, p1__34540_SHARP_, p2__34541_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__34542 = null;
      var G__34542__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__34542__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__34542__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__34542 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__34542__0.call(this);
          case 1:
            return G__34542__1.call(this, result);
          case 2:
            return G__34542__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__34542.cljs$core$IFn$_invoke$arity$0 = G__34542__0;
      G__34542.cljs$core$IFn$_invoke$arity$1 = G__34542__1;
      G__34542.cljs$core$IFn$_invoke$arity$2 = G__34542__2;
      return G__34542;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe(var_args) {
  var args34543 = [];
  var len__30669__auto___34546 = arguments.length;
  var i__30670__auto___34547 = 0;
  while (true) {
    if (i__30670__auto___34547 < len__30669__auto___34546) {
      args34543.push(arguments[i__30670__auto___34547]);
      var G__34548 = i__30670__auto___34547 + 1;
      i__30670__auto___34547 = G__34548;
      continue;
    } else {
    }
    break;
  }
  var G__34545 = args34543.length;
  switch(G__34545) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34543.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__34550 = null;
        var G__34550__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__34550__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__34550__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__34550 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__34550__0.call(this);
            case 1:
              return G__34550__1.call(this, result);
            case 2:
              return G__34550__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__34550.cljs$core$IFn$_invoke$arity$0 = G__34550__0;
        G__34550.cljs$core$IFn$_invoke$arity$1 = G__34550__1;
        G__34550.cljs$core$IFn$_invoke$arity$2 = G__34550__2;
        return G__34550;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample(var_args) {
  var args34551 = [];
  var len__30669__auto___34554 = arguments.length;
  var i__30670__auto___34555 = 0;
  while (true) {
    if (i__30670__auto___34555 < len__30669__auto___34554) {
      args34551.push(arguments[i__30670__auto___34555]);
      var G__34556 = i__30670__auto___34555 + 1;
      i__30670__auto___34555 = G__34556;
      continue;
    } else {
    }
    break;
  }
  var G__34553 = args34551.length;
  switch(G__34553) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34551.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.indexOf = function() {
  var G__34558 = null;
  var G__34558__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, 0);
  };
  var G__34558__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__34558 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__34558__1.call(this, x);
      case 2:
        return G__34558__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34558.cljs$core$IFn$_invoke$arity$1 = G__34558__1;
  G__34558.cljs$core$IFn$_invoke$arity$2 = G__34558__2;
  return G__34558;
}();
cljs.core.Eduction.prototype.lastIndexOf = function() {
  var G__34559 = null;
  var G__34559__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, cljs.core.count(coll__$1));
  };
  var G__34559__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__34559 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__34559__1.call(this, x);
      case 2:
        return G__34559__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34559.cljs$core$IFn$_invoke$arity$1 = G__34559__1;
  G__34559.cljs$core$IFn$_invoke$arity$2 = G__34559__2;
  return G__34559;
}();
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__30605__auto__ = this;
  return cljs.core.es6_iterator(this__30605__auto__);
};
cljs.core.eduction = function cljs$core$eduction(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34561 = arguments.length;
  var i__30670__auto___34562 = 0;
  while (true) {
    if (i__30670__auto___34562 < len__30669__auto___34561) {
      args__30676__auto__.push(arguments[i__30670__auto___34562]);
      var G__34563 = i__30670__auto___34562 + 1;
      i__30670__auto___34562 = G__34563;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq34560) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq34560));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__34565_SHARP_, p2__34564_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__34564_SHARP_) : proc.call(null, p2__34564_SHARP_);
  }, null, coll);
  return null;
};
cljs.core.IEncodeJS = function() {
};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__30263__auto__ = x == null ? null : x;
    var m__30264__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto__.call(null, x);
    } else {
      var m__30264__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__30263__auto__ = x == null ? null : x;
    var m__30264__auto__ = cljs.core._key__GT_js[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto__.call(null, x);
    } else {
      var m__30264__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__30264__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
      }
    }
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__34584_34594 = cljs.core.seq(x);
            var chunk__34585_34595 = null;
            var count__34586_34596 = 0;
            var i__34587_34597 = 0;
            while (true) {
              if (i__34587_34597 < count__34586_34596) {
                var vec__34588_34598 = chunk__34585_34595.cljs$core$IIndexed$_nth$arity$2(null, i__34587_34597);
                var k_34599 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34588_34598, 0, null);
                var v_34600 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34588_34598, 1, null);
                m[cljs.core.key__GT_js(k_34599)] = cljs$core$clj__GT_js(v_34600);
                var G__34601 = seq__34584_34594;
                var G__34602 = chunk__34585_34595;
                var G__34603 = count__34586_34596;
                var G__34604 = i__34587_34597 + 1;
                seq__34584_34594 = G__34601;
                chunk__34585_34595 = G__34602;
                count__34586_34596 = G__34603;
                i__34587_34597 = G__34604;
                continue;
              } else {
                var temp__4657__auto___34605 = cljs.core.seq(seq__34584_34594);
                if (temp__4657__auto___34605) {
                  var seq__34584_34606__$1 = temp__4657__auto___34605;
                  if (cljs.core.chunked_seq_QMARK_(seq__34584_34606__$1)) {
                    var c__30411__auto___34607 = cljs.core.chunk_first(seq__34584_34606__$1);
                    var G__34608 = cljs.core.chunk_rest(seq__34584_34606__$1);
                    var G__34609 = c__30411__auto___34607;
                    var G__34610 = cljs.core.count(c__30411__auto___34607);
                    var G__34611 = 0;
                    seq__34584_34594 = G__34608;
                    chunk__34585_34595 = G__34609;
                    count__34586_34596 = G__34610;
                    i__34587_34597 = G__34611;
                    continue;
                  } else {
                    var vec__34589_34612 = cljs.core.first(seq__34584_34606__$1);
                    var k_34613 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34589_34612, 0, null);
                    var v_34614 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34589_34612, 1, null);
                    m[cljs.core.key__GT_js(k_34613)] = cljs$core$clj__GT_js(v_34614);
                    var G__34615 = cljs.core.next(seq__34584_34606__$1);
                    var G__34616 = null;
                    var G__34617 = 0;
                    var G__34618 = 0;
                    seq__34584_34594 = G__34615;
                    chunk__34585_34595 = G__34616;
                    count__34586_34596 = G__34617;
                    i__34587_34597 = G__34618;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__34590_34619 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__34591_34620 = null;
              var count__34592_34621 = 0;
              var i__34593_34622 = 0;
              while (true) {
                if (i__34593_34622 < count__34592_34621) {
                  var x_34623__$1 = chunk__34591_34620.cljs$core$IIndexed$_nth$arity$2(null, i__34593_34622);
                  arr.push(x_34623__$1);
                  var G__34624 = seq__34590_34619;
                  var G__34625 = chunk__34591_34620;
                  var G__34626 = count__34592_34621;
                  var G__34627 = i__34593_34622 + 1;
                  seq__34590_34619 = G__34624;
                  chunk__34591_34620 = G__34625;
                  count__34592_34621 = G__34626;
                  i__34593_34622 = G__34627;
                  continue;
                } else {
                  var temp__4657__auto___34628 = cljs.core.seq(seq__34590_34619);
                  if (temp__4657__auto___34628) {
                    var seq__34590_34629__$1 = temp__4657__auto___34628;
                    if (cljs.core.chunked_seq_QMARK_(seq__34590_34629__$1)) {
                      var c__30411__auto___34630 = cljs.core.chunk_first(seq__34590_34629__$1);
                      var G__34631 = cljs.core.chunk_rest(seq__34590_34629__$1);
                      var G__34632 = c__30411__auto___34630;
                      var G__34633 = cljs.core.count(c__30411__auto___34630);
                      var G__34634 = 0;
                      seq__34590_34619 = G__34631;
                      chunk__34591_34620 = G__34632;
                      count__34592_34621 = G__34633;
                      i__34593_34622 = G__34634;
                      continue;
                    } else {
                      var x_34635__$1 = cljs.core.first(seq__34590_34629__$1);
                      arr.push(x_34635__$1);
                      var G__34636 = cljs.core.next(seq__34590_34629__$1);
                      var G__34637 = null;
                      var G__34638 = 0;
                      var G__34639 = 0;
                      seq__34590_34619 = G__34636;
                      chunk__34591_34620 = G__34637;
                      count__34592_34621 = G__34638;
                      i__34593_34622 = G__34639;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__30263__auto__ = x == null ? null : x;
    var m__30264__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__30264__auto__.call(null, x, options);
    } else {
      var m__30264__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__30264__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj(var_args) {
  var args34640 = [];
  var len__30669__auto___34665 = arguments.length;
  var i__30670__auto___34666 = 0;
  while (true) {
    if (i__30670__auto___34666 < len__30669__auto___34665) {
      args34640.push(arguments[i__30670__auto___34666]);
      var G__34667 = i__30670__auto___34666 + 1;
      i__30670__auto___34666 = G__34667;
      continue;
    } else {
    }
    break;
  }
  var G__34644 = args34640.length;
  switch(G__34644) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args34640.slice(1), 0, null);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30688__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__34645 = opts;
  var map__34645__$1 = (!(map__34645 == null) ? map__34645.cljs$lang$protocol_mask$partition0$ & 64 || map__34645.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__34645) : map__34645;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__34645__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__34645, map__34645__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__30380__auto__ = function(map__34645, map__34645__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__34659(s__34660) {
                      return new cljs.core.LazySeq(null, function(map__34645, map__34645__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__34660__$1 = s__34660;
                          while (true) {
                            var temp__4657__auto__ = cljs.core.seq(s__34660__$1);
                            if (temp__4657__auto__) {
                              var s__34660__$2 = temp__4657__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__34660__$2)) {
                                var c__30378__auto__ = cljs.core.chunk_first(s__34660__$2);
                                var size__30379__auto__ = cljs.core.count(c__30378__auto__);
                                var b__34662 = cljs.core.chunk_buffer(size__30379__auto__);
                                if (function() {
                                  var i__34661 = 0;
                                  while (true) {
                                    if (i__34661 < size__30379__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__30378__auto__, i__34661);
                                      cljs.core.chunk_append(b__34662, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__34669 = i__34661 + 1;
                                      i__34661 = G__34669;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__34662), cljs$core$thisfn_$_iter__34659(cljs.core.chunk_rest(s__34660__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__34662), null);
                                }
                              } else {
                                var k = cljs.core.first(s__34660__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__34659(cljs.core.rest(s__34660__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__34645, map__34645__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__34645, map__34645__$1, keywordize_keys, keyfn);
                  return iter__30380__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__34645, map__34645__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq34641) {
  var G__34642 = cljs.core.first(seq34641);
  var seq34641__$1 = cljs.core.next(seq34641);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__34642, seq34641__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__34671 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__34671) : cljs.core.atom.call(null, G__34671);
  }();
  return function(mem) {
    return function() {
      var G__34672__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__34672 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__34673__i = 0, G__34673__a = new Array(arguments.length - 0);
          while (G__34673__i < G__34673__a.length) {
            G__34673__a[G__34673__i] = arguments[G__34673__i + 0];
            ++G__34673__i;
          }
          args = new cljs.core.IndexedSeq(G__34673__a, 0);
        }
        return G__34672__delegate.call(this, args);
      };
      G__34672.cljs$lang$maxFixedArity = 0;
      G__34672.cljs$lang$applyTo = function(arglist__34674) {
        var args = cljs.core.seq(arglist__34674);
        return G__34672__delegate(args);
      };
      G__34672.cljs$core$IFn$_invoke$arity$variadic = G__34672__delegate;
      return G__34672;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline(var_args) {
  var args34675 = [];
  var len__30669__auto___34680 = arguments.length;
  var i__30670__auto___34681 = 0;
  while (true) {
    if (i__30670__auto___34681 < len__30669__auto___34680) {
      args34675.push(arguments[i__30670__auto___34681]);
      var G__34682 = i__30670__auto___34681 + 1;
      i__30670__auto___34681 = G__34682;
      continue;
    } else {
    }
    break;
  }
  var G__34679 = args34675.length;
  switch(G__34679) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args34675.slice(1), 0, null);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30688__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__34684 = ret;
      f = G__34684;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq34676) {
  var G__34677 = cljs.core.first(seq34676);
  var seq34676__$1 = cljs.core.next(seq34676);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__34677, seq34676__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand(var_args) {
  var args34685 = [];
  var len__30669__auto___34688 = arguments.length;
  var i__30670__auto___34689 = 0;
  while (true) {
    if (i__30670__auto___34689 < len__30669__auto___34688) {
      args34685.push(arguments[i__30670__auto___34689]);
      var G__34690 = i__30670__auto___34689 + 1;
      i__30670__auto___34689 = G__34690;
      continue;
    } else {
    }
    break;
  }
  var G__34687 = args34685.length;
  switch(G__34687) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34685.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__34693 = Math.random() * n;
  return Math.floor(G__34693);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__34695 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__34695) : cljs.core.atom.call(null, G__34695);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___34698 = arguments.length;
  var i__30670__auto___34699 = 0;
  while (true) {
    if (i__30670__auto___34699 < len__30669__auto___34698) {
      args__30676__auto__.push(arguments[i__30670__auto___34699]);
      var G__34700 = i__30670__auto___34699 + 1;
      i__30670__auto___34699 = G__34700;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq34696) {
  var G__34697 = cljs.core.first(seq34696);
  var seq34696__$1 = cljs.core.next(seq34696);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__34697, seq34696__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_(var_args) {
  var args34701 = [];
  var len__30669__auto___34705 = arguments.length;
  var i__30670__auto___34706 = 0;
  while (true) {
    if (i__30670__auto___34706 < len__30669__auto___34705) {
      args34701.push(arguments[i__30670__auto___34706]);
      var G__34707 = i__30670__auto___34706 + 1;
      i__30670__auto___34706 = G__34707;
      continue;
    } else {
    }
    break;
  }
  var G__34703 = args34701.length;
  switch(G__34703) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34701.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__34704 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__34704) : cljs.core.deref.call(null, G__34704);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__29600__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__29600__auto__) {
    return or__29600__auto__;
  } else {
    var or__29600__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__29600__auto____$1) {
      return or__29600__auto____$1;
    } else {
      var and__29588__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__29588__auto__) {
        var and__29588__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__29588__auto____$1) {
          var and__29588__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__29588__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__34709 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__34710 = i + 1;
                ret = G__34709;
                i = G__34710;
                continue;
              }
              break;
            }
          } else {
            return and__29588__auto____$2;
          }
        } else {
          return and__29588__auto____$1;
        }
      } else {
        return and__29588__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents(var_args) {
  var args34711 = [];
  var len__30669__auto___34715 = arguments.length;
  var i__30670__auto___34716 = 0;
  while (true) {
    if (i__30670__auto___34716 < len__30669__auto___34715) {
      args34711.push(arguments[i__30670__auto___34716]);
      var G__34717 = i__30670__auto___34716 + 1;
      i__30670__auto___34716 = G__34717;
      continue;
    } else {
    }
    break;
  }
  var G__34713 = args34711.length;
  switch(G__34713) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34711.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__34714 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__34714) : cljs.core.deref.call(null, G__34714);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors(var_args) {
  var args34719 = [];
  var len__30669__auto___34723 = arguments.length;
  var i__30670__auto___34724 = 0;
  while (true) {
    if (i__30670__auto___34724 < len__30669__auto___34723) {
      args34719.push(arguments[i__30670__auto___34724]);
      var G__34725 = i__30670__auto___34724 + 1;
      i__30670__auto___34724 = G__34725;
      continue;
    } else {
    }
    break;
  }
  var G__34721 = args34719.length;
  switch(G__34721) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34719.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__34722 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__34722) : cljs.core.deref.call(null, G__34722);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants(var_args) {
  var args34727 = [];
  var len__30669__auto___34731 = arguments.length;
  var i__30670__auto___34732 = 0;
  while (true) {
    if (i__30670__auto___34732 < len__30669__auto___34731) {
      args34727.push(arguments[i__30670__auto___34732]);
      var G__34733 = i__30670__auto___34732 + 1;
      i__30670__auto___34732 = G__34733;
      continue;
    } else {
    }
    break;
  }
  var G__34729 = args34727.length;
  switch(G__34729) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34727.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__34730 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__34730) : cljs.core.deref.call(null, G__34730);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive(var_args) {
  var args34735 = [];
  var len__30669__auto___34738 = arguments.length;
  var i__30670__auto___34739 = 0;
  while (true) {
    if (i__30670__auto___34739 < len__30669__auto___34738) {
      args34735.push(arguments[i__30670__auto___34739]);
      var G__34740 = i__30670__auto___34739 + 1;
      i__30670__auto___34739 = G__34740;
      continue;
    } else {
    }
    break;
  }
  var G__34737 = args34735.length;
  switch(G__34737) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34735.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error("Assert failed: (namespace parent)");
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error("Assert failed: (not\x3d tag parent)");
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__29600__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive(var_args) {
  var args34745 = [];
  var len__30669__auto___34748 = arguments.length;
  var i__30670__auto___34749 = 0;
  while (true) {
    if (i__30670__auto___34749 < len__30669__auto___34748) {
      args34745.push(arguments[i__30670__auto___34749]);
      var G__34750 = i__30670__auto___34749 + 1;
      i__30670__auto___34749 = G__34750;
      continue;
    } else {
    }
    break;
  }
  var G__34747 = args34745.length;
  switch(G__34747) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34745.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__34742_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__34742_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__34742_SHARP_), cljs.core.second(p1__34742_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__34743_SHARP_, p2__34744_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__34743_SHARP_, p2__34744_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__29600__auto__ = cljs.core.truth_(function() {
    var and__29588__auto__ = xprefs;
    if (cljs.core.truth_(and__29588__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__29588__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    var or__29600__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__34764 = cljs.core.rest(ps);
          ps = G__34764;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__29600__auto____$1)) {
      return or__29600__auto____$1;
    } else {
      var or__29600__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__34765 = cljs.core.rest(ps);
            ps = G__34765;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__29600__auto____$2)) {
        return or__29600__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__29600__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__34768) {
    var vec__34769 = p__34768;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34769, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34769, 1, null);
    var e = vec__34769;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__29600__auto__ = be == null;
        if (or__29600__auto__) {
          return or__29600__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._reset[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto__.call(null, mf);
    } else {
      var m__30264__auto____$1 = cljs.core._reset["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._add_method[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__30264__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__30264__auto____$1 = cljs.core._add_method["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__30264__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._remove_method[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__30264__auto__.call(null, mf, dispatch_val);
    } else {
      var m__30264__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__30264__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._prefer_method[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__30264__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__30264__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__30264__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._get_method[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__30264__auto__.call(null, mf, dispatch_val);
    } else {
      var m__30264__auto____$1 = cljs.core._get_method["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__30264__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._methods[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto__.call(null, mf);
    } else {
      var m__30264__auto____$1 = cljs.core._methods["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._prefers[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto__.call(null, mf);
    } else {
      var m__30264__auto____$1 = cljs.core._prefers["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto__.call(null, mf);
    } else {
      var m__30264__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__30263__auto__ = mf == null ? null : mf;
    var m__30264__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto__.call(null, mf);
    } else {
      var m__30264__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__30264__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__30264__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__34771 = null;
  var G__34771__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__34771__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__34771__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__34771__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__34771__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__34771__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__34771__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__34771__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__34771__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__34771__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__34771__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__34771__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__34771__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__34771__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__34771__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__34771__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__34771__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__34771__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__34771__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__34771__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__34771__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__34771__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__34771 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__34771__1.call(this, self__);
      case 2:
        return G__34771__2.call(this, self__, a);
      case 3:
        return G__34771__3.call(this, self__, a, b);
      case 4:
        return G__34771__4.call(this, self__, a, b, c);
      case 5:
        return G__34771__5.call(this, self__, a, b, c, d);
      case 6:
        return G__34771__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__34771__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__34771__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__34771__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__34771__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__34771__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__34771__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__34771__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__34771__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__34771__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__34771__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__34771__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__34771__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__34771__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__34771__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__34771__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__34771__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__34771.cljs$core$IFn$_invoke$arity$1 = G__34771__1;
  G__34771.cljs$core$IFn$_invoke$arity$2 = G__34771__2;
  G__34771.cljs$core$IFn$_invoke$arity$3 = G__34771__3;
  G__34771.cljs$core$IFn$_invoke$arity$4 = G__34771__4;
  G__34771.cljs$core$IFn$_invoke$arity$5 = G__34771__5;
  G__34771.cljs$core$IFn$_invoke$arity$6 = G__34771__6;
  G__34771.cljs$core$IFn$_invoke$arity$7 = G__34771__7;
  G__34771.cljs$core$IFn$_invoke$arity$8 = G__34771__8;
  G__34771.cljs$core$IFn$_invoke$arity$9 = G__34771__9;
  G__34771.cljs$core$IFn$_invoke$arity$10 = G__34771__10;
  G__34771.cljs$core$IFn$_invoke$arity$11 = G__34771__11;
  G__34771.cljs$core$IFn$_invoke$arity$12 = G__34771__12;
  G__34771.cljs$core$IFn$_invoke$arity$13 = G__34771__13;
  G__34771.cljs$core$IFn$_invoke$arity$14 = G__34771__14;
  G__34771.cljs$core$IFn$_invoke$arity$15 = G__34771__15;
  G__34771.cljs$core$IFn$_invoke$arity$16 = G__34771__16;
  G__34771.cljs$core$IFn$_invoke$arity$17 = G__34771__17;
  G__34771.cljs$core$IFn$_invoke$arity$18 = G__34771__18;
  G__34771.cljs$core$IFn$_invoke$arity$19 = G__34771__19;
  G__34771.cljs$core$IFn$_invoke$arity$20 = G__34771__20;
  G__34771.cljs$core$IFn$_invoke$arity$21 = G__34771__21;
  G__34771.cljs$core$IFn$_invoke$arity$22 = G__34771__22;
  return G__34771;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args34770) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args34770)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4655__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var target_fn = temp__4655__auto__;
    return target_fn;
  } else {
    var temp__4655__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4655__auto____$1)) {
      var target_fn = temp__4655__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__34772 = self__.uuid;
  var G__34773 = other.uuid;
  return goog.array.defaultCompare(G__34772, G__34773);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(16).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(16)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info(var_args) {
  var args34774 = [];
  var len__30669__auto___34777 = arguments.length;
  var i__30670__auto___34778 = 0;
  while (true) {
    if (i__30670__auto___34778 < len__30669__auto___34777) {
      args34774.push(arguments[i__30670__auto___34778]);
      var G__34779 = i__30670__auto___34778 + 1;
      i__30670__auto___34778 = G__34779;
      continue;
    } else {
    }
    break;
  }
  var G__34776 = args34774.length;
  switch(G__34776) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34774.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "finally", "finally", -1065347064, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, 
  "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, 
  null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "var", "var", 870848730, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "catch", "catch", -1616370245, null), null, new cljs.core.Symbol(null, 
  "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__34781 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__34781) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? tag)");
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", 
"transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__34783_SHARP_, p2__34784_SHARP_) {
      goog.object.set(p1__34783_SHARP_, p2__34784_SHARP_, true);
      return p1__34783_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return cljs.core.js_reserved.hasOwnProperty(x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__34787 = cljs.core.next(ks__$1);
          var G__34788 = [cljs.core.str(function() {
            var G__34786 = ret;
            if (!(ret === "")) {
              return [cljs.core.str(G__34786), cljs.core.str("|")].join("");
            } else {
              return G__34786;
            }
          }()), cljs.core.str(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__34787;
          ret = G__34788;
          continue;
        } else {
          return [cljs.core.str(ret), cljs.core.str("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_34789 = 0;
  while (true) {
    if (i_34789 < name.length) {
      var c_34790 = name.charAt(i_34789);
      var sub_34791 = goog.object.get(cljs.core.CHAR_MAP, c_34790);
      if (!(sub_34791 == null)) {
        sb.append(sub_34791);
      } else {
        sb.append(c_34790);
      }
      var G__34792 = i_34789 + 1;
      i_34789 = G__34792;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str(name_SINGLEQUOTE_), cljs.core.str("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4655__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var match = temp__4655__auto__;
      var vec__34794 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__34794, 0, null);
      var G__34795 = [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__34796 = r.lastIndex;
      ret = G__34795;
      last_match_end = G__34796;
      continue;
    } else {
      return [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(self__.name)].join(""), [cljs.core.str(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write(writer__30207__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__34801 = function() {
          var G__34799 = ctxt;
          var G__34800 = cljs.core.first(xs);
          return goog.object.get(G__34799, G__34800);
        }();
        var G__34802 = cljs.core.next(xs);
        ctxt = G__34801;
        xs = G__34802;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str(ns)].join(""));
  var segs = munged_ns.split(".");
  var G__34806 = cljs.core._STAR_target_STAR_;
  switch(G__34806) {
    case "nodejs":
      if (COMPILED) {
        return cljs.core.find_ns_obj_STAR_(function() {
          try {
            var G__34808 = cljs.core.first(segs);
            return eval(G__34808);
          } catch (e34807) {
            if (e34807 instanceof ReferenceError) {
              var e = e34807;
              return null;
            } else {
              throw e34807;
            }
          }
        }(), cljs.core.next(segs));
      } else {
        return cljs.core.find_ns_obj_STAR_(global, segs);
      }
      break;
    case "default":
      return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      break;
    default:
      throw new Error([cljs.core.str("find-ns-obj not supported for target "), cljs.core.str(cljs.core._STAR_target_STAR_)].join(""));;
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(sym)].join(""), [cljs.core.str(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns(var_args) {
  var args34810 = [];
  var len__30669__auto___34813 = arguments.length;
  var i__30670__auto___34814 = 0;
  while (true) {
    if (i__30670__auto___34814 < len__30669__auto___34813) {
      args34810.push(arguments[i__30670__auto___34814]);
      var G__34815 = i__30670__auto___34814 + 1;
      i__30670__auto___34814 = G__34815;
      continue;
    } else {
    }
    break;
  }
  var G__34812 = args34810.length;
  switch(G__34812) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34810.length)].join(""));;
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__34818 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__34818) : cljs.core.atom.call(null, G__34818);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__34820 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__34820) : cljs.core.atom.call(null, G__34820);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(ns_str), cljs.core.str("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace_all = function clojure$string$replace_all(s, re, replacement) {
  return s.replace(new RegExp(re.source, "g"), replacement);
};
clojure.string.replace_with = function clojure$string$replace_with(f) {
  return function() {
    var G__34823__delegate = function(args) {
      var matches = cljs.core.drop_last.call(null, 2, args);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, matches), 1)) {
        return f.call(null, cljs.core.first.call(null, matches));
      } else {
        return f.call(null, cljs.core.vec.call(null, matches));
      }
    };
    var G__34823 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__34824__i = 0, G__34824__a = new Array(arguments.length - 0);
        while (G__34824__i < G__34824__a.length) {
          G__34824__a[G__34824__i] = arguments[G__34824__i + 0];
          ++G__34824__i;
        }
        args = new cljs.core.IndexedSeq(G__34824__a, 0);
      }
      return G__34823__delegate.call(this, args);
    };
    G__34823.cljs$lang$maxFixedArity = 0;
    G__34823.cljs$lang$applyTo = function(arglist__34825) {
      var args = cljs.core.seq(arglist__34825);
      return G__34823__delegate(args);
    };
    G__34823.cljs$core$IFn$_invoke$arity$variadic = G__34823__delegate;
    return G__34823;
  }();
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      if (typeof replacement === "string") {
        return clojure.string.replace_all.call(null, s, match, replacement);
      } else {
        return clojure.string.replace_all.call(null, s, match, clojure.string.replace_with.call(null, replacement));
      }
    } else {
      throw [cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join(var_args) {
  var args34826 = [];
  var len__30669__auto___34829 = arguments.length;
  var i__30670__auto___34830 = 0;
  while (true) {
    if (i__30670__auto___34830 < len__30669__auto___34829) {
      args34826.push(arguments[i__30670__auto___34830]);
      var G__34831 = i__30670__auto___34830 + 1;
      i__30670__auto___34830 = G__34831;
      continue;
    } else {
    }
    break;
  }
  var G__34828 = args34826.length;
  switch(G__34828) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34826.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__34833 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__34834 = cljs.core.next.call(null, coll__$1);
      sb = G__34833;
      coll__$1 = G__34834;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__34835 = sb;
      var G__34836 = coll__$2;
      sb = G__34835;
      coll__$1 = G__34836;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__34837 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__34837;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit && 1 < cljs.core.count.call(null, v)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__34841 = cljs.core._EQ__EQ_;
    var expr__34842 = limit;
    if (cljs.core.truth_(pred__34841.call(null, 1, expr__34842))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__34841.call(null, 2, expr__34842))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split(var_args) {
  var args34844 = [];
  var len__30669__auto___34847 = arguments.length;
  var i__30670__auto___34848 = 0;
  while (true) {
    if (i__30670__auto___34848 < len__30669__auto___34847) {
      args34844.push(arguments[i__30670__auto___34848]);
      var G__34849 = i__30670__auto___34848 + 1;
      i__30670__auto___34848 = G__34849;
      continue;
    } else {
    }
    break;
  }
  var G__34846 = args34844.length;
  switch(G__34846) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34844.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__34851 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__34852 = limit__$1 - 1;
          var G__34853 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__34851;
          limit__$1 = G__34852;
          parts = G__34853;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__34854 = index - 1;
        index = G__34854;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__34855 = index + 1;
      index = G__34855;
      continue;
    }
    break;
  }
};
clojure.string.index_of = function clojure$string$index_of(var_args) {
  var args34856 = [];
  var len__30669__auto___34859 = arguments.length;
  var i__30670__auto___34860 = 0;
  while (true) {
    if (i__30670__auto___34860 < len__30669__auto___34859) {
      args34856.push(arguments[i__30670__auto___34860]);
      var G__34861 = i__30670__auto___34860 + 1;
      i__30670__auto___34860 = G__34861;
      continue;
    } else {
    }
    break;
  }
  var G__34858 = args34856.length;
  switch(G__34858) {
    case 2:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34856.length)].join(""));;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.indexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.indexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$lang$maxFixedArity = 3;
clojure.string.last_index_of = function clojure$string$last_index_of(var_args) {
  var args34863 = [];
  var len__30669__auto___34866 = arguments.length;
  var i__30670__auto___34867 = 0;
  while (true) {
    if (i__30670__auto___34867 < len__30669__auto___34866) {
      args34863.push(arguments[i__30670__auto___34867]);
      var G__34868 = i__30670__auto___34867 + 1;
      i__30670__auto___34867 = G__34868;
      continue;
    } else {
    }
    break;
  }
  var G__34865 = args34863.length;
  switch(G__34865) {
    case 2:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args34863.length)].join(""));;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.lastIndexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.lastIndexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
clojure.string.starts_with_QMARK_ = function clojure$string$starts_with_QMARK_(s, substr) {
  return goog.string.startsWith(s, substr);
};
clojure.string.ends_with_QMARK_ = function clojure$string$ends_with_QMARK_(s, substr) {
  return goog.string.endsWith(s, substr);
};
clojure.string.includes_QMARK_ = function clojure$string$includes_QMARK_(s, substr) {
  return goog.string.contains(s, substr);
};
goog.provide("cljs.pprint");
goog.require("cljs.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.pprint.print = function cljs$pprint$print(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___35090 = arguments.length;
  var i__30670__auto___35091 = 0;
  while (true) {
    if (i__30670__auto___35091 < len__30669__auto___35090) {
      args__30676__auto__.push(arguments[i__30670__auto___35091]);
      var G__35092 = i__30670__auto___35091 + 1;
      i__30670__auto___35091 = G__35092;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic = function(more) {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, cljs.core.apply.call(null, cljs.core.print_str, more));
};
cljs.pprint.print.cljs$lang$maxFixedArity = 0;
cljs.pprint.print.cljs$lang$applyTo = function(seq35089) {
  return cljs.pprint.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq35089));
};
cljs.pprint.println = function cljs$pprint$println(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___35094 = arguments.length;
  var i__30670__auto___35095 = 0;
  while (true) {
    if (i__30670__auto___35095 < len__30669__auto___35094) {
      args__30676__auto__.push(arguments[i__30670__auto___35095]);
      var G__35096 = i__30670__auto___35095 + 1;
      i__30670__auto___35095 = G__35096;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.pprint.println.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.pprint.println.cljs$core$IFn$_invoke$arity$variadic = function(more) {
  cljs.core.apply.call(null, cljs.pprint.print, more);
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "\n");
};
cljs.pprint.println.cljs$lang$maxFixedArity = 0;
cljs.pprint.println.cljs$lang$applyTo = function(seq35093) {
  return cljs.pprint.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq35093));
};
cljs.pprint.print_char = function cljs$pprint$print_char(c) {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, function() {
    var pred__35100 = cljs.core._EQ_;
    var expr__35101 = c;
    if (cljs.core.truth_(pred__35100.call(null, "\b", expr__35101))) {
      return "\\backspace";
    } else {
      if (cljs.core.truth_(pred__35100.call(null, "\t", expr__35101))) {
        return "\\tab";
      } else {
        if (cljs.core.truth_(pred__35100.call(null, "\n", expr__35101))) {
          return "\\newline";
        } else {
          if (cljs.core.truth_(pred__35100.call(null, "\f", expr__35101))) {
            return "\\formfeed";
          } else {
            if (cljs.core.truth_(pred__35100.call(null, "\r", expr__35101))) {
              return "\\return";
            } else {
              if (cljs.core.truth_(pred__35100.call(null, '"', expr__35101))) {
                return '\\"';
              } else {
                if (cljs.core.truth_(pred__35100.call(null, "\\", expr__35101))) {
                  return "\\\\";
                } else {
                  return [cljs.core.str("\\"), cljs.core.str(c)].join("");
                }
              }
            }
          }
        }
      }
    }
  }());
};
cljs.pprint.pr = function cljs$pprint$pr(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___35104 = arguments.length;
  var i__30670__auto___35105 = 0;
  while (true) {
    if (i__30670__auto___35105 < len__30669__auto___35104) {
      args__30676__auto__.push(arguments[i__30670__auto___35105]);
      var G__35106 = i__30670__auto___35105 + 1;
      i__30670__auto___35105 = G__35106;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.pprint.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.pprint.pr.cljs$core$IFn$_invoke$arity$variadic = function(more) {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, cljs.core.apply.call(null, cljs.core.pr_str, more));
};
cljs.pprint.pr.cljs$lang$maxFixedArity = 0;
cljs.pprint.pr.cljs$lang$applyTo = function(seq35103) {
  return cljs.pprint.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq35103));
};
cljs.pprint.prn = function cljs$pprint$prn(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___35108 = arguments.length;
  var i__30670__auto___35109 = 0;
  while (true) {
    if (i__30670__auto___35109 < len__30669__auto___35108) {
      args__30676__auto__.push(arguments[i__30670__auto___35109]);
      var G__35110 = i__30670__auto___35109 + 1;
      i__30670__auto___35109 = G__35110;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs.pprint.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs.pprint.prn.cljs$core$IFn$_invoke$arity$variadic = function(more) {
  cljs.core.apply.call(null, cljs.pprint.pr, more);
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "\n");
};
cljs.pprint.prn.cljs$lang$maxFixedArity = 0;
cljs.pprint.prn.cljs$lang$applyTo = function(seq35107) {
  return cljs.pprint.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq35107));
};
cljs.pprint.float_QMARK_ = function cljs$pprint$float_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && !(parseFloat(n) === parseInt(n, 10));
};
cljs.pprint.char_code = function cljs$pprint$char_code(c) {
  if (typeof c === "number") {
    return c;
  } else {
    if (typeof c === "string" && c.length === 1) {
      return c.charCodeAt(0);
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.pprint.map_passing_context = function cljs$pprint$map_passing_context(func, initial_context, lis) {
  var context = initial_context;
  var lis__$1 = lis;
  var acc = cljs.core.PersistentVector.EMPTY;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, lis__$1)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, context], null);
    } else {
      var this$ = cljs.core.first.call(null, lis__$1);
      var remainder = cljs.core.next.call(null, lis__$1);
      var vec__35112 = cljs.core.apply.call(null, func, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$, context], null));
      var result = cljs.core.nth.call(null, vec__35112, 0, null);
      var new_context = cljs.core.nth.call(null, vec__35112, 1, null);
      var G__35113 = new_context;
      var G__35114 = remainder;
      var G__35115 = cljs.core.conj.call(null, acc, result);
      context = G__35113;
      lis__$1 = G__35114;
      acc = G__35115;
      continue;
    }
    break;
  }
};
cljs.pprint.consume = function cljs$pprint$consume(func, initial_context) {
  var context = initial_context;
  var acc = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var vec__35117 = cljs.core.apply.call(null, func, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [context], null));
    var result = cljs.core.nth.call(null, vec__35117, 0, null);
    var new_context = cljs.core.nth.call(null, vec__35117, 1, null);
    if (cljs.core.not.call(null, result)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, new_context], null);
    } else {
      var G__35118 = new_context;
      var G__35119 = cljs.core.conj.call(null, acc, result);
      context = G__35118;
      acc = G__35119;
      continue;
    }
    break;
  }
};
cljs.pprint.consume_while = function cljs$pprint$consume_while(func, initial_context) {
  var context = initial_context;
  var acc = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var vec__35121 = cljs.core.apply.call(null, func, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [context], null));
    var result = cljs.core.nth.call(null, vec__35121, 0, null);
    var continue$ = cljs.core.nth.call(null, vec__35121, 1, null);
    var new_context = cljs.core.nth.call(null, vec__35121, 2, null);
    if (cljs.core.not.call(null, continue$)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, context], null);
    } else {
      var G__35122 = new_context;
      var G__35123 = cljs.core.conj.call(null, acc, result);
      context = G__35122;
      acc = G__35123;
      continue;
    }
    break;
  }
};
cljs.pprint.unzip_map = function cljs$pprint$unzip_map(m) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__30380__auto__ = function cljs$pprint$unzip_map_$_iter__35148(s__35149) {
      return new cljs.core.LazySeq(null, function() {
        var s__35149__$1 = s__35149;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__35149__$1);
          if (temp__4657__auto__) {
            var s__35149__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__35149__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__35149__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__35151 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__35150 = 0;
                while (true) {
                  if (i__35150 < size__30379__auto__) {
                    var vec__35156 = cljs.core._nth.call(null, c__30378__auto__, i__35150);
                    var k = cljs.core.nth.call(null, vec__35156, 0, null);
                    var vec__35157 = cljs.core.nth.call(null, vec__35156, 1, null);
                    var v1 = cljs.core.nth.call(null, vec__35157, 0, null);
                    var v2 = cljs.core.nth.call(null, vec__35157, 1, null);
                    cljs.core.chunk_append.call(null, b__35151, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v1], null));
                    var G__35172 = i__35150 + 1;
                    i__35150 = G__35172;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__35151), cljs$pprint$unzip_map_$_iter__35148.call(null, cljs.core.chunk_rest.call(null, s__35149__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__35151), null);
              }
            } else {
              var vec__35158 = cljs.core.first.call(null, s__35149__$2);
              var k = cljs.core.nth.call(null, vec__35158, 0, null);
              var vec__35159 = cljs.core.nth.call(null, vec__35158, 1, null);
              var v1 = cljs.core.nth.call(null, vec__35159, 0, null);
              var v2 = cljs.core.nth.call(null, vec__35159, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v1], null), cljs$pprint$unzip_map_$_iter__35148.call(null, cljs.core.rest.call(null, s__35149__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, m);
  }()), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__30380__auto__ = function cljs$pprint$unzip_map_$_iter__35160(s__35161) {
      return new cljs.core.LazySeq(null, function() {
        var s__35161__$1 = s__35161;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__35161__$1);
          if (temp__4657__auto__) {
            var s__35161__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__35161__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__35161__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__35163 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__35162 = 0;
                while (true) {
                  if (i__35162 < size__30379__auto__) {
                    var vec__35168 = cljs.core._nth.call(null, c__30378__auto__, i__35162);
                    var k = cljs.core.nth.call(null, vec__35168, 0, null);
                    var vec__35169 = cljs.core.nth.call(null, vec__35168, 1, null);
                    var v1 = cljs.core.nth.call(null, vec__35169, 0, null);
                    var v2 = cljs.core.nth.call(null, vec__35169, 1, null);
                    cljs.core.chunk_append.call(null, b__35163, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v2], null));
                    var G__35173 = i__35162 + 1;
                    i__35162 = G__35173;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__35163), cljs$pprint$unzip_map_$_iter__35160.call(null, cljs.core.chunk_rest.call(null, s__35161__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__35163), null);
              }
            } else {
              var vec__35170 = cljs.core.first.call(null, s__35161__$2);
              var k = cljs.core.nth.call(null, vec__35170, 0, null);
              var vec__35171 = cljs.core.nth.call(null, vec__35170, 1, null);
              var v1 = cljs.core.nth.call(null, vec__35171, 0, null);
              var v2 = cljs.core.nth.call(null, vec__35171, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v2], null), cljs$pprint$unzip_map_$_iter__35160.call(null, cljs.core.rest.call(null, s__35161__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, m);
  }())], null);
};
cljs.pprint.tuple_map = function cljs$pprint$tuple_map(m, v1) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__30380__auto__ = function cljs$pprint$tuple_map_$_iter__35182(s__35183) {
      return new cljs.core.LazySeq(null, function() {
        var s__35183__$1 = s__35183;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__35183__$1);
          if (temp__4657__auto__) {
            var s__35183__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__35183__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__35183__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__35185 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__35184 = 0;
                while (true) {
                  if (i__35184 < size__30379__auto__) {
                    var vec__35188 = cljs.core._nth.call(null, c__30378__auto__, i__35184);
                    var k = cljs.core.nth.call(null, vec__35188, 0, null);
                    var v = cljs.core.nth.call(null, vec__35188, 1, null);
                    cljs.core.chunk_append.call(null, b__35185, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, v1], null)], null));
                    var G__35190 = i__35184 + 1;
                    i__35184 = G__35190;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__35185), cljs$pprint$tuple_map_$_iter__35182.call(null, cljs.core.chunk_rest.call(null, s__35183__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__35185), null);
              }
            } else {
              var vec__35189 = cljs.core.first.call(null, s__35183__$2);
              var k = cljs.core.nth.call(null, vec__35189, 0, null);
              var v = cljs.core.nth.call(null, vec__35189, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, v1], null)], null), cljs$pprint$tuple_map_$_iter__35182.call(null, cljs.core.rest.call(null, s__35183__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, m);
  }());
};
cljs.pprint.rtrim = function cljs$pprint$rtrim(s, c) {
  var len = cljs.core.count.call(null, s);
  if (len > 0 && cljs.core._EQ_.call(null, cljs.core.nth.call(null, s, cljs.core.count.call(null, s) - 1), c)) {
    var n = len - 1;
    while (true) {
      if (n < 0) {
        return "";
      } else {
        if (!cljs.core._EQ_.call(null, cljs.core.nth.call(null, s, n), c)) {
          return cljs.core.subs.call(null, s, 0, n + 1);
        } else {
          var G__35191 = n - 1;
          n = G__35191;
          continue;
        }
      }
      break;
    }
  } else {
    return s;
  }
};
cljs.pprint.ltrim = function cljs$pprint$ltrim(s, c) {
  var len = cljs.core.count.call(null, s);
  if (len > 0 && cljs.core._EQ_.call(null, cljs.core.nth.call(null, s, 0), c)) {
    var n = 0;
    while (true) {
      if (cljs.core._EQ_.call(null, n, len) || !cljs.core._EQ_.call(null, cljs.core.nth.call(null, s, n), c)) {
        return cljs.core.subs.call(null, s, n);
      } else {
        var G__35192 = n + 1;
        n = G__35192;
        continue;
      }
      break;
    }
  } else {
    return s;
  }
};
cljs.pprint.prefix_count = function cljs$pprint$prefix_count(aseq, val) {
  var test = cljs.core.coll_QMARK_.call(null, val) ? cljs.core.set.call(null, val) : cljs.core.PersistentHashSet.fromArray([val], true);
  var pos = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, pos, cljs.core.count.call(null, aseq)) || cljs.core.not.call(null, test.call(null, cljs.core.nth.call(null, aseq, pos)))) {
      return pos;
    } else {
      var G__35193 = pos + 1;
      pos = G__35193;
      continue;
    }
    break;
  }
};
cljs.pprint.IPrettyFlush = function() {
};
cljs.pprint._ppflush = function cljs$pprint$_ppflush(pp) {
  if (!(pp == null) && !(pp.cljs$pprint$IPrettyFlush$_ppflush$arity$1 == null)) {
    return pp.cljs$pprint$IPrettyFlush$_ppflush$arity$1(pp);
  } else {
    var x__30263__auto__ = pp == null ? null : pp;
    var m__30264__auto__ = cljs.pprint._ppflush[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, pp);
    } else {
      var m__30264__auto____$1 = cljs.pprint._ppflush["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, pp);
      } else {
        throw cljs.core.missing_protocol.call(null, "IPrettyFlush.-ppflush", pp);
      }
    }
  }
};
cljs.pprint._STAR_default_page_width_STAR_ = 72;
cljs.pprint.get_field = function cljs$pprint$get_field(this$, sym) {
  return sym.call(null, cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
};
cljs.pprint.set_field = function cljs$pprint$set_field(this$, sym, new_val) {
  return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, sym, new_val);
};
cljs.pprint.get_column = function cljs$pprint$get_column(this$) {
  return cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "cur", "cur", 1153190599));
};
cljs.pprint.get_line = function cljs$pprint$get_line(this$) {
  return cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "line", "line", 212345235));
};
cljs.pprint.get_max_column = function cljs$pprint$get_max_column(this$) {
  return cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "max", "max", 61366548));
};
cljs.pprint.set_max_column = function cljs$pprint$set_max_column(this$, new_max) {
  cljs.pprint.set_field.call(null, this$, new cljs.core.Keyword(null, "max", "max", 61366548), new_max);
  return null;
};
cljs.pprint.get_writer = function cljs$pprint$get_writer(this$) {
  return cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "base", "base", 185279322));
};
cljs.pprint.c_write_char = function cljs$pprint$c_write_char(this$, c) {
  if (cljs.core._EQ_.call(null, c, "\n")) {
    cljs.pprint.set_field.call(null, this$, new cljs.core.Keyword(null, "cur", "cur", 1153190599), 0);
    cljs.pprint.set_field.call(null, this$, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "line", "line", 212345235)) + 1);
  } else {
    cljs.pprint.set_field.call(null, this$, new cljs.core.Keyword(null, "cur", "cur", 1153190599), cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "cur", "cur", 1153190599)) + 1);
  }
  return cljs.core._write.call(null, cljs.pprint.get_field.call(null, this$, new cljs.core.Keyword(null, "base", "base", 185279322)), c);
};
cljs.pprint.column_writer = function cljs$pprint$column_writer(var_args) {
  var args35195 = [];
  var len__30669__auto___35204 = arguments.length;
  var i__30670__auto___35205 = 0;
  while (true) {
    if (i__30670__auto___35205 < len__30669__auto___35204) {
      args35195.push(arguments[i__30670__auto___35205]);
      var G__35206 = i__30670__auto___35205 + 1;
      i__30670__auto___35205 = G__35206;
      continue;
    } else {
    }
    break;
  }
  var G__35197 = args35195.length;
  switch(G__35197) {
    case 1:
      return cljs.pprint.column_writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.pprint.column_writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args35195.length)].join(""));;
  }
};
cljs.pprint.column_writer.cljs$core$IFn$_invoke$arity$1 = function(writer) {
  return cljs.pprint.column_writer.call(null, writer, cljs.pprint._STAR_default_page_width_STAR_);
};
cljs.pprint.column_writer.cljs$core$IFn$_invoke$arity$2 = function(writer, max_columns) {
  var fields = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "max", "max", 61366548), max_columns, new cljs.core.Keyword(null, "cur", "cur", 1153190599), 0, new cljs.core.Keyword(null, "line", "line", 212345235), 0, new cljs.core.Keyword(null, "base", "base", 185279322), writer], null));
  if (typeof cljs.pprint.t_cljs$pprint35198 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint35198 = function(writer, max_columns, fields, meta35199) {
      this.writer = writer;
      this.max_columns = max_columns;
      this.fields = fields;
      this.meta35199 = meta35199;
      this.cljs$lang$protocol_mask$partition0$ = 1074167808;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint35198.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(fields) {
      return function(_35200, meta35199__$1) {
        var self__ = this;
        var _35200__$1 = this;
        return new cljs.pprint.t_cljs$pprint35198(self__.writer, self__.max_columns, self__.fields, meta35199__$1);
      };
    }(fields);
    cljs.pprint.t_cljs$pprint35198.prototype.cljs$core$IMeta$_meta$arity$1 = function(fields) {
      return function(_35200) {
        var self__ = this;
        var _35200__$1 = this;
        return self__.meta35199;
      };
    }(fields);
    cljs.pprint.t_cljs$pprint35198.prototype.cljs$core$IDeref$_deref$arity$1 = function(fields) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return self__.fields;
      };
    }(fields);
    cljs.pprint.t_cljs$pprint35198.prototype.cljs$core$IWriter$_flush$arity$1 = function(fields) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core._flush.call(null, self__.writer);
      };
    }(fields);
    cljs.pprint.t_cljs$pprint35198.prototype.cljs$core$IWriter$_write$arity$2 = function(fields) {
      return function(this$, x) {
        var self__ = this;
        var this$__$1 = this;
        var pred__35201 = cljs.core._EQ_;
        var expr__35202 = cljs.core.type.call(null, x);
        if (cljs.core.truth_(pred__35201.call(null, String, expr__35202))) {
          var s = x;
          var nl = s.lastIndexOf("\n");
          if (nl < 0) {
            cljs.pprint.set_field.call(null, this$__$1, new cljs.core.Keyword(null, "cur", "cur", 1153190599), cljs.pprint.get_field.call(null, this$__$1, new cljs.core.Keyword(null, "cur", "cur", 1153190599)) + cljs.core.count.call(null, s));
          } else {
            cljs.pprint.set_field.call(null, this$__$1, new cljs.core.Keyword(null, "cur", "cur", 1153190599), cljs.core.count.call(null, s) - nl - 1);
            cljs.pprint.set_field.call(null, this$__$1, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.pprint.get_field.call(null, this$__$1, new cljs.core.Keyword(null, "line", "line", 212345235)) + cljs.core.count.call(null, cljs.core.filter.call(null, function(s, nl, pred__35201, expr__35202, this$__$1, fields) {
              return function(p1__35194_SHARP_) {
                return cljs.core._EQ_.call(null, p1__35194_SHARP_, "\n");
              };
            }(s, nl, pred__35201, expr__35202, this$__$1, fields), s)));
          }
          return cljs.core._write.call(null, cljs.pprint.get_field.call(null, this$__$1, new cljs.core.Keyword(null, "base", "base", 185279322)), s);
        } else {
          if (cljs.core.truth_(pred__35201.call(null, Number, expr__35202))) {
            return cljs.pprint.c_write_char.call(null, this$__$1, x);
          } else {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35202)].join(""));
          }
        }
      };
    }(fields);
    cljs.pprint.t_cljs$pprint35198.getBasis = function(fields) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "max-columns", "max-columns", -912112507, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, "meta35199", "meta35199", 1111831549, null)], null);
      };
    }(fields);
    cljs.pprint.t_cljs$pprint35198.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint35198.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint35198";
    cljs.pprint.t_cljs$pprint35198.cljs$lang$ctorPrWriter = function(fields) {
      return function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
        return cljs.core._write.call(null, writer__30207__auto__, "cljs.pprint/t_cljs$pprint35198");
      };
    }(fields);
    cljs.pprint.__GT_t_cljs$pprint35198 = function(fields) {
      return function cljs$pprint$__GT_t_cljs$pprint35198(writer__$1, max_columns__$1, fields__$1, meta35199) {
        return new cljs.pprint.t_cljs$pprint35198(writer__$1, max_columns__$1, fields__$1, meta35199);
      };
    }(fields);
  }
  return new cljs.pprint.t_cljs$pprint35198(writer, max_columns, fields, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.column_writer.cljs$lang$maxFixedArity = 2;
cljs.pprint.logical_block = function(parent, section, start_col, indent, done_nl, intra_block_nl, prefix, per_line_prefix, suffix, logical_block_callback, __meta, __extmap, __hash) {
  this.parent = parent;
  this.section = section;
  this.start_col = start_col;
  this.indent = indent;
  this.done_nl = done_nl;
  this.intra_block_nl = intra_block_nl;
  this.prefix = prefix;
  this.per_line_prefix = per_line_prefix;
  this.suffix = suffix;
  this.logical_block_callback = logical_block_callback;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.logical_block.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs.pprint.logical_block.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k35209, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__35211 = k35209 instanceof cljs.core.Keyword ? k35209.fqn : null;
  switch(G__35211) {
    case "suffix":
      return self__.suffix;
      break;
    case "indent":
      return self__.indent;
      break;
    case "parent":
      return self__.parent;
      break;
    case "section":
      return self__.section;
      break;
    case "done-nl":
      return self__.done_nl;
      break;
    case "start-col":
      return self__.start_col;
      break;
    case "prefix":
      return self__.prefix;
      break;
    case "per-line-prefix":
      return self__.per_line_prefix;
      break;
    case "logical-block-callback":
      return self__.logical_block_callback;
      break;
    case "intra-block-nl":
      return self__.intra_block_nl;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k35209, else__30225__auto__);
  }
};
cljs.pprint.logical_block.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs.pprint.logical-block{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parent", "parent", -878878779), self__.parent], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "section", "section", -300141526), self__.section], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-col", "start-col", 668080143), self__.start_col], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "indent", "indent", -148200125), self__.indent], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), self__.done_nl], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875), self__.intra_block_nl], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), self__.prefix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), self__.per_line_prefix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "suffix", "suffix", 367373057), self__.suffix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194), self__.logical_block_callback], null)], null), 
  self__.__extmap));
};
cljs.pprint.logical_block.prototype.cljs$core$IIterable$ = true;
cljs.pprint.logical_block.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__35208) {
  var self__ = this;
  var G__35208__$1 = this;
  return new cljs.core.RecordIter(0, G__35208__$1, 10, new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parent", "parent", -878878779), new cljs.core.Keyword(null, "section", "section", -300141526), new cljs.core.Keyword(null, "start-col", "start-col", 668080143), new cljs.core.Keyword(null, "indent", "indent", -148200125), new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 
  1808826875), new cljs.core.Keyword(null, "prefix", "prefix", -265908465), new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), new cljs.core.Keyword(null, "suffix", "suffix", 367373057), new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.logical_block.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.logical_block.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.logical_block.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 10 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.logical_block.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.pprint.logical_block.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.logical_block.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [new cljs.core.Keyword(null, "suffix", "suffix", 367373057), null, new cljs.core.Keyword(null, "indent", "indent", -148200125), null, new cljs.core.Keyword(null, "parent", "parent", -878878779), null, new cljs.core.Keyword(null, "section", "section", -300141526), null, new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), null, new cljs.core.Keyword(null, "start-col", 
  "start-col", 668080143), null, new cljs.core.Keyword(null, "prefix", "prefix", -265908465), null, new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), null, new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194), null, new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs.pprint.logical_block.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__35208) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__35212 = cljs.core.keyword_identical_QMARK_;
  var expr__35213 = k__30230__auto__;
  if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "parent", "parent", -878878779), expr__35213))) {
    return new cljs.pprint.logical_block(G__35208, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "section", "section", -300141526), expr__35213))) {
      return new cljs.pprint.logical_block(self__.parent, G__35208, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "start-col", "start-col", 668080143), expr__35213))) {
        return new cljs.pprint.logical_block(self__.parent, self__.section, G__35208, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "indent", "indent", -148200125), expr__35213))) {
          return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, G__35208, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), expr__35213))) {
            return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, G__35208, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875), expr__35213))) {
              return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, G__35208, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "prefix", "prefix", -265908465), expr__35213))) {
                return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, G__35208, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), expr__35213))) {
                  return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, G__35208, self__.suffix, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
                } else {
                  if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "suffix", "suffix", 367373057), expr__35213))) {
                    return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, G__35208, self__.logical_block_callback, self__.__meta, self__.__extmap, null);
                  } else {
                    if (cljs.core.truth_(pred__35212.call(null, new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194), expr__35213))) {
                      return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, G__35208, self__.__meta, self__.__extmap, null);
                    } else {
                      return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__35208), null);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.pprint.logical_block.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parent", "parent", -878878779), self__.parent], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "section", "section", -300141526), self__.section], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-col", "start-col", 668080143), self__.start_col], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "indent", "indent", -148200125), self__.indent], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), self__.done_nl], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875), self__.intra_block_nl], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), self__.prefix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), self__.per_line_prefix], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "suffix", "suffix", 367373057), self__.suffix], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194), self__.logical_block_callback], null)], null), self__.__extmap));
};
cljs.pprint.logical_block.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__35208) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs.pprint.logical_block(self__.parent, self__.section, self__.start_col, self__.indent, self__.done_nl, self__.intra_block_nl, self__.prefix, self__.per_line_prefix, self__.suffix, self__.logical_block_callback, G__35208, self__.__extmap, self__.__hash);
};
cljs.pprint.logical_block.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs.pprint.logical_block.getBasis = function() {
  return new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "parent", "parent", 761652748, null), new cljs.core.Symbol(null, "section", "section", 1340390001, null), new cljs.core.Symbol(null, "start-col", "start-col", -1986355626, null), new cljs.core.Symbol(null, "indent", "indent", 1492331402, null), new cljs.core.Symbol(null, "done-nl", "done-nl", 1259507187, null), new cljs.core.Symbol(null, "intra-block-nl", "intra-block-nl", -845608894, 
  null), new cljs.core.Symbol(null, "prefix", "prefix", 1374623062, null), new cljs.core.Symbol(null, "per-line-prefix", "per-line-prefix", -1807493956, null), new cljs.core.Symbol(null, "suffix", "suffix", 2007904584, null), new cljs.core.Symbol(null, "logical-block-callback", "logical-block-callback", -1041744575, null)], null);
};
cljs.pprint.logical_block.cljs$lang$type = true;
cljs.pprint.logical_block.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/logical-block");
};
cljs.pprint.logical_block.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs.pprint/logical-block");
};
cljs.pprint.__GT_logical_block = function cljs$pprint$__GT_logical_block(parent, section, start_col, indent, done_nl, intra_block_nl, prefix, per_line_prefix, suffix, logical_block_callback) {
  return new cljs.pprint.logical_block(parent, section, start_col, indent, done_nl, intra_block_nl, prefix, per_line_prefix, suffix, logical_block_callback, null, null, null);
};
cljs.pprint.map__GT_logical_block = function cljs$pprint$map__GT_logical_block(G__35210) {
  return new cljs.pprint.logical_block((new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, "section", "section", -300141526)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, "done-nl", "done-nl", 
  -381024340)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, "suffix", "suffix", 367373057)).cljs$core$IFn$_invoke$arity$1(G__35210), (new cljs.core.Keyword(null, 
  "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(G__35210), null, cljs.core.dissoc.call(null, G__35210, new cljs.core.Keyword(null, "parent", "parent", -878878779), new cljs.core.Keyword(null, "section", "section", -300141526), new cljs.core.Keyword(null, "start-col", "start-col", 668080143), new cljs.core.Keyword(null, "indent", "indent", -148200125), new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340), new cljs.core.Keyword(null, "intra-block-nl", 
  "intra-block-nl", 1808826875), new cljs.core.Keyword(null, "prefix", "prefix", -265908465), new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813), new cljs.core.Keyword(null, "suffix", "suffix", 367373057), new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)), null);
};
cljs.pprint.ancestor_QMARK_ = function cljs$pprint$ancestor_QMARK_(parent, child) {
  var child__$1 = (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(child);
  while (true) {
    if (child__$1 == null) {
      return false;
    } else {
      if (parent === child__$1) {
        return true;
      } else {
        var G__35216 = (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(child__$1);
        child__$1 = G__35216;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.buffer_length = function cljs$pprint$buffer_length(l) {
  var l__$1 = cljs.core.seq.call(null, l);
  if (l__$1) {
    return (new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null, l__$1)) - (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, l__$1));
  } else {
    return 0;
  }
};
cljs.pprint.buffer_blob = function(type_tag, data, trailing_white_space, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.data = data;
  this.trailing_white_space = trailing_white_space;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.buffer_blob.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs.pprint.buffer_blob.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k35218, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__35220 = k35218 instanceof cljs.core.Keyword ? k35218.fqn : null;
  switch(G__35220) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "data":
      return self__.data;
      break;
    case "trailing-white-space":
      return self__.trailing_white_space;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k35218, else__30225__auto__);
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs.pprint.buffer-blob{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "data", "data", -232669377), self__.data], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), self__.trailing_white_space], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.buffer_blob.prototype.cljs$core$IIterable$ = true;
cljs.pprint.buffer_blob.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__35217) {
  var self__ = this;
  var G__35217__$1 = this;
  return new cljs.core.RecordIter(0, G__35217__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, 
  self__.__extmap));
};
cljs.pprint.buffer_blob.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.buffer_blob.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.buffer_blob.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.buffer_blob.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), null, new cljs.core.Keyword(null, "data", "data", -232669377), null], null), 
  null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__35217) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__35221 = cljs.core.keyword_identical_QMARK_;
  var expr__35222 = k__30230__auto__;
  if (cljs.core.truth_(pred__35221.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__35222))) {
    return new cljs.pprint.buffer_blob(G__35217, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__35221.call(null, new cljs.core.Keyword(null, "data", "data", -232669377), expr__35222))) {
      return new cljs.pprint.buffer_blob(self__.type_tag, G__35217, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__35221.call(null, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), expr__35222))) {
        return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, G__35217, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__35221.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__35222))) {
          return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, G__35217, self__.end_pos, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__35221.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__35222))) {
            return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, G__35217, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__35217), null);
          }
        }
      }
    }
  }
};
cljs.pprint.buffer_blob.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data", "data", -232669377), self__.data], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), self__.trailing_white_space], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], 
  null)], null), self__.__extmap));
};
cljs.pprint.buffer_blob.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__35217) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs.pprint.buffer_blob(self__.type_tag, self__.data, self__.trailing_white_space, self__.start_pos, self__.end_pos, G__35217, self__.__extmap, self__.__hash);
};
cljs.pprint.buffer_blob.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs.pprint.buffer_blob.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "data", "data", 1407862150, null), new cljs.core.Symbol(null, "trailing-white-space", "trailing-white-space", -1158428773, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", -3352399, null)], null);
};
cljs.pprint.buffer_blob.cljs$lang$type = true;
cljs.pprint.buffer_blob.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/buffer-blob");
};
cljs.pprint.buffer_blob.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs.pprint/buffer-blob");
};
cljs.pprint.__GT_buffer_blob = function cljs$pprint$__GT_buffer_blob(type_tag, data, trailing_white_space, start_pos, end_pos) {
  return new cljs.pprint.buffer_blob(type_tag, data, trailing_white_space, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_buffer_blob = function cljs$pprint$map__GT_buffer_blob(G__35219) {
  return new cljs.pprint.buffer_blob((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__35219), (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(G__35219), (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(G__35219), (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__35219), (new cljs.core.Keyword(null, 
  "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__35219), null, cljs.core.dissoc.call(null, G__35219, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_buffer_blob = function cljs$pprint$make_buffer_blob(data, trailing_white_space, start_pos, end_pos) {
  return new cljs.pprint.buffer_blob(new cljs.core.Keyword(null, "buffer-blob", "buffer-blob", -1830112173), data, trailing_white_space, start_pos, end_pos, null, null, null);
};
cljs.pprint.buffer_blob_QMARK_ = function cljs$pprint$buffer_blob_QMARK_(x__35024__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__35024__auto__), new cljs.core.Keyword(null, "buffer-blob", "buffer-blob", -1830112173));
};
cljs.pprint.nl_t = function(type_tag, type, logical_block, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.type = type;
  this.logical_block = logical_block;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.nl_t.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs.pprint.nl_t.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k35226, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__35228 = k35226 instanceof cljs.core.Keyword ? k35226.fqn : null;
  switch(G__35228) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "type":
      return self__.type;
      break;
    case "logical-block":
      return self__.logical_block;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k35226, else__30225__auto__);
  }
};
cljs.pprint.nl_t.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs.pprint.nl-t{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "type", "type", 1174270348), self__.type], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.nl_t.prototype.cljs$core$IIterable$ = true;
cljs.pprint.nl_t.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__35225) {
  var self__ = this;
  var G__35225__$1 = this;
  return new cljs.core.RecordIter(0, G__35225__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, 
  self__.__extmap));
};
cljs.pprint.nl_t.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.nl_t.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.nl_t.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.nl_t.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.pprint.nl_t.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.nl_t.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "type", "type", 1174270348), null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs.pprint.nl_t.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__35225) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__35229 = cljs.core.keyword_identical_QMARK_;
  var expr__35230 = k__30230__auto__;
  if (cljs.core.truth_(pred__35229.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__35230))) {
    return new cljs.pprint.nl_t(G__35225, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__35229.call(null, new cljs.core.Keyword(null, "type", "type", 1174270348), expr__35230))) {
      return new cljs.pprint.nl_t(self__.type_tag, G__35225, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__35229.call(null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), expr__35230))) {
        return new cljs.pprint.nl_t(self__.type_tag, self__.type, G__35225, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__35229.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__35230))) {
          return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, G__35225, self__.end_pos, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__35229.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__35230))) {
            return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, G__35225, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__35225), null);
          }
        }
      }
    }
  }
};
cljs.pprint.nl_t.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type", "type", 1174270348), self__.type], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), 
  self__.__extmap));
};
cljs.pprint.nl_t.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__35225) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs.pprint.nl_t(self__.type_tag, self__.type, self__.logical_block, self__.start_pos, self__.end_pos, G__35225, self__.__extmap, self__.__hash);
};
cljs.pprint.nl_t.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs.pprint.nl_t.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "type", "type", -1480165421, null), new cljs.core.Symbol(null, "logical-block", "logical-block", 1059508963, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", -3352399, null)], null);
};
cljs.pprint.nl_t.cljs$lang$type = true;
cljs.pprint.nl_t.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/nl-t");
};
cljs.pprint.nl_t.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs.pprint/nl-t");
};
cljs.pprint.__GT_nl_t = function cljs$pprint$__GT_nl_t(type_tag, type, logical_block, start_pos, end_pos) {
  return new cljs.pprint.nl_t(type_tag, type, logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_nl_t = function cljs$pprint$map__GT_nl_t(G__35227) {
  return new cljs.pprint.nl_t((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__35227), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(G__35227), (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(G__35227), (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__35227), (new cljs.core.Keyword(null, "end-pos", 
  "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__35227), null, cljs.core.dissoc.call(null, G__35227, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_nl_t = function cljs$pprint$make_nl_t(type, logical_block, start_pos, end_pos) {
  return new cljs.pprint.nl_t(new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114), type, logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.nl_t_QMARK_ = function cljs$pprint$nl_t_QMARK_(x__35024__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__35024__auto__), new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114));
};
cljs.pprint.start_block_t = function(type_tag, logical_block, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.logical_block = logical_block;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.start_block_t.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs.pprint.start_block_t.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k35234, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__35236 = k35234 instanceof cljs.core.Keyword ? k35234.fqn : null;
  switch(G__35236) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "logical-block":
      return self__.logical_block;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k35234, else__30225__auto__);
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs.pprint.start-block-t{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.start_block_t.prototype.cljs$core$IIterable$ = true;
cljs.pprint.start_block_t.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__35233) {
  var self__ = this;
  var G__35233__$1 = this;
  return new cljs.core.RecordIter(0, G__35233__$1, 4, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.start_block_t.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.start_block_t.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.start_block_t.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.start_block_t.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__35233) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__35237 = cljs.core.keyword_identical_QMARK_;
  var expr__35238 = k__30230__auto__;
  if (cljs.core.truth_(pred__35237.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__35238))) {
    return new cljs.pprint.start_block_t(G__35233, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__35237.call(null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), expr__35238))) {
      return new cljs.pprint.start_block_t(self__.type_tag, G__35233, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__35237.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__35238))) {
        return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, G__35233, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__35237.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__35238))) {
          return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, G__35233, self__.__meta, self__.__extmap, null);
        } else {
          return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__35233), null);
        }
      }
    }
  }
};
cljs.pprint.start_block_t.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.start_block_t.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__35233) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs.pprint.start_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, G__35233, self__.__extmap, self__.__hash);
};
cljs.pprint.start_block_t.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs.pprint.start_block_t.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "logical-block", "logical-block", 1059508963, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", -3352399, null)], null);
};
cljs.pprint.start_block_t.cljs$lang$type = true;
cljs.pprint.start_block_t.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/start-block-t");
};
cljs.pprint.start_block_t.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs.pprint/start-block-t");
};
cljs.pprint.__GT_start_block_t = function cljs$pprint$__GT_start_block_t(type_tag, logical_block, start_pos, end_pos) {
  return new cljs.pprint.start_block_t(type_tag, logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_start_block_t = function cljs$pprint$map__GT_start_block_t(G__35235) {
  return new cljs.pprint.start_block_t((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__35235), (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(G__35235), (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__35235), (new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__35235), null, cljs.core.dissoc.call(null, 
  G__35235, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_start_block_t = function cljs$pprint$make_start_block_t(logical_block, start_pos, end_pos) {
  return new cljs.pprint.start_block_t(new cljs.core.Keyword(null, "start-block-t", "start-block-t", -373430594), logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.start_block_t_QMARK_ = function cljs$pprint$start_block_t_QMARK_(x__35024__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__35024__auto__), new cljs.core.Keyword(null, "start-block-t", "start-block-t", -373430594));
};
cljs.pprint.end_block_t = function(type_tag, logical_block, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.logical_block = logical_block;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.end_block_t.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs.pprint.end_block_t.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k35242, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__35244 = k35242 instanceof cljs.core.Keyword ? k35242.fqn : null;
  switch(G__35244) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "logical-block":
      return self__.logical_block;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k35242, else__30225__auto__);
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs.pprint.end-block-t{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.end_block_t.prototype.cljs$core$IIterable$ = true;
cljs.pprint.end_block_t.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__35241) {
  var self__ = this;
  var G__35241__$1 = this;
  return new cljs.core.RecordIter(0, G__35241__$1, 4, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.end_block_t.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.end_block_t.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.end_block_t.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.end_block_t.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__35241) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__35245 = cljs.core.keyword_identical_QMARK_;
  var expr__35246 = k__30230__auto__;
  if (cljs.core.truth_(pred__35245.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__35246))) {
    return new cljs.pprint.end_block_t(G__35241, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__35245.call(null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), expr__35246))) {
      return new cljs.pprint.end_block_t(self__.type_tag, G__35241, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__35245.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__35246))) {
        return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, G__35241, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__35245.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__35246))) {
          return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, G__35241, self__.__meta, self__.__extmap, null);
        } else {
          return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__35241), null);
        }
      }
    }
  }
};
cljs.pprint.end_block_t.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.end_block_t.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__35241) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs.pprint.end_block_t(self__.type_tag, self__.logical_block, self__.start_pos, self__.end_pos, G__35241, self__.__extmap, self__.__hash);
};
cljs.pprint.end_block_t.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs.pprint.end_block_t.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "logical-block", "logical-block", 1059508963, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", -3352399, null)], null);
};
cljs.pprint.end_block_t.cljs$lang$type = true;
cljs.pprint.end_block_t.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/end-block-t");
};
cljs.pprint.end_block_t.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs.pprint/end-block-t");
};
cljs.pprint.__GT_end_block_t = function cljs$pprint$__GT_end_block_t(type_tag, logical_block, start_pos, end_pos) {
  return new cljs.pprint.end_block_t(type_tag, logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_end_block_t = function cljs$pprint$map__GT_end_block_t(G__35243) {
  return new cljs.pprint.end_block_t((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__35243), (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(G__35243), (new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__35243), (new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__35243), null, cljs.core.dissoc.call(null, 
  G__35243, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_end_block_t = function cljs$pprint$make_end_block_t(logical_block, start_pos, end_pos) {
  return new cljs.pprint.end_block_t(new cljs.core.Keyword(null, "end-block-t", "end-block-t", 1544648735), logical_block, start_pos, end_pos, null, null, null);
};
cljs.pprint.end_block_t_QMARK_ = function cljs$pprint$end_block_t_QMARK_(x__35024__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__35024__auto__), new cljs.core.Keyword(null, "end-block-t", "end-block-t", 1544648735));
};
cljs.pprint.indent_t = function(type_tag, logical_block, relative_to, offset, start_pos, end_pos, __meta, __extmap, __hash) {
  this.type_tag = type_tag;
  this.logical_block = logical_block;
  this.relative_to = relative_to;
  this.offset = offset;
  this.start_pos = start_pos;
  this.end_pos = end_pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.indent_t.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs.pprint.indent_t.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k35250, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__35252 = k35250 instanceof cljs.core.Keyword ? k35250.fqn : null;
  switch(G__35252) {
    case "type-tag":
      return self__.type_tag;
      break;
    case "logical-block":
      return self__.logical_block;
      break;
    case "relative-to":
      return self__.relative_to;
      break;
    case "offset":
      return self__.offset;
      break;
    case "start-pos":
      return self__.start_pos;
      break;
    case "end-pos":
      return self__.end_pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k35250, else__30225__auto__);
  }
};
cljs.pprint.indent_t.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs.pprint.indent-t{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), self__.relative_to], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311), self__.offset], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.indent_t.prototype.cljs$core$IIterable$ = true;
cljs.pprint.indent_t.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__35249) {
  var self__ = this;
  var G__35249__$1 = this;
  return new cljs.core.RecordIter(0, G__35249__$1, 6, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), new cljs.core.Keyword(null, "offset", "offset", 296498311), new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, 
  "end-pos", "end-pos", -1643883926)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.indent_t.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.indent_t.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.indent_t.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 6 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.indent_t.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.pprint.indent_t.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.indent_t.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "offset", "offset", 296498311), null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), null, new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), null, new cljs.core.Keyword(null, 
  "start-pos", "start-pos", 668789086), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs.pprint.indent_t.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__35249) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__35253 = cljs.core.keyword_identical_QMARK_;
  var expr__35254 = k__30230__auto__;
  if (cljs.core.truth_(pred__35253.call(null, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), expr__35254))) {
    return new cljs.pprint.indent_t(G__35249, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__35253.call(null, new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), expr__35254))) {
      return new cljs.pprint.indent_t(self__.type_tag, G__35249, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__35253.call(null, new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), expr__35254))) {
        return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, G__35249, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__35253.call(null, new cljs.core.Keyword(null, "offset", "offset", 296498311), expr__35254))) {
          return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, G__35249, self__.start_pos, self__.end_pos, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__35253.call(null, new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), expr__35254))) {
            return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, G__35249, self__.end_pos, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__35253.call(null, new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), expr__35254))) {
              return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, G__35249, self__.__meta, self__.__extmap, null);
            } else {
              return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__35249), null);
            }
          }
        }
      }
    }
  }
};
cljs.pprint.indent_t.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), self__.type_tag], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), self__.logical_block], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), self__.relative_to], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311), self__.offset], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), self__.start_pos], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926), self__.end_pos], null)], null), self__.__extmap));
};
cljs.pprint.indent_t.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__35249) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs.pprint.indent_t(self__.type_tag, self__.logical_block, self__.relative_to, self__.offset, self__.start_pos, self__.end_pos, G__35249, self__.__extmap, self__.__hash);
};
cljs.pprint.indent_t.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs.pprint.indent_t.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "type-tag", "type-tag", -233331740, null), new cljs.core.Symbol(null, "logical-block", "logical-block", 1059508963, null), new cljs.core.Symbol(null, "relative-to", "relative-to", 1170431476, null), new cljs.core.Symbol(null, "offset", "offset", 1937029838, null), new cljs.core.Symbol(null, "start-pos", "start-pos", -1985646683, null), new cljs.core.Symbol(null, "end-pos", "end-pos", 
  -3352399, null)], null);
};
cljs.pprint.indent_t.cljs$lang$type = true;
cljs.pprint.indent_t.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/indent-t");
};
cljs.pprint.indent_t.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs.pprint/indent-t");
};
cljs.pprint.__GT_indent_t = function cljs$pprint$__GT_indent_t(type_tag, logical_block, relative_to, offset, start_pos, end_pos) {
  return new cljs.pprint.indent_t(type_tag, logical_block, relative_to, offset, start_pos, end_pos, null, null, null);
};
cljs.pprint.map__GT_indent_t = function cljs$pprint$map__GT_indent_t(G__35251) {
  return new cljs.pprint.indent_t((new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(G__35251), (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(G__35251), (new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051)).cljs$core$IFn$_invoke$arity$1(G__35251), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(G__35251), (new cljs.core.Keyword(null, 
  "start-pos", "start-pos", 668789086)).cljs$core$IFn$_invoke$arity$1(G__35251), (new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)).cljs$core$IFn$_invoke$arity$1(G__35251), null, cljs.core.dissoc.call(null, G__35251, new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267), new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564), new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051), new cljs.core.Keyword(null, "offset", "offset", 296498311), 
  new cljs.core.Keyword(null, "start-pos", "start-pos", 668789086), new cljs.core.Keyword(null, "end-pos", "end-pos", -1643883926)), null);
};
cljs.pprint.make_indent_t = function cljs$pprint$make_indent_t(logical_block, relative_to, offset, start_pos, end_pos) {
  return new cljs.pprint.indent_t(new cljs.core.Keyword(null, "indent-t", "indent-t", 528318969), logical_block, relative_to, offset, start_pos, end_pos, null, null, null);
};
cljs.pprint.indent_t_QMARK_ = function cljs$pprint$indent_t_QMARK_(x__35024__auto__) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(x__35024__auto__), new cljs.core.Keyword(null, "indent-t", "indent-t", 528318969));
};
cljs.pprint.pp_newline = function cljs$pprint$pp_newline() {
  return "\n";
};
if (typeof cljs.pprint.write_token !== "undefined") {
} else {
  cljs.pprint.write_token = function() {
    var method_table__30524__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__30525__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__30526__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__30527__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__30528__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.pprint", "write-token"), function(method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__, hierarchy__30528__auto__) {
      return function(p1__35258_SHARP_, p2__35257_SHARP_) {
        return (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(p2__35257_SHARP_);
      };
    }(method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__, hierarchy__30528__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__30528__auto__, method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "start-block-t", "start-block-t", -373430594), function(this$, token) {
  var temp__4657__auto___35259 = (new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core.truth_(temp__4657__auto___35259)) {
    var cb_35260 = temp__4657__auto___35259;
    cb_35260.call(null, new cljs.core.Keyword(null, "start", "start", -355208981));
  } else {
  }
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(token);
  var temp__4657__auto___35261 = (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(lb);
  if (cljs.core.truth_(temp__4657__auto___35261)) {
    var prefix_35262 = temp__4657__auto___35261;
    cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix_35262);
  } else {
  }
  var col = cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb), col);
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb), col);
});
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "end-block-t", "end-block-t", 1544648735), function(this$, token) {
  var temp__4657__auto___35263 = (new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core.truth_(temp__4657__auto___35263)) {
    var cb_35264 = temp__4657__auto___35263;
    cb_35264.call(null, new cljs.core.Keyword(null, "end", "end", -268185958));
  } else {
  }
  var temp__4657__auto__ = (new cljs.core.Keyword(null, "suffix", "suffix", 367373057)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(token));
  if (cljs.core.truth_(temp__4657__auto__)) {
    var suffix = temp__4657__auto__;
    return cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), suffix);
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "indent-t", "indent-t", 528318969), function(this$, token) {
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(token);
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(token) + function() {
    var pred__35265 = cljs.core._EQ_;
    var expr__35266 = (new cljs.core.Keyword(null, "relative-to", "relative-to", -470100051)).cljs$core$IFn$_invoke$arity$1(token);
    if (cljs.core.truth_(pred__35265.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), expr__35266))) {
      return cljs.core.deref.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb));
    } else {
      if (cljs.core.truth_(pred__35265.call(null, new cljs.core.Keyword(null, "current", "current", -1088038603), expr__35266))) {
        return cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
      } else {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35266)].join(""));
      }
    }
  }());
});
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "buffer-blob", "buffer-blob", -1830112173), function(this$, token) {
  return cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(token));
});
cljs.core._add_method.call(null, cljs.pprint.write_token, new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114), function(this$, token) {
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(token), new cljs.core.Keyword(null, "mandatory", "mandatory", 542802336));
    if (or__29600__auto__) {
      return or__29600__auto__;
    } else {
      var and__29588__auto__ = !cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(token), new cljs.core.Keyword(null, "fill", "fill", 883462889));
      if (and__29588__auto__) {
        return cljs.core.deref.call(null, (new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(token)));
      } else {
        return and__29588__auto__;
      }
    }
  }())) {
    cljs.pprint.emit_nl.call(null, this$, token);
  } else {
    var temp__4655__auto___35268 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    if (cljs.core.truth_(temp__4655__auto___35268)) {
      var tws_35269 = temp__4655__auto___35268;
      cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_35269);
    } else {
    }
  }
  return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
});
cljs.pprint.write_tokens = function cljs$pprint$write_tokens(this$, tokens, force_trailing_whitespace) {
  var seq__35274 = cljs.core.seq.call(null, tokens);
  var chunk__35275 = null;
  var count__35276 = 0;
  var i__35277 = 0;
  while (true) {
    if (i__35277 < count__35276) {
      var token = cljs.core._nth.call(null, chunk__35275, i__35277);
      if (!cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(token), new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114))) {
        var temp__4655__auto___35278 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
        if (cljs.core.truth_(temp__4655__auto___35278)) {
          var tws_35279 = temp__4655__auto___35278;
          cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_35279);
        } else {
        }
      } else {
      }
      cljs.pprint.write_token.call(null, this$, token);
      cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(token));
      var tws_35280 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
      if (cljs.core.truth_(function() {
        var and__29588__auto__ = force_trailing_whitespace;
        if (cljs.core.truth_(and__29588__auto__)) {
          return tws_35280;
        } else {
          return and__29588__auto__;
        }
      }())) {
        cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_35280);
        cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
      } else {
      }
      var G__35281 = seq__35274;
      var G__35282 = chunk__35275;
      var G__35283 = count__35276;
      var G__35284 = i__35277 + 1;
      seq__35274 = G__35281;
      chunk__35275 = G__35282;
      count__35276 = G__35283;
      i__35277 = G__35284;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq.call(null, seq__35274);
      if (temp__4657__auto__) {
        var seq__35274__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__35274__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first.call(null, seq__35274__$1);
          var G__35285 = cljs.core.chunk_rest.call(null, seq__35274__$1);
          var G__35286 = c__30411__auto__;
          var G__35287 = cljs.core.count.call(null, c__30411__auto__);
          var G__35288 = 0;
          seq__35274 = G__35285;
          chunk__35275 = G__35286;
          count__35276 = G__35287;
          i__35277 = G__35288;
          continue;
        } else {
          var token = cljs.core.first.call(null, seq__35274__$1);
          if (!cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "type-tag", "type-tag", -1873863267)).cljs$core$IFn$_invoke$arity$1(token), new cljs.core.Keyword(null, "nl-t", "nl-t", -1608382114))) {
            var temp__4655__auto___35289 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
            if (cljs.core.truth_(temp__4655__auto___35289)) {
              var tws_35290 = temp__4655__auto___35289;
              cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_35290);
            } else {
            }
          } else {
          }
          cljs.pprint.write_token.call(null, this$, token);
          cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(token));
          var tws_35291 = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
          if (cljs.core.truth_(function() {
            var and__29588__auto__ = force_trailing_whitespace;
            if (cljs.core.truth_(and__29588__auto__)) {
              return tws_35291;
            } else {
              return and__29588__auto__;
            }
          }())) {
            cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws_35291);
            cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
          } else {
          }
          var G__35292 = cljs.core.next.call(null, seq__35274__$1);
          var G__35293 = null;
          var G__35294 = 0;
          var G__35295 = 0;
          seq__35274 = G__35292;
          chunk__35275 = G__35293;
          count__35276 = G__35294;
          i__35277 = G__35295;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.pprint.tokens_fit_QMARK_ = function cljs$pprint$tokens_fit_QMARK_(this$, tokens) {
  var maxcol = cljs.pprint.get_max_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
  return maxcol == null || cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)))) + cljs.pprint.buffer_length.call(null, tokens) < maxcol;
};
cljs.pprint.linear_nl_QMARK_ = function cljs$pprint$linear_nl_QMARK_(this$, lb, section) {
  var or__29600__auto__ = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340)).cljs$core$IFn$_invoke$arity$1(lb));
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, section));
  }
};
cljs.pprint.miser_nl_QMARK_ = function cljs$pprint$miser_nl_QMARK_(this$, lb, section) {
  var miser_width = cljs.pprint.get_miser_width.call(null, this$);
  var maxcol = cljs.pprint.get_max_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
  var and__29588__auto__ = miser_width;
  if (cljs.core.truth_(and__29588__auto__)) {
    var and__29588__auto____$1 = maxcol;
    if (cljs.core.truth_(and__29588__auto____$1)) {
      var and__29588__auto____$2 = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb)) >= maxcol - miser_width;
      if (and__29588__auto____$2) {
        return cljs.pprint.linear_nl_QMARK_.call(null, this$, lb, section);
      } else {
        return and__29588__auto____$2;
      }
    } else {
      return and__29588__auto____$1;
    }
  } else {
    return and__29588__auto__;
  }
};
if (typeof cljs.pprint.emit_nl_QMARK_ !== "undefined") {
} else {
  cljs.pprint.emit_nl_QMARK_ = function() {
    var method_table__30524__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__30525__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__30526__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__30527__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__30528__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.pprint", "emit-nl?"), function(method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__, hierarchy__30528__auto__) {
      return function(t, _, ___$1, ___$2) {
        return (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(t);
      };
    }(method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__, hierarchy__30528__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__30528__auto__, method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.pprint.emit_nl_QMARK_, new cljs.core.Keyword(null, "linear", "linear", 872268697), function(newl, this$, section, _) {
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(newl);
  return cljs.pprint.linear_nl_QMARK_.call(null, this$, lb, section);
});
cljs.core._add_method.call(null, cljs.pprint.emit_nl_QMARK_, new cljs.core.Keyword(null, "miser", "miser", -556060186), function(newl, this$, section, _) {
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(newl);
  return cljs.pprint.miser_nl_QMARK_.call(null, this$, lb, section);
});
cljs.core._add_method.call(null, cljs.pprint.emit_nl_QMARK_, new cljs.core.Keyword(null, "fill", "fill", 883462889), function(newl, this$, section, subsection) {
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(newl);
  var or__29600__auto__ = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875)).cljs$core$IFn$_invoke$arity$1(lb));
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    var or__29600__auto____$1 = cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, subsection));
    if (or__29600__auto____$1) {
      return or__29600__auto____$1;
    } else {
      return cljs.pprint.miser_nl_QMARK_.call(null, this$, lb, section);
    }
  }
});
cljs.core._add_method.call(null, cljs.pprint.emit_nl_QMARK_, new cljs.core.Keyword(null, "mandatory", "mandatory", 542802336), function(_, ___$1, ___$2, ___$3) {
  return true;
});
cljs.pprint.get_section = function cljs$pprint$get_section(buffer) {
  var nl = cljs.core.first.call(null, buffer);
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(nl);
  var section = cljs.core.seq.call(null, cljs.core.take_while.call(null, function(nl, lb) {
    return function(p1__35296_SHARP_) {
      return cljs.core.not.call(null, function() {
        var and__29588__auto__ = cljs.pprint.nl_t_QMARK_.call(null, p1__35296_SHARP_);
        if (cljs.core.truth_(and__29588__auto__)) {
          return cljs.pprint.ancestor_QMARK_.call(null, (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(p1__35296_SHARP_), lb);
        } else {
          return and__29588__auto__;
        }
      }());
    };
  }(nl, lb), cljs.core.next.call(null, buffer)));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [section, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, section) + 1, buffer))], null);
};
cljs.pprint.get_sub_section = function cljs$pprint$get_sub_section(buffer) {
  var nl = cljs.core.first.call(null, buffer);
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(nl);
  var section = cljs.core.seq.call(null, cljs.core.take_while.call(null, function(nl, lb) {
    return function(p1__35297_SHARP_) {
      var nl_lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(p1__35297_SHARP_);
      return cljs.core.not.call(null, function() {
        var and__29588__auto__ = cljs.pprint.nl_t_QMARK_.call(null, p1__35297_SHARP_);
        if (cljs.core.truth_(and__29588__auto__)) {
          var or__29600__auto__ = cljs.core._EQ_.call(null, nl_lb, lb);
          if (or__29600__auto__) {
            return or__29600__auto__;
          } else {
            return cljs.pprint.ancestor_QMARK_.call(null, nl_lb, lb);
          }
        } else {
          return and__29588__auto__;
        }
      }());
    };
  }(nl, lb), cljs.core.next.call(null, buffer)));
  return section;
};
cljs.pprint.update_nl_state = function cljs$pprint$update_nl_state(lb) {
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875)).cljs$core$IFn$_invoke$arity$1(lb), true);
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340)).cljs$core$IFn$_invoke$arity$1(lb), true);
  var lb__$1 = (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(lb);
  while (true) {
    if (cljs.core.truth_(lb__$1)) {
      cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "done-nl", "done-nl", -381024340)).cljs$core$IFn$_invoke$arity$1(lb__$1), true);
      cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "intra-block-nl", "intra-block-nl", 1808826875)).cljs$core$IFn$_invoke$arity$1(lb__$1), true);
      var G__35298 = (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(lb__$1);
      lb__$1 = G__35298;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.pprint.emit_nl = function cljs$pprint$emit_nl(this$, nl) {
  cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), cljs.pprint.pp_newline.call(null));
  cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
  var lb = (new cljs.core.Keyword(null, "logical-block", "logical-block", -581022564)).cljs$core$IFn$_invoke$arity$1(nl);
  var prefix = (new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813)).cljs$core$IFn$_invoke$arity$1(lb);
  if (cljs.core.truth_(prefix)) {
    cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix);
  } else {
  }
  var istr_35299 = cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb)) - cljs.core.count.call(null, prefix), " "));
  cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), istr_35299);
  return cljs.pprint.update_nl_state.call(null, lb);
};
cljs.pprint.split_at_newline = function cljs$pprint$split_at_newline(tokens) {
  var pre = cljs.core.seq.call(null, cljs.core.take_while.call(null, function(p1__35300_SHARP_) {
    return cljs.core.not.call(null, cljs.pprint.nl_t_QMARK_.call(null, p1__35300_SHARP_));
  }, tokens));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, pre), tokens))], null);
};
cljs.pprint.write_token_string = function cljs$pprint$write_token_string(this$, tokens) {
  var vec__35303 = cljs.pprint.split_at_newline.call(null, tokens);
  var a = cljs.core.nth.call(null, vec__35303, 0, null);
  var b = cljs.core.nth.call(null, vec__35303, 1, null);
  if (cljs.core.truth_(a)) {
    cljs.pprint.write_tokens.call(null, this$, a, false);
  } else {
  }
  if (cljs.core.truth_(b)) {
    var vec__35304 = cljs.pprint.get_section.call(null, b);
    var section = cljs.core.nth.call(null, vec__35304, 0, null);
    var remainder = cljs.core.nth.call(null, vec__35304, 1, null);
    var newl = cljs.core.first.call(null, b);
    var do_nl = cljs.pprint.emit_nl_QMARK_.call(null, newl, this$, section, cljs.pprint.get_sub_section.call(null, b));
    var result = cljs.core.truth_(do_nl) ? function() {
      cljs.pprint.emit_nl.call(null, this$, newl);
      return cljs.core.next.call(null, b);
    }() : b;
    var long_section = cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, result));
    var result__$1 = long_section ? function() {
      var rem2 = cljs$pprint$write_token_string.call(null, this$, section);
      if (cljs.core._EQ_.call(null, rem2, section)) {
        cljs.pprint.write_tokens.call(null, this$, section, false);
        return remainder;
      } else {
        return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.concat.call(null, rem2, remainder));
      }
    }() : result;
    return result__$1;
  } else {
    return null;
  }
};
cljs.pprint.write_line = function cljs$pprint$write_line(this$) {
  var buffer = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  while (true) {
    cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "buffer", "buffer", 617295198), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, buffer));
    if (cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, buffer))) {
      var new_buffer = cljs.pprint.write_token_string.call(null, this$, buffer);
      if (!(buffer === new_buffer)) {
        var G__35305 = new_buffer;
        buffer = G__35305;
        continue;
      } else {
        return null;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.pprint.add_to_buffer = function cljs$pprint$add_to_buffer(this$, token) {
  cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "buffer", "buffer", 617295198), cljs.core.conj.call(null, (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), token));
  if (cljs.core.not.call(null, cljs.pprint.tokens_fit_QMARK_.call(null, this$, (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)))))) {
    return cljs.pprint.write_line.call(null, this$);
  } else {
    return null;
  }
};
cljs.pprint.write_buffered_output = function cljs$pprint$write_buffered_output(this$) {
  cljs.pprint.write_line.call(null, this$);
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var buf = temp__4655__auto__;
    cljs.pprint.write_tokens.call(null, this$, buf, true);
    return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "buffer", "buffer", 617295198), cljs.core.PersistentVector.EMPTY);
  } else {
    return null;
  }
};
cljs.pprint.write_white_space = function cljs$pprint$write_white_space(this$) {
  var temp__4657__auto__ = (new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core.truth_(temp__4657__auto__)) {
    var tws = temp__4657__auto__;
    cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), tws);
    return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), null);
  } else {
    return null;
  }
};
cljs.pprint.write_initial_lines = function cljs$pprint$write_initial_lines(this$, s) {
  var lines = clojure.string.split.call(null, s, "\n", -1);
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, lines), 1)) {
    return s;
  } else {
    var prefix = (new cljs.core.Keyword(null, "per-line-prefix", "per-line-prefix", 846941813)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, (new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)))));
    var l = cljs.core.first.call(null, lines);
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "buffering", "buffering", -876713613), (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))))) {
      var oldpos_35314 = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
      var newpos_35315 = oldpos_35314 + cljs.core.count.call(null, l);
      cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos_35315);
      cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_buffer_blob.call(null, l, null, oldpos_35314, newpos_35315));
      cljs.pprint.write_buffered_output.call(null, this$);
    } else {
      cljs.pprint.write_white_space.call(null, this$);
      cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), l);
    }
    cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), "\n");
    var seq__35310_35316 = cljs.core.seq.call(null, cljs.core.next.call(null, cljs.core.butlast.call(null, lines)));
    var chunk__35311_35317 = null;
    var count__35312_35318 = 0;
    var i__35313_35319 = 0;
    while (true) {
      if (i__35313_35319 < count__35312_35318) {
        var l_35320__$1 = cljs.core._nth.call(null, chunk__35311_35317, i__35313_35319);
        cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), l_35320__$1);
        cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), cljs.pprint.pp_newline.call(null));
        if (cljs.core.truth_(prefix)) {
          cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix);
        } else {
        }
        var G__35321 = seq__35310_35316;
        var G__35322 = chunk__35311_35317;
        var G__35323 = count__35312_35318;
        var G__35324 = i__35313_35319 + 1;
        seq__35310_35316 = G__35321;
        chunk__35311_35317 = G__35322;
        count__35312_35318 = G__35323;
        i__35313_35319 = G__35324;
        continue;
      } else {
        var temp__4657__auto___35325 = cljs.core.seq.call(null, seq__35310_35316);
        if (temp__4657__auto___35325) {
          var seq__35310_35326__$1 = temp__4657__auto___35325;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__35310_35326__$1)) {
            var c__30411__auto___35327 = cljs.core.chunk_first.call(null, seq__35310_35326__$1);
            var G__35328 = cljs.core.chunk_rest.call(null, seq__35310_35326__$1);
            var G__35329 = c__30411__auto___35327;
            var G__35330 = cljs.core.count.call(null, c__30411__auto___35327);
            var G__35331 = 0;
            seq__35310_35316 = G__35328;
            chunk__35311_35317 = G__35329;
            count__35312_35318 = G__35330;
            i__35313_35319 = G__35331;
            continue;
          } else {
            var l_35332__$1 = cljs.core.first.call(null, seq__35310_35326__$1);
            cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), l_35332__$1);
            cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), cljs.pprint.pp_newline.call(null));
            if (cljs.core.truth_(prefix)) {
              cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix);
            } else {
            }
            var G__35333 = cljs.core.next.call(null, seq__35310_35326__$1);
            var G__35334 = null;
            var G__35335 = 0;
            var G__35336 = 0;
            seq__35310_35316 = G__35333;
            chunk__35311_35317 = G__35334;
            count__35312_35318 = G__35335;
            i__35313_35319 = G__35336;
            continue;
          }
        } else {
        }
      }
      break;
    }
    cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "buffering", "buffering", -876713613), new cljs.core.Keyword(null, "writing", "writing", -1486865108));
    return cljs.core.last.call(null, lines);
  }
};
cljs.pprint.p_write_char = function cljs$pprint$p_write_char(this$, c) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
    cljs.pprint.write_white_space.call(null, this$);
    return cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), c);
  } else {
    if (cljs.core._EQ_.call(null, c, "\n")) {
      return cljs.pprint.write_initial_lines.call(null, this$, "\n");
    } else {
      var oldpos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
      var newpos = oldpos + 1;
      cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos);
      return cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_buffer_blob.call(null, cljs.core.char$.call(null, c), null, oldpos, newpos));
    }
  }
};
cljs.pprint.pretty_writer = function cljs$pprint$pretty_writer(writer, max_columns, miser_width) {
  var lb = new cljs.pprint.logical_block(null, null, cljs.core.atom.call(null, 0), cljs.core.atom.call(null, 0), cljs.core.atom.call(null, false), cljs.core.atom.call(null, false), null, null, null, null, null, null, null);
  var fields = cljs.core.atom.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776), new cljs.core.Keyword(null, "miser-width", "miser-width", -1310049437), new cljs.core.Keyword(null, "buffer-block", "buffer-block", -10937307), new cljs.core.Keyword(null, "pretty-writer", "pretty-writer", -1222834267), new cljs.core.Keyword(null, "sections", "sections", -886710106), new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, 
  "pos", "pos", -864607220), new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), new cljs.core.Keyword(null, "base", "base", 185279322), new cljs.core.Keyword(null, "buffer-level", "buffer-level", 928864731), new cljs.core.Keyword(null, "buffer", "buffer", 617295198)], [lb, miser_width, lb, true, null, new cljs.core.Keyword(null, "writing", "writing", -1486865108), 0, null, cljs.pprint.column_writer.call(null, writer, max_columns), 1, cljs.core.PersistentVector.EMPTY]));
  if (typeof cljs.pprint.t_cljs$pprint35343 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint35343 = function(pretty_writer, writer, max_columns, miser_width, lb, fields, meta35344) {
      this.pretty_writer = pretty_writer;
      this.writer = writer;
      this.max_columns = max_columns;
      this.miser_width = miser_width;
      this.lb = lb;
      this.fields = fields;
      this.meta35344 = meta35344;
      this.cljs$lang$protocol_mask$partition0$ = 1074167808;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint35343.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(lb, fields) {
      return function(_35345, meta35344__$1) {
        var self__ = this;
        var _35345__$1 = this;
        return new cljs.pprint.t_cljs$pprint35343(self__.pretty_writer, self__.writer, self__.max_columns, self__.miser_width, self__.lb, self__.fields, meta35344__$1);
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint35343.prototype.cljs$core$IMeta$_meta$arity$1 = function(lb, fields) {
      return function(_35345) {
        var self__ = this;
        var _35345__$1 = this;
        return self__.meta35344;
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint35343.prototype.cljs$core$IDeref$_deref$arity$1 = function(lb, fields) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return self__.fields;
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint35343.prototype.cljs$core$IWriter$_write$arity$2 = function(lb, fields) {
      return function(this$, x) {
        var self__ = this;
        var this$__$1 = this;
        var pred__35346 = cljs.core._EQ_;
        var expr__35347 = cljs.core.type.call(null, x);
        if (cljs.core.truth_(pred__35346.call(null, String, expr__35347))) {
          var s0 = cljs.pprint.write_initial_lines.call(null, this$__$1, x);
          var s = clojure.string.replace_first.call(null, s0, /\s+$/, "");
          var white_space = cljs.core.subs.call(null, s0, cljs.core.count.call(null, s));
          var mode = (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1)));
          if (cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
            cljs.pprint.write_white_space.call(null, this$__$1);
            cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1))), s);
            return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$__$1), cljs.core.assoc, new cljs.core.Keyword(null, "trailing-white-space", "trailing-white-space", 1496006996), white_space);
          } else {
            var oldpos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1)));
            var newpos = oldpos + cljs.core.count.call(null, s0);
            cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$__$1), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos);
            return cljs.pprint.add_to_buffer.call(null, this$__$1, cljs.pprint.make_buffer_blob.call(null, s, white_space, oldpos, newpos));
          }
        } else {
          if (cljs.core.truth_(pred__35346.call(null, Number, expr__35347))) {
            return cljs.pprint.p_write_char.call(null, this$__$1, x);
          } else {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35347)].join(""));
          }
        }
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint35343.prototype.cljs$core$IWriter$_flush$arity$1 = function(lb, fields) {
      return function(this$) {
        var self__ = this;
        var this$__$1 = this;
        cljs.pprint._ppflush.call(null, this$__$1);
        return cljs.core._flush.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1))));
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint35343.prototype.cljs$pprint$IPrettyFlush$ = true;
    cljs.pprint.t_cljs$pprint35343.prototype.cljs$pprint$IPrettyFlush$_ppflush$arity$1 = function(lb, fields) {
      return function(this$) {
        var self__ = this;
        var this$__$1 = this;
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1))), new cljs.core.Keyword(null, "buffering", "buffering", -876713613))) {
          cljs.pprint.write_tokens.call(null, this$__$1, (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$__$1))), true);
          return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$__$1), cljs.core.assoc, new cljs.core.Keyword(null, "buffer", "buffer", 617295198), cljs.core.PersistentVector.EMPTY);
        } else {
          return cljs.pprint.write_white_space.call(null, this$__$1);
        }
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint35343.getBasis = function(lb, fields) {
      return function() {
        return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "pretty-writer", "pretty-writer", 417697260, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
        3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "max-columns", "max-columns", -912112507, null), new cljs.core.Symbol(null, "miser-width", "miser-width", 330482090, null)], null)))], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "max-columns", "max-columns", -912112507, null), new cljs.core.Symbol(null, "miser-width", "miser-width", 330482090, null), 
        new cljs.core.Symbol(null, "lb", "lb", 950310490, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, "meta35344", "meta35344", 603091887, null)], null);
      };
    }(lb, fields);
    cljs.pprint.t_cljs$pprint35343.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint35343.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint35343";
    cljs.pprint.t_cljs$pprint35343.cljs$lang$ctorPrWriter = function(lb, fields) {
      return function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
        return cljs.core._write.call(null, writer__30207__auto__, "cljs.pprint/t_cljs$pprint35343");
      };
    }(lb, fields);
    cljs.pprint.__GT_t_cljs$pprint35343 = function(lb, fields) {
      return function cljs$pprint$pretty_writer_$___GT_t_cljs$pprint35343(pretty_writer__$1, writer__$1, max_columns__$1, miser_width__$1, lb__$1, fields__$1, meta35344) {
        return new cljs.pprint.t_cljs$pprint35343(pretty_writer__$1, writer__$1, max_columns__$1, miser_width__$1, lb__$1, fields__$1, meta35344);
      };
    }(lb, fields);
  }
  return new cljs.pprint.t_cljs$pprint35343(cljs$pprint$pretty_writer, writer, max_columns, miser_width, lb, fields, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.start_block = function cljs$pprint$start_block(this$, prefix, per_line_prefix, suffix) {
  var lb = new cljs.pprint.logical_block((new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), null, cljs.core.atom.call(null, 0), cljs.core.atom.call(null, 0), cljs.core.atom.call(null, false), cljs.core.atom.call(null, false), prefix, per_line_prefix, suffix, null, null, null, null);
  cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776), lb);
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
    cljs.pprint.write_white_space.call(null, this$);
    var temp__4657__auto___35349 = (new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    if (cljs.core.truth_(temp__4657__auto___35349)) {
      var cb_35350 = temp__4657__auto___35349;
      cb_35350.call(null, new cljs.core.Keyword(null, "start", "start", -355208981));
    } else {
    }
    if (cljs.core.truth_(prefix)) {
      cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), prefix);
    } else {
    }
    var col = cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
    cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb), col);
    return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb), col);
  } else {
    var oldpos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    var newpos = oldpos + (cljs.core.truth_(prefix) ? cljs.core.count.call(null, prefix) : 0);
    cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos);
    return cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_start_block_t.call(null, lb, oldpos, newpos));
  }
};
cljs.pprint.end_block = function cljs$pprint$end_block(this$) {
  var lb = (new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  var suffix = (new cljs.core.Keyword(null, "suffix", "suffix", 367373057)).cljs$core$IFn$_invoke$arity$1(lb);
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
    cljs.pprint.write_white_space.call(null, this$);
    if (cljs.core.truth_(suffix)) {
      cljs.core._write.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), suffix);
    } else {
    }
    var temp__4657__auto___35351 = (new cljs.core.Keyword(null, "logical-block-callback", "logical-block-callback", 1612691194)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    if (cljs.core.truth_(temp__4657__auto___35351)) {
      var cb_35352 = temp__4657__auto___35351;
      cb_35352.call(null, new cljs.core.Keyword(null, "end", "end", -268185958));
    } else {
    }
  } else {
    var oldpos_35353 = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    var newpos_35354 = oldpos_35353 + (cljs.core.truth_(suffix) ? cljs.core.count.call(null, suffix) : 0);
    cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "pos", "pos", -864607220), newpos_35354);
    cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_end_block_t.call(null, lb, oldpos_35353, newpos_35354));
  }
  return cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776), (new cljs.core.Keyword(null, "parent", "parent", -878878779)).cljs$core$IFn$_invoke$arity$1(lb));
};
cljs.pprint.nl = function cljs$pprint$nl(this$, type) {
  cljs.core.swap_BANG_.call(null, cljs.core.deref.call(null, this$), cljs.core.assoc, new cljs.core.Keyword(null, "mode", "mode", 654403691), new cljs.core.Keyword(null, "buffering", "buffering", -876713613));
  var pos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  return cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_nl_t.call(null, type, (new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), pos, pos));
};
cljs.pprint.indent = function cljs$pprint$indent(this$, relative_to, offset) {
  var lb = (new cljs.core.Keyword(null, "logical-blocks", "logical-blocks", -1466339776)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "mode", "mode", 654403691)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))), new cljs.core.Keyword(null, "writing", "writing", -1486865108))) {
    cljs.pprint.write_white_space.call(null, this$);
    return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "indent", "indent", -148200125)).cljs$core$IFn$_invoke$arity$1(lb), offset + function() {
      var pred__35358 = cljs.core._EQ_;
      var expr__35359 = relative_to;
      if (cljs.core.truth_(pred__35358.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), expr__35359))) {
        return cljs.core.deref.call(null, (new cljs.core.Keyword(null, "start-col", "start-col", 668080143)).cljs$core$IFn$_invoke$arity$1(lb));
      } else {
        if (cljs.core.truth_(pred__35358.call(null, new cljs.core.Keyword(null, "current", "current", -1088038603), expr__35359))) {
          return cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$))));
        } else {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35359)].join(""));
        }
      }
    }());
  } else {
    var pos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
    return cljs.pprint.add_to_buffer.call(null, this$, cljs.pprint.make_indent_t.call(null, lb, relative_to, offset, pos, pos));
  }
};
cljs.pprint.get_miser_width = function cljs$pprint$get_miser_width(this$) {
  return (new cljs.core.Keyword(null, "miser-width", "miser-width", -1310049437)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, this$)));
};
cljs.pprint._STAR_print_pretty_STAR_ = true;
if (typeof cljs.pprint._STAR_print_pprint_dispatch_STAR_ !== "undefined") {
} else {
  cljs.pprint._STAR_print_pprint_dispatch_STAR_ = null;
}
cljs.pprint._STAR_print_right_margin_STAR_ = 72;
cljs.pprint._STAR_print_miser_width_STAR_ = 40;
cljs.pprint._STAR_print_lines_STAR_ = null;
cljs.pprint._STAR_print_circle_STAR_ = null;
cljs.pprint._STAR_print_shared_STAR_ = null;
cljs.pprint._STAR_print_suppress_namespaces_STAR_ = null;
cljs.pprint._STAR_print_radix_STAR_ = null;
cljs.pprint._STAR_print_base_STAR_ = 10;
cljs.pprint._STAR_current_level_STAR_ = 0;
cljs.pprint._STAR_current_length_STAR_ = null;
cljs.pprint.write_option_table = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "miser-width", "miser-width", -1310049437), new cljs.core.Keyword(null, "right-margin", "right-margin", -810413306), new cljs.core.Keyword(null, "circle", "circle", 1903212362), new cljs.core.Keyword(null, "lines", "lines", -700165781), new cljs.core.Keyword(null, "suppress-namespaces", "suppress-namespaces", 2130686956), new cljs.core.Keyword(null, "radix", "radix", 857016463), new cljs.core.Keyword(null, 
"level", "level", 1290497552), new cljs.core.Keyword(null, "readably", "readably", 1129599760), new cljs.core.Keyword(null, "dispatch", "dispatch", 1319337009), new cljs.core.Keyword(null, "length", "length", 588987862), new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), new cljs.core.Keyword(null, "base", "base", 185279322)], [new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_miser_width_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-miser-width*", "cljs.pprint/*print-miser-width*", 1588913450, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), 
new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-miser-width*", "*print-miser-width*", 
1206624211, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 21, 1, true, 632, 637, cljs.core.List.EMPTY, "The column at which to enter miser style. Depending on the dispatch table,\nmiser style add newlines in more places to try to keep lines short allowing for further\nlevels of nesting.", cljs.core.truth_(cljs.pprint._STAR_print_miser_width_STAR_) ? cljs.pprint._STAR_print_miser_width_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_right_margin_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-right-margin*", "cljs.pprint/*print-right-margin*", -56183119, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), 
new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-right-margin*", "*print-right-margin*", 
-437272454, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 22, 1, true, 625, 630, cljs.core.List.EMPTY, "Pretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all\nnon-mandatory newlines.", cljs.core.truth_(cljs.pprint._STAR_print_right_margin_STAR_) ? cljs.pprint._STAR_print_right_margin_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_circle_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-circle*", "cljs.pprint/*print-circle*", 1606185849, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "private", "private", -558947994), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), 
new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [true, new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-circle*", "*print-circle*", 
1148404994, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 15, 1, true, 646, 649, cljs.core.List.EMPTY, "Mark circular structures (N.B. This is not yet used)", cljs.core.truth_(cljs.pprint._STAR_print_circle_STAR_) ? cljs.pprint._STAR_print_circle_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_lines_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-lines*", "cljs.pprint/*print-lines*", 534683484, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "private", "private", -558947994), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), 
new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [true, new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-lines*", "*print-lines*", 
75920659, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 14, 1, true, 640, 643, cljs.core.List.EMPTY, "Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)", cljs.core.truth_(cljs.pprint._STAR_print_lines_STAR_) ? cljs.pprint._STAR_print_lines_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_suppress_namespaces_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-suppress-namespaces*", "cljs.pprint/*print-suppress-namespaces*", 1649488204, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", 
"column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-suppress-namespaces*", 
"*print-suppress-namespaces*", 1795828355, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 28, 1, true, 657, 661, cljs.core.List.EMPTY, "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions", cljs.core.truth_(cljs.pprint._STAR_print_suppress_namespaces_STAR_) ? cljs.pprint._STAR_print_suppress_namespaces_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_radix_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-radix*", "cljs.pprint/*print-radix*", 1558253641, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, 
"dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-radix*", "*print-radix*", 1168517744, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 
14, 1, true, 665, 670, cljs.core.List.EMPTY, "Print a radix specifier in front of integers and rationals. If *print-base* is 2, 8,\nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the\nradix specifier is in the form #XXr where XX is the decimal value of *print-base* ", cljs.core.truth_(cljs.pprint._STAR_print_radix_STAR_) ? cljs.pprint._STAR_print_radix_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.core._STAR_print_level_STAR_;
}, new cljs.core.Symbol("cljs.core", "*print-level*", "cljs.core/*print-level*", 65848482, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, 
"line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.Symbol(null, "*print-level*", "*print-level*", -634488505, null), "cljs/core.cljs", 16, 
1, true, 117, 128, cljs.core.List.EMPTY, "*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.", 
new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null), cljs.core.truth_(cljs.core._STAR_print_level_STAR_) ? cljs.core._STAR_print_level_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.core._STAR_print_readably_STAR_;
}, new cljs.core.Symbol("cljs.core", "*print-readably*", "cljs.core/*print-readably*", -354670250, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), 
new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.Symbol(null, "*print-readably*", "*print-readably*", -761361221, null), "cljs/core.cljs", 19, 1, true, 81, 87, cljs.core.List.EMPTY, 
"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true", cljs.core.truth_(cljs.core._STAR_print_readably_STAR_) ? cljs.core._STAR_print_readably_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_pprint_dispatch_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-pprint-dispatch*", "cljs.pprint/*print-pprint-dispatch*", -1820734013, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 
2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-pprint-dispatch*", 
"*print-pprint-dispatch*", -1709114492, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 25, 1, true, 619, 623, cljs.core.List.EMPTY, "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify.", cljs.core.truth_(cljs.pprint._STAR_print_pprint_dispatch_STAR_) ? cljs.pprint._STAR_print_pprint_dispatch_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.core._STAR_print_length_STAR_;
}, new cljs.core.Symbol("cljs.core", "*print-length*", "cljs.core/*print-length*", -20766927, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, 
"line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.Symbol(null, "*print-length*", "*print-length*", -687693654, null), "cljs/core.cljs", 
17, 1, true, 105, 115, cljs.core.List.EMPTY, "*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.", new cljs.core.PersistentVector(null, 
1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null), cljs.core.truth_(cljs.core._STAR_print_length_STAR_) ? cljs.core._STAR_print_length_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_pretty_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-pretty*", "cljs.pprint/*print-pretty*", -762636861, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), 
new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-pretty*", "*print-pretty*", 726795140, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 
16, 1, true, 615, 617, cljs.core.List.EMPTY, "Bind to true if you want write to use pretty printing", cljs.core.truth_(cljs.pprint._STAR_print_pretty_STAR_) ? cljs.pprint._STAR_print_pretty_STAR_.cljs$lang$test : null])), new cljs.core.Var(function() {
  return cljs.pprint._STAR_print_base_STAR_;
}, new cljs.core.Symbol("cljs.pprint", "*print-base*", "cljs.pprint/*print-base*", 1887526790, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "added", "added", 2057651688), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, 
"dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], ["1.2", new cljs.core.Symbol(null, "cljs.pprint", "cljs.pprint", -966900911, null), new cljs.core.Symbol(null, "*print-base*", "*print-base*", 2037937791, null), "/home/torysa/Workspace/humfunding/target/base+system+user+dev+dev/cljsbuild-compiler-1/cljs/pprint.cljs", 
13, 1, true, 672, 675, cljs.core.List.EMPTY, "The base to use for printing integers and rationals.", cljs.core.truth_(cljs.pprint._STAR_print_base_STAR_) ? cljs.pprint._STAR_print_base_STAR_.cljs$lang$test : null]))]);
cljs.pprint.table_ize = function cljs$pprint$table_ize(t, m) {
  return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(p1__35361_SHARP_) {
    var temp__4657__auto__ = cljs.core.get.call(null, t, cljs.core.key.call(null, p1__35361_SHARP_));
    if (cljs.core.truth_(temp__4657__auto__)) {
      var v = temp__4657__auto__;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v, cljs.core.val.call(null, p1__35361_SHARP_)], null);
    } else {
      return null;
    }
  }, m));
};
cljs.pprint.pretty_writer_QMARK_ = function cljs$pprint$pretty_writer_QMARK_(x) {
  var and__29588__auto__ = !(x == null) ? x.cljs$lang$protocol_mask$partition0$ & 32768 || x.cljs$core$IDeref$ ? true : !x.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, x) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, x);
  if (and__29588__auto__) {
    return (new cljs.core.Keyword(null, "pretty-writer", "pretty-writer", -1222834267)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, x)));
  } else {
    return and__29588__auto__;
  }
};
cljs.pprint.make_pretty_writer = function cljs$pprint$make_pretty_writer(base_writer, right_margin, miser_width) {
  return cljs.pprint.pretty_writer.call(null, base_writer, right_margin, miser_width);
};
cljs.pprint.write_out = function cljs$pprint$write_out(object) {
  var length_reached = function() {
    var and__29588__auto__ = cljs.pprint._STAR_current_length_STAR_;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = cljs.core._STAR_print_length_STAR_;
      if (cljs.core.truth_(and__29588__auto____$1)) {
        return cljs.pprint._STAR_current_length_STAR_ >= cljs.core._STAR_print_length_STAR_;
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }();
  if (cljs.core.not.call(null, cljs.pprint._STAR_print_pretty_STAR_)) {
    cljs.pprint.pr.call(null, object);
  } else {
    if (cljs.core.truth_(length_reached)) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
    } else {
      if (cljs.core.truth_(cljs.pprint._STAR_current_length_STAR_)) {
        cljs.pprint._STAR_current_length_STAR_ = cljs.pprint._STAR_current_length_STAR_ + 1;
      } else {
      }
      cljs.pprint._STAR_print_pprint_dispatch_STAR_.call(null, object);
    }
  }
  return length_reached;
};
cljs.pprint.write = function cljs$pprint$write(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___35382 = arguments.length;
  var i__30670__auto___35383 = 0;
  while (true) {
    if (i__30670__auto___35383 < len__30669__auto___35382) {
      args__30676__auto__.push(arguments[i__30670__auto___35383]);
      var G__35384 = i__30670__auto___35383 + 1;
      i__30670__auto___35383 = G__35384;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return cljs.pprint.write.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
cljs.pprint.write.cljs$core$IFn$_invoke$arity$variadic = function(object, kw_args) {
  var options = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "stream", "stream", 1534941648), true], null), cljs.core.apply.call(null, cljs.core.hash_map, kw_args));
  var _STAR_print_base_STAR_35368 = cljs.pprint._STAR_print_base_STAR_;
  var _STAR_print_circle_STAR_35369 = cljs.pprint._STAR_print_circle_STAR_;
  var _STAR_print_length_STAR_35370 = cljs.core._STAR_print_length_STAR_;
  var _STAR_print_level_STAR_35371 = cljs.core._STAR_print_level_STAR_;
  var _STAR_print_lines_STAR_35372 = cljs.pprint._STAR_print_lines_STAR_;
  var _STAR_print_miser_width_STAR_35373 = cljs.pprint._STAR_print_miser_width_STAR_;
  var _STAR_print_pprint_dispatch_STAR_35374 = cljs.pprint._STAR_print_pprint_dispatch_STAR_;
  var _STAR_print_pretty_STAR_35375 = cljs.pprint._STAR_print_pretty_STAR_;
  var _STAR_print_radix_STAR_35376 = cljs.pprint._STAR_print_radix_STAR_;
  var _STAR_print_readably_STAR_35377 = cljs.core._STAR_print_readably_STAR_;
  var _STAR_print_right_margin_STAR_35378 = cljs.pprint._STAR_print_right_margin_STAR_;
  var _STAR_print_suppress_namespaces_STAR_35379 = cljs.pprint._STAR_print_suppress_namespaces_STAR_;
  cljs.pprint._STAR_print_base_STAR_ = (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_base_STAR_);
  cljs.pprint._STAR_print_circle_STAR_ = (new cljs.core.Keyword(null, "circle", "circle", 1903212362)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_circle_STAR_);
  cljs.core._STAR_print_length_STAR_ = (new cljs.core.Keyword(null, "length", "length", 588987862)).cljs$core$IFn$_invoke$arity$2(options, cljs.core._STAR_print_length_STAR_);
  cljs.core._STAR_print_level_STAR_ = (new cljs.core.Keyword(null, "level", "level", 1290497552)).cljs$core$IFn$_invoke$arity$2(options, cljs.core._STAR_print_level_STAR_);
  cljs.pprint._STAR_print_lines_STAR_ = (new cljs.core.Keyword(null, "lines", "lines", -700165781)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_lines_STAR_);
  cljs.pprint._STAR_print_miser_width_STAR_ = (new cljs.core.Keyword(null, "miser-width", "miser-width", -1310049437)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_miser_width_STAR_);
  cljs.pprint._STAR_print_pprint_dispatch_STAR_ = (new cljs.core.Keyword(null, "dispatch", "dispatch", 1319337009)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_pprint_dispatch_STAR_);
  cljs.pprint._STAR_print_pretty_STAR_ = (new cljs.core.Keyword(null, "pretty", "pretty", -1916372486)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_pretty_STAR_);
  cljs.pprint._STAR_print_radix_STAR_ = (new cljs.core.Keyword(null, "radix", "radix", 857016463)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_radix_STAR_);
  cljs.core._STAR_print_readably_STAR_ = (new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$2(options, cljs.core._STAR_print_readably_STAR_);
  cljs.pprint._STAR_print_right_margin_STAR_ = (new cljs.core.Keyword(null, "right-margin", "right-margin", -810413306)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_right_margin_STAR_);
  cljs.pprint._STAR_print_suppress_namespaces_STAR_ = (new cljs.core.Keyword(null, "suppress-namespaces", "suppress-namespaces", 2130686956)).cljs$core$IFn$_invoke$arity$2(options, cljs.pprint._STAR_print_suppress_namespaces_STAR_);
  try {
    try {
      var sb = new goog.string.StringBuffer;
      var optval = cljs.core.contains_QMARK_.call(null, options, new cljs.core.Keyword(null, "stream", "stream", 1534941648)) ? (new cljs.core.Keyword(null, "stream", "stream", 1534941648)).cljs$core$IFn$_invoke$arity$1(options) : true;
      var base_writer = optval === true || optval == null ? new cljs.core.StringBufferWriter(sb) : optval;
      if (cljs.core.truth_(cljs.pprint._STAR_print_pretty_STAR_)) {
        var base_writer__35007__auto___35385 = base_writer;
        var new_writer__35008__auto___35386 = cljs.core.not.call(null, cljs.pprint.pretty_writer_QMARK_.call(null, base_writer__35007__auto___35385));
        var _STAR_out_STAR_35380_35387 = cljs.core._STAR_out_STAR_;
        cljs.core._STAR_out_STAR_ = new_writer__35008__auto___35386 ? cljs.pprint.make_pretty_writer.call(null, base_writer__35007__auto___35385, cljs.pprint._STAR_print_right_margin_STAR_, cljs.pprint._STAR_print_miser_width_STAR_) : base_writer__35007__auto___35385;
        try {
          cljs.pprint.write_out.call(null, object);
          cljs.pprint._ppflush.call(null, cljs.core._STAR_out_STAR_);
        } finally {
          cljs.core._STAR_out_STAR_ = _STAR_out_STAR_35380_35387;
        }
      } else {
        var _STAR_out_STAR_35381_35388 = cljs.core._STAR_out_STAR_;
        cljs.core._STAR_out_STAR_ = base_writer;
        try {
          cljs.pprint.pr.call(null, object);
        } finally {
          cljs.core._STAR_out_STAR_ = _STAR_out_STAR_35381_35388;
        }
      }
      if (optval === true) {
        cljs.core._STAR_print_fn_STAR_.call(null, [cljs.core.str(sb)].join(""));
      } else {
      }
      if (optval == null) {
        return [cljs.core.str(sb)].join("");
      } else {
        return null;
      }
    } finally {
    }
  } finally {
    cljs.pprint._STAR_print_suppress_namespaces_STAR_ = _STAR_print_suppress_namespaces_STAR_35379;
    cljs.pprint._STAR_print_right_margin_STAR_ = _STAR_print_right_margin_STAR_35378;
    cljs.core._STAR_print_readably_STAR_ = _STAR_print_readably_STAR_35377;
    cljs.pprint._STAR_print_radix_STAR_ = _STAR_print_radix_STAR_35376;
    cljs.pprint._STAR_print_pretty_STAR_ = _STAR_print_pretty_STAR_35375;
    cljs.pprint._STAR_print_pprint_dispatch_STAR_ = _STAR_print_pprint_dispatch_STAR_35374;
    cljs.pprint._STAR_print_miser_width_STAR_ = _STAR_print_miser_width_STAR_35373;
    cljs.pprint._STAR_print_lines_STAR_ = _STAR_print_lines_STAR_35372;
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_35371;
    cljs.core._STAR_print_length_STAR_ = _STAR_print_length_STAR_35370;
    cljs.pprint._STAR_print_circle_STAR_ = _STAR_print_circle_STAR_35369;
    cljs.pprint._STAR_print_base_STAR_ = _STAR_print_base_STAR_35368;
  }
};
cljs.pprint.write.cljs$lang$maxFixedArity = 1;
cljs.pprint.write.cljs$lang$applyTo = function(seq35366) {
  var G__35367 = cljs.core.first.call(null, seq35366);
  var seq35366__$1 = cljs.core.next.call(null, seq35366);
  return cljs.pprint.write.cljs$core$IFn$_invoke$arity$variadic(G__35367, seq35366__$1);
};
cljs.pprint.pprint = function cljs$pprint$pprint(var_args) {
  var args35389 = [];
  var len__30669__auto___35395 = arguments.length;
  var i__30670__auto___35396 = 0;
  while (true) {
    if (i__30670__auto___35396 < len__30669__auto___35395) {
      args35389.push(arguments[i__30670__auto___35396]);
      var G__35397 = i__30670__auto___35396 + 1;
      i__30670__auto___35396 = G__35397;
      continue;
    } else {
    }
    break;
  }
  var G__35391 = args35389.length;
  switch(G__35391) {
    case 1:
      return cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args35389.length)].join(""));;
  }
};
cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1 = function(object) {
  var sb = new goog.string.StringBuffer;
  var _STAR_out_STAR_35392 = cljs.core._STAR_out_STAR_;
  cljs.core._STAR_out_STAR_ = new cljs.core.StringBufferWriter(sb);
  try {
    cljs.pprint.pprint.call(null, object, cljs.core._STAR_out_STAR_);
    return cljs.core._STAR_print_fn_STAR_.call(null, [cljs.core.str(sb)].join(""));
  } finally {
    cljs.core._STAR_out_STAR_ = _STAR_out_STAR_35392;
  }
};
cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$2 = function(object, writer) {
  var base_writer__35007__auto__ = writer;
  var new_writer__35008__auto__ = cljs.core.not.call(null, cljs.pprint.pretty_writer_QMARK_.call(null, base_writer__35007__auto__));
  var _STAR_out_STAR_35393 = cljs.core._STAR_out_STAR_;
  cljs.core._STAR_out_STAR_ = new_writer__35008__auto__ ? cljs.pprint.make_pretty_writer.call(null, base_writer__35007__auto__, cljs.pprint._STAR_print_right_margin_STAR_, cljs.pprint._STAR_print_miser_width_STAR_) : base_writer__35007__auto__;
  try {
    var _STAR_print_pretty_STAR_35394_35399 = cljs.pprint._STAR_print_pretty_STAR_;
    cljs.pprint._STAR_print_pretty_STAR_ = true;
    try {
      cljs.pprint.write_out.call(null, object);
    } finally {
      cljs.pprint._STAR_print_pretty_STAR_ = _STAR_print_pretty_STAR_35394_35399;
    }
    if (!cljs.core._EQ_.call(null, 0, cljs.pprint.get_column.call(null, cljs.core._STAR_out_STAR_))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "\n");
    } else {
    }
    return cljs.pprint._ppflush.call(null, cljs.core._STAR_out_STAR_);
  } finally {
    cljs.core._STAR_out_STAR_ = _STAR_out_STAR_35393;
  }
};
cljs.pprint.pprint.cljs$lang$maxFixedArity = 2;
cljs.pprint.set_pprint_dispatch = function cljs$pprint$set_pprint_dispatch(function$) {
  cljs.pprint._STAR_print_pprint_dispatch_STAR_ = function$;
  return null;
};
cljs.pprint.check_enumerated_arg = function cljs$pprint$check_enumerated_arg(arg, choices) {
  if (cljs.core.not.call(null, choices.call(null, arg))) {
    throw new Error([cljs.core.str("Bad argument: "), cljs.core.str(arg), cljs.core.str(". It must be one of "), cljs.core.str(choices)].join(""));
  } else {
    return null;
  }
};
cljs.pprint.level_exceeded = function cljs$pprint$level_exceeded() {
  var and__29588__auto__ = cljs.core._STAR_print_level_STAR_;
  if (cljs.core.truth_(and__29588__auto__)) {
    return cljs.pprint._STAR_current_level_STAR_ >= cljs.core._STAR_print_level_STAR_;
  } else {
    return and__29588__auto__;
  }
};
cljs.pprint.pprint_newline = function cljs$pprint$pprint_newline(kind) {
  cljs.pprint.check_enumerated_arg.call(null, kind, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mandatory", "mandatory", 542802336), null, new cljs.core.Keyword(null, "miser", "miser", -556060186), null, new cljs.core.Keyword(null, "fill", "fill", 883462889), null, new cljs.core.Keyword(null, "linear", "linear", 872268697), null], null), null));
  return cljs.pprint.nl.call(null, cljs.core._STAR_out_STAR_, kind);
};
cljs.pprint.pprint_indent = function cljs$pprint$pprint_indent(relative_to, n) {
  cljs.pprint.check_enumerated_arg.call(null, relative_to, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "block", "block", 664686210), null, new cljs.core.Keyword(null, "current", "current", -1088038603), null], null), null));
  return cljs.pprint.indent.call(null, cljs.core._STAR_out_STAR_, relative_to, n);
};
cljs.pprint.pprint_tab = function cljs$pprint$pprint_tab(kind, colnum, colinc) {
  cljs.pprint.check_enumerated_arg.call(null, kind, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "section", "section", -300141526), null, new cljs.core.Keyword(null, "line", "line", 212345235), null, new cljs.core.Keyword(null, "line-relative", "line-relative", 1149548219), null, new cljs.core.Keyword(null, "section-relative", "section-relative", -658298724), null], null), null));
  throw new Error("pprint-tab is not yet implemented");
};
cljs.pprint.cl_format = function cljs$pprint$cl_format(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___35403 = arguments.length;
  var i__30670__auto___35404 = 0;
  while (true) {
    if (i__30670__auto___35404 < len__30669__auto___35403) {
      args__30676__auto__.push(arguments[i__30670__auto___35404]);
      var G__35405 = i__30670__auto___35404 + 1;
      i__30670__auto___35404 = G__35405;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 2 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(2), 0, null) : null;
  return cljs.pprint.cl_format.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30677__auto__);
};
cljs.pprint.cl_format.cljs$core$IFn$_invoke$arity$variadic = function(writer, format_in, args) {
  var compiled_format = typeof format_in === "string" ? cljs.pprint.compile_format.call(null, format_in) : format_in;
  var navigator = cljs.pprint.init_navigator.call(null, args);
  return cljs.pprint.execute_format.call(null, writer, compiled_format, navigator);
};
cljs.pprint.cl_format.cljs$lang$maxFixedArity = 2;
cljs.pprint.cl_format.cljs$lang$applyTo = function(seq35400) {
  var G__35401 = cljs.core.first.call(null, seq35400);
  var seq35400__$1 = cljs.core.next.call(null, seq35400);
  var G__35402 = cljs.core.first.call(null, seq35400__$1);
  var seq35400__$2 = cljs.core.next.call(null, seq35400__$1);
  return cljs.pprint.cl_format.cljs$core$IFn$_invoke$arity$variadic(G__35401, G__35402, seq35400__$2);
};
cljs.pprint._STAR_format_str_STAR_ = null;
cljs.pprint.format_error = function cljs$pprint$format_error(message, offset) {
  var full_message = [cljs.core.str(message), cljs.core.str("\n"), cljs.core.str(cljs.pprint._STAR_format_str_STAR_), cljs.core.str("\n"), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, offset, " "))), cljs.core.str("^"), cljs.core.str("\n")].join("");
  throw Error(full_message);
};
cljs.pprint.arg_navigator = function(seq, rest, pos, __meta, __extmap, __hash) {
  this.seq = seq;
  this.rest = rest;
  this.pos = pos;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.arg_navigator.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs.pprint.arg_navigator.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k35407, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__35409 = k35407 instanceof cljs.core.Keyword ? k35407.fqn : null;
  switch(G__35409) {
    case "seq":
      return self__.seq;
      break;
    case "rest":
      return self__.rest;
      break;
    case "pos":
      return self__.pos;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k35407, else__30225__auto__);
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs.pprint.arg-navigator{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seq", "seq", -1817803783), self__.seq], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "rest", "rest", -1241696419), self__.rest], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pos", "pos", -864607220), self__.pos], null)], null), self__.__extmap));
};
cljs.pprint.arg_navigator.prototype.cljs$core$IIterable$ = true;
cljs.pprint.arg_navigator.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__35406) {
  var self__ = this;
  var G__35406__$1 = this;
  return new cljs.core.RecordIter(0, G__35406__$1, 3, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seq", "seq", -1817803783), new cljs.core.Keyword(null, "rest", "rest", -1241696419), new cljs.core.Keyword(null, "pos", "pos", -864607220)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.arg_navigator.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.arg_navigator.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs.pprint.arg_navigator(self__.seq, self__.rest, self__.pos, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.arg_navigator.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.arg_navigator.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "pos", "pos", -864607220), null, new cljs.core.Keyword(null, "seq", "seq", -1817803783), null, new cljs.core.Keyword(null, "rest", "rest", -1241696419), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs.pprint.arg_navigator(self__.seq, self__.rest, self__.pos, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__35406) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__35410 = cljs.core.keyword_identical_QMARK_;
  var expr__35411 = k__30230__auto__;
  if (cljs.core.truth_(pred__35410.call(null, new cljs.core.Keyword(null, "seq", "seq", -1817803783), expr__35411))) {
    return new cljs.pprint.arg_navigator(G__35406, self__.rest, self__.pos, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__35410.call(null, new cljs.core.Keyword(null, "rest", "rest", -1241696419), expr__35411))) {
      return new cljs.pprint.arg_navigator(self__.seq, G__35406, self__.pos, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__35410.call(null, new cljs.core.Keyword(null, "pos", "pos", -864607220), expr__35411))) {
        return new cljs.pprint.arg_navigator(self__.seq, self__.rest, G__35406, self__.__meta, self__.__extmap, null);
      } else {
        return new cljs.pprint.arg_navigator(self__.seq, self__.rest, self__.pos, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__35406), null);
      }
    }
  }
};
cljs.pprint.arg_navigator.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seq", "seq", -1817803783), self__.seq], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "rest", "rest", -1241696419), self__.rest], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pos", "pos", -864607220), self__.pos], null)], null), self__.__extmap));
};
cljs.pprint.arg_navigator.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__35406) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs.pprint.arg_navigator(self__.seq, self__.rest, self__.pos, G__35406, self__.__extmap, self__.__hash);
};
cljs.pprint.arg_navigator.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs.pprint.arg_navigator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "seq", "seq", -177272256, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "pos", "pos", 775924307, null)], null);
};
cljs.pprint.arg_navigator.cljs$lang$type = true;
cljs.pprint.arg_navigator.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/arg-navigator");
};
cljs.pprint.arg_navigator.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs.pprint/arg-navigator");
};
cljs.pprint.__GT_arg_navigator = function cljs$pprint$__GT_arg_navigator(seq, rest, pos) {
  return new cljs.pprint.arg_navigator(seq, rest, pos, null, null, null);
};
cljs.pprint.map__GT_arg_navigator = function cljs$pprint$map__GT_arg_navigator(G__35408) {
  return new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(G__35408), (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(G__35408), (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(G__35408), null, cljs.core.dissoc.call(null, G__35408, new cljs.core.Keyword(null, "seq", "seq", -1817803783), new cljs.core.Keyword(null, "rest", "rest", -1241696419), new cljs.core.Keyword(null, 
  "pos", "pos", -864607220)), null);
};
cljs.pprint.init_navigator = function cljs$pprint$init_navigator(s) {
  var s__$1 = cljs.core.seq.call(null, s);
  return new cljs.pprint.arg_navigator(s__$1, s__$1, 0, null, null, null);
};
cljs.pprint.next_arg = function cljs$pprint$next_arg(navigator) {
  var rst = (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator);
  if (cljs.core.truth_(rst)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, rst), new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator), cljs.core.next.call(null, rst), (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator) + 1, null, null, null)], null);
  } else {
    throw Error("Not enough arguments for format definition");
  }
};
cljs.pprint.next_arg_or_nil = function cljs$pprint$next_arg_or_nil(navigator) {
  var rst = (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator);
  if (cljs.core.truth_(rst)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, rst), new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator), cljs.core.next.call(null, rst), (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator) + 1, null, null, null)], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, navigator], null);
  }
};
cljs.pprint.get_format_arg = function cljs$pprint$get_format_arg(navigator) {
  var vec__35415 = cljs.pprint.next_arg.call(null, navigator);
  var raw_format = cljs.core.nth.call(null, vec__35415, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35415, 1, null);
  var compiled_format = typeof raw_format === "string" ? cljs.pprint.compile_format.call(null, raw_format) : raw_format;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [compiled_format, navigator__$1], null);
};
cljs.pprint.absolute_reposition = function cljs$pprint$absolute_reposition(navigator, position) {
  if (position >= (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator)) {
    return cljs.pprint.relative_reposition.call(null, navigator, (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator) - position);
  } else {
    return new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator), cljs.core.drop.call(null, position, (new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator)), position, null, null, null);
  }
};
cljs.pprint.relative_reposition = function cljs$pprint$relative_reposition(navigator, position) {
  var newpos = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator) + position;
  if (position < 0) {
    return cljs.pprint.absolute_reposition.call(null, navigator, newpos);
  } else {
    return new cljs.pprint.arg_navigator((new cljs.core.Keyword(null, "seq", "seq", -1817803783)).cljs$core$IFn$_invoke$arity$1(navigator), cljs.core.drop.call(null, position, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator)), newpos, null, null, null);
  }
};
cljs.pprint.compiled_directive = function(func, def, params, offset, __meta, __extmap, __hash) {
  this.func = func;
  this.def = def;
  this.params = params;
  this.offset = offset;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.pprint.compiled_directive.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs.pprint.compiled_directive.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k35417, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__35419 = k35417 instanceof cljs.core.Keyword ? k35417.fqn : null;
  switch(G__35419) {
    case "func":
      return self__.func;
      break;
    case "def":
      return self__.def;
      break;
    case "params":
      return self__.params;
      break;
    case "offset":
      return self__.offset;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k35417, else__30225__auto__);
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs.pprint.compiled-directive{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "func", "func", -238706040), self__.func], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "def", "def", -1043430536), self__.def], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "params", "params", 710516235), self__.params], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311), self__.offset], null)], null), self__.__extmap));
};
cljs.pprint.compiled_directive.prototype.cljs$core$IIterable$ = true;
cljs.pprint.compiled_directive.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__35416) {
  var self__ = this;
  var G__35416__$1 = this;
  return new cljs.core.RecordIter(0, G__35416__$1, 4, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "func", "func", -238706040), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.Keyword(null, "offset", "offset", 296498311)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs.pprint.compiled_directive.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs.pprint.compiled_directive.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, self__.offset, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.pprint.compiled_directive.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
cljs.pprint.compiled_directive.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "offset", "offset", 296498311), null, new cljs.core.Keyword(null, "func", "func", -238706040), null, new cljs.core.Keyword(null, "params", "params", 710516235), null, new cljs.core.Keyword(null, "def", "def", -1043430536), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, self__.offset, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__35416) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__35420 = cljs.core.keyword_identical_QMARK_;
  var expr__35421 = k__30230__auto__;
  if (cljs.core.truth_(pred__35420.call(null, new cljs.core.Keyword(null, "func", "func", -238706040), expr__35421))) {
    return new cljs.pprint.compiled_directive(G__35416, self__.def, self__.params, self__.offset, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__35420.call(null, new cljs.core.Keyword(null, "def", "def", -1043430536), expr__35421))) {
      return new cljs.pprint.compiled_directive(self__.func, G__35416, self__.params, self__.offset, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__35420.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), expr__35421))) {
        return new cljs.pprint.compiled_directive(self__.func, self__.def, G__35416, self__.offset, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__35420.call(null, new cljs.core.Keyword(null, "offset", "offset", 296498311), expr__35421))) {
          return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, G__35416, self__.__meta, self__.__extmap, null);
        } else {
          return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, self__.offset, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__35416), null);
        }
      }
    }
  }
};
cljs.pprint.compiled_directive.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "func", "func", -238706040), self__.func], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "def", "def", -1043430536), self__.def], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "params", "params", 710516235), self__.params], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311), self__.offset], null)], null), self__.__extmap));
};
cljs.pprint.compiled_directive.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__35416) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs.pprint.compiled_directive(self__.func, self__.def, self__.params, self__.offset, G__35416, self__.__extmap, self__.__hash);
};
cljs.pprint.compiled_directive.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs.pprint.compiled_directive.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "def", "def", 597100991, null), new cljs.core.Symbol(null, "params", "params", -1943919534, null), new cljs.core.Symbol(null, "offset", "offset", 1937029838, null)], null);
};
cljs.pprint.compiled_directive.cljs$lang$type = true;
cljs.pprint.compiled_directive.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.pprint/compiled-directive");
};
cljs.pprint.compiled_directive.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs.pprint/compiled-directive");
};
cljs.pprint.__GT_compiled_directive = function cljs$pprint$__GT_compiled_directive(func, def, params, offset) {
  return new cljs.pprint.compiled_directive(func, def, params, offset, null, null, null);
};
cljs.pprint.map__GT_compiled_directive = function cljs$pprint$map__GT_compiled_directive(G__35418) {
  return new cljs.pprint.compiled_directive((new cljs.core.Keyword(null, "func", "func", -238706040)).cljs$core$IFn$_invoke$arity$1(G__35418), (new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(G__35418), (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(G__35418), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(G__35418), null, cljs.core.dissoc.call(null, G__35418, new cljs.core.Keyword(null, 
  "func", "func", -238706040), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.Keyword(null, "offset", "offset", 296498311)), null);
};
cljs.pprint.realize_parameter = function cljs$pprint$realize_parameter(p__35424, navigator) {
  var vec__35428 = p__35424;
  var param = cljs.core.nth.call(null, vec__35428, 0, null);
  var vec__35429 = cljs.core.nth.call(null, vec__35428, 1, null);
  var raw_val = cljs.core.nth.call(null, vec__35429, 0, null);
  var offset = cljs.core.nth.call(null, vec__35429, 1, null);
  var vec__35430 = cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), param) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [raw_val, navigator], null) : cljs.core._EQ_.call(null, raw_val, new cljs.core.Keyword(null, "parameter-from-args", "parameter-from-args", 
  -758446196)) ? cljs.pprint.next_arg.call(null, navigator) : cljs.core._EQ_.call(null, raw_val, new cljs.core.Keyword(null, "remaining-arg-count", "remaining-arg-count", -1216589335)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.count.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator)), navigator], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [raw_val, navigator], null);
  var real_param = cljs.core.nth.call(null, vec__35430, 0, null);
  var new_navigator = cljs.core.nth.call(null, vec__35430, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [real_param, offset], null)], null), new_navigator], null);
};
cljs.pprint.realize_parameter_list = function cljs$pprint$realize_parameter_list(parameter_map, navigator) {
  var vec__35432 = cljs.pprint.map_passing_context.call(null, cljs.pprint.realize_parameter, navigator, parameter_map);
  var pairs = cljs.core.nth.call(null, vec__35432, 0, null);
  var new_navigator = cljs.core.nth.call(null, vec__35432, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, pairs), new_navigator], null);
};
cljs.pprint.special_radix_markers = new cljs.core.PersistentArrayMap(null, 3, [2, "#b", 8, "#o", 16, "#x"], null);
cljs.pprint.format_simple_number = function cljs$pprint$format_simple_number(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    if (cljs.core._EQ_.call(null, cljs.pprint._STAR_print_base_STAR_, 10)) {
      return [cljs.core.str(n), cljs.core.str(cljs.core.truth_(cljs.pprint._STAR_print_radix_STAR_) ? "." : null)].join("");
    } else {
      return [cljs.core.str(cljs.core.truth_(cljs.pprint._STAR_print_radix_STAR_) ? function() {
        var or__29600__auto__ = cljs.core.get.call(null, cljs.pprint.special_radix_markers, cljs.pprint._STAR_print_base_STAR_);
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return [cljs.core.str("#"), cljs.core.str(cljs.pprint._STAR_print_base_STAR_), cljs.core.str("r")].join("");
        }
      }() : null), cljs.core.str(cljs.pprint.opt_base_str.call(null, cljs.pprint._STAR_print_base_STAR_, n))].join("");
    }
  } else {
    return null;
  }
};
cljs.pprint.format_ascii = function cljs$pprint$format_ascii(print_func, params, arg_navigator, offsets) {
  var vec__35434 = cljs.pprint.next_arg.call(null, arg_navigator);
  var arg = cljs.core.nth.call(null, vec__35434, 0, null);
  var arg_navigator__$1 = cljs.core.nth.call(null, vec__35434, 1, null);
  var base_output = function() {
    var or__29600__auto__ = cljs.pprint.format_simple_number.call(null, arg);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return print_func.call(null, arg);
    }
  }();
  var base_width = base_output.length;
  var min_width = base_width + (new cljs.core.Keyword(null, "minpad", "minpad", 323570901)).cljs$core$IFn$_invoke$arity$1(params);
  var width = min_width >= (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params) ? min_width : min_width + (cljs.core.quot.call(null, (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params) - min_width - 1, (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params)) + 1) * (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params);
  var chars = cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, width - base_width, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
    cljs.pprint.print.call(null, [cljs.core.str(chars), cljs.core.str(base_output)].join(""));
  } else {
    cljs.pprint.print.call(null, [cljs.core.str(base_output), cljs.core.str(chars)].join(""));
  }
  return arg_navigator__$1;
};
cljs.pprint.integral_QMARK_ = function cljs$pprint$integral_QMARK_(x) {
  if (cljs.core.integer_QMARK_.call(null, x)) {
    return true;
  } else {
    if (cljs.pprint.float_QMARK_.call(null, x)) {
      return cljs.core._EQ_.call(null, x, Math.floor(x));
    } else {
      return false;
    }
  }
};
cljs.pprint.remainders = function cljs$pprint$remainders(base, val) {
  return cljs.core.reverse.call(null, cljs.core.first.call(null, cljs.pprint.consume.call(null, function(p1__35435_SHARP_) {
    if (p1__35435_SHARP_ > 0) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.rem.call(null, p1__35435_SHARP_, base), cljs.core.quot.call(null, p1__35435_SHARP_, base)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null], null);
    }
  }, val)));
};
cljs.pprint.base_str = function cljs$pprint$base_str(base, val) {
  if (val === 0) {
    return "0";
  } else {
    var xlated_val = val;
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(xlated_val) {
      return function(p1__35436_SHARP_) {
        if (p1__35436_SHARP_ < 10) {
          return cljs.core.char$.call(null, cljs.pprint.char_code.call(null, "0") + p1__35436_SHARP_);
        } else {
          return cljs.core.char$.call(null, cljs.pprint.char_code.call(null, "a") + (p1__35436_SHARP_ - 10));
        }
      };
    }(xlated_val), cljs.pprint.remainders.call(null, base, val)));
  }
};
cljs.pprint.javascript_base_formats = new cljs.core.PersistentArrayMap(null, 3, [8, "%o", 10, "%d", 16, "%x"], null);
cljs.pprint.opt_base_str = function cljs$pprint$opt_base_str(base, val) {
  return cljs.pprint.base_str.call(null, base, val);
};
cljs.pprint.group_by_STAR_ = function cljs$pprint$group_by_STAR_(unit, lis) {
  return cljs.core.reverse.call(null, cljs.core.first.call(null, cljs.pprint.consume.call(null, function(x) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq.call(null, cljs.core.reverse.call(null, cljs.core.take.call(null, unit, x))), cljs.core.seq.call(null, cljs.core.drop.call(null, unit, x))], null);
  }, cljs.core.reverse.call(null, lis))));
};
cljs.pprint.format_integer = function cljs$pprint$format_integer(base, params, arg_navigator, offsets) {
  var vec__35439 = cljs.pprint.next_arg.call(null, arg_navigator);
  var arg = cljs.core.nth.call(null, vec__35439, 0, null);
  var arg_navigator__$1 = cljs.core.nth.call(null, vec__35439, 1, null);
  if (cljs.core.truth_(cljs.pprint.integral_QMARK_.call(null, arg))) {
    var neg_35440 = arg < 0;
    var pos_arg_35441 = neg_35440 ? -arg : arg;
    var raw_str_35442 = cljs.pprint.opt_base_str.call(null, base, pos_arg_35441);
    var group_str_35443 = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? function() {
      var groups = cljs.core.map.call(null, function(neg_35440, pos_arg_35441, raw_str_35442, vec__35439, arg, arg_navigator__$1) {
        return function(p1__35437_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.str, p1__35437_SHARP_);
        };
      }(neg_35440, pos_arg_35441, raw_str_35442, vec__35439, arg, arg_navigator__$1), cljs.pprint.group_by_STAR_.call(null, (new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083)).cljs$core$IFn$_invoke$arity$1(params), raw_str_35442));
      var commas = cljs.core.repeat.call(null, cljs.core.count.call(null, groups), (new cljs.core.Keyword(null, "commachar", "commachar", 652859327)).cljs$core$IFn$_invoke$arity$1(params));
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.next.call(null, cljs.core.interleave.call(null, commas, groups)));
    }() : raw_str_35442;
    var signed_str_35444 = neg_35440 ? [cljs.core.str("-"), cljs.core.str(group_str_35443)].join("") : cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? [cljs.core.str("+"), cljs.core.str(group_str_35443)].join("") : group_str_35443;
    var padded_str_35445 = signed_str_35444.length < (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params) ? [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params) - signed_str_35444.length, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)))), cljs.core.str(signed_str_35444)].join("") : 
    signed_str_35444;
    cljs.pprint.print.call(null, padded_str_35445);
  } else {
    cljs.pprint.format_ascii.call(null, cljs.core.print_str, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), 1, new cljs.core.Keyword(null, "minpad", "minpad", 323570901), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), (new cljs.core.Keyword(null, "padchar", "padchar", 
    2018584530)).cljs$core$IFn$_invoke$arity$1(params), new cljs.core.Keyword(null, "at", "at", 1476951349), true], null), cljs.pprint.init_navigator.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg], null)), null);
  }
  return arg_navigator__$1;
};
cljs.pprint.english_cardinal_units = new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"], null);
cljs.pprint.english_ordinal_units = new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, ["zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth"], null);
cljs.pprint.english_cardinal_tens = new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"], null);
cljs.pprint.english_ordinal_tens = new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", "", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth"], null);
cljs.pprint.english_scale_numbers = new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", "thousand", "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", "nonillion", "decillion", "undecillion", "duodecillion", "tredecillion", "quattuordecillion", "quindecillion", "sexdecillion", "septendecillion", "octodecillion", "novemdecillion", "vigintillion"], null);
cljs.pprint.format_simple_cardinal = function cljs$pprint$format_simple_cardinal(num) {
  var hundreds = cljs.core.quot.call(null, num, 100);
  var tens = cljs.core.rem.call(null, num, 100);
  return [cljs.core.str(hundreds > 0 ? [cljs.core.str(cljs.core.nth.call(null, cljs.pprint.english_cardinal_units, hundreds)), cljs.core.str(" hundred")].join("") : null), cljs.core.str(hundreds > 0 && tens > 0 ? " " : null), cljs.core.str(tens > 0 ? tens < 20 ? cljs.core.nth.call(null, cljs.pprint.english_cardinal_units, tens) : function() {
    var ten_digit = cljs.core.quot.call(null, tens, 10);
    var unit_digit = cljs.core.rem.call(null, tens, 10);
    return [cljs.core.str(ten_digit > 0 ? cljs.core.nth.call(null, cljs.pprint.english_cardinal_tens, ten_digit) : null), cljs.core.str(ten_digit > 0 && unit_digit > 0 ? "-" : null), cljs.core.str(unit_digit > 0 ? cljs.core.nth.call(null, cljs.pprint.english_cardinal_units, unit_digit) : null)].join("");
  }() : null)].join("");
};
cljs.pprint.add_english_scales = function cljs$pprint$add_english_scales(parts, offset) {
  var cnt = cljs.core.count.call(null, parts);
  var acc = cljs.core.PersistentVector.EMPTY;
  var pos = cnt - 1;
  var this$ = cljs.core.first.call(null, parts);
  var remainder = cljs.core.next.call(null, parts);
  while (true) {
    if (remainder == null) {
      return [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, ", ", acc))), cljs.core.str(!cljs.core.empty_QMARK_.call(null, this$) && !cljs.core.empty_QMARK_.call(null, acc) ? ", " : null), cljs.core.str(this$), cljs.core.str(!cljs.core.empty_QMARK_.call(null, this$) && pos + offset > 0 ? [cljs.core.str(" "), cljs.core.str(cljs.core.nth.call(null, cljs.pprint.english_scale_numbers, pos + offset))].join("") : null)].join("");
    } else {
      var G__35446 = cljs.core.empty_QMARK_.call(null, this$) ? acc : cljs.core.conj.call(null, acc, [cljs.core.str(this$), cljs.core.str(" "), cljs.core.str(cljs.core.nth.call(null, cljs.pprint.english_scale_numbers, pos + offset))].join(""));
      var G__35447 = pos - 1;
      var G__35448 = cljs.core.first.call(null, remainder);
      var G__35449 = cljs.core.next.call(null, remainder);
      acc = G__35446;
      pos = G__35447;
      this$ = G__35448;
      remainder = G__35449;
      continue;
    }
    break;
  }
};
cljs.pprint.format_cardinal_english = function cljs$pprint$format_cardinal_english(params, navigator, offsets) {
  var vec__35451 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__35451, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35451, 1, null);
  if (cljs.core._EQ_.call(null, 0, arg)) {
    cljs.pprint.print.call(null, "zero");
  } else {
    var abs_arg_35452 = arg < 0 ? -arg : arg;
    var parts_35453 = cljs.pprint.remainders.call(null, 1E3, abs_arg_35452);
    if (cljs.core.count.call(null, parts_35453) <= cljs.core.count.call(null, cljs.pprint.english_scale_numbers)) {
      var parts_strs_35454 = cljs.core.map.call(null, cljs.pprint.format_simple_cardinal, parts_35453);
      var full_str_35455 = cljs.pprint.add_english_scales.call(null, parts_strs_35454, 0);
      cljs.pprint.print.call(null, [cljs.core.str(arg < 0 ? "minus " : null), cljs.core.str(full_str_35455)].join(""));
    } else {
      cljs.pprint.format_integer.call(null, 10, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), " ", new cljs.core.Keyword(null, "commachar", "commachar", 652859327), ",", new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 3, new cljs.core.Keyword(null, "colon", "colon", -965200945), true], null), cljs.pprint.init_navigator.call(null, new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg], null)), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), 0, new cljs.core.Keyword(null, "commachar", "commachar", 652859327), 0, new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 0], null));
    }
  }
  return navigator__$1;
};
cljs.pprint.format_simple_ordinal = function cljs$pprint$format_simple_ordinal(num) {
  var hundreds = cljs.core.quot.call(null, num, 100);
  var tens = cljs.core.rem.call(null, num, 100);
  return [cljs.core.str(hundreds > 0 ? [cljs.core.str(cljs.core.nth.call(null, cljs.pprint.english_cardinal_units, hundreds)), cljs.core.str(" hundred")].join("") : null), cljs.core.str(hundreds > 0 && tens > 0 ? " " : null), cljs.core.str(tens > 0 ? tens < 20 ? cljs.core.nth.call(null, cljs.pprint.english_ordinal_units, tens) : function() {
    var ten_digit = cljs.core.quot.call(null, tens, 10);
    var unit_digit = cljs.core.rem.call(null, tens, 10);
    if (ten_digit > 0 && !(unit_digit > 0)) {
      return cljs.core.nth.call(null, cljs.pprint.english_ordinal_tens, ten_digit);
    } else {
      return [cljs.core.str(ten_digit > 0 ? cljs.core.nth.call(null, cljs.pprint.english_cardinal_tens, ten_digit) : null), cljs.core.str(ten_digit > 0 && unit_digit > 0 ? "-" : null), cljs.core.str(unit_digit > 0 ? cljs.core.nth.call(null, cljs.pprint.english_ordinal_units, unit_digit) : null)].join("");
    }
  }() : hundreds > 0 ? "th" : null)].join("");
};
cljs.pprint.format_ordinal_english = function cljs$pprint$format_ordinal_english(params, navigator, offsets) {
  var vec__35457 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__35457, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35457, 1, null);
  if (cljs.core._EQ_.call(null, 0, arg)) {
    cljs.pprint.print.call(null, "zeroth");
  } else {
    var abs_arg_35458 = arg < 0 ? -arg : arg;
    var parts_35459 = cljs.pprint.remainders.call(null, 1E3, abs_arg_35458);
    if (cljs.core.count.call(null, parts_35459) <= cljs.core.count.call(null, cljs.pprint.english_scale_numbers)) {
      var parts_strs_35460 = cljs.core.map.call(null, cljs.pprint.format_simple_cardinal, cljs.core.drop_last.call(null, parts_35459));
      var head_str_35461 = cljs.pprint.add_english_scales.call(null, parts_strs_35460, 1);
      var tail_str_35462 = cljs.pprint.format_simple_ordinal.call(null, cljs.core.last.call(null, parts_35459));
      cljs.pprint.print.call(null, [cljs.core.str(arg < 0 ? "minus " : null), cljs.core.str(!cljs.core.empty_QMARK_.call(null, head_str_35461) && !cljs.core.empty_QMARK_.call(null, tail_str_35462) ? [cljs.core.str(head_str_35461), cljs.core.str(", "), cljs.core.str(tail_str_35462)].join("") : !cljs.core.empty_QMARK_.call(null, head_str_35461) ? [cljs.core.str(head_str_35461), cljs.core.str("th")].join("") : tail_str_35462)].join(""));
    } else {
      cljs.pprint.format_integer.call(null, 10, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), " ", new cljs.core.Keyword(null, "commachar", "commachar", 652859327), ",", new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 3, new cljs.core.Keyword(null, "colon", "colon", -965200945), true], null), cljs.pprint.init_navigator.call(null, new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg], null)), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), 0, new cljs.core.Keyword(null, "commachar", "commachar", 652859327), 0, new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 0], null));
      var low_two_digits_35463 = cljs.core.rem.call(null, arg, 100);
      var not_teens_35464 = 11 < low_two_digits_35463 || 19 > low_two_digits_35463;
      var low_digit_35465 = cljs.core.rem.call(null, low_two_digits_35463, 10);
      cljs.pprint.print.call(null, low_digit_35465 === 1 && not_teens_35464 ? "st" : low_digit_35465 === 2 && not_teens_35464 ? "nd" : low_digit_35465 === 3 && not_teens_35464 ? "rd" : "th");
    }
  }
  return navigator__$1;
};
cljs.pprint.old_roman_table = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["I", "II", "III", "IIII", "V", "VI", "VII", "VIII", "VIIII"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X", "XX", "XXX", "XXXX", "L", "LX", "LXX", "LXXX", "LXXXX"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["C", 
"CC", "CCC", "CCCC", "D", "DC", "DCC", "DCCC", "DCCCC"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["M", "MM", "MMM"], null)], null);
cljs.pprint.new_roman_table = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"], null), new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["C", "CC", 
"CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["M", "MM", "MMM"], null)], null);
cljs.pprint.format_roman = function cljs$pprint$format_roman(table, params, navigator, offsets) {
  var vec__35467 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__35467, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35467, 1, null);
  if (typeof arg === "number" && arg > 0 && arg < 4E3) {
    var digits_35468 = cljs.pprint.remainders.call(null, 10, arg);
    var acc_35469 = cljs.core.PersistentVector.EMPTY;
    var pos_35470 = cljs.core.count.call(null, digits_35468) - 1;
    var digits_35471__$1 = digits_35468;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, digits_35471__$1)) {
        cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, acc_35469));
      } else {
        var digit_35472 = cljs.core.first.call(null, digits_35471__$1);
        var G__35473 = cljs.core._EQ_.call(null, 0, digit_35472) ? acc_35469 : cljs.core.conj.call(null, acc_35469, cljs.core.nth.call(null, cljs.core.nth.call(null, table, pos_35470), digit_35472 - 1));
        var G__35474 = pos_35470 - 1;
        var G__35475 = cljs.core.next.call(null, digits_35471__$1);
        acc_35469 = G__35473;
        pos_35470 = G__35474;
        digits_35471__$1 = G__35475;
        continue;
      }
      break;
    }
  } else {
    cljs.pprint.format_integer.call(null, 10, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), " ", new cljs.core.Keyword(null, "commachar", "commachar", 652859327), ",", new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 3, new cljs.core.Keyword(null, "colon", "colon", -965200945), true], null), cljs.pprint.init_navigator.call(null, new cljs.core.PersistentVector(null, 
    1, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg], null)), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), 0, new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), 0, new cljs.core.Keyword(null, "commachar", "commachar", 652859327), 0, new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), 0], null));
  }
  return navigator__$1;
};
cljs.pprint.format_old_roman = function cljs$pprint$format_old_roman(params, navigator, offsets) {
  return cljs.pprint.format_roman.call(null, cljs.pprint.old_roman_table, params, navigator, offsets);
};
cljs.pprint.format_new_roman = function cljs$pprint$format_new_roman(params, navigator, offsets) {
  return cljs.pprint.format_roman.call(null, cljs.pprint.new_roman_table, params, navigator, offsets);
};
cljs.pprint.special_chars = new cljs.core.PersistentArrayMap(null, 5, [8, "Backspace", 9, "Tab", 10, "Newline", 13, "Return", 32, "Space"], null);
cljs.pprint.pretty_character = function cljs$pprint$pretty_character(params, navigator, offsets) {
  var vec__35477 = cljs.pprint.next_arg.call(null, navigator);
  var c = cljs.core.nth.call(null, vec__35477, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35477, 1, null);
  var as_int = cljs.pprint.char_code.call(null, c);
  var base_char = as_int & 127;
  var meta = as_int & 128;
  var special = cljs.core.get.call(null, cljs.pprint.special_chars, base_char);
  if (meta > 0) {
    cljs.pprint.print.call(null, "Meta-");
  } else {
  }
  cljs.pprint.print.call(null, cljs.core.truth_(special) ? special : base_char < 32 ? [cljs.core.str("Control-"), cljs.core.str(cljs.core.char$.call(null, base_char + 64))].join("") : cljs.core._EQ_.call(null, base_char, 127) ? "Control-?" : cljs.core.char$.call(null, base_char));
  return navigator__$1;
};
cljs.pprint.readable_character = function cljs$pprint$readable_character(params, navigator, offsets) {
  var vec__35482 = cljs.pprint.next_arg.call(null, navigator);
  var c = cljs.core.nth.call(null, vec__35482, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35482, 1, null);
  var pred__35483_35486 = cljs.core._EQ_;
  var expr__35484_35487 = (new cljs.core.Keyword(null, "char-format", "char-format", -1016499218)).cljs$core$IFn$_invoke$arity$1(params);
  if (cljs.core.truth_(pred__35483_35486.call(null, "o", expr__35484_35487))) {
    cljs.pprint.cl_format.call(null, true, "\\o~3, '0o", cljs.pprint.char_code.call(null, c));
  } else {
    if (cljs.core.truth_(pred__35483_35486.call(null, "u", expr__35484_35487))) {
      cljs.pprint.cl_format.call(null, true, "\\u~4, '0x", cljs.pprint.char_code.call(null, c));
    } else {
      if (cljs.core.truth_(pred__35483_35486.call(null, null, expr__35484_35487))) {
        cljs.pprint.print_char.call(null, c);
      } else {
        throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35484_35487)].join(""));
      }
    }
  }
  return navigator__$1;
};
cljs.pprint.plain_character = function cljs$pprint$plain_character(params, navigator, offsets) {
  var vec__35489 = cljs.pprint.next_arg.call(null, navigator);
  var char$ = cljs.core.nth.call(null, vec__35489, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35489, 1, null);
  cljs.pprint.print.call(null, char$);
  return navigator__$1;
};
cljs.pprint.abort_QMARK_ = function cljs$pprint$abort_QMARK_(context) {
  var token = cljs.core.first.call(null, context);
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), token) || cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "colon-up-arrow", "colon-up-arrow", 244853007), token);
};
cljs.pprint.execute_sub_format = function cljs$pprint$execute_sub_format(format, args, base_args) {
  return cljs.core.second.call(null, cljs.pprint.map_passing_context.call(null, function(element, context) {
    if (cljs.core.truth_(cljs.pprint.abort_QMARK_.call(null, context))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, context], null);
    } else {
      var vec__35492 = cljs.pprint.realize_parameter_list.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(element), context);
      var params = cljs.core.nth.call(null, vec__35492, 0, null);
      var args__$1 = cljs.core.nth.call(null, vec__35492, 1, null);
      var vec__35493 = cljs.pprint.unzip_map.call(null, params);
      var params__$1 = cljs.core.nth.call(null, vec__35493, 0, null);
      var offsets = cljs.core.nth.call(null, vec__35493, 1, null);
      var params__$2 = cljs.core.assoc.call(null, params__$1, new cljs.core.Keyword(null, "base-args", "base-args", -1268706822), base_args);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.apply.call(null, (new cljs.core.Keyword(null, "func", "func", -238706040)).cljs$core$IFn$_invoke$arity$1(element), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [params__$2, args__$1, offsets], null))], null);
    }
  }, args, format));
};
cljs.pprint.float_parts_base = function cljs$pprint$float_parts_base(f) {
  var s = clojure.string.lower_case.call(null, [cljs.core.str(f)].join(""));
  var exploc = s.indexOf("e");
  var dotloc = s.indexOf(".");
  if (exploc < 0) {
    if (dotloc < 0) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, [cljs.core.str(cljs.core.count.call(null, s) - 1)].join("")], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.subs.call(null, s, 0, dotloc)), cljs.core.str(cljs.core.subs.call(null, s, dotloc + 1))].join(""), [cljs.core.str(dotloc - 1)].join("")], null);
    }
  } else {
    if (dotloc < 0) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s, 0, exploc), cljs.core.subs.call(null, s, exploc + 1)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.subs.call(null, s, 0, 1)), cljs.core.str(cljs.core.subs.call(null, s, 2, exploc))].join(""), cljs.core.subs.call(null, s, exploc + 1)], null);
    }
  }
};
cljs.pprint.float_parts = function cljs$pprint$float_parts(f) {
  var vec__35495 = cljs.pprint.float_parts_base.call(null, f);
  var m = cljs.core.nth.call(null, vec__35495, 0, null);
  var e = cljs.core.nth.call(null, vec__35495, 1, null);
  var m1 = cljs.pprint.rtrim.call(null, m, "0");
  var m2 = cljs.pprint.ltrim.call(null, m1, "0");
  var delta = cljs.core.count.call(null, m1) - cljs.core.count.call(null, m2);
  var e__$1 = cljs.core.count.call(null, e) > 0 && cljs.core._EQ_.call(null, cljs.core.nth.call(null, e, 0), "+") ? cljs.core.subs.call(null, e, 1) : e;
  if (cljs.core.empty_QMARK_.call(null, m2)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["0", 0], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m2, parseInt(e__$1, 10) - delta], null);
  }
};
cljs.pprint.inc_s = function cljs$pprint$inc_s(s) {
  var len_1 = cljs.core.count.call(null, s) - 1;
  var i = len_1 | 0;
  while (true) {
    if (i < 0) {
      return cljs.core.apply.call(null, cljs.core.str, "1", cljs.core.repeat.call(null, len_1 + 1, "0"));
    } else {
      if (cljs.core._EQ_.call(null, "9", s.charAt(i))) {
        var G__35496 = i - 1;
        i = G__35496;
        continue;
      } else {
        return cljs.core.apply.call(null, cljs.core.str, cljs.core.subs.call(null, s, 0, i), cljs.core.char$.call(null, cljs.pprint.char_code.call(null, s.charAt(i)) + 1), cljs.core.repeat.call(null, len_1 - i, "0"));
      }
    }
    break;
  }
};
cljs.pprint.round_str = function cljs$pprint$round_str(m, e, d, w) {
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = d;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return w;
    }
  }())) {
    var len = cljs.core.count.call(null, m);
    var w__$1 = cljs.core.truth_(w) ? function() {
      var x__29931__auto__ = 2;
      var y__29932__auto__ = w;
      return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
    }() : 0;
    var round_pos = cljs.core.truth_(d) ? e + d + 1 : e >= 0 ? function() {
      var x__29931__auto__ = e + 1;
      var y__29932__auto__ = w__$1 - 1;
      return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
    }() : w__$1 + e;
    var vec__35498 = cljs.core._EQ_.call(null, round_pos, 0) ? new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("0"), cljs.core.str(m)].join(""), e + 1, 1, len + 1], null) : new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e, round_pos, len], null);
    var m1 = cljs.core.nth.call(null, vec__35498, 0, null);
    var e1 = cljs.core.nth.call(null, vec__35498, 1, null);
    var round_pos__$1 = cljs.core.nth.call(null, vec__35498, 2, null);
    var len__$1 = cljs.core.nth.call(null, vec__35498, 3, null);
    if (cljs.core.truth_(round_pos__$1)) {
      if (round_pos__$1 < 0) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["0", 0, false], null);
      } else {
        if (len__$1 > round_pos__$1) {
          var round_char = cljs.core.nth.call(null, m1, round_pos__$1);
          var result = cljs.core.subs.call(null, m1, 0, round_pos__$1);
          if (cljs.pprint.char_code.call(null, round_char) >= cljs.pprint.char_code.call(null, "5")) {
            var round_up_result = cljs.pprint.inc_s.call(null, result);
            var expanded = cljs.core.count.call(null, round_up_result) > cljs.core.count.call(null, result);
            return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [expanded ? cljs.core.subs.call(null, round_up_result, 0, cljs.core.count.call(null, round_up_result) - 1) : round_up_result, e1, expanded], null);
          } else {
            return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [result, e1, false], null);
          }
        } else {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e, false], null);
        }
      }
    } else {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e, false], null);
    }
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e, false], null);
  }
};
cljs.pprint.expand_fixed = function cljs$pprint$expand_fixed(m, e, d) {
  var vec__35500 = e < 0 ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, -e - 1, "0"))), cljs.core.str(m)].join(""), -1], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m, e], null);
  var m1 = cljs.core.nth.call(null, vec__35500, 0, null);
  var e1 = cljs.core.nth.call(null, vec__35500, 1, null);
  var len = cljs.core.count.call(null, m1);
  var target_len = cljs.core.truth_(d) ? e1 + d + 1 : e1 + 1;
  if (len < target_len) {
    return [cljs.core.str(m1), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, target_len - len, "0")))].join("");
  } else {
    return m1;
  }
};
cljs.pprint.insert_decimal = function cljs$pprint$insert_decimal(m, e) {
  if (e < 0) {
    return [cljs.core.str("."), cljs.core.str(m)].join("");
  } else {
    var loc = e + 1;
    return [cljs.core.str(cljs.core.subs.call(null, m, 0, loc)), cljs.core.str("."), cljs.core.str(cljs.core.subs.call(null, m, loc))].join("");
  }
};
cljs.pprint.get_fixed = function cljs$pprint$get_fixed(m, e, d) {
  return cljs.pprint.insert_decimal.call(null, cljs.pprint.expand_fixed.call(null, m, e, d), e);
};
cljs.pprint.insert_scaled_decimal = function cljs$pprint$insert_scaled_decimal(m, k) {
  if (k < 0) {
    return [cljs.core.str("."), cljs.core.str(m)].join("");
  } else {
    return [cljs.core.str(cljs.core.subs.call(null, m, 0, k)), cljs.core.str("."), cljs.core.str(cljs.core.subs.call(null, m, k))].join("");
  }
};
cljs.pprint.convert_ratio = function cljs$pprint$convert_ratio(x) {
  return x;
};
cljs.pprint.fixed_float = function cljs$pprint$fixed_float(params, navigator, offsets) {
  var w = (new cljs.core.Keyword(null, "w", "w", 354169001)).cljs$core$IFn$_invoke$arity$1(params);
  var d = (new cljs.core.Keyword(null, "d", "d", 1972142424)).cljs$core$IFn$_invoke$arity$1(params);
  var vec__35505 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__35505, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35505, 1, null);
  var vec__35506 = arg < 0 ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["-", -arg], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["+", arg], null);
  var sign = cljs.core.nth.call(null, vec__35506, 0, null);
  var abs = cljs.core.nth.call(null, vec__35506, 1, null);
  var abs__$1 = cljs.pprint.convert_ratio.call(null, abs);
  var vec__35507 = cljs.pprint.float_parts.call(null, abs__$1);
  var mantissa = cljs.core.nth.call(null, vec__35507, 0, null);
  var exp = cljs.core.nth.call(null, vec__35507, 1, null);
  var scaled_exp = exp + (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(params);
  var add_sign = function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return arg < 0;
    }
  }();
  var append_zero = cljs.core.not.call(null, d) && cljs.core.count.call(null, mantissa) - 1 <= scaled_exp;
  var vec__35508 = cljs.pprint.round_str.call(null, mantissa, scaled_exp, d, cljs.core.truth_(w) ? w - (cljs.core.truth_(add_sign) ? 1 : 0) : null);
  var rounded_mantissa = cljs.core.nth.call(null, vec__35508, 0, null);
  var scaled_exp__$1 = cljs.core.nth.call(null, vec__35508, 1, null);
  var expanded = cljs.core.nth.call(null, vec__35508, 2, null);
  var fixed_repr = cljs.pprint.get_fixed.call(null, rounded_mantissa, cljs.core.truth_(expanded) ? scaled_exp__$1 + 1 : scaled_exp__$1, d);
  var fixed_repr__$1 = cljs.core.truth_(function() {
    var and__29588__auto__ = w;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = d;
      if (cljs.core.truth_(and__29588__auto____$1)) {
        return d >= 1 && cljs.core._EQ_.call(null, fixed_repr.charAt(0), "0") && cljs.core._EQ_.call(null, fixed_repr.charAt(1), ".") && cljs.core.count.call(null, fixed_repr) > w - (cljs.core.truth_(add_sign) ? 1 : 0);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }()) ? cljs.core.subs.call(null, fixed_repr, 1) : fixed_repr;
  var prepend_zero = cljs.core._EQ_.call(null, cljs.core.first.call(null, fixed_repr__$1), ".");
  if (cljs.core.truth_(w)) {
    var len_35509 = cljs.core.count.call(null, fixed_repr__$1);
    var signed_len_35510 = cljs.core.truth_(add_sign) ? len_35509 + 1 : len_35509;
    var prepend_zero_35511__$1 = prepend_zero && !(signed_len_35510 >= w);
    var append_zero_35512__$1 = append_zero && !(signed_len_35510 >= w);
    var full_len_35513 = prepend_zero_35511__$1 || append_zero_35512__$1 ? signed_len_35510 + 1 : signed_len_35510;
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = full_len_35513 > w;
      if (and__29588__auto__) {
        return (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params);
      } else {
        return and__29588__auto__;
      }
    }())) {
      cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w, (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params))));
    } else {
      cljs.pprint.print.call(null, [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w - full_len_35513, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)))), cljs.core.str(cljs.core.truth_(add_sign) ? sign : null), cljs.core.str(prepend_zero_35511__$1 ? "0" : null), cljs.core.str(fixed_repr__$1), cljs.core.str(append_zero_35512__$1 ? "0" : null)].join(""));
    }
  } else {
    cljs.pprint.print.call(null, [cljs.core.str(cljs.core.truth_(add_sign) ? sign : null), cljs.core.str(prepend_zero ? "0" : null), cljs.core.str(fixed_repr__$1), cljs.core.str(append_zero ? "0" : null)].join(""));
  }
  return navigator__$1;
};
cljs.pprint.exponential_float = function cljs$pprint$exponential_float(params, navigator, offset) {
  var vec__35520 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__35520, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35520, 1, null);
  var arg__$1 = cljs.pprint.convert_ratio.call(null, arg);
  var G__35522_35526 = cljs.pprint.float_parts.call(null, arg__$1 < 0 ? -arg__$1 : arg__$1);
  var vec__35523_35527 = G__35522_35526;
  var mantissa_35528 = cljs.core.nth.call(null, vec__35523_35527, 0, null);
  var exp_35529 = cljs.core.nth.call(null, vec__35523_35527, 1, null);
  var G__35522_35530__$1 = G__35522_35526;
  while (true) {
    var vec__35524_35531 = G__35522_35530__$1;
    var mantissa_35532__$1 = cljs.core.nth.call(null, vec__35524_35531, 0, null);
    var exp_35533__$1 = cljs.core.nth.call(null, vec__35524_35531, 1, null);
    var w_35534 = (new cljs.core.Keyword(null, "w", "w", 354169001)).cljs$core$IFn$_invoke$arity$1(params);
    var d_35535 = (new cljs.core.Keyword(null, "d", "d", 1972142424)).cljs$core$IFn$_invoke$arity$1(params);
    var e_35536 = (new cljs.core.Keyword(null, "e", "e", 1381269198)).cljs$core$IFn$_invoke$arity$1(params);
    var k_35537 = (new cljs.core.Keyword(null, "k", "k", -2146297393)).cljs$core$IFn$_invoke$arity$1(params);
    var expchar_35538 = function() {
      var or__29600__auto__ = (new cljs.core.Keyword(null, "exponentchar", "exponentchar", 1986664222)).cljs$core$IFn$_invoke$arity$1(params);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return "E";
      }
    }();
    var add_sign_35539 = function() {
      var or__29600__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return arg__$1 < 0;
      }
    }();
    var prepend_zero_35540 = k_35537 <= 0;
    var scaled_exp_35541 = exp_35533__$1 - (k_35537 - 1);
    var scaled_exp_str_35542 = [cljs.core.str(Math.abs(scaled_exp_35541))].join("");
    var scaled_exp_str_35543__$1 = [cljs.core.str(expchar_35538), cljs.core.str(scaled_exp_35541 < 0 ? "-" : "+"), cljs.core.str(cljs.core.truth_(e_35536) ? cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, e_35536 - cljs.core.count.call(null, scaled_exp_str_35542), "0")) : null), cljs.core.str(scaled_exp_str_35542)].join("");
    var exp_width_35544 = cljs.core.count.call(null, scaled_exp_str_35543__$1);
    var base_mantissa_width_35545 = cljs.core.count.call(null, mantissa_35532__$1);
    var scaled_mantissa_35546 = [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, -k_35537, "0"))), cljs.core.str(mantissa_35532__$1), cljs.core.str(cljs.core.truth_(d_35535) ? cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, d_35535 - (base_mantissa_width_35545 - 1) - (k_35537 < 0 ? -k_35537 : 0), "0")) : null)].join("");
    var w_mantissa_35547 = cljs.core.truth_(w_35534) ? w_35534 - exp_width_35544 : null;
    var vec__35525_35548 = cljs.pprint.round_str.call(null, scaled_mantissa_35546, 0, cljs.core._EQ_.call(null, k_35537, 0) ? d_35535 - 1 : k_35537 > 0 ? d_35535 : k_35537 < 0 ? d_35535 - 1 : null, cljs.core.truth_(w_mantissa_35547) ? w_mantissa_35547 - (cljs.core.truth_(add_sign_35539) ? 1 : 0) : null);
    var rounded_mantissa_35549 = cljs.core.nth.call(null, vec__35525_35548, 0, null);
    var __35550 = cljs.core.nth.call(null, vec__35525_35548, 1, null);
    var incr_exp_35551 = cljs.core.nth.call(null, vec__35525_35548, 2, null);
    var full_mantissa_35552 = cljs.pprint.insert_scaled_decimal.call(null, rounded_mantissa_35549, k_35537);
    var append_zero_35553 = cljs.core._EQ_.call(null, k_35537, cljs.core.count.call(null, rounded_mantissa_35549)) && d_35535 == null;
    if (cljs.core.not.call(null, incr_exp_35551)) {
      if (cljs.core.truth_(w_35534)) {
        var len_35554 = cljs.core.count.call(null, full_mantissa_35552) + exp_width_35544;
        var signed_len_35555 = cljs.core.truth_(add_sign_35539) ? len_35554 + 1 : len_35554;
        var prepend_zero_35556__$1 = prepend_zero_35540 && !cljs.core._EQ_.call(null, signed_len_35555, w_35534);
        var full_len_35557 = prepend_zero_35556__$1 ? signed_len_35555 + 1 : signed_len_35555;
        var append_zero_35558__$1 = append_zero_35553 && full_len_35557 < w_35534;
        if (cljs.core.truth_(function() {
          var and__29588__auto__ = function() {
            var or__29600__auto__ = full_len_35557 > w_35534;
            if (or__29600__auto__) {
              return or__29600__auto__;
            } else {
              var and__29588__auto__ = e_35536;
              if (cljs.core.truth_(and__29588__auto__)) {
                return exp_width_35544 - 2 > e_35536;
              } else {
                return and__29588__auto__;
              }
            }
          }();
          if (cljs.core.truth_(and__29588__auto__)) {
            return (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params);
          } else {
            return and__29588__auto__;
          }
        }())) {
          cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w_35534, (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params))));
        } else {
          cljs.pprint.print.call(null, [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w_35534 - full_len_35557 - (append_zero_35558__$1 ? 1 : 0), (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)))), cljs.core.str(cljs.core.truth_(add_sign_35539) ? arg__$1 < 0 ? "-" : "+" : null), cljs.core.str(prepend_zero_35556__$1 ? "0" : null), cljs.core.str(full_mantissa_35552), cljs.core.str(append_zero_35558__$1 ? "0" : 
          null), cljs.core.str(scaled_exp_str_35543__$1)].join(""));
        }
      } else {
        cljs.pprint.print.call(null, [cljs.core.str(cljs.core.truth_(add_sign_35539) ? arg__$1 < 0 ? "-" : "+" : null), cljs.core.str(prepend_zero_35540 ? "0" : null), cljs.core.str(full_mantissa_35552), cljs.core.str(append_zero_35553 ? "0" : null), cljs.core.str(scaled_exp_str_35543__$1)].join(""));
      }
    } else {
      var G__35559 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [rounded_mantissa_35549, exp_35533__$1 + 1], null);
      G__35522_35530__$1 = G__35559;
      continue;
    }
    break;
  }
  return navigator__$1;
};
cljs.pprint.general_float = function cljs$pprint$general_float(params, navigator, offsets) {
  var vec__35562 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__35562, 0, null);
  var _ = cljs.core.nth.call(null, vec__35562, 1, null);
  var arg__$1 = cljs.pprint.convert_ratio.call(null, arg);
  var vec__35563 = cljs.pprint.float_parts.call(null, arg__$1 < 0 ? -arg__$1 : arg__$1);
  var mantissa = cljs.core.nth.call(null, vec__35563, 0, null);
  var exp = cljs.core.nth.call(null, vec__35563, 1, null);
  var w = (new cljs.core.Keyword(null, "w", "w", 354169001)).cljs$core$IFn$_invoke$arity$1(params);
  var d = (new cljs.core.Keyword(null, "d", "d", 1972142424)).cljs$core$IFn$_invoke$arity$1(params);
  var e = (new cljs.core.Keyword(null, "e", "e", 1381269198)).cljs$core$IFn$_invoke$arity$1(params);
  var n = cljs.core._EQ_.call(null, arg__$1, 0) ? 0 : exp + 1;
  var ee = cljs.core.truth_(e) ? e + 2 : 4;
  var ww = cljs.core.truth_(w) ? w - ee : null;
  var d__$1 = cljs.core.truth_(d) ? d : function() {
    var x__29931__auto__ = cljs.core.count.call(null, mantissa);
    var y__29932__auto__ = function() {
      var x__29938__auto__ = n;
      var y__29939__auto__ = 7;
      return x__29938__auto__ < y__29939__auto__ ? x__29938__auto__ : y__29939__auto__;
    }();
    return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
  }();
  var dd = d__$1 - n;
  if (0 <= dd && dd <= d__$1) {
    var navigator__$1 = cljs.pprint.fixed_float.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "w", "w", 354169001), ww, new cljs.core.Keyword(null, "d", "d", 1972142424), dd, new cljs.core.Keyword(null, "k", "k", -2146297393), 0, new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106), (new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106)).cljs$core$IFn$_invoke$arity$1(params), new cljs.core.Keyword(null, "padchar", "padchar", 
    2018584530), (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params), new cljs.core.Keyword(null, "at", "at", 1476951349), (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)], null), navigator, offsets);
    cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, ee, " ")));
    return navigator__$1;
  } else {
    return cljs.pprint.exponential_float.call(null, params, navigator, offsets);
  }
};
cljs.pprint.dollar_float = function cljs$pprint$dollar_float(params, navigator, offsets) {
  var vec__35567 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__35567, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35567, 1, null);
  var vec__35568 = cljs.pprint.float_parts.call(null, Math.abs(arg));
  var mantissa = cljs.core.nth.call(null, vec__35568, 0, null);
  var exp = cljs.core.nth.call(null, vec__35568, 1, null);
  var d = (new cljs.core.Keyword(null, "d", "d", 1972142424)).cljs$core$IFn$_invoke$arity$1(params);
  var n = (new cljs.core.Keyword(null, "n", "n", 562130025)).cljs$core$IFn$_invoke$arity$1(params);
  var w = (new cljs.core.Keyword(null, "w", "w", 354169001)).cljs$core$IFn$_invoke$arity$1(params);
  var add_sign = function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return arg < 0;
    }
  }();
  var vec__35569 = cljs.pprint.round_str.call(null, mantissa, exp, d, null);
  var rounded_mantissa = cljs.core.nth.call(null, vec__35569, 0, null);
  var scaled_exp = cljs.core.nth.call(null, vec__35569, 1, null);
  var expanded = cljs.core.nth.call(null, vec__35569, 2, null);
  var fixed_repr = cljs.pprint.get_fixed.call(null, rounded_mantissa, cljs.core.truth_(expanded) ? scaled_exp + 1 : scaled_exp, d);
  var full_repr = [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, n - fixed_repr.indexOf("."), "0"))), cljs.core.str(fixed_repr)].join("");
  var full_len = cljs.core.count.call(null, full_repr) + (cljs.core.truth_(add_sign) ? 1 : 0);
  cljs.pprint.print.call(null, [cljs.core.str(cljs.core.truth_(function() {
    var and__29588__auto__ = (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(and__29588__auto__)) {
      return add_sign;
    } else {
      return and__29588__auto__;
    }
  }()) ? arg < 0 ? "-" : "+" : null), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, w - full_len, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)))), cljs.core.str(cljs.core.truth_(function() {
    var and__29588__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params));
    if (and__29588__auto__) {
      return add_sign;
    } else {
      return and__29588__auto__;
    }
  }()) ? arg < 0 ? "-" : "+" : null), cljs.core.str(full_repr)].join(""));
  return navigator__$1;
};
cljs.pprint.choice_conditional = function cljs$pprint$choice_conditional(params, arg_navigator, offsets) {
  var arg = (new cljs.core.Keyword(null, "selector", "selector", 762528866)).cljs$core$IFn$_invoke$arity$1(params);
  var vec__35571 = cljs.core.truth_(arg) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg, arg_navigator], null) : cljs.pprint.next_arg.call(null, arg_navigator);
  var arg__$1 = cljs.core.nth.call(null, vec__35571, 0, null);
  var navigator = cljs.core.nth.call(null, vec__35571, 1, null);
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var clause = arg__$1 < 0 || arg__$1 >= cljs.core.count.call(null, clauses) ? cljs.core.first.call(null, (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(params)) : cljs.core.nth.call(null, clauses, arg__$1);
  if (cljs.core.truth_(clause)) {
    return cljs.pprint.execute_sub_format.call(null, clause, navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
  } else {
    return navigator;
  }
};
cljs.pprint.boolean_conditional = function cljs$pprint$boolean_conditional(params, arg_navigator, offsets) {
  var vec__35573 = cljs.pprint.next_arg.call(null, arg_navigator);
  var arg = cljs.core.nth.call(null, vec__35573, 0, null);
  var navigator = cljs.core.nth.call(null, vec__35573, 1, null);
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var clause = cljs.core.truth_(arg) ? cljs.core.second.call(null, clauses) : cljs.core.first.call(null, clauses);
  if (cljs.core.truth_(clause)) {
    return cljs.pprint.execute_sub_format.call(null, clause, navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
  } else {
    return navigator;
  }
};
cljs.pprint.check_arg_conditional = function cljs$pprint$check_arg_conditional(params, arg_navigator, offsets) {
  var vec__35575 = cljs.pprint.next_arg.call(null, arg_navigator);
  var arg = cljs.core.nth.call(null, vec__35575, 0, null);
  var navigator = cljs.core.nth.call(null, vec__35575, 1, null);
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var clause = cljs.core.truth_(arg) ? cljs.core.first.call(null, clauses) : null;
  if (cljs.core.truth_(arg)) {
    if (cljs.core.truth_(clause)) {
      return cljs.pprint.execute_sub_format.call(null, clause, arg_navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
    } else {
      return arg_navigator;
    }
  } else {
    return navigator;
  }
};
cljs.pprint.iterate_sublist = function cljs$pprint$iterate_sublist(params, navigator, offsets) {
  var max_count = (new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563)).cljs$core$IFn$_invoke$arity$1(params);
  var param_clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var vec__35578 = cljs.core.empty_QMARK_.call(null, param_clause) ? cljs.pprint.get_format_arg.call(null, navigator) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param_clause, navigator], null);
  var clause = cljs.core.nth.call(null, vec__35578, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35578, 1, null);
  var vec__35579 = cljs.pprint.next_arg.call(null, navigator__$1);
  var arg_list = cljs.core.nth.call(null, vec__35579, 0, null);
  var navigator__$2 = cljs.core.nth.call(null, vec__35579, 1, null);
  var args = cljs.pprint.init_navigator.call(null, arg_list);
  var count = 0;
  var args__$1 = args;
  var last_pos = -1 | 0;
  while (true) {
    if (cljs.core.not.call(null, max_count) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(args__$1), last_pos) && count > 1) {
      throw Error("%{ construct not consuming any arguments: Infinite loop!");
    } else {
    }
    if (cljs.core.truth_(function() {
      var or__29600__auto__ = cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(args__$1)) && (cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params))) || count > 0);
      if (or__29600__auto__) {
        return or__29600__auto__;
      } else {
        var and__29588__auto__ = max_count;
        if (cljs.core.truth_(and__29588__auto__)) {
          return count >= max_count;
        } else {
          return and__29588__auto__;
        }
      }
    }())) {
      return navigator__$2;
    } else {
      var iter_result = cljs.pprint.execute_sub_format.call(null, clause, args__$1, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), cljs.core.first.call(null, iter_result))) {
        return navigator__$2;
      } else {
        var G__35580 = count + 1;
        var G__35581 = iter_result;
        var G__35582 = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(args__$1);
        count = G__35580;
        args__$1 = G__35581;
        last_pos = G__35582;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.iterate_list_of_sublists = function cljs$pprint$iterate_list_of_sublists(params, navigator, offsets) {
  var max_count = (new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563)).cljs$core$IFn$_invoke$arity$1(params);
  var param_clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var vec__35585 = cljs.core.empty_QMARK_.call(null, param_clause) ? cljs.pprint.get_format_arg.call(null, navigator) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param_clause, navigator], null);
  var clause = cljs.core.nth.call(null, vec__35585, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35585, 1, null);
  var vec__35586 = cljs.pprint.next_arg.call(null, navigator__$1);
  var arg_list = cljs.core.nth.call(null, vec__35586, 0, null);
  var navigator__$2 = cljs.core.nth.call(null, vec__35586, 1, null);
  var count = 0;
  var arg_list__$1 = arg_list;
  while (true) {
    if (cljs.core.truth_(function() {
      var or__29600__auto__ = cljs.core.empty_QMARK_.call(null, arg_list__$1) && (cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params))) || count > 0);
      if (or__29600__auto__) {
        return or__29600__auto__;
      } else {
        var and__29588__auto__ = max_count;
        if (cljs.core.truth_(and__29588__auto__)) {
          return count >= max_count;
        } else {
          return and__29588__auto__;
        }
      }
    }())) {
      return navigator__$2;
    } else {
      var iter_result = cljs.pprint.execute_sub_format.call(null, clause, cljs.pprint.init_navigator.call(null, cljs.core.first.call(null, arg_list__$1)), cljs.pprint.init_navigator.call(null, cljs.core.next.call(null, arg_list__$1)));
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "colon-up-arrow", "colon-up-arrow", 244853007), cljs.core.first.call(null, iter_result))) {
        return navigator__$2;
      } else {
        var G__35587 = count + 1;
        var G__35588 = cljs.core.next.call(null, arg_list__$1);
        count = G__35587;
        arg_list__$1 = G__35588;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.iterate_main_list = function cljs$pprint$iterate_main_list(params, navigator, offsets) {
  var max_count = (new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563)).cljs$core$IFn$_invoke$arity$1(params);
  var param_clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var vec__35590 = cljs.core.empty_QMARK_.call(null, param_clause) ? cljs.pprint.get_format_arg.call(null, navigator) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param_clause, navigator], null);
  var clause = cljs.core.nth.call(null, vec__35590, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35590, 1, null);
  var count = 0;
  var navigator__$2 = navigator__$1;
  var last_pos = -1 | 0;
  while (true) {
    if (cljs.core.not.call(null, max_count) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator__$2), last_pos) && count > 1) {
      throw Error("%@{ construct not consuming any arguments: Infinite loop!");
    } else {
    }
    if (cljs.core.truth_(function() {
      var or__29600__auto__ = cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator__$2)) && (cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params))) || count > 0);
      if (or__29600__auto__) {
        return or__29600__auto__;
      } else {
        var and__29588__auto__ = max_count;
        if (cljs.core.truth_(and__29588__auto__)) {
          return count >= max_count;
        } else {
          return and__29588__auto__;
        }
      }
    }())) {
      return navigator__$2;
    } else {
      var iter_result = cljs.pprint.execute_sub_format.call(null, clause, navigator__$2, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), cljs.core.first.call(null, iter_result))) {
        return cljs.core.second.call(null, iter_result);
      } else {
        var G__35591 = count + 1;
        var G__35592 = iter_result;
        var G__35593 = (new cljs.core.Keyword(null, "pos", "pos", -864607220)).cljs$core$IFn$_invoke$arity$1(navigator__$2);
        count = G__35591;
        navigator__$2 = G__35592;
        last_pos = G__35593;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.iterate_main_sublists = function cljs$pprint$iterate_main_sublists(params, navigator, offsets) {
  var max_count = (new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563)).cljs$core$IFn$_invoke$arity$1(params);
  var param_clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var vec__35596 = cljs.core.empty_QMARK_.call(null, param_clause) ? cljs.pprint.get_format_arg.call(null, navigator) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [param_clause, navigator], null);
  var clause = cljs.core.nth.call(null, vec__35596, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35596, 1, null);
  var count = 0;
  var navigator__$2 = navigator__$1;
  while (true) {
    if (cljs.core.truth_(function() {
      var or__29600__auto__ = cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator__$2)) && (cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params))) || count > 0);
      if (or__29600__auto__) {
        return or__29600__auto__;
      } else {
        var and__29588__auto__ = max_count;
        if (cljs.core.truth_(and__29588__auto__)) {
          return count >= max_count;
        } else {
          return and__29588__auto__;
        }
      }
    }())) {
      return navigator__$2;
    } else {
      var vec__35597 = cljs.pprint.next_arg_or_nil.call(null, navigator__$2);
      var sublist = cljs.core.nth.call(null, vec__35597, 0, null);
      var navigator__$3 = cljs.core.nth.call(null, vec__35597, 1, null);
      var iter_result = cljs.pprint.execute_sub_format.call(null, clause, cljs.pprint.init_navigator.call(null, sublist), navigator__$3);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "colon-up-arrow", "colon-up-arrow", 244853007), cljs.core.first.call(null, iter_result))) {
        return navigator__$3;
      } else {
        var G__35598 = count + 1;
        var G__35599 = navigator__$3;
        count = G__35598;
        navigator__$2 = G__35599;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.logical_block_or_justify = function cljs$pprint$logical_block_or_justify(params, navigator, offsets) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "right-params", "right-params", -1790676237)).cljs$core$IFn$_invoke$arity$1(params)))) {
    return cljs.pprint.format_logical_block.call(null, params, navigator, offsets);
  } else {
    return cljs.pprint.justify_clauses.call(null, params, navigator, offsets);
  }
};
cljs.pprint.render_clauses = function cljs$pprint$render_clauses(clauses, navigator, base_navigator) {
  var clauses__$1 = clauses;
  var acc = cljs.core.PersistentVector.EMPTY;
  var navigator__$1 = navigator;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, clauses__$1)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, navigator__$1], null);
    } else {
      var clause = cljs.core.first.call(null, clauses__$1);
      var vec__35602 = function() {
        var sb = new goog.string.StringBuffer;
        var _STAR_out_STAR_35603 = cljs.core._STAR_out_STAR_;
        cljs.core._STAR_out_STAR_ = new cljs.core.StringBufferWriter(sb);
        try {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.pprint.execute_sub_format.call(null, clause, navigator__$1, base_navigator), [cljs.core.str(sb)].join("")], null);
        } finally {
          cljs.core._STAR_out_STAR_ = _STAR_out_STAR_35603;
        }
      }();
      var iter_result = cljs.core.nth.call(null, vec__35602, 0, null);
      var result_str = cljs.core.nth.call(null, vec__35602, 1, null);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), cljs.core.first.call(null, iter_result))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [acc, cljs.core.second.call(null, iter_result)], null);
      } else {
        var G__35604 = cljs.core.next.call(null, clauses__$1);
        var G__35605 = cljs.core.conj.call(null, acc, result_str);
        var G__35606 = iter_result;
        clauses__$1 = G__35604;
        acc = G__35605;
        navigator__$1 = G__35606;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.justify_clauses = function cljs$pprint$justify_clauses(params, navigator, offsets) {
  var vec__35611 = function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var else$ = temp__4657__auto__;
      return cljs.pprint.render_clauses.call(null, else$, navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
    } else {
      return null;
    }
  }();
  var vec__35612 = cljs.core.nth.call(null, vec__35611, 0, null);
  var eol_str = cljs.core.nth.call(null, vec__35612, 0, null);
  var new_navigator = cljs.core.nth.call(null, vec__35611, 1, null);
  var navigator__$1 = function() {
    var or__29600__auto__ = new_navigator;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return navigator;
    }
  }();
  var vec__35613 = function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "else-params", "else-params", -832171646)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var p = temp__4657__auto__;
      return cljs.pprint.realize_parameter_list.call(null, p, navigator__$1);
    } else {
      return null;
    }
  }();
  var else_params = cljs.core.nth.call(null, vec__35613, 0, null);
  var new_navigator__$1 = cljs.core.nth.call(null, vec__35613, 1, null);
  var navigator__$2 = function() {
    var or__29600__auto__ = new_navigator__$1;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return navigator__$1;
    }
  }();
  var min_remaining = function() {
    var or__29600__auto__ = cljs.core.first.call(null, (new cljs.core.Keyword(null, "min-remaining", "min-remaining", 962687677)).cljs$core$IFn$_invoke$arity$1(else_params));
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return 0;
    }
  }();
  var max_columns = function() {
    var or__29600__auto__ = cljs.core.first.call(null, (new cljs.core.Keyword(null, "max-columns", "max-columns", 1742323262)).cljs$core$IFn$_invoke$arity$1(else_params));
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cljs.pprint.get_max_column.call(null, cljs.core._STAR_out_STAR_);
    }
  }();
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var vec__35614 = cljs.pprint.render_clauses.call(null, clauses, navigator__$2, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
  var strs = cljs.core.nth.call(null, vec__35614, 0, null);
  var navigator__$3 = cljs.core.nth.call(null, vec__35614, 1, null);
  var slots = function() {
    var x__29931__auto__ = 1;
    var y__29932__auto__ = cljs.core.count.call(null, strs) - 1 + (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? 1 : 0) + (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? 1 : 0);
    return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
  }();
  var chars = cljs.core.reduce.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.count, strs));
  var mincol = (new cljs.core.Keyword(null, "mincol", "mincol", 1230695445)).cljs$core$IFn$_invoke$arity$1(params);
  var minpad = (new cljs.core.Keyword(null, "minpad", "minpad", 323570901)).cljs$core$IFn$_invoke$arity$1(params);
  var colinc = (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params);
  var minout = chars + slots * minpad;
  var result_columns = minout <= mincol ? mincol : mincol + colinc * (1 + cljs.core.quot.call(null, minout - mincol - 1, colinc));
  var total_pad = result_columns - chars;
  var pad = function() {
    var x__29931__auto__ = minpad;
    var y__29932__auto__ = cljs.core.quot.call(null, total_pad, slots);
    return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
  }();
  var extra_pad = total_pad - pad * slots;
  var pad_str = cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, pad, (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params)));
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = eol_str;
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, cljs.core._STAR_out_STAR_)))) + min_remaining + result_columns > max_columns;
    } else {
      return and__29588__auto__;
    }
  }())) {
    cljs.pprint.print.call(null, eol_str);
  } else {
  }
  var slots_35615__$1 = slots;
  var extra_pad_35616__$1 = extra_pad;
  var strs_35617__$1 = strs;
  var pad_only_35618 = function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, strs_35617__$1), 1) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params));
    }
  }();
  while (true) {
    if (cljs.core.seq.call(null, strs_35617__$1)) {
      cljs.pprint.print.call(null, [cljs.core.str(cljs.core.not.call(null, pad_only_35618) ? cljs.core.first.call(null, strs_35617__$1) : null), cljs.core.str(cljs.core.truth_(function() {
        var or__29600__auto__ = pad_only_35618;
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          var or__29600__auto____$1 = cljs.core.next.call(null, strs_35617__$1);
          if (or__29600__auto____$1) {
            return or__29600__auto____$1;
          } else {
            return (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
          }
        }
      }()) ? pad_str : null), cljs.core.str(extra_pad_35616__$1 > 0 ? (new cljs.core.Keyword(null, "padchar", "padchar", 2018584530)).cljs$core$IFn$_invoke$arity$1(params) : null)].join(""));
      var G__35619 = slots_35615__$1 - 1;
      var G__35620 = extra_pad_35616__$1 - 1;
      var G__35621 = cljs.core.truth_(pad_only_35618) ? strs_35617__$1 : cljs.core.next.call(null, strs_35617__$1);
      var G__35622 = false;
      slots_35615__$1 = G__35619;
      extra_pad_35616__$1 = G__35620;
      strs_35617__$1 = G__35621;
      pad_only_35618 = G__35622;
      continue;
    } else {
    }
    break;
  }
  return navigator__$3;
};
cljs.pprint.downcase_writer = function cljs$pprint$downcase_writer(writer) {
  if (typeof cljs.pprint.t_cljs$pprint35629 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint35629 = function(downcase_writer, writer, meta35630) {
      this.downcase_writer = downcase_writer;
      this.writer = writer;
      this.meta35630 = meta35630;
      this.cljs$lang$protocol_mask$partition0$ = 1074135040;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint35629.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_35631, meta35630__$1) {
      var self__ = this;
      var _35631__$1 = this;
      return new cljs.pprint.t_cljs$pprint35629(self__.downcase_writer, self__.writer, meta35630__$1);
    };
    cljs.pprint.t_cljs$pprint35629.prototype.cljs$core$IMeta$_meta$arity$1 = function(_35631) {
      var self__ = this;
      var _35631__$1 = this;
      return self__.meta35630;
    };
    cljs.pprint.t_cljs$pprint35629.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core._flush.call(null, self__.writer);
    };
    cljs.pprint.t_cljs$pprint35629.prototype.cljs$core$IWriter$_write$arity$2 = function(this$, x) {
      var self__ = this;
      var this$__$1 = this;
      var pred__35632 = cljs.core._EQ_;
      var expr__35633 = cljs.core.type.call(null, x);
      if (cljs.core.truth_(pred__35632.call(null, String, expr__35633))) {
        var s = x;
        return cljs.core._write.call(null, self__.writer, clojure.string.lower_case.call(null, s));
      } else {
        if (cljs.core.truth_(pred__35632.call(null, Number, expr__35633))) {
          var c = x;
          return cljs.core._write.call(null, self__.writer, clojure.string.lower_case.call(null, cljs.core.char$.call(null, c)));
        } else {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35633)].join(""));
        }
      }
    };
    cljs.pprint.t_cljs$pprint35629.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "downcase-writer", "downcase-writer", 37286911, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Returns a proxy that wraps writer, converting all characters to lower case"], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "meta35630", "meta35630", 1513696857, null)], null);
    };
    cljs.pprint.t_cljs$pprint35629.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint35629.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint35629";
    cljs.pprint.t_cljs$pprint35629.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
      return cljs.core._write.call(null, writer__30207__auto__, "cljs.pprint/t_cljs$pprint35629");
    };
    cljs.pprint.__GT_t_cljs$pprint35629 = function cljs$pprint$downcase_writer_$___GT_t_cljs$pprint35629(downcase_writer__$1, writer__$1, meta35630) {
      return new cljs.pprint.t_cljs$pprint35629(downcase_writer__$1, writer__$1, meta35630);
    };
  }
  return new cljs.pprint.t_cljs$pprint35629(cljs$pprint$downcase_writer, writer, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.upcase_writer = function cljs$pprint$upcase_writer(writer) {
  if (typeof cljs.pprint.t_cljs$pprint35641 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint35641 = function(upcase_writer, writer, meta35642) {
      this.upcase_writer = upcase_writer;
      this.writer = writer;
      this.meta35642 = meta35642;
      this.cljs$lang$protocol_mask$partition0$ = 1074135040;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint35641.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_35643, meta35642__$1) {
      var self__ = this;
      var _35643__$1 = this;
      return new cljs.pprint.t_cljs$pprint35641(self__.upcase_writer, self__.writer, meta35642__$1);
    };
    cljs.pprint.t_cljs$pprint35641.prototype.cljs$core$IMeta$_meta$arity$1 = function(_35643) {
      var self__ = this;
      var _35643__$1 = this;
      return self__.meta35642;
    };
    cljs.pprint.t_cljs$pprint35641.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core._flush.call(null, self__.writer);
    };
    cljs.pprint.t_cljs$pprint35641.prototype.cljs$core$IWriter$_write$arity$2 = function(this$, x) {
      var self__ = this;
      var this$__$1 = this;
      var pred__35644 = cljs.core._EQ_;
      var expr__35645 = cljs.core.type.call(null, x);
      if (cljs.core.truth_(pred__35644.call(null, String, expr__35645))) {
        var s = x;
        return cljs.core._write.call(null, self__.writer, clojure.string.upper_case.call(null, s));
      } else {
        if (cljs.core.truth_(pred__35644.call(null, Number, expr__35645))) {
          var c = x;
          return cljs.core._write.call(null, self__.writer, clojure.string.upper_case.call(null, cljs.core.char$.call(null, c)));
        } else {
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35645)].join(""));
        }
      }
    };
    cljs.pprint.t_cljs$pprint35641.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "upcase-writer", "upcase-writer", 51077317, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Returns a proxy that wraps writer, converting all characters to upper case"], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "meta35642", "meta35642", -194752827, null)], null);
    };
    cljs.pprint.t_cljs$pprint35641.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint35641.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint35641";
    cljs.pprint.t_cljs$pprint35641.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
      return cljs.core._write.call(null, writer__30207__auto__, "cljs.pprint/t_cljs$pprint35641");
    };
    cljs.pprint.__GT_t_cljs$pprint35641 = function cljs$pprint$upcase_writer_$___GT_t_cljs$pprint35641(upcase_writer__$1, writer__$1, meta35642) {
      return new cljs.pprint.t_cljs$pprint35641(upcase_writer__$1, writer__$1, meta35642);
    };
  }
  return new cljs.pprint.t_cljs$pprint35641(cljs$pprint$upcase_writer, writer, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.capitalize_string = function cljs$pprint$capitalize_string(s, first_QMARK_) {
  var f = cljs.core.first.call(null, s);
  var s__$1 = cljs.core.truth_(function() {
    var and__29588__auto__ = first_QMARK_;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = f;
      if (cljs.core.truth_(and__29588__auto____$1)) {
        return goog.string.isUnicodeChar(f);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }()) ? [cljs.core.str(clojure.string.upper_case.call(null, f)), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("") : s;
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.first.call(null, cljs.pprint.consume.call(null, function(f, s__$1) {
    return function(s__$2) {
      if (cljs.core.empty_QMARK_.call(null, s__$2)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null], null);
      } else {
        var m = RegExp("\\W\\w", "g").exec(s__$2);
        var offset = function() {
          var and__29588__auto__ = m;
          if (cljs.core.truth_(and__29588__auto__)) {
            return m.index + 1;
          } else {
            return and__29588__auto__;
          }
        }();
        if (cljs.core.truth_(offset)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.subs.call(null, s__$2, 0, offset)), cljs.core.str(clojure.string.upper_case.call(null, cljs.core.nth.call(null, s__$2, offset)))].join(""), cljs.core.subs.call(null, s__$2, offset + 1)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s__$2, null], null);
        }
      }
    };
  }(f, s__$1), s__$1)));
};
cljs.pprint.capitalize_word_writer = function cljs$pprint$capitalize_word_writer(writer) {
  var last_was_whitespace_QMARK_ = cljs.core.atom.call(null, true);
  if (typeof cljs.pprint.t_cljs$pprint35653 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint35653 = function(capitalize_word_writer, writer, last_was_whitespace_QMARK_, meta35654) {
      this.capitalize_word_writer = capitalize_word_writer;
      this.writer = writer;
      this.last_was_whitespace_QMARK_ = last_was_whitespace_QMARK_;
      this.meta35654 = meta35654;
      this.cljs$lang$protocol_mask$partition0$ = 1074135040;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint35653.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(last_was_whitespace_QMARK_) {
      return function(_35655, meta35654__$1) {
        var self__ = this;
        var _35655__$1 = this;
        return new cljs.pprint.t_cljs$pprint35653(self__.capitalize_word_writer, self__.writer, self__.last_was_whitespace_QMARK_, meta35654__$1);
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint35653.prototype.cljs$core$IMeta$_meta$arity$1 = function(last_was_whitespace_QMARK_) {
      return function(_35655) {
        var self__ = this;
        var _35655__$1 = this;
        return self__.meta35654;
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint35653.prototype.cljs$core$IWriter$_flush$arity$1 = function(last_was_whitespace_QMARK_) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core._flush.call(null, self__.writer);
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint35653.prototype.cljs$core$IWriter$_write$arity$2 = function(last_was_whitespace_QMARK_) {
      return function(this$, x) {
        var self__ = this;
        var this$__$1 = this;
        var pred__35656 = cljs.core._EQ_;
        var expr__35657 = cljs.core.type.call(null, x);
        if (cljs.core.truth_(pred__35656.call(null, String, expr__35657))) {
          var s = x;
          cljs.core._write.call(null, self__.writer, cljs.pprint.capitalize_string.call(null, s.toLowerCase(), cljs.core.deref.call(null, self__.last_was_whitespace_QMARK_)));
          if (s.length > 0) {
            return cljs.core.reset_BANG_.call(null, self__.last_was_whitespace_QMARK_, goog.string.isEmptyOrWhitespace(cljs.core.nth.call(null, s, cljs.core.count.call(null, s) - 1)));
          } else {
            return null;
          }
        } else {
          if (cljs.core.truth_(pred__35656.call(null, Number, expr__35657))) {
            var c = cljs.core.char$.call(null, x);
            var mod_c = cljs.core.truth_(cljs.core.deref.call(null, self__.last_was_whitespace_QMARK_)) ? clojure.string.upper_case.call(null, c) : c;
            cljs.core._write.call(null, self__.writer, mod_c);
            return cljs.core.reset_BANG_.call(null, self__.last_was_whitespace_QMARK_, goog.string.isEmptyOrWhitespace(c));
          } else {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35657)].join(""));
          }
        }
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint35653.getBasis = function(last_was_whitespace_QMARK_) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "capitalize-word-writer", "capitalize-word-writer", 196688059, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
        1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Returns a proxy that wraps writer, capitalizing all words"], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "last-was-whitespace?", "last-was-whitespace?", -1073928093, null), new cljs.core.Symbol(null, "meta35654", "meta35654", 176172880, null)], null);
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.t_cljs$pprint35653.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint35653.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint35653";
    cljs.pprint.t_cljs$pprint35653.cljs$lang$ctorPrWriter = function(last_was_whitespace_QMARK_) {
      return function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
        return cljs.core._write.call(null, writer__30207__auto__, "cljs.pprint/t_cljs$pprint35653");
      };
    }(last_was_whitespace_QMARK_);
    cljs.pprint.__GT_t_cljs$pprint35653 = function(last_was_whitespace_QMARK_) {
      return function cljs$pprint$capitalize_word_writer_$___GT_t_cljs$pprint35653(capitalize_word_writer__$1, writer__$1, last_was_whitespace_QMARK___$1, meta35654) {
        return new cljs.pprint.t_cljs$pprint35653(capitalize_word_writer__$1, writer__$1, last_was_whitespace_QMARK___$1, meta35654);
      };
    }(last_was_whitespace_QMARK_);
  }
  return new cljs.pprint.t_cljs$pprint35653(cljs$pprint$capitalize_word_writer, writer, last_was_whitespace_QMARK_, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.init_cap_writer = function cljs$pprint$init_cap_writer(writer) {
  var capped = cljs.core.atom.call(null, false);
  if (typeof cljs.pprint.t_cljs$pprint35665 !== "undefined") {
  } else {
    cljs.pprint.t_cljs$pprint35665 = function(init_cap_writer, writer, capped, meta35666) {
      this.init_cap_writer = init_cap_writer;
      this.writer = writer;
      this.capped = capped;
      this.meta35666 = meta35666;
      this.cljs$lang$protocol_mask$partition0$ = 1074135040;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.pprint.t_cljs$pprint35665.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(capped) {
      return function(_35667, meta35666__$1) {
        var self__ = this;
        var _35667__$1 = this;
        return new cljs.pprint.t_cljs$pprint35665(self__.init_cap_writer, self__.writer, self__.capped, meta35666__$1);
      };
    }(capped);
    cljs.pprint.t_cljs$pprint35665.prototype.cljs$core$IMeta$_meta$arity$1 = function(capped) {
      return function(_35667) {
        var self__ = this;
        var _35667__$1 = this;
        return self__.meta35666;
      };
    }(capped);
    cljs.pprint.t_cljs$pprint35665.prototype.cljs$core$IWriter$_flush$arity$1 = function(capped) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core._flush.call(null, self__.writer);
      };
    }(capped);
    cljs.pprint.t_cljs$pprint35665.prototype.cljs$core$IWriter$_write$arity$2 = function(capped) {
      return function(this$, x) {
        var self__ = this;
        var this$__$1 = this;
        var pred__35668 = cljs.core._EQ_;
        var expr__35669 = cljs.core.type.call(null, x);
        if (cljs.core.truth_(pred__35668.call(null, String, expr__35669))) {
          var s = clojure.string.lower_case.call(null, x);
          if (cljs.core.not.call(null, cljs.core.deref.call(null, self__.capped))) {
            var m = RegExp("\\S", "g").exec(s);
            var offset = function() {
              var and__29588__auto__ = m;
              if (cljs.core.truth_(and__29588__auto__)) {
                return m.index;
              } else {
                return and__29588__auto__;
              }
            }();
            if (cljs.core.truth_(offset)) {
              cljs.core._write.call(null, self__.writer, [cljs.core.str(cljs.core.subs.call(null, s, 0, offset)), cljs.core.str(clojure.string.upper_case.call(null, cljs.core.nth.call(null, s, offset))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, offset + 1)))].join(""));
              return cljs.core.reset_BANG_.call(null, self__.capped, true);
            } else {
              return cljs.core._write.call(null, self__.writer, s);
            }
          } else {
            return cljs.core._write.call(null, self__.writer, clojure.string.lower_case.call(null, s));
          }
        } else {
          if (cljs.core.truth_(pred__35668.call(null, Number, expr__35669))) {
            var c = cljs.core.char$.call(null, x);
            if (cljs.core.truth_(function() {
              var and__29588__auto__ = cljs.core.not.call(null, cljs.core.deref.call(null, self__.capped));
              if (and__29588__auto__) {
                return goog.string.isUnicodeChar(c);
              } else {
                return and__29588__auto__;
              }
            }())) {
              cljs.core.reset_BANG_.call(null, self__.capped, true);
              return cljs.core._write.call(null, self__.writer, clojure.string.upper_case.call(null, c));
            } else {
              return cljs.core._write.call(null, self__.writer, clojure.string.lower_case.call(null, c));
            }
          } else {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__35669)].join(""));
          }
        }
      };
    }(capped);
    cljs.pprint.t_cljs$pprint35665.getBasis = function(capped) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "init-cap-writer", "init-cap-writer", -861558336, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
        1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "writer", "writer", 1362963291, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Returns a proxy that wraps writer, capitalizing the first word"], null)), new cljs.core.Symbol(null, "writer", "writer", 1362963291, null), new cljs.core.Symbol(null, "capped", "capped", -1650988402, null), new cljs.core.Symbol(null, "meta35666", "meta35666", -706073327, null)], null);
      };
    }(capped);
    cljs.pprint.t_cljs$pprint35665.cljs$lang$type = true;
    cljs.pprint.t_cljs$pprint35665.cljs$lang$ctorStr = "cljs.pprint/t_cljs$pprint35665";
    cljs.pprint.t_cljs$pprint35665.cljs$lang$ctorPrWriter = function(capped) {
      return function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
        return cljs.core._write.call(null, writer__30207__auto__, "cljs.pprint/t_cljs$pprint35665");
      };
    }(capped);
    cljs.pprint.__GT_t_cljs$pprint35665 = function(capped) {
      return function cljs$pprint$init_cap_writer_$___GT_t_cljs$pprint35665(init_cap_writer__$1, writer__$1, capped__$1, meta35666) {
        return new cljs.pprint.t_cljs$pprint35665(init_cap_writer__$1, writer__$1, capped__$1, meta35666);
      };
    }(capped);
  }
  return new cljs.pprint.t_cljs$pprint35665(cljs$pprint$init_cap_writer, writer, capped, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.pprint.modify_case = function cljs$pprint$modify_case(make_writer, params, navigator, offsets) {
  var clause = cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params));
  var _STAR_out_STAR_35672 = cljs.core._STAR_out_STAR_;
  cljs.core._STAR_out_STAR_ = make_writer.call(null, cljs.core._STAR_out_STAR_);
  try {
    return cljs.pprint.execute_sub_format.call(null, clause, navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
  } finally {
    cljs.core._STAR_out_STAR_ = _STAR_out_STAR_35672;
  }
};
cljs.pprint.get_pretty_writer = function cljs$pprint$get_pretty_writer(writer) {
  if (cljs.core.truth_(cljs.pprint.pretty_writer_QMARK_.call(null, writer))) {
    return writer;
  } else {
    return cljs.pprint.pretty_writer.call(null, writer, cljs.pprint._STAR_print_right_margin_STAR_, cljs.pprint._STAR_print_miser_width_STAR_);
  }
};
cljs.pprint.fresh_line = function cljs$pprint$fresh_line() {
  if (!(cljs.core._STAR_out_STAR_ == null) ? cljs.core._STAR_out_STAR_.cljs$lang$protocol_mask$partition0$ & 32768 || cljs.core._STAR_out_STAR_.cljs$core$IDeref$ ? true : !cljs.core._STAR_out_STAR_.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, cljs.core._STAR_out_STAR_) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, cljs.core._STAR_out_STAR_)) {
    if (!cljs.core._EQ_.call(null, 0, cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, cljs.core._STAR_out_STAR_)))))) {
      return cljs.pprint.prn.call(null);
    } else {
      return null;
    }
  } else {
    return cljs.pprint.prn.call(null);
  }
};
cljs.pprint.absolute_tabulation = function cljs$pprint$absolute_tabulation(params, navigator, offsets) {
  var colnum_35675 = (new cljs.core.Keyword(null, "colnum", "colnum", 2023796854)).cljs$core$IFn$_invoke$arity$1(params);
  var colinc_35676 = (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params);
  var current_35677 = cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, cljs.core._STAR_out_STAR_))));
  var space_count_35678 = current_35677 < colnum_35675 ? colnum_35675 - current_35677 : cljs.core._EQ_.call(null, colinc_35676, 0) ? 0 : colinc_35676 - cljs.core.rem.call(null, current_35677 - colnum_35675, colinc_35676);
  cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, space_count_35678, " ")));
  return navigator;
};
cljs.pprint.relative_tabulation = function cljs$pprint$relative_tabulation(params, navigator, offsets) {
  var colrel_35679 = (new cljs.core.Keyword(null, "colnum", "colnum", 2023796854)).cljs$core$IFn$_invoke$arity$1(params);
  var colinc_35680 = (new cljs.core.Keyword(null, "colinc", "colinc", -584873385)).cljs$core$IFn$_invoke$arity$1(params);
  var start_col_35681 = colrel_35679 + cljs.pprint.get_column.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.core.deref.call(null, cljs.core._STAR_out_STAR_))));
  var offset_35682 = colinc_35680 > 0 ? cljs.core.rem.call(null, start_col_35681, colinc_35680) : 0;
  var space_count_35683 = colrel_35679 + (cljs.core._EQ_.call(null, 0, offset_35682) ? 0 : colinc_35680 - offset_35682);
  cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, space_count_35683, " ")));
  return navigator;
};
cljs.pprint.format_logical_block = function cljs$pprint$format_logical_block(params, navigator, offsets) {
  var clauses = (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(params);
  var clause_count = cljs.core.count.call(null, clauses);
  var prefix = clause_count > 1 ? (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, cljs.core.first.call(null, clauses)))) : cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? "(" : null;
  var body = cljs.core.nth.call(null, clauses, clause_count > 1 ? 1 : 0);
  var suffix = clause_count > 2 ? (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, cljs.core.nth.call(null, clauses, 2)))) : cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? ")" : null;
  var vec__35687 = cljs.pprint.next_arg.call(null, navigator);
  var arg = cljs.core.nth.call(null, vec__35687, 0, null);
  var navigator__$1 = cljs.core.nth.call(null, vec__35687, 1, null);
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_35688_35690 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_35689_35691 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, prefix, null, suffix);
      cljs.pprint.execute_sub_format.call(null, body, cljs.pprint.init_navigator.call(null, arg), (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params));
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35689_35691;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35688_35690;
    }
  }
  return navigator__$1;
};
cljs.pprint.set_indent = function cljs$pprint$set_indent(params, navigator, offsets) {
  var relative_to = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? new cljs.core.Keyword(null, "current", "current", -1088038603) : new cljs.core.Keyword(null, "block", "block", 664686210);
  cljs.pprint.pprint_indent.call(null, relative_to, (new cljs.core.Keyword(null, "n", "n", 562130025)).cljs$core$IFn$_invoke$arity$1(params));
  return navigator;
};
cljs.pprint.conditional_newline = function cljs$pprint$conditional_newline(params, navigator, offsets) {
  var kind = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? new cljs.core.Keyword(null, "mandatory", "mandatory", 542802336) : new cljs.core.Keyword(null, "fill", "fill", 883462889) : cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? new cljs.core.Keyword(null, 
  "miser", "miser", -556060186) : new cljs.core.Keyword(null, "linear", "linear", 872268697);
  cljs.pprint.pprint_newline.call(null, kind);
  return navigator;
};
cljs.pprint.directive_table = cljs.core.PersistentHashMap.fromArrays(["A", "S", "D", "B", "O", "X", "R", "P", "C", "F", "E", "G", "$", "%", "\x26", "|", "~", "\n", "T", "*", "?", "(", ")", "[", ";", "]", "{", "}", "\x3c", "\x3e", "^", "W", "_", "I"], [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "A", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", 
"mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null), new cljs.core.Keyword(null, "minpad", "minpad", 323570901), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), 
new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", 
-1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__35692_SHARP_, p2__35693_SHARP_, p3__35694_SHARP_) {
    return cljs.pprint.format_ascii.call(null, cljs.core.print_str, p1__35692_SHARP_, p2__35693_SHARP_, p3__35694_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "S", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, Number], null), new cljs.core.Keyword(null, "minpad", "minpad", 323570901), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__35695_SHARP_, p2__35696_SHARP_, p3__35697_SHARP_) {
    return cljs.pprint.format_ascii.call(null, cljs.core.pr_str, p1__35695_SHARP_, p2__35696_SHARP_, p3__35697_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "D", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__35698_SHARP_, p2__35699_SHARP_, p3__35700_SHARP_) {
    return cljs.pprint.format_integer.call(null, 10, p1__35698_SHARP_, p2__35699_SHARP_, p3__35700_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "B", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__35701_SHARP_, p2__35702_SHARP_, p3__35703_SHARP_) {
    return cljs.pprint.format_integer.call(null, 2, p1__35701_SHARP_, p2__35702_SHARP_, p3__35703_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "O", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__35704_SHARP_, p2__35705_SHARP_, p3__35706_SHARP_) {
    return cljs.pprint.format_integer.call(null, 8, p1__35704_SHARP_, p2__35705_SHARP_, p3__35706_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "X", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(p1__35707_SHARP_, p2__35708_SHARP_, p3__35709_SHARP_) {
    return cljs.pprint.format_integer.call(null, 16, p1__35707_SHARP_, p2__35708_SHARP_, p3__35709_SHARP_);
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "R", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "base", "base", 185279322), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null), new cljs.core.Keyword(null, "commachar", "commachar", 652859327), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [",", String], null), new cljs.core.Keyword(null, "commainterval", "commainterval", -1980061083), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[3, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, 
"generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_(cljs.core.first.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(params)))) {
    return function(p1__35710_SHARP_, p2__35711_SHARP_, p3__35712_SHARP_) {
      return cljs.pprint.format_integer.call(null, (new cljs.core.Keyword(null, "base", "base", 185279322)).cljs$core$IFn$_invoke$arity$1(p1__35710_SHARP_), p1__35710_SHARP_, p2__35711_SHARP_, p3__35712_SHARP_);
    };
  } else {
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
      if (cljs.core.truth_(and__29588__auto__)) {
        return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
      } else {
        return and__29588__auto__;
      }
    }())) {
      return function(p1__35713_SHARP_, p2__35714_SHARP_, p3__35715_SHARP_) {
        return cljs.pprint.format_old_roman.call(null, p1__35713_SHARP_, p2__35714_SHARP_, p3__35715_SHARP_);
      };
    } else {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
        return function(p1__35716_SHARP_, p2__35717_SHARP_, p3__35718_SHARP_) {
          return cljs.pprint.format_new_roman.call(null, p1__35716_SHARP_, p2__35717_SHARP_, p3__35718_SHARP_);
        };
      } else {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params))) {
          return function(p1__35719_SHARP_, p2__35720_SHARP_, p3__35721_SHARP_) {
            return cljs.pprint.format_ordinal_english.call(null, p1__35719_SHARP_, p2__35720_SHARP_, p3__35721_SHARP_);
          };
        } else {
          return function(p1__35722_SHARP_, p2__35723_SHARP_, p3__35724_SHARP_) {
            return cljs.pprint.format_cardinal_english.call(null, p1__35722_SHARP_, p2__35723_SHARP_, p3__35724_SHARP_);
          };
        }
      }
    }
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "P", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, 
"both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, navigator, offsets) {
    var navigator__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? cljs.pprint.relative_reposition.call(null, navigator, -1) : navigator;
    var strs = cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["y", "ies"], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", "s"], null);
    var vec__35734 = cljs.pprint.next_arg.call(null, navigator__$1);
    var arg = cljs.core.nth.call(null, vec__35734, 0, null);
    var navigator__$2 = cljs.core.nth.call(null, vec__35734, 1, null);
    cljs.pprint.print.call(null, cljs.core._EQ_.call(null, arg, 1) ? cljs.core.first.call(null, strs) : cljs.core.second.call(null, strs));
    return navigator__$2;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "C", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "char-format", "char-format", -1016499218), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, 
new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params))) {
    return cljs.pprint.pretty_character;
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
      return cljs.pprint.readable_character;
    } else {
      return cljs.pprint.plain_character;
    }
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "F", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "w", "w", 354169001), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "d", "d", 1972142424), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, Number], null), new cljs.core.Keyword(null, "k", "k", -2146297393), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.fixed_float;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "E", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "w", "w", 354169001), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "d", "d", 1972142424), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, Number], null), new cljs.core.Keyword(null, "e", "e", 1381269198), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "k", "k", -2146297393), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null), new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], 
null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null), new cljs.core.Keyword(null, "exponentchar", "exponentchar", 1986664222), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
"at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.exponential_float;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "G", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "w", "w", 354169001), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "d", "d", 1972142424), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, Number], null), new cljs.core.Keyword(null, "e", "e", 1381269198), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "k", "k", -2146297393), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null), new cljs.core.Keyword(null, "overflowchar", "overflowchar", -1620088106), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], 
null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null), new cljs.core.Keyword(null, "exponentchar", "exponentchar", 1986664222), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
"at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.general_float;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "$", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "d", "d", 1972142424), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, Number], null), new cljs.core.Keyword(null, "n", "n", 562130025), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, Number], null), new cljs.core.Keyword(null, "w", "w", 354169001), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.dollar_float;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "%", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "count", "count", 2139924085), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, 
"bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    var n__30514__auto___35740 = (new cljs.core.Keyword(null, "count", "count", 2139924085)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var i_35741 = 0;
    while (true) {
      if (i_35741 < n__30514__auto___35740) {
        cljs.pprint.prn.call(null);
        var G__35742 = i_35741 + 1;
        i_35741 = G__35742;
        continue;
      } else {
      }
      break;
    }
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "\x26", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "count", "count", 2139924085), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
1, [new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    var cnt_35743 = (new cljs.core.Keyword(null, "count", "count", 2139924085)).cljs$core$IFn$_invoke$arity$1(params__$1);
    if (cnt_35743 > 0) {
      cljs.pprint.fresh_line.call(null);
    } else {
    }
    var n__30514__auto___35744 = cnt_35743 - 1;
    var i_35745 = 0;
    while (true) {
      if (i_35745 < n__30514__auto___35744) {
        cljs.pprint.prn.call(null);
        var G__35746 = i_35745 + 1;
        i_35745 = G__35746;
        continue;
      } else {
      }
      break;
    }
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "|", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "count", "count", 2139924085), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, 
"bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    var n__30514__auto___35747 = (new cljs.core.Keyword(null, "count", "count", 2139924085)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var i_35748 = 0;
    while (true) {
      if (i_35748 < n__30514__auto___35747) {
        cljs.pprint.print.call(null, "\f");
        var G__35749 = i_35748 + 1;
        i_35748 = G__35749;
        continue;
      } else {
      }
      break;
    }
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "~", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "n", "n", 562130025), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, 
"bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    var n = (new cljs.core.Keyword(null, "n", "n", 562130025)).cljs$core$IFn$_invoke$arity$1(params__$1);
    cljs.pprint.print.call(null, cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, n, "~")));
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "\n", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), 
new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, arg_navigator, offsets) {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params__$1))) {
      cljs.pprint.prn.call(null);
    } else {
    }
    return arg_navigator;
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "T", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "colnum", "colnum", 2023796854), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, 
offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
    return function(p1__35725_SHARP_, p2__35726_SHARP_, p3__35727_SHARP_) {
      return cljs.pprint.relative_tabulation.call(null, p1__35725_SHARP_, p2__35726_SHARP_, p3__35727_SHARP_);
    };
  } else {
    return function(p1__35728_SHARP_, p2__35729_SHARP_, p3__35730_SHARP_) {
      return cljs.pprint.absolute_tabulation.call(null, p1__35728_SHARP_, p2__35729_SHARP_, p3__35730_SHARP_);
    };
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "*", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "n", "n", 562130025), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, navigator, offsets) {
    var n = (new cljs.core.Keyword(null, "n", "n", 562130025)).cljs$core$IFn$_invoke$arity$1(params__$1);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params__$1))) {
      return cljs.pprint.absolute_reposition.call(null, navigator, n);
    } else {
      return cljs.pprint.relative_reposition.call(null, navigator, cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? -n : n);
    }
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "?", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), 
cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
    return function(params__$1, navigator, offsets) {
      var vec__35735 = cljs.pprint.get_format_arg.call(null, navigator);
      var subformat = cljs.core.nth.call(null, vec__35735, 0, null);
      var navigator__$1 = cljs.core.nth.call(null, vec__35735, 1, null);
      return cljs.pprint.execute_sub_format.call(null, subformat, navigator__$1, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params__$1));
    };
  } else {
    return function(params__$1, navigator, offsets) {
      var vec__35736 = cljs.pprint.get_format_arg.call(null, navigator);
      var subformat = cljs.core.nth.call(null, vec__35736, 0, null);
      var navigator__$1 = cljs.core.nth.call(null, vec__35736, 1, null);
      var vec__35737 = cljs.pprint.next_arg.call(null, navigator__$1);
      var subargs = cljs.core.nth.call(null, vec__35737, 0, null);
      var navigator__$2 = cljs.core.nth.call(null, vec__35737, 1, null);
      var sub_navigator = cljs.pprint.init_navigator.call(null, subargs);
      cljs.pprint.execute_sub_format.call(null, subformat, sub_navigator, (new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params__$1));
      return navigator__$2;
    };
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "(", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, 
"both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "right", "right", -452581833), ")", new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742), null, new cljs.core.Keyword(null, "else", "else", -1508377146), null], null), new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  var mod_case_writer = cljs.core.truth_(function() {
    var and__29588__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(and__29588__auto__)) {
      return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    } else {
      return and__29588__auto__;
    }
  }()) ? cljs.pprint.upcase_writer : cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? cljs.pprint.capitalize_word_writer : cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? cljs.pprint.init_cap_writer : cljs.pprint.downcase_writer;
  return function(mod_case_writer) {
    return function(p1__35731_SHARP_, p2__35732_SHARP_, p3__35733_SHARP_) {
      return cljs.pprint.modify_case.call(null, mod_case_writer, p1__35731_SHARP_, p2__35732_SHARP_, p3__35733_SHARP_);
    };
  }(mod_case_writer);
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), ")", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, 
offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "[", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "selector", "selector", 762528866), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "right", "right", -452581833), "]", new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742), true, new cljs.core.Keyword(null, "else", "else", -1508377146), 
new cljs.core.Keyword(null, "last", "last", 1105735132)], null), new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params))) {
    return cljs.pprint.boolean_conditional;
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
      return cljs.pprint.check_arg_conditional;
    } else {
      return cljs.pprint.choice_conditional;
    }
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), ";", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "min-remaining", "min-remaining", 962687677), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "max-columns", "max-columns", 1742323262), new cljs.core.PersistentVector(null, 
2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "separator", "separator", -1628749125), true], null), new cljs.core.Keyword(null, 
"generator-fn", "generator-fn", 811851656), function(params, offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "]", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, 
offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "{", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "max-iterations", "max-iterations", 2021275563), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, 
new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "right", "right", -452581833), "}", new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742), 
false], null), new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(and__29588__auto__)) {
      return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    } else {
      return and__29588__auto__;
    }
  }())) {
    return cljs.pprint.iterate_main_sublists;
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params))) {
      return cljs.pprint.iterate_list_of_sublists;
    } else {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params))) {
        return cljs.pprint.iterate_main_list;
      } else {
        return cljs.pprint.iterate_sublist;
      }
    }
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "}", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", 
-1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "\x3c", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "mincol", "mincol", 1230695445), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "colinc", "colinc", -584873385), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1, Number], null), new cljs.core.Keyword(null, "minpad", "minpad", 323570901), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null), new cljs.core.Keyword(null, "padchar", "padchar", 2018584530), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", String], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, 
"colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, "both", "both", -393648840), null, new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "right", "right", -452581833), "\x3e", new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742), 
true, new cljs.core.Keyword(null, "else", "else", -1508377146), new cljs.core.Keyword(null, "first", "first", -644103046)], null), new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.logical_block_or_justify;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "\x3e", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", 
-1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return null;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "^", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "arg1", "arg1", 951899358), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null), new cljs.core.Keyword(null, "arg2", "arg2", 1729550917), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[null, Number], null), new cljs.core.Keyword(null, "arg3", "arg3", -1486822496), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, 
new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return function(params__$1, navigator, offsets) {
    var arg1 = (new cljs.core.Keyword(null, "arg1", "arg1", 951899358)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var arg2 = (new cljs.core.Keyword(null, "arg2", "arg2", 1729550917)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var arg3 = (new cljs.core.Keyword(null, "arg3", "arg3", -1486822496)).cljs$core$IFn$_invoke$arity$1(params__$1);
    var exit = cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? new cljs.core.Keyword(null, "colon-up-arrow", "colon-up-arrow", 244853007) : new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333);
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = arg1;
      if (cljs.core.truth_(and__29588__auto__)) {
        var and__29588__auto____$1 = arg2;
        if (cljs.core.truth_(and__29588__auto____$1)) {
          return arg3;
        } else {
          return and__29588__auto____$1;
        }
      } else {
        return and__29588__auto__;
      }
    }())) {
      if (arg1 <= arg2 && arg2 <= arg3) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exit, navigator], null);
      } else {
        return navigator;
      }
    } else {
      if (cljs.core.truth_(function() {
        var and__29588__auto__ = arg1;
        if (cljs.core.truth_(and__29588__auto__)) {
          return arg2;
        } else {
          return and__29588__auto__;
        }
      }())) {
        if (cljs.core._EQ_.call(null, arg1, arg2)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exit, navigator], null);
        } else {
          return navigator;
        }
      } else {
        if (cljs.core.truth_(arg1)) {
          if (cljs.core._EQ_.call(null, arg1, 0)) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exit, navigator], null);
          } else {
            return navigator;
          }
        } else {
          if (cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "base-args", "base-args", -1268706822)).cljs$core$IFn$_invoke$arity$1(params__$1))) : cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "rest", "rest", -1241696419)).cljs$core$IFn$_invoke$arity$1(navigator))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exit, navigator], null);
          } else {
            return navigator;
          }
        }
      }
    }
  };
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "W", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, 
"both", "both", -393648840), null, new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params);
    }
  }())) {
    var bindings = cljs.core.concat.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(params)) ? new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "level", "level", 1290497552), null, new cljs.core.Keyword(null, "length", "length", 588987862), null], null) : cljs.core.PersistentVector.EMPTY, cljs.core.truth_((new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params)) ? 
    new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "pretty", "pretty", -1916372486), true], null) : cljs.core.PersistentVector.EMPTY);
    return function(bindings) {
      return function(params__$1, navigator, offsets) {
        var vec__35738 = cljs.pprint.next_arg.call(null, navigator);
        var arg = cljs.core.nth.call(null, vec__35738, 0, null);
        var navigator__$1 = cljs.core.nth.call(null, vec__35738, 1, null);
        if (cljs.core.truth_(cljs.core.apply.call(null, cljs.pprint.write, arg, bindings))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), navigator__$1], null);
        } else {
          return navigator__$1;
        }
      };
    }(bindings);
  } else {
    return function(params__$1, navigator, offsets) {
      var vec__35739 = cljs.pprint.next_arg.call(null, navigator);
      var arg = cljs.core.nth.call(null, vec__35739, 0, null);
      var navigator__$1 = cljs.core.nth.call(null, vec__35739, 1, null);
      if (cljs.core.truth_(cljs.pprint.write_out.call(null, arg))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "up-arrow", "up-arrow", 1705310333), navigator__$1], null);
      } else {
        return navigator__$1;
      }
    };
  }
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "_", new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null, new cljs.core.Keyword(null, "at", "at", 1476951349), null, new cljs.core.Keyword(null, 
"both", "both", -393648840), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.conditional_newline;
}], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "directive", "directive", 793559132), "I", new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "n", "n", 562130025), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, Number], null)], null), new cljs.core.Keyword(null, "flags", "flags", 1775418075), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
1, [new cljs.core.Keyword(null, "colon", "colon", -965200945), null], null), null), new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656), function(params, offset) {
  return cljs.pprint.set_indent;
}], null)]);
cljs.pprint.param_pattern = /^([vV]|#|('.)|([+-]?\d+)|(?=,))/;
cljs.pprint.special_params = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "remaining-arg-count", "remaining-arg-count", -1216589335), null, new cljs.core.Keyword(null, "parameter-from-args", "parameter-from-args", -758446196), null], null), null);
cljs.pprint.extract_param = function cljs$pprint$extract_param(p__35750) {
  var vec__35752 = p__35750;
  var s = cljs.core.nth.call(null, vec__35752, 0, null);
  var offset = cljs.core.nth.call(null, vec__35752, 1, null);
  var saw_comma = cljs.core.nth.call(null, vec__35752, 2, null);
  var m = new RegExp(cljs.pprint.param_pattern.source, "g");
  var param = m.exec(s);
  if (cljs.core.truth_(param)) {
    var token_str = cljs.core.first.call(null, param);
    var remainder = cljs.core.subs.call(null, s, m.lastIndex);
    var new_offset = offset + m.lastIndex;
    if (!cljs.core._EQ_.call(null, ",", cljs.core.nth.call(null, remainder, 0))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token_str, offset], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [remainder, new_offset, false], null)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token_str, offset], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, remainder, 1), new_offset + 1, true], null)], null);
    }
  } else {
    if (cljs.core.truth_(saw_comma)) {
      return cljs.pprint.format_error.call(null, "Badly formed parameters in format directive", offset);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, offset], null)], null);
    }
  }
};
cljs.pprint.extract_params = function cljs$pprint$extract_params(s, offset) {
  return cljs.pprint.consume.call(null, cljs.pprint.extract_param, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, offset, false], null));
};
cljs.pprint.translate_param = function cljs$pprint$translate_param(p__35753) {
  var vec__35755 = p__35753;
  var p = cljs.core.nth.call(null, vec__35755, 0, null);
  var offset = cljs.core.nth.call(null, vec__35755, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, p.length, 0) ? null : cljs.core._EQ_.call(null, p.length, 1) && cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["V", null, "v", null], null), null), cljs.core.nth.call(null, p, 0)) ? new cljs.core.Keyword(null, "parameter-from-args", "parameter-from-args", -758446196) : cljs.core._EQ_.call(null, p.length, 1) && 
  cljs.core._EQ_.call(null, "#", cljs.core.nth.call(null, p, 0)) ? new cljs.core.Keyword(null, "remaining-arg-count", "remaining-arg-count", -1216589335) : cljs.core._EQ_.call(null, p.length, 2) && cljs.core._EQ_.call(null, "'", cljs.core.nth.call(null, p, 0)) ? cljs.core.nth.call(null, p, 1) : parseInt(p, 10), offset], null);
};
cljs.pprint.flag_defs = new cljs.core.PersistentArrayMap(null, 2, [":", new cljs.core.Keyword(null, "colon", "colon", -965200945), "@", new cljs.core.Keyword(null, "at", "at", 1476951349)], null);
cljs.pprint.extract_flags = function cljs$pprint$extract_flags(s, offset) {
  return cljs.pprint.consume.call(null, function(p__35758) {
    var vec__35759 = p__35758;
    var s__$1 = cljs.core.nth.call(null, vec__35759, 0, null);
    var offset__$1 = cljs.core.nth.call(null, vec__35759, 1, null);
    var flags = cljs.core.nth.call(null, vec__35759, 2, null);
    if (cljs.core.empty_QMARK_.call(null, s__$1)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s__$1, offset__$1, flags], null)], null);
    } else {
      var flag = cljs.core.get.call(null, cljs.pprint.flag_defs, cljs.core.first.call(null, s__$1));
      if (cljs.core.truth_(flag)) {
        if (cljs.core.contains_QMARK_.call(null, flags, flag)) {
          return cljs.pprint.format_error.call(null, [cljs.core.str('Flag "'), cljs.core.str(cljs.core.first.call(null, s__$1)), cljs.core.str('" appears more than once in a directive')].join(""), offset__$1);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s__$1, 1), offset__$1 + 1, cljs.core.assoc.call(null, flags, flag, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, offset__$1], null))], null)], null);
        }
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s__$1, offset__$1, flags], null)], null);
      }
    }
  }, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, offset, cljs.core.PersistentArrayMap.EMPTY], null));
};
cljs.pprint.check_flags = function cljs$pprint$check_flags(def, flags) {
  var allowed = (new cljs.core.Keyword(null, "flags", "flags", 1775418075)).cljs$core$IFn$_invoke$arity$1(def);
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(allowed));
    if (and__29588__auto__) {
      return (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(flags);
    } else {
      return and__29588__auto__;
    }
  }())) {
    cljs.pprint.format_error.call(null, [cljs.core.str('"@" is an illegal flag for format directive "'), cljs.core.str((new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)), cljs.core.str('"')].join(""), cljs.core.nth.call(null, (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(flags), 1));
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(allowed));
    if (and__29588__auto__) {
      return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(flags);
    } else {
      return and__29588__auto__;
    }
  }())) {
    cljs.pprint.format_error.call(null, [cljs.core.str('":" is an illegal flag for format directive "'), cljs.core.str((new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)), cljs.core.str('"')].join(""), cljs.core.nth.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(flags), 1));
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "both", "both", -393648840)).cljs$core$IFn$_invoke$arity$1(allowed));
    if (and__29588__auto__) {
      var and__29588__auto____$1 = (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(flags);
      if (cljs.core.truth_(and__29588__auto____$1)) {
        return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(flags);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return cljs.pprint.format_error.call(null, [cljs.core.str('Cannot combine "@" and ":" flags for format directive "'), cljs.core.str((new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)), cljs.core.str('"')].join(""), function() {
      var x__29938__auto__ = cljs.core.nth.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(flags), 1);
      var y__29939__auto__ = cljs.core.nth.call(null, (new cljs.core.Keyword(null, "at", "at", 1476951349)).cljs$core$IFn$_invoke$arity$1(flags), 1);
      return x__29938__auto__ < y__29939__auto__ ? x__29938__auto__ : y__29939__auto__;
    }());
  } else {
    return null;
  }
};
cljs.pprint.map_params = function cljs$pprint$map_params(def, params, flags, offset) {
  cljs.pprint.check_flags.call(null, def, flags);
  if (cljs.core.count.call(null, params) > cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def))) {
    cljs.pprint.format_error.call(null, cljs.pprint.cl_format.call(null, null, 'Too many parameters for directive "~C": ~D~:* ~[were~;was~:;were~] specified but only ~D~:* ~[are~;is~:;are~] allowed', (new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def), cljs.core.count.call(null, params), cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def))), cljs.core.second.call(null, cljs.core.first.call(null, 
    params)));
  } else {
  }
  cljs.core.doall.call(null, cljs.core.map.call(null, function(p1__35760_SHARP_, p2__35761_SHARP_) {
    var val = cljs.core.first.call(null, p1__35760_SHARP_);
    if (!(val == null || cljs.core.contains_QMARK_.call(null, cljs.pprint.special_params, val) || cljs.core._EQ_.call(null, cljs.core.second.call(null, cljs.core.second.call(null, p2__35761_SHARP_)), cljs.core.type.call(null, val)))) {
      return cljs.pprint.format_error.call(null, [cljs.core.str("Parameter "), cljs.core.str(cljs.core.name.call(null, cljs.core.first.call(null, p2__35761_SHARP_))), cljs.core.str(' has bad type in directive "'), cljs.core.str((new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)), cljs.core.str('": '), cljs.core.str(cljs.core.type.call(null, val))].join(""), cljs.core.second.call(null, p1__35760_SHARP_));
    } else {
      return null;
    }
  }, params, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def)));
  return cljs.core.merge.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.reverse.call(null, function() {
    var iter__30380__auto__ = function cljs$pprint$map_params_$_iter__35777(s__35778) {
      return new cljs.core.LazySeq(null, function() {
        var s__35778__$1 = s__35778;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__35778__$1);
          if (temp__4657__auto__) {
            var s__35778__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__35778__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__35778__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__35780 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__35779 = 0;
                while (true) {
                  if (i__35779 < size__30379__auto__) {
                    var vec__35785 = cljs.core._nth.call(null, c__30378__auto__, i__35779);
                    var name = cljs.core.nth.call(null, vec__35785, 0, null);
                    var vec__35786 = cljs.core.nth.call(null, vec__35785, 1, null);
                    var default$ = cljs.core.nth.call(null, vec__35786, 0, null);
                    cljs.core.chunk_append.call(null, b__35780, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [default$, offset], null)], null));
                    var G__35789 = i__35779 + 1;
                    i__35779 = G__35789;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__35780), cljs$pprint$map_params_$_iter__35777.call(null, cljs.core.chunk_rest.call(null, s__35778__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__35780), null);
              }
            } else {
              var vec__35787 = cljs.core.first.call(null, s__35778__$2);
              var name = cljs.core.nth.call(null, vec__35787, 0, null);
              var vec__35788 = cljs.core.nth.call(null, vec__35787, 1, null);
              var default$ = cljs.core.nth.call(null, vec__35788, 0, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [default$, offset], null)], null), cljs$pprint$map_params_$_iter__35777.call(null, cljs.core.rest.call(null, s__35778__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def));
  }())), cljs.core.reduce.call(null, function(p1__35762_SHARP_, p2__35763_SHARP_) {
    return cljs.core.apply.call(null, cljs.core.assoc, p1__35762_SHARP_, p2__35763_SHARP_);
  }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(p1__35764_SHARP_) {
    return cljs.core.first.call(null, cljs.core.nth.call(null, p1__35764_SHARP_, 1));
  }, cljs.core.zipmap.call(null, cljs.core.keys.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(def)), params))), flags);
};
cljs.pprint.compile_directive = function cljs$pprint$compile_directive(s, offset) {
  var vec__35794 = cljs.pprint.extract_params.call(null, s, offset);
  var raw_params = cljs.core.nth.call(null, vec__35794, 0, null);
  var vec__35795 = cljs.core.nth.call(null, vec__35794, 1, null);
  var rest = cljs.core.nth.call(null, vec__35795, 0, null);
  var offset__$1 = cljs.core.nth.call(null, vec__35795, 1, null);
  var vec__35796 = cljs.pprint.extract_flags.call(null, rest, offset__$1);
  var _ = cljs.core.nth.call(null, vec__35796, 0, null);
  var vec__35797 = cljs.core.nth.call(null, vec__35796, 1, null);
  var rest__$1 = cljs.core.nth.call(null, vec__35797, 0, null);
  var offset__$2 = cljs.core.nth.call(null, vec__35797, 1, null);
  var flags = cljs.core.nth.call(null, vec__35797, 2, null);
  var directive = cljs.core.first.call(null, rest__$1);
  var def = cljs.core.get.call(null, cljs.pprint.directive_table, clojure.string.upper_case.call(null, directive));
  var params = cljs.core.truth_(def) ? cljs.pprint.map_params.call(null, def, cljs.core.map.call(null, cljs.pprint.translate_param, raw_params), flags, offset__$2) : null;
  if (cljs.core.not.call(null, directive)) {
    cljs.pprint.format_error.call(null, "Format string ended in the middle of a directive", offset__$2);
  } else {
  }
  if (cljs.core.not.call(null, def)) {
    cljs.pprint.format_error.call(null, [cljs.core.str('Directive "'), cljs.core.str(directive), cljs.core.str('" is undefined')].join(""), offset__$2);
  } else {
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.pprint.compiled_directive((new cljs.core.Keyword(null, "generator-fn", "generator-fn", 811851656)).cljs$core$IFn$_invoke$arity$1(def).call(null, params, offset__$2), def, params, offset__$2, null, null, null), function() {
    var remainder = cljs.core.subs.call(null, rest__$1, 1);
    var offset__$3 = offset__$2 + 1;
    var trim_QMARK_ = cljs.core._EQ_.call(null, "\n", (new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1(def)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1(params));
    var trim_count = trim_QMARK_ ? cljs.pprint.prefix_count.call(null, remainder, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", "\t"], null)) : 0;
    var remainder__$1 = cljs.core.subs.call(null, remainder, trim_count);
    var offset__$4 = offset__$3 + trim_count;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [remainder__$1, offset__$4], null);
  }()], null);
};
cljs.pprint.compile_raw_string = function cljs$pprint$compile_raw_string(s, offset) {
  return new cljs.pprint.compiled_directive(function(_, a, ___$1) {
    cljs.pprint.print.call(null, s);
    return a;
  }, null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "string", "string", -1989541586), s], null), offset, null, null, null);
};
cljs.pprint.right_bracket = function cljs$pprint$right_bracket(this$) {
  return (new cljs.core.Keyword(null, "right", "right", -452581833)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)));
};
cljs.pprint.separator_QMARK_ = function cljs$pprint$separator_QMARK_(this$) {
  return (new cljs.core.Keyword(null, "separator", "separator", -1628749125)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)));
};
cljs.pprint.else_separator_QMARK_ = function cljs$pprint$else_separator_QMARK_(this$) {
  var and__29588__auto__ = (new cljs.core.Keyword(null, "separator", "separator", -1628749125)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)));
  if (cljs.core.truth_(and__29588__auto__)) {
    return (new cljs.core.Keyword(null, "colon", "colon", -965200945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(this$));
  } else {
    return and__29588__auto__;
  }
};
cljs.pprint.process_bracket = function cljs$pprint$process_bracket(this$, remainder) {
  var vec__35799 = cljs.pprint.collect_clauses.call(null, (new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(this$), remainder);
  var subex = cljs.core.nth.call(null, vec__35799, 0, null);
  var remainder__$1 = cljs.core.nth.call(null, vec__35799, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.pprint.compiled_directive((new cljs.core.Keyword(null, "func", "func", -238706040)).cljs$core$IFn$_invoke$arity$1(this$), (new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(this$), cljs.pprint.tuple_map.call(null, subex, (new cljs.core.Keyword(null, 
  "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(this$))), (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(this$), null, null, null), remainder__$1], null);
};
cljs.pprint.process_clause = function cljs$pprint$process_clause(bracket_info, offset, remainder) {
  return cljs.pprint.consume.call(null, function(remainder__$1) {
    if (cljs.core.empty_QMARK_.call(null, remainder__$1)) {
      return cljs.pprint.format_error.call(null, "No closing bracket found.", offset);
    } else {
      var this$ = cljs.core.first.call(null, remainder__$1);
      var remainder__$2 = cljs.core.next.call(null, remainder__$1);
      if (cljs.core.truth_(cljs.pprint.right_bracket.call(null, this$))) {
        return cljs.pprint.process_bracket.call(null, this$, remainder__$2);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "right", "right", -452581833)).cljs$core$IFn$_invoke$arity$1(bracket_info), (new cljs.core.Keyword(null, "directive", "directive", 793559132)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$)))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "right-bracket", "right-bracket", 951856080), (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(this$), null, remainder__$2], null)], null);
        } else {
          if (cljs.core.truth_(cljs.pprint.else_separator_QMARK_.call(null, this$))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "else", "else", -1508377146), null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(this$), remainder__$2], null)], null);
          } else {
            if (cljs.core.truth_(cljs.pprint.separator_QMARK_.call(null, this$))) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "separator", "separator", -1628749125), null, null, remainder__$2], null)], null);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$, remainder__$2], null);
            }
          }
        }
      }
    }
  }, remainder);
};
cljs.pprint.collect_clauses = function cljs$pprint$collect_clauses(bracket_info, offset, remainder) {
  return cljs.core.second.call(null, cljs.pprint.consume.call(null, function(p__35804) {
    var vec__35805 = p__35804;
    var clause_map = cljs.core.nth.call(null, vec__35805, 0, null);
    var saw_else = cljs.core.nth.call(null, vec__35805, 1, null);
    var remainder__$1 = cljs.core.nth.call(null, vec__35805, 2, null);
    var vec__35806 = cljs.pprint.process_clause.call(null, bracket_info, offset, remainder__$1);
    var clause = cljs.core.nth.call(null, vec__35806, 0, null);
    var vec__35807 = cljs.core.nth.call(null, vec__35806, 1, null);
    var type = cljs.core.nth.call(null, vec__35807, 0, null);
    var right_params = cljs.core.nth.call(null, vec__35807, 1, null);
    var else_params = cljs.core.nth.call(null, vec__35807, 2, null);
    var remainder__$2 = cljs.core.nth.call(null, vec__35807, 3, null);
    if (cljs.core._EQ_.call(null, type, new cljs.core.Keyword(null, "right-bracket", "right-bracket", 951856080))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge_with.call(null, cljs.core.concat, clause_map, cljs.core.PersistentArrayMap.fromArray([cljs.core.truth_(saw_else) ? new cljs.core.Keyword(null, "else", "else", -1508377146) : new cljs.core.Keyword(null, "clauses", "clauses", 1454841241), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
      [clause], null), new cljs.core.Keyword(null, "right-params", "right-params", -1790676237), right_params], true, false)), remainder__$2], null)], null);
    } else {
      if (cljs.core._EQ_.call(null, type, new cljs.core.Keyword(null, "else", "else", -1508377146))) {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(clause_map))) {
          return cljs.pprint.format_error.call(null, 'Two else clauses ("~:;") inside bracket construction.', offset);
        } else {
          if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(bracket_info))) {
            return cljs.pprint.format_error.call(null, 'An else clause ("~:;") is in a bracket type that doesn\'t support it.', offset);
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "first", "first", -644103046), (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(bracket_info)) && cljs.core.seq.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1(clause_map))) {
              return cljs.pprint.format_error.call(null, 'The else clause ("~:;") is only allowed in the first position for this directive.', offset);
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "first", "first", -644103046), (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(bracket_info))) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge_with.call(null, cljs.core.concat, clause_map, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "else", "else", -1508377146), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause], null), new cljs.core.Keyword(null, "else-params", "else-params", 
                -832171646), else_params], null)), false, remainder__$2], null)], null);
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge_with.call(null, cljs.core.concat, clause_map, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "clauses", "clauses", 1454841241), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause], null)], null)), true, remainder__$2], null)], 
                null);
              }
            }
          }
        }
      } else {
        if (cljs.core._EQ_.call(null, type, new cljs.core.Keyword(null, "separator", "separator", -1628749125))) {
          if (cljs.core.truth_(saw_else)) {
            return cljs.pprint.format_error.call(null, 'A plain clause (with "~;") follows an else clause ("~:;") inside bracket construction.', offset);
          } else {
            if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "allows-separator", "allows-separator", -818967742)).cljs$core$IFn$_invoke$arity$1(bracket_info))) {
              return cljs.pprint.format_error.call(null, 'A separator ("~;") is in a bracket type that doesn\'t support it.', offset);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge_with.call(null, cljs.core.concat, clause_map, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "clauses", "clauses", 1454841241), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause], null)], null)), false, remainder__$2], null)], null)
              ;
            }
          }
        } else {
          return null;
        }
      }
    }
  }, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "clauses", "clauses", 1454841241), cljs.core.PersistentVector.EMPTY], null), false, remainder], null)));
};
cljs.pprint.process_nesting = function cljs$pprint$process_nesting(format) {
  return cljs.core.first.call(null, cljs.pprint.consume.call(null, function(remainder) {
    var this$ = cljs.core.first.call(null, remainder);
    var remainder__$1 = cljs.core.next.call(null, remainder);
    var bracket = (new cljs.core.Keyword(null, "bracket-info", "bracket-info", -1600092774)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(this$));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "right", "right", -452581833)).cljs$core$IFn$_invoke$arity$1(bracket))) {
      return cljs.pprint.process_bracket.call(null, this$, remainder__$1);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$, remainder__$1], null);
    }
  }, format));
};
cljs.pprint.compile_format = function cljs$pprint$compile_format(format_str) {
  var _STAR_format_str_STAR_35811 = cljs.pprint._STAR_format_str_STAR_;
  cljs.pprint._STAR_format_str_STAR_ = format_str;
  try {
    return cljs.pprint.process_nesting.call(null, cljs.core.first.call(null, cljs.pprint.consume.call(null, function(_STAR_format_str_STAR_35811) {
      return function(p__35812) {
        var vec__35813 = p__35812;
        var s = cljs.core.nth.call(null, vec__35813, 0, null);
        var offset = cljs.core.nth.call(null, vec__35813, 1, null);
        if (cljs.core.empty_QMARK_.call(null, s)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, s], null);
        } else {
          var tilde = s.indexOf("~");
          if (tilde < 0) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.pprint.compile_raw_string.call(null, s, offset), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", offset + s.length], null)], null);
          } else {
            if (tilde === 0) {
              return cljs.pprint.compile_directive.call(null, cljs.core.subs.call(null, s, 1), offset + 1);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.pprint.compile_raw_string.call(null, cljs.core.subs.call(null, s, 0, tilde), offset), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s, tilde), tilde + offset], null)], null);
            }
          }
        }
      };
    }(_STAR_format_str_STAR_35811), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [format_str, 0], null))));
  } finally {
    cljs.pprint._STAR_format_str_STAR_ = _STAR_format_str_STAR_35811;
  }
};
cljs.pprint.needs_pretty = function cljs$pprint$needs_pretty(format) {
  var format__$1 = format;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, format__$1)) {
      return false;
    } else {
      if (cljs.core.truth_(function() {
        var or__29600__auto__ = (new cljs.core.Keyword(null, "pretty", "pretty", -1916372486)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "flags", "flags", 1775418075)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "def", "def", -1043430536)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, format__$1))));
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          var or__29600__auto____$1 = cljs.core.some.call(null, cljs$pprint$needs_pretty, cljs.core.first.call(null, (new cljs.core.Keyword(null, "clauses", "clauses", 1454841241)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, format__$1)))));
          if (cljs.core.truth_(or__29600__auto____$1)) {
            return or__29600__auto____$1;
          } else {
            return cljs.core.some.call(null, cljs$pprint$needs_pretty, cljs.core.first.call(null, (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, format__$1)))));
          }
        }
      }())) {
        return true;
      } else {
        var G__35814 = cljs.core.next.call(null, format__$1);
        format__$1 = G__35814;
        continue;
      }
    }
    break;
  }
};
cljs.pprint.execute_format = function cljs$pprint$execute_format(var_args) {
  var args35815 = [];
  var len__30669__auto___35821 = arguments.length;
  var i__30670__auto___35822 = 0;
  while (true) {
    if (i__30670__auto___35822 < len__30669__auto___35821) {
      args35815.push(arguments[i__30670__auto___35822]);
      var G__35823 = i__30670__auto___35822 + 1;
      i__30670__auto___35822 = G__35823;
      continue;
    } else {
    }
    break;
  }
  var G__35817 = args35815.length;
  switch(G__35817) {
    case 3:
      return cljs.pprint.execute_format.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return cljs.pprint.execute_format.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args35815.length)].join(""));;
  }
};
cljs.pprint.execute_format.cljs$core$IFn$_invoke$arity$3 = function(stream, format, args) {
  var sb = new goog.string.StringBuffer;
  var real_stream = cljs.core.not.call(null, stream) || stream === true ? new cljs.core.StringBufferWriter(sb) : stream;
  var wrapped_stream = cljs.core.truth_(function() {
    var and__29588__auto__ = cljs.pprint.needs_pretty.call(null, format);
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs.core.not.call(null, cljs.pprint.pretty_writer_QMARK_.call(null, real_stream));
    } else {
      return and__29588__auto__;
    }
  }()) ? cljs.pprint.get_pretty_writer.call(null, real_stream) : real_stream;
  var _STAR_out_STAR_35818 = cljs.core._STAR_out_STAR_;
  cljs.core._STAR_out_STAR_ = wrapped_stream;
  try {
    try {
      cljs.pprint.execute_format.call(null, format, args);
    } finally {
      if (!(real_stream === wrapped_stream)) {
        cljs.core._flush.call(null, wrapped_stream);
      } else {
      }
    }
    if (cljs.core.not.call(null, stream)) {
      return [cljs.core.str(sb)].join("");
    } else {
      if (stream === true) {
        return cljs.core._STAR_print_fn_STAR_.call(null, [cljs.core.str(sb)].join(""));
      } else {
        return null;
      }
    }
  } finally {
    cljs.core._STAR_out_STAR_ = _STAR_out_STAR_35818;
  }
};
cljs.pprint.execute_format.cljs$core$IFn$_invoke$arity$2 = function(format, args) {
  cljs.pprint.map_passing_context.call(null, function(element, context) {
    if (cljs.core.truth_(cljs.pprint.abort_QMARK_.call(null, context))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, context], null);
    } else {
      var vec__35819 = cljs.pprint.realize_parameter_list.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(element), context);
      var params = cljs.core.nth.call(null, vec__35819, 0, null);
      var args__$1 = cljs.core.nth.call(null, vec__35819, 1, null);
      var vec__35820 = cljs.pprint.unzip_map.call(null, params);
      var params__$1 = cljs.core.nth.call(null, vec__35820, 0, null);
      var offsets = cljs.core.nth.call(null, vec__35820, 1, null);
      var params__$2 = cljs.core.assoc.call(null, params__$1, new cljs.core.Keyword(null, "base-args", "base-args", -1268706822), args__$1);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, cljs.core.apply.call(null, (new cljs.core.Keyword(null, "func", "func", -238706040)).cljs$core$IFn$_invoke$arity$1(element), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [params__$2, args__$1, offsets], null))], null);
    }
  }, args, format);
  return null;
};
cljs.pprint.execute_format.cljs$lang$maxFixedArity = 3;
cljs.pprint.cached_compile = cljs.core.memoize.call(null, cljs.pprint.compile_format);
cljs.pprint.use_method = function cljs$pprint$use_method(multifn, dispatch_val, func) {
  return cljs.core._add_method.call(null, multifn, dispatch_val, func);
};
cljs.pprint.reader_macros = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), "'", new cljs.core.Symbol(null, "var", "var", 870848730, null), "#'", new cljs.core.Symbol("clojure.core", "deref", "clojure.core/deref", 188719157, null), "@", new cljs.core.Symbol("clojure.core", "unquote", "clojure.core/unquote", 843087510, null), "~", new cljs.core.Symbol("cljs.core", "deref", "cljs.core/deref", 1901963335, null), "@", new cljs.core.Symbol("cljs.core", 
"unquote", "cljs.core/unquote", 1013085760, null), "~"], null);
cljs.pprint.pprint_reader_macro = function cljs$pprint$pprint_reader_macro(alis) {
  var macro_char = cljs.pprint.reader_macros.call(null, cljs.core.first.call(null, alis));
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = macro_char;
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, alis));
    } else {
      return and__29588__auto__;
    }
  }())) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, macro_char);
    cljs.pprint.write_out.call(null, cljs.core.second.call(null, alis));
    return true;
  } else {
    return null;
  }
};
cljs.pprint.pprint_simple_list = function cljs$pprint$pprint_simple_list(alis) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_35828_35831 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_35829_35832 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
      var length_count35830_35833 = 0;
      var alis_35834__$1 = cljs.core.seq.call(null, alis);
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count35830_35833 < cljs.core._STAR_print_length_STAR_) {
          if (alis_35834__$1) {
            cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis_35834__$1));
            if (cljs.core.next.call(null, alis_35834__$1)) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__35835 = length_count35830_35833 + 1;
              var G__35836 = cljs.core.next.call(null, alis_35834__$1);
              length_count35830_35833 = G__35835;
              alis_35834__$1 = G__35836;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35829_35832;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35828_35831;
    }
  }
  return null;
};
cljs.pprint.pprint_list = function cljs$pprint$pprint_list(alis) {
  if (cljs.core.not.call(null, cljs.pprint.pprint_reader_macro.call(null, alis))) {
    return cljs.pprint.pprint_simple_list.call(null, alis);
  } else {
    return null;
  }
};
cljs.pprint.pprint_vector = function cljs$pprint$pprint_vector(avec) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_35840_35843 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_35841_35844 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "[", null, "]");
      var length_count35842_35845 = 0;
      var aseq_35846 = cljs.core.seq.call(null, avec);
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count35842_35845 < cljs.core._STAR_print_length_STAR_) {
          if (aseq_35846) {
            cljs.pprint.write_out.call(null, cljs.core.first.call(null, aseq_35846));
            if (cljs.core.next.call(null, aseq_35846)) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__35847 = length_count35842_35845 + 1;
              var G__35848 = cljs.core.next.call(null, aseq_35846);
              length_count35842_35845 = G__35847;
              aseq_35846 = G__35848;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35841_35844;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35840_35843;
    }
  }
  return null;
};
cljs.pprint.pprint_array = function() {
  var format_in__35068__auto__ = "~\x3c[~;~@{~w~^, ~:_~}~;]~:\x3e";
  var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
  return function(format_in__35068__auto__, cf__35069__auto__) {
    return function() {
      var G__35849__delegate = function(args__35070__auto__) {
        var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
        return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
      };
      var G__35849 = function(var_args) {
        var args__35070__auto__ = null;
        if (arguments.length > 0) {
          var G__35850__i = 0, G__35850__a = new Array(arguments.length - 0);
          while (G__35850__i < G__35850__a.length) {
            G__35850__a[G__35850__i] = arguments[G__35850__i + 0];
            ++G__35850__i;
          }
          args__35070__auto__ = new cljs.core.IndexedSeq(G__35850__a, 0);
        }
        return G__35849__delegate.call(this, args__35070__auto__);
      };
      G__35849.cljs$lang$maxFixedArity = 0;
      G__35849.cljs$lang$applyTo = function(arglist__35851) {
        var args__35070__auto__ = cljs.core.seq(arglist__35851);
        return G__35849__delegate(args__35070__auto__);
      };
      G__35849.cljs$core$IFn$_invoke$arity$variadic = G__35849__delegate;
      return G__35849;
    }();
  }(format_in__35068__auto__, cf__35069__auto__);
}();
cljs.pprint.pprint_map = function cljs$pprint$pprint_map(amap) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_35857_35862 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_35858_35863 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "{", null, "}");
      var length_count35859_35864 = 0;
      var aseq_35865 = cljs.core.seq.call(null, amap);
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count35859_35864 < cljs.core._STAR_print_length_STAR_) {
          if (aseq_35865) {
            if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
            } else {
              var _STAR_current_level_STAR_35860_35866 = cljs.pprint._STAR_current_level_STAR_;
              var _STAR_current_length_STAR_35861_35867 = cljs.pprint._STAR_current_length_STAR_;
              cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
              cljs.pprint._STAR_current_length_STAR_ = 0;
              try {
                cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, null, null, null);
                cljs.pprint.write_out.call(null, cljs.core.ffirst.call(null, aseq_35865));
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
                cljs.pprint._STAR_current_length_STAR_ = 0;
                cljs.pprint.write_out.call(null, cljs.core.fnext.call(null, cljs.core.first.call(null, aseq_35865)));
                cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
              } finally {
                cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35861_35867;
                cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35860_35866;
              }
            }
            if (cljs.core.next.call(null, aseq_35865)) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, ", ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__35868 = length_count35859_35864 + 1;
              var G__35869 = cljs.core.next.call(null, aseq_35865);
              length_count35859_35864 = G__35868;
              aseq_35865 = G__35869;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35858_35863;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35857_35862;
    }
  }
  return null;
};
cljs.pprint.pprint_simple_default = function cljs$pprint$pprint_simple_default(obj) {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, cljs.core.pr_str.call(null, obj));
};
cljs.pprint.pprint_set = function() {
  var format_in__35068__auto__ = "~\x3c#{~;~@{~w~^ ~:_~}~;}~:\x3e";
  var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
  return function(format_in__35068__auto__, cf__35069__auto__) {
    return function() {
      var G__35870__delegate = function(args__35070__auto__) {
        var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
        return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
      };
      var G__35870 = function(var_args) {
        var args__35070__auto__ = null;
        if (arguments.length > 0) {
          var G__35871__i = 0, G__35871__a = new Array(arguments.length - 0);
          while (G__35871__i < G__35871__a.length) {
            G__35871__a[G__35871__i] = arguments[G__35871__i + 0];
            ++G__35871__i;
          }
          args__35070__auto__ = new cljs.core.IndexedSeq(G__35871__a, 0);
        }
        return G__35870__delegate.call(this, args__35070__auto__);
      };
      G__35870.cljs$lang$maxFixedArity = 0;
      G__35870.cljs$lang$applyTo = function(arglist__35872) {
        var args__35070__auto__ = cljs.core.seq(arglist__35872);
        return G__35870__delegate(args__35070__auto__);
      };
      G__35870.cljs$core$IFn$_invoke$arity$variadic = G__35870__delegate;
      return G__35870;
    }();
  }(format_in__35068__auto__, cf__35069__auto__);
}();
cljs.pprint.type_map = new cljs.core.PersistentArrayMap(null, 2, ["core$future_call", "Future", "core$promise", "Promise"], null);
cljs.pprint.map_ref_type = function cljs$pprint$map_ref_type(name) {
  var or__29600__auto__ = function() {
    var temp__4657__auto__ = cljs.core.re_find.call(null, /^[^$]+\$[^$]+/, name);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var match = temp__4657__auto__;
      return cljs.pprint.type_map.call(null, match);
    } else {
      return null;
    }
  }();
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return name;
  }
};
cljs.pprint.pprint_ideref = function cljs$pprint$pprint_ideref(o) {
  var prefix = [cljs.core.str("#\x3c"), cljs.core.str(cljs.pprint.map_ref_type.call(null, cljs.core.type.call(null, o).name)), cljs.core.str("@"), cljs.core.str(goog.getUid(o)), cljs.core.str(": ")].join("");
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_35877_35881 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_35878_35882 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, prefix, null, "\x3e");
      cljs.pprint.pprint_indent.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), -(cljs.core.count.call(null, prefix) - 2));
      cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
      cljs.pprint.write_out.call(null, function() {
        var and__29588__auto__ = !(o == null) ? o.cljs$lang$protocol_mask$partition1$ & 1 || o.cljs$core$IPending$ ? true : !o.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPending, o) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPending, o);
        if (and__29588__auto__) {
          return !cljs.core._realized_QMARK_.call(null, o);
        } else {
          return and__29588__auto__;
        }
      }() ? new cljs.core.Keyword(null, "not-delivered", "not-delivered", 1599158697) : cljs.core.deref.call(null, o));
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35878_35882;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35877_35881;
    }
  }
  return null;
};
cljs.pprint.pprint_pqueue = function() {
  var format_in__35068__auto__ = "~\x3c\x3c-(~;~@{~w~^ ~_~}~;)-\x3c~:\x3e";
  var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
  return function(format_in__35068__auto__, cf__35069__auto__) {
    return function() {
      var G__35883__delegate = function(args__35070__auto__) {
        var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
        return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
      };
      var G__35883 = function(var_args) {
        var args__35070__auto__ = null;
        if (arguments.length > 0) {
          var G__35884__i = 0, G__35884__a = new Array(arguments.length - 0);
          while (G__35884__i < G__35884__a.length) {
            G__35884__a[G__35884__i] = arguments[G__35884__i + 0];
            ++G__35884__i;
          }
          args__35070__auto__ = new cljs.core.IndexedSeq(G__35884__a, 0);
        }
        return G__35883__delegate.call(this, args__35070__auto__);
      };
      G__35883.cljs$lang$maxFixedArity = 0;
      G__35883.cljs$lang$applyTo = function(arglist__35885) {
        var args__35070__auto__ = cljs.core.seq(arglist__35885);
        return G__35883__delegate(args__35070__auto__);
      };
      G__35883.cljs$core$IFn$_invoke$arity$variadic = G__35883__delegate;
      return G__35883;
    }();
  }(format_in__35068__auto__, cf__35069__auto__);
}();
cljs.pprint.type_dispatcher = function cljs$pprint$type_dispatcher(obj) {
  if (obj instanceof cljs.core.PersistentQueue) {
    return new cljs.core.Keyword(null, "queue", "queue", 1455835879);
  } else {
    if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 32768 || obj.cljs$core$IDeref$ ? true : !obj.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, obj) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, obj)) {
      return new cljs.core.Keyword(null, "deref", "deref", -145586795);
    } else {
      if (obj instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(null, "symbol", "symbol", -1038572696);
      } else {
        if (cljs.core.seq_QMARK_.call(null, obj)) {
          return new cljs.core.Keyword(null, "list", "list", 765357683);
        } else {
          if (cljs.core.map_QMARK_.call(null, obj)) {
            return new cljs.core.Keyword(null, "map", "map", 1371690461);
          } else {
            if (cljs.core.vector_QMARK_.call(null, obj)) {
              return new cljs.core.Keyword(null, "vector", "vector", 1902966158);
            } else {
              if (cljs.core.set_QMARK_.call(null, obj)) {
                return new cljs.core.Keyword(null, "set", "set", 304602554);
              } else {
                if (obj == null) {
                  return null;
                } else {
                  return new cljs.core.Keyword(null, "default", "default", -1987822328);
                }
              }
            }
          }
        }
      }
    }
  }
};
if (typeof cljs.pprint.simple_dispatch !== "undefined") {
} else {
  cljs.pprint.simple_dispatch = function() {
    var method_table__30524__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__30525__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__30526__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__30527__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__30528__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.pprint", "simple-dispatch"), cljs.pprint.type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__30528__auto__, method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__);
  }();
}
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "list", "list", 765357683), cljs.pprint.pprint_list);
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "vector", "vector", 1902966158), cljs.pprint.pprint_vector);
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "map", "map", 1371690461), cljs.pprint.pprint_map);
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "set", "set", 304602554), cljs.pprint.pprint_set);
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, null, function() {
  return cljs.core._write.call(null, cljs.core._STAR_out_STAR_, cljs.core.pr_str.call(null, null));
});
cljs.pprint.use_method.call(null, cljs.pprint.simple_dispatch, new cljs.core.Keyword(null, "default", "default", -1987822328), cljs.pprint.pprint_simple_default);
cljs.pprint.set_pprint_dispatch.call(null, cljs.pprint.simple_dispatch);
cljs.pprint.brackets = function cljs$pprint$brackets(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["[", "]"], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(", ")"], null);
  }
};
cljs.pprint.pprint_ns_reference = function cljs$pprint$pprint_ns_reference(reference) {
  if (cljs.core.sequential_QMARK_.call(null, reference)) {
    var vec__35896 = cljs.pprint.brackets.call(null, reference);
    var start = cljs.core.nth.call(null, vec__35896, 0, null);
    var end = cljs.core.nth.call(null, vec__35896, 1, null);
    var vec__35897 = reference;
    var keyw = cljs.core.nth.call(null, vec__35897, 0, null);
    var args = cljs.core.nthnext.call(null, vec__35897, 1);
    if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
    } else {
      var _STAR_current_level_STAR_35898_35904 = cljs.pprint._STAR_current_level_STAR_;
      var _STAR_current_length_STAR_35899_35905 = cljs.pprint._STAR_current_length_STAR_;
      cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
      cljs.pprint._STAR_current_length_STAR_ = 0;
      try {
        cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, start, null, end);
        (function() {
          var format_in__35068__auto__ = "~w~:i";
          var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
          return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args) {
            return function() {
              var G__35906__delegate = function(args__35070__auto__) {
                var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
              };
              var G__35906 = function(var_args) {
                var args__35070__auto__ = null;
                if (arguments.length > 0) {
                  var G__35907__i = 0, G__35907__a = new Array(arguments.length - 0);
                  while (G__35907__i < G__35907__a.length) {
                    G__35907__a[G__35907__i] = arguments[G__35907__i + 0];
                    ++G__35907__i;
                  }
                  args__35070__auto__ = new cljs.core.IndexedSeq(G__35907__a, 0);
                }
                return G__35906__delegate.call(this, args__35070__auto__);
              };
              G__35906.cljs$lang$maxFixedArity = 0;
              G__35906.cljs$lang$applyTo = function(arglist__35908) {
                var args__35070__auto__ = cljs.core.seq(arglist__35908);
                return G__35906__delegate(args__35070__auto__);
              };
              G__35906.cljs$core$IFn$_invoke$arity$variadic = G__35906__delegate;
              return G__35906;
            }();
          }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args);
        })().call(null, keyw);
        var args_35909__$1 = args;
        while (true) {
          if (cljs.core.seq.call(null, args_35909__$1)) {
            (function() {
              var format_in__35068__auto__ = " ";
              var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
              return function(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args) {
                return function() {
                  var G__35910__delegate = function(args__35070__auto__) {
                    var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                    return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                  };
                  var G__35910 = function(var_args) {
                    var args__35070__auto__ = null;
                    if (arguments.length > 0) {
                      var G__35911__i = 0, G__35911__a = new Array(arguments.length - 0);
                      while (G__35911__i < G__35911__a.length) {
                        G__35911__a[G__35911__i] = arguments[G__35911__i + 0];
                        ++G__35911__i;
                      }
                      args__35070__auto__ = new cljs.core.IndexedSeq(G__35911__a, 0);
                    }
                    return G__35910__delegate.call(this, args__35070__auto__);
                  };
                  G__35910.cljs$lang$maxFixedArity = 0;
                  G__35910.cljs$lang$applyTo = function(arglist__35912) {
                    var args__35070__auto__ = cljs.core.seq(arglist__35912);
                    return G__35910__delegate(args__35070__auto__);
                  };
                  G__35910.cljs$core$IFn$_invoke$arity$variadic = G__35910__delegate;
                  return G__35910;
                }();
              }(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args);
            })().call(null);
            var arg_35913 = cljs.core.first.call(null, args_35909__$1);
            if (cljs.core.sequential_QMARK_.call(null, arg_35913)) {
              var vec__35900_35914 = cljs.pprint.brackets.call(null, arg_35913);
              var start_35915__$1 = cljs.core.nth.call(null, vec__35900_35914, 0, null);
              var end_35916__$1 = cljs.core.nth.call(null, vec__35900_35914, 1, null);
              if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
              } else {
                var _STAR_current_level_STAR_35901_35917 = cljs.pprint._STAR_current_level_STAR_;
                var _STAR_current_length_STAR_35902_35918 = cljs.pprint._STAR_current_length_STAR_;
                cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
                cljs.pprint._STAR_current_length_STAR_ = 0;
                try {
                  cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, start_35915__$1, null, end_35916__$1);
                  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, arg_35913), 3) && cljs.core.second.call(null, arg_35913) instanceof cljs.core.Keyword) {
                    var vec__35903_35919 = arg_35913;
                    var ns_35920 = cljs.core.nth.call(null, vec__35903_35919, 0, null);
                    var kw_35921 = cljs.core.nth.call(null, vec__35903_35919, 1, null);
                    var lis_35922 = cljs.core.nth.call(null, vec__35903_35919, 2, null);
                    (function() {
                      var format_in__35068__auto__ = "~w ~w ";
                      var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
                      return function(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, vec__35903_35919, ns_35920, kw_35921, lis_35922, _STAR_current_level_STAR_35901_35917, _STAR_current_length_STAR_35902_35918, vec__35900_35914, start_35915__$1, end_35916__$1, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args) {
                        return function() {
                          var G__35923__delegate = function(args__35070__auto__) {
                            var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                            return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                          };
                          var G__35923 = function(var_args) {
                            var args__35070__auto__ = null;
                            if (arguments.length > 0) {
                              var G__35924__i = 0, G__35924__a = new Array(arguments.length - 0);
                              while (G__35924__i < G__35924__a.length) {
                                G__35924__a[G__35924__i] = arguments[G__35924__i + 0];
                                ++G__35924__i;
                              }
                              args__35070__auto__ = new cljs.core.IndexedSeq(G__35924__a, 0);
                            }
                            return G__35923__delegate.call(this, args__35070__auto__);
                          };
                          G__35923.cljs$lang$maxFixedArity = 0;
                          G__35923.cljs$lang$applyTo = function(arglist__35925) {
                            var args__35070__auto__ = cljs.core.seq(arglist__35925);
                            return G__35923__delegate(args__35070__auto__);
                          };
                          G__35923.cljs$core$IFn$_invoke$arity$variadic = G__35923__delegate;
                          return G__35923;
                        }();
                      }(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, vec__35903_35919, ns_35920, kw_35921, lis_35922, _STAR_current_level_STAR_35901_35917, _STAR_current_length_STAR_35902_35918, vec__35900_35914, start_35915__$1, end_35916__$1, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args);
                    })().call(null, ns_35920, kw_35921);
                    if (cljs.core.sequential_QMARK_.call(null, lis_35922)) {
                      (function() {
                        var format_in__35068__auto__ = cljs.core.vector_QMARK_.call(null, lis_35922) ? "~\x3c[~;~@{~w~^ ~:_~}~;]~:\x3e" : "~\x3c(~;~@{~w~^ ~:_~}~;)~:\x3e";
                        var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
                        return function(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, vec__35903_35919, ns_35920, kw_35921, lis_35922, _STAR_current_level_STAR_35901_35917, _STAR_current_length_STAR_35902_35918, vec__35900_35914, start_35915__$1, end_35916__$1, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args) {
                          return function() {
                            var G__35926__delegate = function(args__35070__auto__) {
                              var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                              return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                            };
                            var G__35926 = function(var_args) {
                              var args__35070__auto__ = null;
                              if (arguments.length > 0) {
                                var G__35927__i = 0, G__35927__a = new Array(arguments.length - 0);
                                while (G__35927__i < G__35927__a.length) {
                                  G__35927__a[G__35927__i] = arguments[G__35927__i + 0];
                                  ++G__35927__i;
                                }
                                args__35070__auto__ = new cljs.core.IndexedSeq(G__35927__a, 0);
                              }
                              return G__35926__delegate.call(this, args__35070__auto__);
                            };
                            G__35926.cljs$lang$maxFixedArity = 0;
                            G__35926.cljs$lang$applyTo = function(arglist__35928) {
                              var args__35070__auto__ = cljs.core.seq(arglist__35928);
                              return G__35926__delegate(args__35070__auto__);
                            };
                            G__35926.cljs$core$IFn$_invoke$arity$variadic = G__35926__delegate;
                            return G__35926;
                          }();
                        }(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, vec__35903_35919, ns_35920, kw_35921, lis_35922, _STAR_current_level_STAR_35901_35917, _STAR_current_length_STAR_35902_35918, vec__35900_35914, start_35915__$1, end_35916__$1, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args);
                      })().call(null, lis_35922);
                    } else {
                      cljs.pprint.write_out.call(null, lis_35922);
                    }
                  } else {
                    cljs.core.apply.call(null, function() {
                      var format_in__35068__auto__ = "~w ~:i~@{~w~^ ~:_~}";
                      var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
                      return function(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35901_35917, _STAR_current_length_STAR_35902_35918, vec__35900_35914, start_35915__$1, end_35916__$1, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args) {
                        return function() {
                          var G__35929__delegate = function(args__35070__auto__) {
                            var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                            return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                          };
                          var G__35929 = function(var_args) {
                            var args__35070__auto__ = null;
                            if (arguments.length > 0) {
                              var G__35930__i = 0, G__35930__a = new Array(arguments.length - 0);
                              while (G__35930__i < G__35930__a.length) {
                                G__35930__a[G__35930__i] = arguments[G__35930__i + 0];
                                ++G__35930__i;
                              }
                              args__35070__auto__ = new cljs.core.IndexedSeq(G__35930__a, 0);
                            }
                            return G__35929__delegate.call(this, args__35070__auto__);
                          };
                          G__35929.cljs$lang$maxFixedArity = 0;
                          G__35929.cljs$lang$applyTo = function(arglist__35931) {
                            var args__35070__auto__ = cljs.core.seq(arglist__35931);
                            return G__35929__delegate(args__35070__auto__);
                          };
                          G__35929.cljs$core$IFn$_invoke$arity$variadic = G__35929__delegate;
                          return G__35929;
                        }();
                      }(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35901_35917, _STAR_current_length_STAR_35902_35918, vec__35900_35914, start_35915__$1, end_35916__$1, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args);
                    }(), arg_35913);
                  }
                  cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
                } finally {
                  cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35902_35918;
                  cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35901_35917;
                }
              }
              if (cljs.core.next.call(null, args_35909__$1)) {
                (function() {
                  var format_in__35068__auto__ = "~_";
                  var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
                  return function(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, vec__35900_35914, start_35915__$1, end_35916__$1, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args) {
                    return function() {
                      var G__35932__delegate = function(args__35070__auto__) {
                        var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                        return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                      };
                      var G__35932 = function(var_args) {
                        var args__35070__auto__ = null;
                        if (arguments.length > 0) {
                          var G__35933__i = 0, G__35933__a = new Array(arguments.length - 0);
                          while (G__35933__i < G__35933__a.length) {
                            G__35933__a[G__35933__i] = arguments[G__35933__i + 0];
                            ++G__35933__i;
                          }
                          args__35070__auto__ = new cljs.core.IndexedSeq(G__35933__a, 0);
                        }
                        return G__35932__delegate.call(this, args__35070__auto__);
                      };
                      G__35932.cljs$lang$maxFixedArity = 0;
                      G__35932.cljs$lang$applyTo = function(arglist__35934) {
                        var args__35070__auto__ = cljs.core.seq(arglist__35934);
                        return G__35932__delegate(args__35070__auto__);
                      };
                      G__35932.cljs$core$IFn$_invoke$arity$variadic = G__35932__delegate;
                      return G__35932;
                    }();
                  }(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, vec__35900_35914, start_35915__$1, end_35916__$1, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args);
                })().call(null);
              } else {
              }
            } else {
              cljs.pprint.write_out.call(null, arg_35913);
              if (cljs.core.next.call(null, args_35909__$1)) {
                (function() {
                  var format_in__35068__auto__ = "~:_";
                  var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
                  return function(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args) {
                    return function() {
                      var G__35935__delegate = function(args__35070__auto__) {
                        var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                        return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                      };
                      var G__35935 = function(var_args) {
                        var args__35070__auto__ = null;
                        if (arguments.length > 0) {
                          var G__35936__i = 0, G__35936__a = new Array(arguments.length - 0);
                          while (G__35936__i < G__35936__a.length) {
                            G__35936__a[G__35936__i] = arguments[G__35936__i + 0];
                            ++G__35936__i;
                          }
                          args__35070__auto__ = new cljs.core.IndexedSeq(G__35936__a, 0);
                        }
                        return G__35935__delegate.call(this, args__35070__auto__);
                      };
                      G__35935.cljs$lang$maxFixedArity = 0;
                      G__35935.cljs$lang$applyTo = function(arglist__35937) {
                        var args__35070__auto__ = cljs.core.seq(arglist__35937);
                        return G__35935__delegate(args__35070__auto__);
                      };
                      G__35935.cljs$core$IFn$_invoke$arity$variadic = G__35935__delegate;
                      return G__35935;
                    }();
                  }(args_35909__$1, format_in__35068__auto__, cf__35069__auto__, arg_35913, _STAR_current_level_STAR_35898_35904, _STAR_current_length_STAR_35899_35905, vec__35896, start, end, vec__35897, keyw, args);
                })().call(null);
              } else {
              }
            }
            var G__35938 = cljs.core.next.call(null, args_35909__$1);
            args_35909__$1 = G__35938;
            continue;
          } else {
          }
          break;
        }
        cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
      } finally {
        cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35899_35905;
        cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35898_35904;
      }
    }
    return null;
  } else {
    return cljs.pprint.write_out.call(null, reference);
  }
};
cljs.pprint.pprint_ns = function cljs$pprint$pprint_ns(alis) {
  if (cljs.core.next.call(null, alis)) {
    var vec__35944 = alis;
    var ns_sym = cljs.core.nth.call(null, vec__35944, 0, null);
    var ns_name = cljs.core.nth.call(null, vec__35944, 1, null);
    var stuff = cljs.core.nthnext.call(null, vec__35944, 2);
    var vec__35945 = typeof cljs.core.first.call(null, stuff) === "string" ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, stuff), cljs.core.next.call(null, stuff)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, stuff], null);
    var doc_str = cljs.core.nth.call(null, vec__35945, 0, null);
    var stuff__$1 = cljs.core.nth.call(null, vec__35945, 1, null);
    var vec__35946 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, stuff__$1)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, stuff__$1), cljs.core.next.call(null, stuff__$1)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, stuff__$1], null);
    var attr_map = cljs.core.nth.call(null, vec__35946, 0, null);
    var references = cljs.core.nth.call(null, vec__35946, 1, null);
    if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
    } else {
      var _STAR_current_level_STAR_35947_35949 = cljs.pprint._STAR_current_level_STAR_;
      var _STAR_current_length_STAR_35948_35950 = cljs.pprint._STAR_current_length_STAR_;
      cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
      cljs.pprint._STAR_current_length_STAR_ = 0;
      try {
        cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
        (function() {
          var format_in__35068__auto__ = "~w ~1I~@_~w";
          var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
          return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35947_35949, _STAR_current_length_STAR_35948_35950, vec__35944, ns_sym, ns_name, stuff, vec__35945, doc_str, stuff__$1, vec__35946, attr_map, references) {
            return function() {
              var G__35951__delegate = function(args__35070__auto__) {
                var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
              };
              var G__35951 = function(var_args) {
                var args__35070__auto__ = null;
                if (arguments.length > 0) {
                  var G__35952__i = 0, G__35952__a = new Array(arguments.length - 0);
                  while (G__35952__i < G__35952__a.length) {
                    G__35952__a[G__35952__i] = arguments[G__35952__i + 0];
                    ++G__35952__i;
                  }
                  args__35070__auto__ = new cljs.core.IndexedSeq(G__35952__a, 0);
                }
                return G__35951__delegate.call(this, args__35070__auto__);
              };
              G__35951.cljs$lang$maxFixedArity = 0;
              G__35951.cljs$lang$applyTo = function(arglist__35953) {
                var args__35070__auto__ = cljs.core.seq(arglist__35953);
                return G__35951__delegate(args__35070__auto__);
              };
              G__35951.cljs$core$IFn$_invoke$arity$variadic = G__35951__delegate;
              return G__35951;
            }();
          }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35947_35949, _STAR_current_length_STAR_35948_35950, vec__35944, ns_sym, ns_name, stuff, vec__35945, doc_str, stuff__$1, vec__35946, attr_map, references);
        })().call(null, ns_sym, ns_name);
        if (cljs.core.truth_(function() {
          var or__29600__auto__ = doc_str;
          if (cljs.core.truth_(or__29600__auto__)) {
            return or__29600__auto__;
          } else {
            var or__29600__auto____$1 = attr_map;
            if (cljs.core.truth_(or__29600__auto____$1)) {
              return or__29600__auto____$1;
            } else {
              return cljs.core.seq.call(null, references);
            }
          }
        }())) {
          (function() {
            var format_in__35068__auto__ = "~@:_";
            var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
            return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35947_35949, _STAR_current_length_STAR_35948_35950, vec__35944, ns_sym, ns_name, stuff, vec__35945, doc_str, stuff__$1, vec__35946, attr_map, references) {
              return function() {
                var G__35954__delegate = function(args__35070__auto__) {
                  var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                  return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                };
                var G__35954 = function(var_args) {
                  var args__35070__auto__ = null;
                  if (arguments.length > 0) {
                    var G__35955__i = 0, G__35955__a = new Array(arguments.length - 0);
                    while (G__35955__i < G__35955__a.length) {
                      G__35955__a[G__35955__i] = arguments[G__35955__i + 0];
                      ++G__35955__i;
                    }
                    args__35070__auto__ = new cljs.core.IndexedSeq(G__35955__a, 0);
                  }
                  return G__35954__delegate.call(this, args__35070__auto__);
                };
                G__35954.cljs$lang$maxFixedArity = 0;
                G__35954.cljs$lang$applyTo = function(arglist__35956) {
                  var args__35070__auto__ = cljs.core.seq(arglist__35956);
                  return G__35954__delegate(args__35070__auto__);
                };
                G__35954.cljs$core$IFn$_invoke$arity$variadic = G__35954__delegate;
                return G__35954;
              }();
            }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35947_35949, _STAR_current_length_STAR_35948_35950, vec__35944, ns_sym, ns_name, stuff, vec__35945, doc_str, stuff__$1, vec__35946, attr_map, references);
          })().call(null);
        } else {
        }
        if (cljs.core.truth_(doc_str)) {
          cljs.pprint.cl_format.call(null, true, '"~a"~:[~;~:@_~]', doc_str, function() {
            var or__29600__auto__ = attr_map;
            if (cljs.core.truth_(or__29600__auto__)) {
              return or__29600__auto__;
            } else {
              return cljs.core.seq.call(null, references);
            }
          }());
        } else {
        }
        if (cljs.core.truth_(attr_map)) {
          (function() {
            var format_in__35068__auto__ = "~w~:[~;~:@_~]";
            var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
            return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35947_35949, _STAR_current_length_STAR_35948_35950, vec__35944, ns_sym, ns_name, stuff, vec__35945, doc_str, stuff__$1, vec__35946, attr_map, references) {
              return function() {
                var G__35957__delegate = function(args__35070__auto__) {
                  var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                  return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                };
                var G__35957 = function(var_args) {
                  var args__35070__auto__ = null;
                  if (arguments.length > 0) {
                    var G__35958__i = 0, G__35958__a = new Array(arguments.length - 0);
                    while (G__35958__i < G__35958__a.length) {
                      G__35958__a[G__35958__i] = arguments[G__35958__i + 0];
                      ++G__35958__i;
                    }
                    args__35070__auto__ = new cljs.core.IndexedSeq(G__35958__a, 0);
                  }
                  return G__35957__delegate.call(this, args__35070__auto__);
                };
                G__35957.cljs$lang$maxFixedArity = 0;
                G__35957.cljs$lang$applyTo = function(arglist__35959) {
                  var args__35070__auto__ = cljs.core.seq(arglist__35959);
                  return G__35957__delegate(args__35070__auto__);
                };
                G__35957.cljs$core$IFn$_invoke$arity$variadic = G__35957__delegate;
                return G__35957;
              }();
            }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35947_35949, _STAR_current_length_STAR_35948_35950, vec__35944, ns_sym, ns_name, stuff, vec__35945, doc_str, stuff__$1, vec__35946, attr_map, references);
          })().call(null, attr_map, cljs.core.seq.call(null, references));
        } else {
        }
        var references_35960__$1 = references;
        while (true) {
          cljs.pprint.pprint_ns_reference.call(null, cljs.core.first.call(null, references_35960__$1));
          var temp__4657__auto___35961 = cljs.core.next.call(null, references_35960__$1);
          if (temp__4657__auto___35961) {
            var references_35962__$2 = temp__4657__auto___35961;
            cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
            var G__35963 = references_35962__$2;
            references_35960__$1 = G__35963;
            continue;
          } else {
          }
          break;
        }
        cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
      } finally {
        cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35948_35950;
        cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35947_35949;
      }
    }
    return null;
  } else {
    return cljs.pprint.write_out.call(null, alis);
  }
};
cljs.pprint.pprint_hold_first = function() {
  var format_in__35068__auto__ = "~:\x3c~w~^ ~@_~w~^ ~_~@{~w~^ ~_~}~:\x3e";
  var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
  return function(format_in__35068__auto__, cf__35069__auto__) {
    return function() {
      var G__35964__delegate = function(args__35070__auto__) {
        var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
        return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
      };
      var G__35964 = function(var_args) {
        var args__35070__auto__ = null;
        if (arguments.length > 0) {
          var G__35965__i = 0, G__35965__a = new Array(arguments.length - 0);
          while (G__35965__i < G__35965__a.length) {
            G__35965__a[G__35965__i] = arguments[G__35965__i + 0];
            ++G__35965__i;
          }
          args__35070__auto__ = new cljs.core.IndexedSeq(G__35965__a, 0);
        }
        return G__35964__delegate.call(this, args__35070__auto__);
      };
      G__35964.cljs$lang$maxFixedArity = 0;
      G__35964.cljs$lang$applyTo = function(arglist__35966) {
        var args__35070__auto__ = cljs.core.seq(arglist__35966);
        return G__35964__delegate(args__35070__auto__);
      };
      G__35964.cljs$core$IFn$_invoke$arity$variadic = G__35964__delegate;
      return G__35964;
    }();
  }(format_in__35068__auto__, cf__35069__auto__);
}();
cljs.pprint.single_defn = function cljs$pprint$single_defn(alis, has_doc_str_QMARK_) {
  if (cljs.core.seq.call(null, alis)) {
    if (cljs.core.truth_(has_doc_str_QMARK_)) {
      (function() {
        var format_in__35068__auto__ = " ~_";
        var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
        return function(format_in__35068__auto__, cf__35069__auto__) {
          return function() {
            var G__35967__delegate = function(args__35070__auto__) {
              var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
              return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
            };
            var G__35967 = function(var_args) {
              var args__35070__auto__ = null;
              if (arguments.length > 0) {
                var G__35968__i = 0, G__35968__a = new Array(arguments.length - 0);
                while (G__35968__i < G__35968__a.length) {
                  G__35968__a[G__35968__i] = arguments[G__35968__i + 0];
                  ++G__35968__i;
                }
                args__35070__auto__ = new cljs.core.IndexedSeq(G__35968__a, 0);
              }
              return G__35967__delegate.call(this, args__35070__auto__);
            };
            G__35967.cljs$lang$maxFixedArity = 0;
            G__35967.cljs$lang$applyTo = function(arglist__35969) {
              var args__35070__auto__ = cljs.core.seq(arglist__35969);
              return G__35967__delegate(args__35070__auto__);
            };
            G__35967.cljs$core$IFn$_invoke$arity$variadic = G__35967__delegate;
            return G__35967;
          }();
        }(format_in__35068__auto__, cf__35069__auto__);
      })().call(null);
    } else {
      (function() {
        var format_in__35068__auto__ = " ~@_";
        var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
        return function(format_in__35068__auto__, cf__35069__auto__) {
          return function() {
            var G__35970__delegate = function(args__35070__auto__) {
              var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
              return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
            };
            var G__35970 = function(var_args) {
              var args__35070__auto__ = null;
              if (arguments.length > 0) {
                var G__35971__i = 0, G__35971__a = new Array(arguments.length - 0);
                while (G__35971__i < G__35971__a.length) {
                  G__35971__a[G__35971__i] = arguments[G__35971__i + 0];
                  ++G__35971__i;
                }
                args__35070__auto__ = new cljs.core.IndexedSeq(G__35971__a, 0);
              }
              return G__35970__delegate.call(this, args__35070__auto__);
            };
            G__35970.cljs$lang$maxFixedArity = 0;
            G__35970.cljs$lang$applyTo = function(arglist__35972) {
              var args__35070__auto__ = cljs.core.seq(arglist__35972);
              return G__35970__delegate(args__35070__auto__);
            };
            G__35970.cljs$core$IFn$_invoke$arity$variadic = G__35970__delegate;
            return G__35970;
          }();
        }(format_in__35068__auto__, cf__35069__auto__);
      })().call(null);
    }
    return function() {
      var format_in__35068__auto__ = "~{~w~^ ~_~}";
      var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
      return function(format_in__35068__auto__, cf__35069__auto__) {
        return function() {
          var G__35973__delegate = function(args__35070__auto__) {
            var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
            return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
          };
          var G__35973 = function(var_args) {
            var args__35070__auto__ = null;
            if (arguments.length > 0) {
              var G__35974__i = 0, G__35974__a = new Array(arguments.length - 0);
              while (G__35974__i < G__35974__a.length) {
                G__35974__a[G__35974__i] = arguments[G__35974__i + 0];
                ++G__35974__i;
              }
              args__35070__auto__ = new cljs.core.IndexedSeq(G__35974__a, 0);
            }
            return G__35973__delegate.call(this, args__35070__auto__);
          };
          G__35973.cljs$lang$maxFixedArity = 0;
          G__35973.cljs$lang$applyTo = function(arglist__35975) {
            var args__35070__auto__ = cljs.core.seq(arglist__35975);
            return G__35973__delegate(args__35070__auto__);
          };
          G__35973.cljs$core$IFn$_invoke$arity$variadic = G__35973__delegate;
          return G__35973;
        }();
      }(format_in__35068__auto__, cf__35069__auto__);
    }().call(null, alis);
  } else {
    return null;
  }
};
cljs.pprint.multi_defn = function cljs$pprint$multi_defn(alis, has_doc_str_QMARK_) {
  if (cljs.core.seq.call(null, alis)) {
    return function() {
      var format_in__35068__auto__ = " ~_~{~w~^ ~_~}";
      var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
      return function(format_in__35068__auto__, cf__35069__auto__) {
        return function() {
          var G__35976__delegate = function(args__35070__auto__) {
            var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
            return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
          };
          var G__35976 = function(var_args) {
            var args__35070__auto__ = null;
            if (arguments.length > 0) {
              var G__35977__i = 0, G__35977__a = new Array(arguments.length - 0);
              while (G__35977__i < G__35977__a.length) {
                G__35977__a[G__35977__i] = arguments[G__35977__i + 0];
                ++G__35977__i;
              }
              args__35070__auto__ = new cljs.core.IndexedSeq(G__35977__a, 0);
            }
            return G__35976__delegate.call(this, args__35070__auto__);
          };
          G__35976.cljs$lang$maxFixedArity = 0;
          G__35976.cljs$lang$applyTo = function(arglist__35978) {
            var args__35070__auto__ = cljs.core.seq(arglist__35978);
            return G__35976__delegate(args__35070__auto__);
          };
          G__35976.cljs$core$IFn$_invoke$arity$variadic = G__35976__delegate;
          return G__35976;
        }();
      }(format_in__35068__auto__, cf__35069__auto__);
    }().call(null, alis);
  } else {
    return null;
  }
};
cljs.pprint.pprint_defn = function cljs$pprint$pprint_defn(alis) {
  if (cljs.core.next.call(null, alis)) {
    var vec__35984 = alis;
    var defn_sym = cljs.core.nth.call(null, vec__35984, 0, null);
    var defn_name = cljs.core.nth.call(null, vec__35984, 1, null);
    var stuff = cljs.core.nthnext.call(null, vec__35984, 2);
    var vec__35985 = typeof cljs.core.first.call(null, stuff) === "string" ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, stuff), cljs.core.next.call(null, stuff)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, stuff], null);
    var doc_str = cljs.core.nth.call(null, vec__35985, 0, null);
    var stuff__$1 = cljs.core.nth.call(null, vec__35985, 1, null);
    var vec__35986 = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, stuff__$1)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, stuff__$1), cljs.core.next.call(null, stuff__$1)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, stuff__$1], null);
    var attr_map = cljs.core.nth.call(null, vec__35986, 0, null);
    var stuff__$2 = cljs.core.nth.call(null, vec__35986, 1, null);
    if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
    } else {
      var _STAR_current_level_STAR_35987_35989 = cljs.pprint._STAR_current_level_STAR_;
      var _STAR_current_length_STAR_35988_35990 = cljs.pprint._STAR_current_length_STAR_;
      cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
      cljs.pprint._STAR_current_length_STAR_ = 0;
      try {
        cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
        (function() {
          var format_in__35068__auto__ = "~w ~1I~@_~w";
          var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
          return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35987_35989, _STAR_current_length_STAR_35988_35990, vec__35984, defn_sym, defn_name, stuff, vec__35985, doc_str, stuff__$1, vec__35986, attr_map, stuff__$2) {
            return function() {
              var G__35991__delegate = function(args__35070__auto__) {
                var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
              };
              var G__35991 = function(var_args) {
                var args__35070__auto__ = null;
                if (arguments.length > 0) {
                  var G__35992__i = 0, G__35992__a = new Array(arguments.length - 0);
                  while (G__35992__i < G__35992__a.length) {
                    G__35992__a[G__35992__i] = arguments[G__35992__i + 0];
                    ++G__35992__i;
                  }
                  args__35070__auto__ = new cljs.core.IndexedSeq(G__35992__a, 0);
                }
                return G__35991__delegate.call(this, args__35070__auto__);
              };
              G__35991.cljs$lang$maxFixedArity = 0;
              G__35991.cljs$lang$applyTo = function(arglist__35993) {
                var args__35070__auto__ = cljs.core.seq(arglist__35993);
                return G__35991__delegate(args__35070__auto__);
              };
              G__35991.cljs$core$IFn$_invoke$arity$variadic = G__35991__delegate;
              return G__35991;
            }();
          }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35987_35989, _STAR_current_length_STAR_35988_35990, vec__35984, defn_sym, defn_name, stuff, vec__35985, doc_str, stuff__$1, vec__35986, attr_map, stuff__$2);
        })().call(null, defn_sym, defn_name);
        if (cljs.core.truth_(doc_str)) {
          (function() {
            var format_in__35068__auto__ = " ~_~w";
            var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
            return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35987_35989, _STAR_current_length_STAR_35988_35990, vec__35984, defn_sym, defn_name, stuff, vec__35985, doc_str, stuff__$1, vec__35986, attr_map, stuff__$2) {
              return function() {
                var G__35994__delegate = function(args__35070__auto__) {
                  var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                  return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                };
                var G__35994 = function(var_args) {
                  var args__35070__auto__ = null;
                  if (arguments.length > 0) {
                    var G__35995__i = 0, G__35995__a = new Array(arguments.length - 0);
                    while (G__35995__i < G__35995__a.length) {
                      G__35995__a[G__35995__i] = arguments[G__35995__i + 0];
                      ++G__35995__i;
                    }
                    args__35070__auto__ = new cljs.core.IndexedSeq(G__35995__a, 0);
                  }
                  return G__35994__delegate.call(this, args__35070__auto__);
                };
                G__35994.cljs$lang$maxFixedArity = 0;
                G__35994.cljs$lang$applyTo = function(arglist__35996) {
                  var args__35070__auto__ = cljs.core.seq(arglist__35996);
                  return G__35994__delegate(args__35070__auto__);
                };
                G__35994.cljs$core$IFn$_invoke$arity$variadic = G__35994__delegate;
                return G__35994;
              }();
            }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35987_35989, _STAR_current_length_STAR_35988_35990, vec__35984, defn_sym, defn_name, stuff, vec__35985, doc_str, stuff__$1, vec__35986, attr_map, stuff__$2);
          })().call(null, doc_str);
        } else {
        }
        if (cljs.core.truth_(attr_map)) {
          (function() {
            var format_in__35068__auto__ = " ~_~w";
            var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
            return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35987_35989, _STAR_current_length_STAR_35988_35990, vec__35984, defn_sym, defn_name, stuff, vec__35985, doc_str, stuff__$1, vec__35986, attr_map, stuff__$2) {
              return function() {
                var G__35997__delegate = function(args__35070__auto__) {
                  var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                  return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
                };
                var G__35997 = function(var_args) {
                  var args__35070__auto__ = null;
                  if (arguments.length > 0) {
                    var G__35998__i = 0, G__35998__a = new Array(arguments.length - 0);
                    while (G__35998__i < G__35998__a.length) {
                      G__35998__a[G__35998__i] = arguments[G__35998__i + 0];
                      ++G__35998__i;
                    }
                    args__35070__auto__ = new cljs.core.IndexedSeq(G__35998__a, 0);
                  }
                  return G__35997__delegate.call(this, args__35070__auto__);
                };
                G__35997.cljs$lang$maxFixedArity = 0;
                G__35997.cljs$lang$applyTo = function(arglist__35999) {
                  var args__35070__auto__ = cljs.core.seq(arglist__35999);
                  return G__35997__delegate(args__35070__auto__);
                };
                G__35997.cljs$core$IFn$_invoke$arity$variadic = G__35997__delegate;
                return G__35997;
              }();
            }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_35987_35989, _STAR_current_length_STAR_35988_35990, vec__35984, defn_sym, defn_name, stuff, vec__35985, doc_str, stuff__$1, vec__35986, attr_map, stuff__$2);
          })().call(null, attr_map);
        } else {
        }
        if (cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, stuff__$2))) {
          cljs.pprint.single_defn.call(null, stuff__$2, function() {
            var or__29600__auto__ = doc_str;
            if (cljs.core.truth_(or__29600__auto__)) {
              return or__29600__auto__;
            } else {
              return attr_map;
            }
          }());
        } else {
          cljs.pprint.multi_defn.call(null, stuff__$2, function() {
            var or__29600__auto__ = doc_str;
            if (cljs.core.truth_(or__29600__auto__)) {
              return or__29600__auto__;
            } else {
              return attr_map;
            }
          }());
        }
        cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
      } finally {
        cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_35988_35990;
        cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_35987_35989;
      }
    }
    return null;
  } else {
    return cljs.pprint.pprint_simple_code_list.call(null, alis);
  }
};
cljs.pprint.pprint_binding_form = function cljs$pprint$pprint_binding_form(binding_vec) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_36005_36010 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_36006_36011 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "[", null, "]");
      var length_count36007_36012 = 0;
      var binding_36013 = binding_vec;
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count36007_36012 < cljs.core._STAR_print_length_STAR_) {
          if (cljs.core.seq.call(null, binding_36013)) {
            if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
            } else {
              var _STAR_current_level_STAR_36008_36014 = cljs.pprint._STAR_current_level_STAR_;
              var _STAR_current_length_STAR_36009_36015 = cljs.pprint._STAR_current_length_STAR_;
              cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
              cljs.pprint._STAR_current_length_STAR_ = 0;
              try {
                cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, null, null, null);
                cljs.pprint.write_out.call(null, cljs.core.first.call(null, binding_36013));
                if (cljs.core.next.call(null, binding_36013)) {
                  cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                  cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "miser", "miser", -556060186));
                  cljs.pprint.write_out.call(null, cljs.core.second.call(null, binding_36013));
                } else {
                }
                cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
              } finally {
                cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_36009_36015;
                cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_36008_36014;
              }
            }
            if (cljs.core.next.call(null, cljs.core.rest.call(null, binding_36013))) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__36016 = length_count36007_36012 + 1;
              var G__36017 = cljs.core.next.call(null, cljs.core.rest.call(null, binding_36013));
              length_count36007_36012 = G__36016;
              binding_36013 = G__36017;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_36006_36011;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_36005_36010;
    }
  }
  return null;
};
cljs.pprint.pprint_let = function cljs$pprint$pprint_let(alis) {
  var base_sym = cljs.core.first.call(null, alis);
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_36020_36022 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_36021_36023 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
      if (cljs.core.next.call(null, alis) && cljs.core.vector_QMARK_.call(null, cljs.core.second.call(null, alis))) {
        (function() {
          var format_in__35068__auto__ = "~w ~1I~@_";
          var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
          return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_36020_36022, _STAR_current_length_STAR_36021_36023, base_sym) {
            return function() {
              var G__36024__delegate = function(args__35070__auto__) {
                var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
              };
              var G__36024 = function(var_args) {
                var args__35070__auto__ = null;
                if (arguments.length > 0) {
                  var G__36025__i = 0, G__36025__a = new Array(arguments.length - 0);
                  while (G__36025__i < G__36025__a.length) {
                    G__36025__a[G__36025__i] = arguments[G__36025__i + 0];
                    ++G__36025__i;
                  }
                  args__35070__auto__ = new cljs.core.IndexedSeq(G__36025__a, 0);
                }
                return G__36024__delegate.call(this, args__35070__auto__);
              };
              G__36024.cljs$lang$maxFixedArity = 0;
              G__36024.cljs$lang$applyTo = function(arglist__36026) {
                var args__35070__auto__ = cljs.core.seq(arglist__36026);
                return G__36024__delegate(args__35070__auto__);
              };
              G__36024.cljs$core$IFn$_invoke$arity$variadic = G__36024__delegate;
              return G__36024;
            }();
          }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_36020_36022, _STAR_current_length_STAR_36021_36023, base_sym);
        })().call(null, base_sym);
        cljs.pprint.pprint_binding_form.call(null, cljs.core.second.call(null, alis));
        (function() {
          var format_in__35068__auto__ = " ~_~{~w~^ ~_~}";
          var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
          return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_36020_36022, _STAR_current_length_STAR_36021_36023, base_sym) {
            return function() {
              var G__36027__delegate = function(args__35070__auto__) {
                var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
              };
              var G__36027 = function(var_args) {
                var args__35070__auto__ = null;
                if (arguments.length > 0) {
                  var G__36028__i = 0, G__36028__a = new Array(arguments.length - 0);
                  while (G__36028__i < G__36028__a.length) {
                    G__36028__a[G__36028__i] = arguments[G__36028__i + 0];
                    ++G__36028__i;
                  }
                  args__35070__auto__ = new cljs.core.IndexedSeq(G__36028__a, 0);
                }
                return G__36027__delegate.call(this, args__35070__auto__);
              };
              G__36027.cljs$lang$maxFixedArity = 0;
              G__36027.cljs$lang$applyTo = function(arglist__36029) {
                var args__35070__auto__ = cljs.core.seq(arglist__36029);
                return G__36027__delegate(args__35070__auto__);
              };
              G__36027.cljs$core$IFn$_invoke$arity$variadic = G__36027__delegate;
              return G__36027;
            }();
          }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_36020_36022, _STAR_current_length_STAR_36021_36023, base_sym);
        })().call(null, cljs.core.next.call(null, cljs.core.rest.call(null, alis)));
      } else {
        cljs.pprint.pprint_simple_code_list.call(null, alis);
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_36021_36023;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_36020_36022;
    }
  }
  return null;
};
cljs.pprint.pprint_if = function() {
  var format_in__35068__auto__ = "~:\x3c~1I~w~^ ~@_~w~@{ ~_~w~}~:\x3e";
  var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
  return function(format_in__35068__auto__, cf__35069__auto__) {
    return function() {
      var G__36030__delegate = function(args__35070__auto__) {
        var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
        return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
      };
      var G__36030 = function(var_args) {
        var args__35070__auto__ = null;
        if (arguments.length > 0) {
          var G__36031__i = 0, G__36031__a = new Array(arguments.length - 0);
          while (G__36031__i < G__36031__a.length) {
            G__36031__a[G__36031__i] = arguments[G__36031__i + 0];
            ++G__36031__i;
          }
          args__35070__auto__ = new cljs.core.IndexedSeq(G__36031__a, 0);
        }
        return G__36030__delegate.call(this, args__35070__auto__);
      };
      G__36030.cljs$lang$maxFixedArity = 0;
      G__36030.cljs$lang$applyTo = function(arglist__36032) {
        var args__35070__auto__ = cljs.core.seq(arglist__36032);
        return G__36030__delegate(args__35070__auto__);
      };
      G__36030.cljs$core$IFn$_invoke$arity$variadic = G__36030__delegate;
      return G__36030;
    }();
  }(format_in__35068__auto__, cf__35069__auto__);
}();
cljs.pprint.pprint_cond = function cljs$pprint$pprint_cond(alis) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_36038_36043 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_36039_36044 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
      cljs.pprint.pprint_indent.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), 1);
      cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis));
      if (cljs.core.next.call(null, alis)) {
        cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
        cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
        var length_count36040_36045 = 0;
        var alis_36046__$1 = cljs.core.next.call(null, alis);
        while (true) {
          if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count36040_36045 < cljs.core._STAR_print_length_STAR_) {
            if (alis_36046__$1) {
              if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
              } else {
                var _STAR_current_level_STAR_36041_36047 = cljs.pprint._STAR_current_level_STAR_;
                var _STAR_current_length_STAR_36042_36048 = cljs.pprint._STAR_current_length_STAR_;
                cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
                cljs.pprint._STAR_current_length_STAR_ = 0;
                try {
                  cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, null, null, null);
                  cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis_36046__$1));
                  if (cljs.core.next.call(null, alis_36046__$1)) {
                    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                    cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "miser", "miser", -556060186));
                    cljs.pprint.write_out.call(null, cljs.core.second.call(null, alis_36046__$1));
                  } else {
                  }
                  cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
                } finally {
                  cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_36042_36048;
                  cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_36041_36047;
                }
              }
              if (cljs.core.next.call(null, cljs.core.rest.call(null, alis_36046__$1))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
                var G__36049 = length_count36040_36045 + 1;
                var G__36050 = cljs.core.next.call(null, cljs.core.rest.call(null, alis_36046__$1));
                length_count36040_36045 = G__36049;
                alis_36046__$1 = G__36050;
                continue;
              } else {
              }
            } else {
            }
          } else {
            cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
          }
          break;
        }
      } else {
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_36039_36044;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_36038_36043;
    }
  }
  return null;
};
cljs.pprint.pprint_condp = function cljs$pprint$pprint_condp(alis) {
  if (cljs.core.count.call(null, alis) > 3) {
    if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
      cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
    } else {
      var _STAR_current_level_STAR_36056_36061 = cljs.pprint._STAR_current_level_STAR_;
      var _STAR_current_length_STAR_36057_36062 = cljs.pprint._STAR_current_length_STAR_;
      cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
      cljs.pprint._STAR_current_length_STAR_ = 0;
      try {
        cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
        cljs.pprint.pprint_indent.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), 1);
        cljs.core.apply.call(null, function() {
          var format_in__35068__auto__ = "~w ~@_~w ~@_~w ~_";
          var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
          return function(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_36056_36061, _STAR_current_length_STAR_36057_36062) {
            return function() {
              var G__36063__delegate = function(args__35070__auto__) {
                var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
                return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
              };
              var G__36063 = function(var_args) {
                var args__35070__auto__ = null;
                if (arguments.length > 0) {
                  var G__36064__i = 0, G__36064__a = new Array(arguments.length - 0);
                  while (G__36064__i < G__36064__a.length) {
                    G__36064__a[G__36064__i] = arguments[G__36064__i + 0];
                    ++G__36064__i;
                  }
                  args__35070__auto__ = new cljs.core.IndexedSeq(G__36064__a, 0);
                }
                return G__36063__delegate.call(this, args__35070__auto__);
              };
              G__36063.cljs$lang$maxFixedArity = 0;
              G__36063.cljs$lang$applyTo = function(arglist__36065) {
                var args__35070__auto__ = cljs.core.seq(arglist__36065);
                return G__36063__delegate(args__35070__auto__);
              };
              G__36063.cljs$core$IFn$_invoke$arity$variadic = G__36063__delegate;
              return G__36063;
            }();
          }(format_in__35068__auto__, cf__35069__auto__, _STAR_current_level_STAR_36056_36061, _STAR_current_length_STAR_36057_36062);
        }(), alis);
        var length_count36058_36066 = 0;
        var alis_36067__$1 = cljs.core.seq.call(null, cljs.core.drop.call(null, 3, alis));
        while (true) {
          if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count36058_36066 < cljs.core._STAR_print_length_STAR_) {
            if (alis_36067__$1) {
              if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
              } else {
                var _STAR_current_level_STAR_36059_36068 = cljs.pprint._STAR_current_level_STAR_;
                var _STAR_current_length_STAR_36060_36069 = cljs.pprint._STAR_current_length_STAR_;
                cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
                cljs.pprint._STAR_current_length_STAR_ = 0;
                try {
                  cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, null, null, null);
                  cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis_36067__$1));
                  if (cljs.core.next.call(null, alis_36067__$1)) {
                    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                    cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "miser", "miser", -556060186));
                    cljs.pprint.write_out.call(null, cljs.core.second.call(null, alis_36067__$1));
                  } else {
                  }
                  cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
                } finally {
                  cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_36060_36069;
                  cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_36059_36068;
                }
              }
              if (cljs.core.next.call(null, cljs.core.rest.call(null, alis_36067__$1))) {
                cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
                cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
                var G__36070 = length_count36058_36066 + 1;
                var G__36071 = cljs.core.next.call(null, cljs.core.rest.call(null, alis_36067__$1));
                length_count36058_36066 = G__36070;
                alis_36067__$1 = G__36071;
                continue;
              } else {
              }
            } else {
            }
          } else {
            cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
          }
          break;
        }
        cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
      } finally {
        cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_36057_36062;
        cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_36056_36061;
      }
    }
    return null;
  } else {
    return cljs.pprint.pprint_simple_code_list.call(null, alis);
  }
};
cljs.pprint._STAR_symbol_map_STAR_ = cljs.core.PersistentArrayMap.EMPTY;
cljs.pprint.pprint_anon_func = function cljs$pprint$pprint_anon_func(alis) {
  var args = cljs.core.second.call(null, alis);
  var nlis = cljs.core.first.call(null, cljs.core.rest.call(null, cljs.core.rest.call(null, alis)));
  if (cljs.core.vector_QMARK_.call(null, args)) {
    var _STAR_symbol_map_STAR_36075 = cljs.pprint._STAR_symbol_map_STAR_;
    cljs.pprint._STAR_symbol_map_STAR_ = cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, args)) ? cljs.core.PersistentArrayMap.fromArray([cljs.core.first.call(null, args), "%"], true, false) : cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(_STAR_symbol_map_STAR_36075, args, nlis) {
      return function(p1__36072_SHARP_, p2__36073_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__36072_SHARP_, [cljs.core.str("%"), cljs.core.str(p2__36073_SHARP_)].join("")], null);
      };
    }(_STAR_symbol_map_STAR_36075, args, nlis), args, cljs.core.range.call(null, 1, cljs.core.count.call(null, args) + 1)));
    try {
      return function() {
        var format_in__35068__auto__ = "~\x3c#(~;~@{~w~^ ~_~}~;)~:\x3e";
        var cf__35069__auto__ = typeof format_in__35068__auto__ === "string" ? cljs.pprint.cached_compile.call(null, format_in__35068__auto__) : format_in__35068__auto__;
        return function(format_in__35068__auto__, cf__35069__auto__, _STAR_symbol_map_STAR_36075, args, nlis) {
          return function() {
            var G__36076__delegate = function(args__35070__auto__) {
              var navigator__35071__auto__ = cljs.pprint.init_navigator.call(null, args__35070__auto__);
              return cljs.pprint.execute_format.call(null, cf__35069__auto__, navigator__35071__auto__);
            };
            var G__36076 = function(var_args) {
              var args__35070__auto__ = null;
              if (arguments.length > 0) {
                var G__36077__i = 0, G__36077__a = new Array(arguments.length - 0);
                while (G__36077__i < G__36077__a.length) {
                  G__36077__a[G__36077__i] = arguments[G__36077__i + 0];
                  ++G__36077__i;
                }
                args__35070__auto__ = new cljs.core.IndexedSeq(G__36077__a, 0);
              }
              return G__36076__delegate.call(this, args__35070__auto__);
            };
            G__36076.cljs$lang$maxFixedArity = 0;
            G__36076.cljs$lang$applyTo = function(arglist__36078) {
              var args__35070__auto__ = cljs.core.seq(arglist__36078);
              return G__36076__delegate(args__35070__auto__);
            };
            G__36076.cljs$core$IFn$_invoke$arity$variadic = G__36076__delegate;
            return G__36076;
          }();
        }(format_in__35068__auto__, cf__35069__auto__, _STAR_symbol_map_STAR_36075, args, nlis);
      }().call(null, nlis);
    } finally {
      cljs.pprint._STAR_symbol_map_STAR_ = _STAR_symbol_map_STAR_36075;
    }
  } else {
    return cljs.pprint.pprint_simple_code_list.call(null, alis);
  }
};
cljs.pprint.pprint_simple_code_list = function cljs$pprint$pprint_simple_code_list(alis) {
  if (cljs.core.truth_(cljs.pprint.level_exceeded.call(null))) {
    cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "#");
  } else {
    var _STAR_current_level_STAR_36082_36085 = cljs.pprint._STAR_current_level_STAR_;
    var _STAR_current_length_STAR_36083_36086 = cljs.pprint._STAR_current_length_STAR_;
    cljs.pprint._STAR_current_level_STAR_ = cljs.pprint._STAR_current_level_STAR_ + 1;
    cljs.pprint._STAR_current_length_STAR_ = 0;
    try {
      cljs.pprint.start_block.call(null, cljs.core._STAR_out_STAR_, "(", null, ")");
      cljs.pprint.pprint_indent.call(null, new cljs.core.Keyword(null, "block", "block", 664686210), 1);
      var length_count36084_36087 = 0;
      var alis_36088__$1 = cljs.core.seq.call(null, alis);
      while (true) {
        if (cljs.core.not.call(null, cljs.core._STAR_print_length_STAR_) || length_count36084_36087 < cljs.core._STAR_print_length_STAR_) {
          if (alis_36088__$1) {
            cljs.pprint.write_out.call(null, cljs.core.first.call(null, alis_36088__$1));
            if (cljs.core.next.call(null, alis_36088__$1)) {
              cljs.core._write.call(null, cljs.core._STAR_out_STAR_, " ");
              cljs.pprint.pprint_newline.call(null, new cljs.core.Keyword(null, "linear", "linear", 872268697));
              var G__36089 = length_count36084_36087 + 1;
              var G__36090 = cljs.core.next.call(null, alis_36088__$1);
              length_count36084_36087 = G__36089;
              alis_36088__$1 = G__36090;
              continue;
            } else {
            }
          } else {
          }
        } else {
          cljs.core._write.call(null, cljs.core._STAR_out_STAR_, "...");
        }
        break;
      }
      cljs.pprint.end_block.call(null, cljs.core._STAR_out_STAR_);
    } finally {
      cljs.pprint._STAR_current_length_STAR_ = _STAR_current_length_STAR_36083_36086;
      cljs.pprint._STAR_current_level_STAR_ = _STAR_current_level_STAR_36082_36085;
    }
  }
  return null;
};
cljs.pprint.two_forms = function cljs$pprint$two_forms(amap) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.mapcat.call(null, cljs.core.identity, function() {
    var iter__30380__auto__ = function cljs$pprint$two_forms_$_iter__36095(s__36096) {
      return new cljs.core.LazySeq(null, function() {
        var s__36096__$1 = s__36096;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__36096__$1);
          if (temp__4657__auto__) {
            var s__36096__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__36096__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__36096__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__36098 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__36097 = 0;
                while (true) {
                  if (i__36097 < size__30379__auto__) {
                    var x = cljs.core._nth.call(null, c__30378__auto__, i__36097);
                    cljs.core.chunk_append.call(null, b__36098, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, cljs.core.name.call(null, cljs.core.first.call(null, x))), cljs.core.second.call(null, x)], null)], null));
                    var G__36099 = i__36097 + 1;
                    i__36097 = G__36099;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36098), cljs$pprint$two_forms_$_iter__36095.call(null, cljs.core.chunk_rest.call(null, s__36096__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36098), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__36096__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, cljs.core.name.call(null, cljs.core.first.call(null, x))), cljs.core.second.call(null, x)], null)], null), cljs$pprint$two_forms_$_iter__36095.call(null, cljs.core.rest.call(null, s__36096__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, amap);
  }()));
};
cljs.pprint.add_core_ns = function cljs$pprint$add_core_ns(amap) {
  var core = "clojure.core";
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(core) {
    return function(p1__36100_SHARP_) {
      var vec__36102 = p1__36100_SHARP_;
      var s = cljs.core.nth.call(null, vec__36102, 0, null);
      var f = cljs.core.nth.call(null, vec__36102, 1, null);
      if (cljs.core.not.call(null, function() {
        var or__29600__auto__ = cljs.core.namespace.call(null, s);
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.special_symbol_QMARK_.call(null, s);
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, core, cljs.core.name.call(null, s)), f], null);
      } else {
        return p1__36100_SHARP_;
      }
    };
  }(core), amap));
};
cljs.pprint._STAR_code_table_STAR_ = cljs.pprint.two_forms.call(null, cljs.pprint.add_core_ns.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null, ".", ".", 1975675962, null), new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), new cljs.core.Symbol(null, "when-first", "when-first", 821699168, null), new cljs.core.Symbol(null, "if", "if", 1181717262, null), new cljs.core.Symbol(null, "condp", "condp", 1054325175, null), new cljs.core.Symbol(null, "..", "..", -300507420, 
null), new cljs.core.Symbol(null, "defmacro", "defmacro", 2054157304, null), new cljs.core.Symbol(null, "defn", "defn", -126010802, null), new cljs.core.Symbol(null, "loop", "loop", 1244978678, null), new cljs.core.Symbol(null, "struct", "struct", 325972931, null), new cljs.core.Symbol(null, "doseq", "doseq", 221164135, null), new cljs.core.Symbol(null, "if-not", "if-not", -265415609, null), new cljs.core.Symbol(null, "when-not", "when-not", -1223136340, null), new cljs.core.Symbol(null, "def", "def", 
597100991, null), new cljs.core.Symbol(null, "when", "when", 1064114221, null), new cljs.core.Symbol(null, "with-open", "with-open", 172119667, null), new cljs.core.Symbol(null, "with-local-vars", "with-local-vars", 837642072, null), new cljs.core.Symbol(null, "defonce", "defonce", -1681484013, null), new cljs.core.Symbol(null, "when-let", "when-let", -1383043480, null), new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "dotimes", "dotimes", -818708397, null), new cljs.core.Symbol(null, 
"cond", "cond", 1606708055, null), new cljs.core.Symbol(null, "let", "let", 358118826, null), new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.Symbol(null, "defn-", "defn-", 1097765044, null), new cljs.core.Symbol(null, "locking", "locking", 1542862874, null), new cljs.core.Symbol(null, "-\x3e", "-\x3e", -2139605430, null), new cljs.core.Symbol(null, "if-let", "if-let", 1803593690, null), new cljs.core.Symbol(null, "binding", "binding", -2114503176, null), new cljs.core.Symbol(null, 
"struct-map", "struct-map", -1387540878, null)], [cljs.pprint.pprint_hold_first, cljs.pprint.pprint_anon_func, cljs.pprint.pprint_let, cljs.pprint.pprint_if, cljs.pprint.pprint_condp, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_defn, cljs.pprint.pprint_defn, cljs.pprint.pprint_let, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_let, cljs.pprint.pprint_if, cljs.pprint.pprint_if, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_if, cljs.pprint.pprint_let, cljs.pprint.pprint_let, cljs.pprint.pprint_hold_first, 
cljs.pprint.pprint_let, cljs.pprint.pprint_ns, cljs.pprint.pprint_let, cljs.pprint.pprint_cond, cljs.pprint.pprint_let, cljs.pprint.pprint_defn, cljs.pprint.pprint_defn, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_hold_first, cljs.pprint.pprint_let, cljs.pprint.pprint_let, cljs.pprint.pprint_hold_first])));
cljs.pprint.pprint_code_list = function cljs$pprint$pprint_code_list(alis) {
  if (cljs.core.not.call(null, cljs.pprint.pprint_reader_macro.call(null, alis))) {
    var temp__4655__auto__ = cljs.pprint._STAR_code_table_STAR_.call(null, cljs.core.first.call(null, alis));
    if (cljs.core.truth_(temp__4655__auto__)) {
      var special_form = temp__4655__auto__;
      return special_form.call(null, alis);
    } else {
      return cljs.pprint.pprint_simple_code_list.call(null, alis);
    }
  } else {
    return null;
  }
};
cljs.pprint.pprint_code_symbol = function cljs$pprint$pprint_code_symbol(sym) {
  var temp__4655__auto__ = sym.call(null, cljs.pprint._STAR_symbol_map_STAR_);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var arg_num = temp__4655__auto__;
    return cljs.pprint.print.call(null, arg_num);
  } else {
    if (cljs.core.truth_(cljs.pprint._STAR_print_suppress_namespaces_STAR_)) {
      return cljs.pprint.print.call(null, cljs.core.name.call(null, sym));
    } else {
      return cljs.pprint.pr.call(null, sym);
    }
  }
};
if (typeof cljs.pprint.code_dispatch !== "undefined") {
} else {
  cljs.pprint.code_dispatch = function() {
    var method_table__30524__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__30525__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__30526__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__30527__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__30528__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.pprint", "code-dispatch"), cljs.pprint.type_dispatcher, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__30528__auto__, method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__);
  }();
}
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "list", "list", 765357683), cljs.pprint.pprint_code_list);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "symbol", "symbol", -1038572696), cljs.pprint.pprint_code_symbol);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "vector", "vector", 1902966158), cljs.pprint.pprint_vector);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "map", "map", 1371690461), cljs.pprint.pprint_map);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "set", "set", 304602554), cljs.pprint.pprint_set);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "queue", "queue", 1455835879), cljs.pprint.pprint_pqueue);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "deref", "deref", -145586795), cljs.pprint.pprint_ideref);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, null, cljs.pprint.pr);
cljs.pprint.use_method.call(null, cljs.pprint.code_dispatch, new cljs.core.Keyword(null, "default", "default", -1987822328), cljs.pprint.pprint_simple_default);
cljs.pprint.set_pprint_dispatch.call(null, cljs.pprint.simple_dispatch);
cljs.pprint.add_padding = function cljs$pprint$add_padding(width, s) {
  var padding = function() {
    var x__29931__auto__ = 0;
    var y__29932__auto__ = width - cljs.core.count.call(null, s);
    return x__29931__auto__ > y__29932__auto__ ? x__29931__auto__ : y__29932__auto__;
  }();
  return cljs.core.apply.call(null, cljs.core.str, clojure.string.join.call(null, cljs.core.repeat.call(null, padding, " ")), s);
};
cljs.pprint.print_table = function cljs$pprint$print_table(var_args) {
  var args36106 = [];
  var len__30669__auto___36122 = arguments.length;
  var i__30670__auto___36123 = 0;
  while (true) {
    if (i__30670__auto___36123 < len__30669__auto___36122) {
      args36106.push(arguments[i__30670__auto___36123]);
      var G__36124 = i__30670__auto___36123 + 1;
      i__30670__auto___36123 = G__36124;
      continue;
    } else {
    }
    break;
  }
  var G__36108 = args36106.length;
  switch(G__36108) {
    case 2:
      return cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36106.length)].join(""));;
  }
};
cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$2 = function(ks, rows) {
  var _STAR_print_newline_STAR_36109 = cljs.core._STAR_print_newline_STAR_;
  try {
    if (cljs.core.seq.call(null, rows)) {
      var widths = cljs.core.map.call(null, function(_STAR_print_newline_STAR_36109) {
        return function(k) {
          return cljs.core.apply.call(null, cljs.core.max, cljs.core.count.call(null, [cljs.core.str(k)].join("")), cljs.core.map.call(null, function(_STAR_print_newline_STAR_36109) {
            return function(p1__36103_SHARP_) {
              return cljs.core.count.call(null, [cljs.core.str(cljs.core.get.call(null, p1__36103_SHARP_, k))].join(""));
            };
          }(_STAR_print_newline_STAR_36109), rows));
        };
      }(_STAR_print_newline_STAR_36109), ks);
      var spacers = cljs.core.map.call(null, function(widths, _STAR_print_newline_STAR_36109) {
        return function(p1__36104_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.str, cljs.core.repeat.call(null, p1__36104_SHARP_, "-"));
        };
      }(widths, _STAR_print_newline_STAR_36109), widths);
      var fmt_row = function(widths, spacers, _STAR_print_newline_STAR_36109) {
        return function(leader, divider, trailer, row) {
          return [cljs.core.str(leader), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, divider, function() {
            var iter__30380__auto__ = function(widths, spacers, _STAR_print_newline_STAR_36109) {
              return function cljs$pprint$iter__36110(s__36111) {
                return new cljs.core.LazySeq(null, function(widths, spacers, _STAR_print_newline_STAR_36109) {
                  return function() {
                    var s__36111__$1 = s__36111;
                    while (true) {
                      var temp__4657__auto__ = cljs.core.seq.call(null, s__36111__$1);
                      if (temp__4657__auto__) {
                        var s__36111__$2 = temp__4657__auto__;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__36111__$2)) {
                          var c__30378__auto__ = cljs.core.chunk_first.call(null, s__36111__$2);
                          var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
                          var b__36113 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
                          if (function() {
                            var i__36112 = 0;
                            while (true) {
                              if (i__36112 < size__30379__auto__) {
                                var vec__36116 = cljs.core._nth.call(null, c__30378__auto__, i__36112);
                                var col = cljs.core.nth.call(null, vec__36116, 0, null);
                                var width = cljs.core.nth.call(null, vec__36116, 1, null);
                                cljs.core.chunk_append.call(null, b__36113, cljs.pprint.add_padding.call(null, width, [cljs.core.str(col)].join("")));
                                var G__36126 = i__36112 + 1;
                                i__36112 = G__36126;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36113), cljs$pprint$iter__36110.call(null, cljs.core.chunk_rest.call(null, s__36111__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36113), null);
                          }
                        } else {
                          var vec__36117 = cljs.core.first.call(null, s__36111__$2);
                          var col = cljs.core.nth.call(null, vec__36117, 0, null);
                          var width = cljs.core.nth.call(null, vec__36117, 1, null);
                          return cljs.core.cons.call(null, cljs.pprint.add_padding.call(null, width, [cljs.core.str(col)].join("")), cljs$pprint$iter__36110.call(null, cljs.core.rest.call(null, s__36111__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(widths, spacers, _STAR_print_newline_STAR_36109), null, null);
              };
            }(widths, spacers, _STAR_print_newline_STAR_36109);
            return iter__30380__auto__.call(null, cljs.core.map.call(null, cljs.core.vector, cljs.core.map.call(null, function(iter__30380__auto__, widths, spacers, _STAR_print_newline_STAR_36109) {
              return function(p1__36105_SHARP_) {
                return cljs.core.get.call(null, row, p1__36105_SHARP_);
              };
            }(iter__30380__auto__, widths, spacers, _STAR_print_newline_STAR_36109), ks), widths));
          }()))), cljs.core.str(trailer)].join("");
        };
      }(widths, spacers, _STAR_print_newline_STAR_36109);
      cljs.core.println.call(null);
      cljs.core.println.call(null, fmt_row.call(null, "| ", " | ", " |", cljs.core.zipmap.call(null, ks, ks)));
      cljs.core.println.call(null, fmt_row.call(null, "|-", "-+-", "-|", cljs.core.zipmap.call(null, ks, spacers)));
      var seq__36118 = cljs.core.seq.call(null, rows);
      var chunk__36119 = null;
      var count__36120 = 0;
      var i__36121 = 0;
      while (true) {
        if (i__36121 < count__36120) {
          var row = cljs.core._nth.call(null, chunk__36119, i__36121);
          cljs.core.println.call(null, fmt_row.call(null, "| ", " | ", " |", row));
          var G__36127 = seq__36118;
          var G__36128 = chunk__36119;
          var G__36129 = count__36120;
          var G__36130 = i__36121 + 1;
          seq__36118 = G__36127;
          chunk__36119 = G__36128;
          count__36120 = G__36129;
          i__36121 = G__36130;
          continue;
        } else {
          var temp__4657__auto__ = cljs.core.seq.call(null, seq__36118);
          if (temp__4657__auto__) {
            var seq__36118__$1 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__36118__$1)) {
              var c__30411__auto__ = cljs.core.chunk_first.call(null, seq__36118__$1);
              var G__36131 = cljs.core.chunk_rest.call(null, seq__36118__$1);
              var G__36132 = c__30411__auto__;
              var G__36133 = cljs.core.count.call(null, c__30411__auto__);
              var G__36134 = 0;
              seq__36118 = G__36131;
              chunk__36119 = G__36132;
              count__36120 = G__36133;
              i__36121 = G__36134;
              continue;
            } else {
              var row = cljs.core.first.call(null, seq__36118__$1);
              cljs.core.println.call(null, fmt_row.call(null, "| ", " | ", " |", row));
              var G__36135 = cljs.core.next.call(null, seq__36118__$1);
              var G__36136 = null;
              var G__36137 = 0;
              var G__36138 = 0;
              seq__36118 = G__36135;
              chunk__36119 = G__36136;
              count__36120 = G__36137;
              i__36121 = G__36138;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_36109;
  }
};
cljs.pprint.print_table.cljs$core$IFn$_invoke$arity$1 = function(rows) {
  return cljs.pprint.print_table.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, rows)), rows);
};
cljs.pprint.print_table.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("cljs.pprint");
cljs.test.empty_env = function cljs$test$empty_env(var_args) {
  var args36307 = [];
  var len__30669__auto___36311 = arguments.length;
  var i__30670__auto___36312 = 0;
  while (true) {
    if (i__30670__auto___36312 < len__30669__auto___36311) {
      args36307.push(arguments[i__30670__auto___36312]);
      var G__36313 = i__30670__auto___36312 + 1;
      i__30670__auto___36312 = G__36313;
      continue;
    } else {
    }
    break;
  }
  var G__36309 = args36307.length;
  switch(G__36309) {
    case 0:
      return cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.test.empty_env.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36307.length)].join(""));;
  }
};
cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.test.empty_env.call(null, new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322));
};
cljs.test.empty_env.cljs$core$IFn$_invoke$arity$1 = function(reporter) {
  var G__36310 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 577538877), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0], null), new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150), 
  cljs.core.List.EMPTY, new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523), cljs.core.List.EMPTY, new cljs.core.Keyword(null, "formatter", "formatter", -483008823), cljs.core.pr_str, new cljs.core.Keyword(null, "reporter", "reporter", -805360621), reporter], null);
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs.test", "pprint", "cljs.test/pprint", 1627393641), reporter)) {
    return cljs.core.assoc.call(null, G__36310, new cljs.core.Keyword(null, "reporter", "reporter", -805360621), new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "formatter", "formatter", -483008823), cljs.pprint.pprint);
  } else {
    return G__36310;
  }
};
cljs.test.empty_env.cljs$lang$maxFixedArity = 1;
cljs.test._STAR_current_env_STAR_ = null;
cljs.test.get_current_env = function cljs$test$get_current_env() {
  var or__29600__auto__ = cljs.test._STAR_current_env_STAR_;
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return cljs.test.empty_env.call(null);
  }
};
cljs.test.update_current_env_BANG_ = function cljs$test$update_current_env_BANG_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___36318 = arguments.length;
  var i__30670__auto___36319 = 0;
  while (true) {
    if (i__30670__auto___36319 < len__30669__auto___36318) {
      args__30676__auto__.push(arguments[i__30670__auto___36319]);
      var G__36320 = i__30670__auto___36319 + 1;
      i__30670__auto___36319 = G__36320;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 2 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(2), 0, null) : null;
  return cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30677__auto__);
};
cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ks, f, args) {
  return cljs.test._STAR_current_env_STAR_ = cljs.core.apply.call(null, cljs.core.update_in, cljs.test.get_current_env.call(null), ks, f, args);
};
cljs.test.update_current_env_BANG_.cljs$lang$maxFixedArity = 2;
cljs.test.update_current_env_BANG_.cljs$lang$applyTo = function(seq36315) {
  var G__36316 = cljs.core.first.call(null, seq36315);
  var seq36315__$1 = cljs.core.next.call(null, seq36315);
  var G__36317 = cljs.core.first.call(null, seq36315__$1);
  var seq36315__$2 = cljs.core.next.call(null, seq36315__$1);
  return cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__36316, G__36317, seq36315__$2);
};
cljs.test.set_env_BANG_ = function cljs$test$set_env_BANG_(new_env) {
  return cljs.test._STAR_current_env_STAR_ = new_env;
};
cljs.test.clear_env_BANG_ = function cljs$test$clear_env_BANG_() {
  return cljs.test._STAR_current_env_STAR_ = null;
};
cljs.test.get_and_clear_env_BANG_ = function cljs$test$get_and_clear_env_BANG_() {
  var env = cljs.test.get_current_env.call(null);
  cljs.test.clear_env_BANG_.call(null);
  return env;
};
cljs.test.testing_vars_str = function cljs$test$testing_vars_str(m) {
  var map__36324 = m;
  var map__36324__$1 = (!(map__36324 == null) ? map__36324.cljs$lang$protocol_mask$partition0$ & 64 || map__36324.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36324) : map__36324;
  var file = cljs.core.get.call(null, map__36324__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  var line = cljs.core.get.call(null, map__36324__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  var column = cljs.core.get.call(null, map__36324__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
  return [cljs.core.str(cljs.core.reverse.call(null, cljs.core.map.call(null, function(map__36324, map__36324__$1, file, line, column) {
    return function(p1__36321_SHARP_) {
      return (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__36321_SHARP_));
    };
  }(map__36324, map__36324__$1, file, line, column), (new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null))))), cljs.core.str(" ("), cljs.core.str(file), cljs.core.str(":"), cljs.core.str(line), cljs.core.str(cljs.core.truth_(column) ? [cljs.core.str(":"), cljs.core.str(column)].join("") : null), cljs.core.str(")")].join("");
};
cljs.test.testing_contexts_str = function cljs$test$testing_contexts_str() {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))));
};
cljs.test.inc_report_counter_BANG_ = function cljs$test$inc_report_counter_BANG_(name) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    return cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
  } else {
    return null;
  }
};
if (typeof cljs.test.report !== "undefined") {
} else {
  cljs.test.report = function() {
    var method_table__30524__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__30525__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__30526__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__30527__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__30528__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.test", "report"), function(method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__, hierarchy__30528__auto__) {
      return function(m) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "reporter", "reporter", -805360621)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m)], null);
      };
    }(method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__, hierarchy__30528__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__30528__auto__, method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.Keyword(null, "default", "default", -1987822328), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "pass", "pass", 1574159993)], null), function(m) {
  return cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "pass", "pass", 1574159993));
});
cljs.test.print_comparison = function cljs$test$print_comparison(m) {
  var formatter_fn = function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "formatter", "formatter", -483008823)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null));
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cljs.core.pr_str;
    }
  }();
  cljs.core.println.call(null, "expected:", formatter_fn.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(m)));
  return cljs.core.println.call(null, "  actual:", formatter_fn.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m)));
};
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "fail", "fail", 1706214930)], null), function(m) {
  cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  cljs.core.println.call(null, "\nFAIL in", cljs.test.testing_vars_str.call(null, m));
  if (cljs.core.seq.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    cljs.core.println.call(null, cljs.test.testing_contexts_str.call(null));
  } else {
  }
  var temp__4657__auto___36326 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(temp__4657__auto___36326)) {
    var message_36327 = temp__4657__auto___36326;
    cljs.core.println.call(null, message_36327);
  } else {
  }
  return cljs.test.print_comparison.call(null, m);
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "error", "error", -978969032)], null), function(m) {
  cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "error", "error", -978969032));
  cljs.core.println.call(null, "\nERROR in", cljs.test.testing_vars_str.call(null, m));
  if (cljs.core.seq.call(null, (new cljs.core.Keyword(null, "testing-contexts", "testing-contexts", -1485646523)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null)))) {
    cljs.core.println.call(null, cljs.test.testing_contexts_str.call(null));
  } else {
  }
  var temp__4657__auto___36328 = (new cljs.core.Keyword(null, "message", "message", -406056002)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(temp__4657__auto___36328)) {
    var message_36329 = temp__4657__auto___36328;
    cljs.core.println.call(null, message_36329);
  } else {
  }
  return cljs.test.print_comparison.call(null, m);
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "summary", "summary", 380847952)], null), function(m) {
  cljs.core.println.call(null, "\nRan", (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(m), "tests containing", (new cljs.core.Keyword(null, "pass", "pass", 1574159993)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m) + (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m), "assertions.");
  return cljs.core.println.call(null, (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$1(m), "failures,", (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$1(m), "errors.");
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033)], null), function(m) {
  return cljs.core.println.call(null, "\nTesting", cljs.core.name.call(null, (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m)));
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-run-tests", "end-run-tests", 267300563)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-all-vars", "end-test-all-vars", 548827253)], null), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-test-vars", "end-test-vars", -1394419713)], null), function(m) {
  return null;
});
cljs.test.js_line_and_column = function cljs$test$js_line_and_column(stack_element) {
  var parts = stack_element.split(":");
  var cnt = cljs.core.count.call(null, parts);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [parseInt(cljs.core.nth.call(null, parts, cnt - 2), 10), parseInt(cljs.core.nth.call(null, parts, cnt - 1), 10)], null);
};
cljs.test.js_filename = function cljs$test$js_filename(stack_element) {
  return cljs.core.first.call(null, cljs.core.last.call(null, stack_element.split("/out/")).split(":"));
};
cljs.test.mapped_line_and_column = function cljs$test$mapped_line_and_column(filename, line, column) {
  var default$ = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [filename, line, column], null);
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "source-map", "source-map", 1706252311)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env.call(null));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var source_map = temp__4655__auto__;
    var temp__4655__auto____$1 = cljs.core.get_in.call(null, source_map, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [filename, line - 1], null));
    if (cljs.core.truth_(temp__4655__auto____$1)) {
      var columns = temp__4655__auto____$1;
      return cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.first.call(null, function() {
        var temp__4655__auto____$2 = cljs.core.get.call(null, columns, column - 1);
        if (cljs.core.truth_(temp__4655__auto____$2)) {
          var mapping = temp__4655__auto____$2;
          return mapping;
        } else {
          return cljs.core.second.call(null, cljs.core.first.call(null, columns));
        }
      }()), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "source", "source", -433931539), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "col", "col", -1959363084)], null)));
    } else {
      return default$;
    }
  } else {
    return default$;
  }
};
cljs.test.file_and_line = function cljs$test$file_and_line(exception, depth) {
  var temp__4655__auto__ = function() {
    var and__29588__auto__ = typeof exception.stack === "string";
    if (and__29588__auto__) {
      var G__36335 = exception.stack;
      var G__36335__$1 = G__36335 == null ? null : clojure.string.split_lines.call(null, G__36335);
      var G__36335__$2 = G__36335__$1 == null ? null : cljs.core.get.call(null, G__36335__$1, depth);
      if (G__36335__$2 == null) {
        return null;
      } else {
        return clojure.string.trim.call(null, G__36335__$2);
      }
    } else {
      return and__29588__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4655__auto__)) {
    var stack_element = temp__4655__auto__;
    var fname = cljs.test.js_filename.call(null, stack_element);
    var vec__36336 = cljs.test.js_line_and_column.call(null, stack_element);
    var line = cljs.core.nth.call(null, vec__36336, 0, null);
    var column = cljs.core.nth.call(null, vec__36336, 1, null);
    var vec__36337 = cljs.test.mapped_line_and_column.call(null, fname, line, column);
    var fname__$1 = cljs.core.nth.call(null, vec__36337, 0, null);
    var line__$1 = cljs.core.nth.call(null, vec__36337, 1, null);
    var column__$1 = cljs.core.nth.call(null, vec__36337, 2, null);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "file", "file", -1269645878), fname__$1, new cljs.core.Keyword(null, "line", "line", 212345235), line__$1, new cljs.core.Keyword(null, "column", "column", 2078222095), column__$1], null);
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", -1269645878), exception.fileName, new cljs.core.Keyword(null, "line", "line", 212345235), exception.lineNumber], null);
  }
};
cljs.test.do_report = function cljs$test$do_report(m) {
  var m__$1 = function() {
    var G__36339 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(m).fqn : null;
    switch(G__36339) {
      case "fail":
        return cljs.core.merge.call(null, cljs.test.file_and_line.call(null, new Error, 4), m);
        break;
      case "error":
        return cljs.core.merge.call(null, cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(m), 0), m);
        break;
      default:
        return m;
    }
  }();
  return cljs.test.report.call(null, m__$1);
};
cljs.test.IAsyncTest = function() {
};
cljs.test.async_QMARK_ = function cljs$test$async_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$test$IAsyncTest$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.test.IAsyncTest, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.test.IAsyncTest, x);
  }
};
cljs.test.run_block = function cljs$test$run_block(fns) {
  while (true) {
    var temp__4657__auto__ = cljs.core.seq.call(null, fns);
    if (temp__4657__auto__) {
      var xs__5205__auto__ = temp__4657__auto__;
      var f = cljs.core.first.call(null, xs__5205__auto__);
      var obj = f.call(null);
      if (cljs.core.truth_(cljs.test.async_QMARK_.call(null, obj))) {
        return obj.call(null, function() {
          var d = new cljs.core.Delay(function(fns, obj, f, xs__5205__auto__, temp__4657__auto__) {
            return function() {
              return cljs$test$run_block.call(null, cljs.core.rest.call(null, fns));
            };
          }(fns, obj, f, xs__5205__auto__, temp__4657__auto__), null);
          return function(fns, d, obj, f, xs__5205__auto__, temp__4657__auto__) {
            return function() {
              if (cljs.core.realized_QMARK_.call(null, d)) {
                return cljs.core.println.call(null, "WARNING: Async test called done more than one time.");
              } else {
                return cljs.core.deref.call(null, d);
              }
            };
          }(fns, d, obj, f, xs__5205__auto__, temp__4657__auto__);
        }());
      } else {
        var G__36345 = function() {
          var G__36344 = cljs.core.rest.call(null, fns);
          if (cljs.core.truth_((new cljs.core.Keyword("cljs.test", "block?", "cljs.test/block?", 686379965)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, obj)))) {
            return cljs.core.concat.call(null, obj, G__36344);
          } else {
            return G__36344;
          }
        }();
        fns = G__36345;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.test.block = function cljs$test$block(fns) {
  var G__36347 = fns;
  if (G__36347 == null) {
    return null;
  } else {
    return cljs.core.vary_meta.call(null, G__36347, cljs.core.assoc, new cljs.core.Keyword("cljs.test", "block?", "cljs.test/block?", 686379965), true);
  }
};
cljs.test.test_var_block_STAR_ = function cljs$test$test_var_block_STAR_(v, t) {
  if (v instanceof cljs.core.Var) {
  } else {
    throw new Error("Assert failed: (instance? Var v)");
  }
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
    cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)], null), cljs.core.conj, v);
    cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242), new cljs.core.Keyword(null, "test", "test", 577538877)], null), cljs.core.inc);
    cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100), new cljs.core.Keyword(null, "var", "var", -769682797), v], null));
    try {
      return t.call(null);
    } catch (e36350) {
      var e = e36350;
      var G__36351 = e instanceof cljs.core.Keyword ? e.fqn : null;
      switch(G__36351) {
        case "cljs.test/async-disabled":
          throw "Async tests require fixtures to be specified as maps.  Testing aborted.";break;
        default:
          return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "message", "message", -406056002), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 1583670997), null, new cljs.core.Keyword(null, "actual", "actual", 107306363), e], null));
      }
    }
  }, function() {
    cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545), new cljs.core.Keyword(null, "var", "var", -769682797), v], null));
    return cljs.test.update_current_env_BANG_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "testing-vars", "testing-vars", -2114769150)], null), cljs.core.rest);
  }], null);
};
cljs.test.test_var_block = function cljs$test$test_var_block(v) {
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var t = temp__4655__auto__;
    return cljs.test.test_var_block_STAR_.call(null, v, t);
  } else {
    return null;
  }
};
cljs.test.test_var = function cljs$test$test_var(v) {
  return cljs.test.run_block.call(null, cljs.test.test_var_block.call(null, v));
};
cljs.test.default_fixture = function cljs$test$default_fixture(f) {
  return f.call(null);
};
cljs.test.compose_fixtures = function cljs$test$compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cljs.test.join_fixtures = function cljs$test$join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cljs.test.compose_fixtures, cljs.test.default_fixture, fixtures);
};
cljs.test.wrap_map_fixtures = function cljs$test$wrap_map_fixtures(map_fixtures, block) {
  return cljs.core.concat.call(null, cljs.core.keep.call(null, new cljs.core.Keyword(null, "before", "before", -1633692388), map_fixtures), block, cljs.core.reverse.call(null, cljs.core.keep.call(null, new cljs.core.Keyword(null, "after", "after", 594996914), map_fixtures)));
};
cljs.test.execution_strategy = function cljs$test$execution_strategy(once, each) {
  var fixtures_type = function cljs$test$execution_strategy_$_fixtures_type(coll) {
    if (cljs.core.empty_QMARK_.call(null, coll)) {
      return new cljs.core.Keyword(null, "none", "none", 1333468478);
    } else {
      if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, coll)) {
        return new cljs.core.Keyword(null, "map", "map", 1371690461);
      } else {
        if (cljs.core.every_QMARK_.call(null, cljs.core.fn_QMARK_, coll)) {
          return new cljs.core.Keyword(null, "fn", "fn", -1175266204);
        } else {
          return null;
        }
      }
    }
  };
  var fixtures_types = function cljs$test$execution_strategy_$_fixtures_types() {
    return cljs.core.distinct.call(null, cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "none", "none", 1333468478), null], null), null), cljs.core.map.call(null, fixtures_type, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [once, each], null))));
  };
  var vec__36354 = fixtures_types.call(null);
  var type = cljs.core.nth.call(null, vec__36354, 0, null);
  var types = vec__36354;
  if (cljs.core.not_any_QMARK_.call(null, cljs.core.nil_QMARK_, types)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Fixtures may not be of mixed types"), cljs.core.str("\n"), cljs.core.str("(not-any? nil? types)")].join(""));
  }
  if (2 > cljs.core.count.call(null, types)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("fixtures specified in :once and :each must be of the same type"), cljs.core.str("\n"), cljs.core.str("(\x3e 2 (count types))")].join(""));
  }
  return (new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "map", "map", 1371690461), new cljs.core.Keyword(null, "async", "async", 1050769601), new cljs.core.Keyword(null, "fn", "fn", -1175266204), new cljs.core.Keyword(null, "sync", "sync", -624148946)], null)).call(null, type, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.test.disable_async = function cljs$test$disable_async(f) {
  return function() {
    var obj = f.call(null);
    if (cljs.core.truth_(cljs.test.async_QMARK_.call(null, obj))) {
      throw new cljs.core.Keyword("cljs.test", "async-disabled", "cljs.test/async-disabled", -772095377);
    } else {
    }
    return obj;
  };
};
cljs.test.test_vars_block = function cljs$test$test_vars_block(vars) {
  return cljs.core.map.call(null, function(p__36362) {
    var vec__36363 = p__36362;
    var ns = cljs.core.nth.call(null, vec__36363, 0, null);
    var vars__$1 = cljs.core.nth.call(null, vec__36363, 1, null);
    return function(vec__36363, ns, vars__$1) {
      return function() {
        return cljs.test.block.call(null, function() {
          var env = cljs.test.get_current_env.call(null);
          var once_fixtures = cljs.core.get_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "once-fixtures", "once-fixtures", 1253947167), ns], null));
          var each_fixtures = cljs.core.get_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "each-fixtures", "each-fixtures", 802243977), ns], null));
          var G__36364 = cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures) instanceof cljs.core.Keyword ? cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures).fqn : null;
          switch(G__36364) {
            case "async":
              return cljs.test.wrap_map_fixtures.call(null, once_fixtures, cljs.core.mapcat.call(null, cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.test.wrap_map_fixtures, each_fixtures), cljs.test.test_var_block), cljs.core.filter.call(null, cljs.core.comp.call(null, new cljs.core.Keyword(null, "test", "test", 577538877), cljs.core.meta), vars__$1)));
              break;
            case "sync":
              var each_fixture_fn = cljs.test.join_fixtures.call(null, each_fixtures);
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(each_fixture_fn, G__36364, env, once_fixtures, each_fixtures, vec__36363, ns, vars__$1) {
                return function() {
                  return cljs.test.join_fixtures.call(null, once_fixtures).call(null, function(each_fixture_fn, G__36364, env, once_fixtures, each_fixtures, vec__36363, ns, vars__$1) {
                    return function() {
                      var seq__36365 = cljs.core.seq.call(null, vars__$1);
                      var chunk__36366 = null;
                      var count__36367 = 0;
                      var i__36368 = 0;
                      while (true) {
                        if (i__36368 < count__36367) {
                          var v = cljs.core._nth.call(null, chunk__36366, i__36368);
                          var temp__4657__auto___36370 = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
                          if (cljs.core.truth_(temp__4657__auto___36370)) {
                            var t_36371 = temp__4657__auto___36370;
                            each_fixture_fn.call(null, function(seq__36365, chunk__36366, count__36367, i__36368, t_36371, temp__4657__auto___36370, v, each_fixture_fn, G__36364, env, once_fixtures, each_fixtures, vec__36363, ns, vars__$1) {
                              return function() {
                                return cljs.test.run_block.call(null, cljs.test.test_var_block_STAR_.call(null, v, cljs.test.disable_async.call(null, t_36371)));
                              };
                            }(seq__36365, chunk__36366, count__36367, i__36368, t_36371, temp__4657__auto___36370, v, each_fixture_fn, G__36364, env, once_fixtures, each_fixtures, vec__36363, ns, vars__$1));
                          } else {
                          }
                          var G__36372 = seq__36365;
                          var G__36373 = chunk__36366;
                          var G__36374 = count__36367;
                          var G__36375 = i__36368 + 1;
                          seq__36365 = G__36372;
                          chunk__36366 = G__36373;
                          count__36367 = G__36374;
                          i__36368 = G__36375;
                          continue;
                        } else {
                          var temp__4657__auto__ = cljs.core.seq.call(null, seq__36365);
                          if (temp__4657__auto__) {
                            var seq__36365__$1 = temp__4657__auto__;
                            if (cljs.core.chunked_seq_QMARK_.call(null, seq__36365__$1)) {
                              var c__30411__auto__ = cljs.core.chunk_first.call(null, seq__36365__$1);
                              var G__36376 = cljs.core.chunk_rest.call(null, seq__36365__$1);
                              var G__36377 = c__30411__auto__;
                              var G__36378 = cljs.core.count.call(null, c__30411__auto__);
                              var G__36379 = 0;
                              seq__36365 = G__36376;
                              chunk__36366 = G__36377;
                              count__36367 = G__36378;
                              i__36368 = G__36379;
                              continue;
                            } else {
                              var v = cljs.core.first.call(null, seq__36365__$1);
                              var temp__4657__auto___36380__$1 = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
                              if (cljs.core.truth_(temp__4657__auto___36380__$1)) {
                                var t_36381 = temp__4657__auto___36380__$1;
                                each_fixture_fn.call(null, function(seq__36365, chunk__36366, count__36367, i__36368, t_36381, temp__4657__auto___36380__$1, v, seq__36365__$1, temp__4657__auto__, each_fixture_fn, G__36364, env, once_fixtures, each_fixtures, vec__36363, ns, vars__$1) {
                                  return function() {
                                    return cljs.test.run_block.call(null, cljs.test.test_var_block_STAR_.call(null, v, cljs.test.disable_async.call(null, t_36381)));
                                  };
                                }(seq__36365, chunk__36366, count__36367, i__36368, t_36381, temp__4657__auto___36380__$1, v, seq__36365__$1, temp__4657__auto__, each_fixture_fn, G__36364, env, once_fixtures, each_fixtures, vec__36363, ns, vars__$1));
                              } else {
                              }
                              var G__36382 = cljs.core.next.call(null, seq__36365__$1);
                              var G__36383 = null;
                              var G__36384 = 0;
                              var G__36385 = 0;
                              seq__36365 = G__36382;
                              chunk__36366 = G__36383;
                              count__36367 = G__36384;
                              i__36368 = G__36385;
                              continue;
                            }
                          } else {
                            return null;
                          }
                        }
                        break;
                      }
                    };
                  }(each_fixture_fn, G__36364, env, once_fixtures, each_fixtures, vec__36363, ns, vars__$1));
                };
              }(each_fixture_fn, G__36364, env, once_fixtures, each_fixtures, vec__36363, ns, vars__$1)], null);
              break;
            default:
              throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(cljs.test.execution_strategy.call(null, once_fixtures, each_fixtures))].join(""));;
          }
        }());
      };
    }(vec__36363, ns, vars__$1);
  }, cljs.core.group_by.call(null, cljs.core.comp.call(null, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.core.meta), vars));
};
cljs.test.test_vars = function cljs$test$test_vars(vars) {
  return cljs.test.run_block.call(null, cljs.core.concat.call(null, cljs.test.test_vars_block.call(null, vars), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
    return cljs.test.report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-vars", "end-test-vars", -1394419713), new cljs.core.Keyword(null, "vars", "vars", -2046957217), vars], null));
  }], null)));
};
cljs.test.successful_QMARK_ = function cljs$test$successful_QMARK_(summary) {
  return (new cljs.core.Keyword(null, "fail", "fail", 1706214930)).cljs$core$IFn$_invoke$arity$2(summary, 0) === 0 && (new cljs.core.Keyword(null, "error", "error", -978969032)).cljs$core$IFn$_invoke$arity$2(summary, 0) === 0;
};
goog.provide("jx.reporter.karma");
goog.require("cljs.core");
goog.require("cljs.test");
jx.reporter.karma.karma = cljs.core.volatile_BANG_.call(null, null);
jx.reporter.karma.karma_QMARK_ = function jx$reporter$karma$karma_QMARK_() {
  return !(cljs.core.deref.call(null, jx.reporter.karma.karma) == null);
};
jx.reporter.karma.karma_info_BANG_ = function jx$reporter$karma$karma_info_BANG_(m) {
  return cljs.core.deref.call(null, jx.reporter.karma.karma).info(cljs.core.clj__GT_js.call(null, m));
};
jx.reporter.karma.karma_result_BANG_ = function jx$reporter$karma$karma_result_BANG_(m) {
  return cljs.core.deref.call(null, jx.reporter.karma.karma).result(cljs.core.clj__GT_js.call(null, m));
};
jx.reporter.karma.karma_complete_BANG_ = function jx$reporter$karma$karma_complete_BANG_() {
  return cljs.core.deref.call(null, jx.reporter.karma.karma).complete(cljs.core.clj__GT_js.call(null, cljs.core.PersistentArrayMap.EMPTY));
};
jx.reporter.karma.now = function jx$reporter$karma$now() {
  return (new Date).getTime();
};
jx.reporter.karma.test_var_result = cljs.core.volatile_BANG_.call(null, cljs.core.PersistentVector.EMPTY);
jx.reporter.karma.test_var_time_start = cljs.core.volatile_BANG_.call(null, jx.reporter.karma.now.call(null));
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.Keyword(null, "karma", "karma", 1375588493), function(m) {
  return null;
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("jx.reporter.karma", "karma", "jx.reporter.karma/karma", 404831826), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", -908571100)], null), function(m) {
  return cljs.core.vreset_BANG_.call(null, jx.reporter.karma.test_var_result, cljs.core.PersistentVector.EMPTY);
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("jx.reporter.karma", "karma", "jx.reporter.karma/karma", 404831826), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 984198545)], null), function(m) {
  var var_meta = cljs.core.meta.call(null, (new cljs.core.Keyword(null, "var", "var", -769682797)).cljs$core$IFn$_invoke$arity$1(m));
  var result = new cljs.core.PersistentArrayMap(null, 6, ["suite", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(var_meta)], null), "description", (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(var_meta), "success", cljs.core.count.call(null, cljs.core.deref.call(null, jx.reporter.karma.test_var_result)) === 0, "skipped", null, "time", jx.reporter.karma.now.call(null) - 
  cljs.core.deref.call(null, jx.reporter.karma.test_var_time_start), "log", cljs.core.map.call(null, function(var_meta) {
    return function(p1__36388_SHARP_) {
      return [cljs.core.str("Fail "), cljs.core.str(cljs.test.testing_vars_str.call(null, p1__36388_SHARP_)), cljs.core.str("\n"), cljs.core.str("Expected "), cljs.core.str(cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 1583670997)).cljs$core$IFn$_invoke$arity$1(p1__36388_SHARP_))), cljs.core.str("\n"), cljs.core.str("Actual: "), cljs.core.str(cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "actual", "actual", 107306363)).cljs$core$IFn$_invoke$arity$1(p1__36388_SHARP_))), 
      cljs.core.str("\n")].join("");
    };
  }(var_meta), cljs.core.deref.call(null, jx.reporter.karma.test_var_result))], null);
  if (cljs.core.truth_(jx.reporter.karma.karma_QMARK_.call(null))) {
    return jx.reporter.karma.karma_result_BANG_.call(null, result);
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("jx.reporter.karma", "karma", "jx.reporter.karma/karma", 404831826), new cljs.core.Keyword(null, "fail", "fail", 1706214930)], null), function(m) {
  cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "fail", "fail", 1706214930));
  return cljs.core._vreset_BANG_.call(null, jx.reporter.karma.test_var_result, cljs.core.conj.call(null, cljs.core._deref.call(null, jx.reporter.karma.test_var_result), m));
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("jx.reporter.karma", "karma", "jx.reporter.karma/karma", 404831826), new cljs.core.Keyword(null, "error", "error", -978969032)], null), function(m) {
  cljs.test.inc_report_counter_BANG_.call(null, new cljs.core.Keyword(null, "error", "error", -978969032));
  return cljs.core._vreset_BANG_.call(null, jx.reporter.karma.test_var_result, cljs.core.conj.call(null, cljs.core._deref.call(null, jx.reporter.karma.test_var_result), m));
});
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("jx.reporter.karma", "karma", "jx.reporter.karma/karma", 404831826), new cljs.core.Keyword(null, "end-run-tests", "end-run-tests", 267300563)], null), function(m) {
  if (cljs.core.truth_(jx.reporter.karma.karma_QMARK_.call(null))) {
    return jx.reporter.karma.karma_complete_BANG_.call(null);
  } else {
    return null;
  }
});
jx.reporter.karma.start = function jx$reporter$karma$start(tc, total_count) {
  cljs.core.vreset_BANG_.call(null, jx.reporter.karma.karma, tc);
  if (cljs.core.truth_(jx.reporter.karma.karma_QMARK_.call(null))) {
    return jx.reporter.karma.karma_info_BANG_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "total", "total", 1916810418), total_count], null));
  } else {
    return null;
  }
};
goog.provide("doo.runner");
goog.require("cljs.core");
goog.require("cljs.test");
goog.require("goog.object");
goog.require("jx.reporter.karma");
cljs.core.enable_console_print_BANG_.call(null);
doo.runner.set_print_fn_BANG_ = function doo$runner$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
goog.exportSymbol("doo.runner.set_print_fn_BANG_", doo.runner.set_print_fn_BANG_);
doo.runner.node_QMARK_ = function doo$runner$node_QMARK_() {
  return typeof process !== "undefined";
};
doo.runner.karma_QMARK_ = function doo$runner$karma_QMARK_() {
  return typeof window !== "undefined" && typeof goog.object.get(window, "__karma__") !== "undefined" || typeof global !== "undefined" && typeof goog.object.get(global, "__karma__") !== "undefined";
};
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("jx.reporter.karma", "karma", "jx.reporter.karma/karma", 404831826), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033)], null), function(m) {
  return cljs.core.println.call(null, "Testing", cljs.core.name.call(null, (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m)));
});
doo.runner._STAR_exit_fn_STAR_ = null;
doo.runner.set_exit_point_BANG_ = function doo$runner$set_exit_point_BANG_(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
  } else {
    throw new Error("Assert failed: (fn? f)");
  }
  return doo.runner._STAR_exit_fn_STAR_ = f;
};
goog.exportSymbol("doo.runner.set_exit_point_BANG_", doo.runner.set_exit_point_BANG_);
doo.runner.exit_BANG_ = function doo$runner$exit_BANG_(success_QMARK_) {
  if (cljs.core.truth_(doo.runner.node_QMARK_.call(null))) {
    var process_exit = goog.object.get(process, "exit");
    return process_exit.call(null, cljs.core.truth_(success_QMARK_) ? 0 : 1);
  } else {
    try {
      return doo.runner._STAR_exit_fn_STAR_.call(null, success_QMARK_);
    } catch (e36412) {
      var e = e36412;
      cljs.core.println.call(null, "WARNING: doo's exit function was not properly set");
      return cljs.core.println.call(null, e);
    }
  }
};
cljs.core._add_method.call(null, cljs.test.report, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.test", "default", "cljs.test/default", -1581405322), new cljs.core.Keyword(null, "end-run-tests", "end-run-tests", 267300563)], null), function(m) {
  return doo.runner.exit_BANG_.call(null, cljs.test.successful_QMARK_.call(null, m));
});
doo.runner.run_BANG_ = function doo$runner$run_BANG_(a) {
  try {
    return cljs.core._STAR_main_cli_fn_STAR_.call(null, a);
  } catch (e36414) {
    var e = e36414;
    cljs.core.println.call(null, "WARNING: doo's init function was not set");
    cljs.core.println.call(null, e);
    return doo.runner.exit_BANG_.call(null, false);
  }
};
goog.exportSymbol("doo.runner.run_BANG_", doo.runner.run_BANG_);
doo.runner.set_entry_point_BANG_ = function doo$runner$set_entry_point_BANG_(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
  } else {
    throw new Error("Assert failed: (fn? f)");
  }
  return cljs.core._STAR_main_cli_fn_STAR_ = f;
};
goog.provide("reagent.interop");
goog.require("cljs.core");
goog.provide("reagent.debug");
goog.require("cljs.core");
goog.provide("reagent.impl.util");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("clojure.string");
reagent.impl.util.is_client = typeof window !== "undefined" && !(window["document"] == null);
reagent.impl.util.extract_props = function reagent$impl$util$extract_props(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  if (cljs.core.map_QMARK_.call(null, p)) {
    return p;
  } else {
    return null;
  }
};
reagent.impl.util.extract_children = function reagent$impl$util$extract_children(v) {
  var p = cljs.core.nth.call(null, v, 1, null);
  var first_child = p == null || cljs.core.map_QMARK_.call(null, p) ? 2 : 1;
  if (cljs.core.count.call(null, v) > first_child) {
    return cljs.core.subvec.call(null, v, first_child);
  } else {
    return null;
  }
};
reagent.impl.util.get_argv = function reagent$impl$util$get_argv(c) {
  return c["props"]["argv"];
};
reagent.impl.util.get_props = function reagent$impl$util$get_props(c) {
  return reagent.impl.util.extract_props.call(null, c["props"]["argv"]);
};
reagent.impl.util.get_children = function reagent$impl$util$get_children(c) {
  return reagent.impl.util.extract_children.call(null, c["props"]["argv"]);
};
reagent.impl.util.reagent_component_QMARK_ = function reagent$impl$util$reagent_component_QMARK_(c) {
  return !(c["props"]["argv"] == null);
};
reagent.impl.util.cached_react_class = function reagent$impl$util$cached_react_class(c) {
  return c["cljsReactClass"];
};
reagent.impl.util.cache_react_class = function reagent$impl$util$cache_react_class(c, constructor$) {
  return c["cljsReactClass"] = constructor$;
};
reagent.impl.util.memoize_1 = function reagent$impl$util$memoize_1(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function(arg) {
      var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), arg);
      if (!(v == null)) {
        return v;
      } else {
        var ret = f.call(null, arg);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, arg, ret);
        return ret;
      }
    };
  }(mem);
};
reagent.impl.util.dont_camel_case = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["aria", null, "data", null], null), null);
reagent.impl.util.capitalize = function reagent$impl$util$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(cljs.core.subs.call(null, s, 1))].join("");
  }
};
reagent.impl.util.dash_to_camel = function reagent$impl$util$dash_to_camel(dashed) {
  if (typeof dashed === "string") {
    return dashed;
  } else {
    var name_str = cljs.core.name.call(null, dashed);
    var vec__34950 = clojure.string.split.call(null, name_str, /-/);
    var start = cljs.core.nth.call(null, vec__34950, 0, null);
    var parts = cljs.core.nthnext.call(null, vec__34950, 1);
    if (cljs.core.truth_(reagent.impl.util.dont_camel_case.call(null, start))) {
      return name_str;
    } else {
      return cljs.core.apply.call(null, cljs.core.str, start, cljs.core.map.call(null, reagent.impl.util.capitalize, parts));
    }
  }
};
reagent.impl.util.partial_ifn = function(f, args, p) {
  this.f = f;
  this.args = args;
  this.p = p;
  this.cljs$lang$protocol_mask$partition0$ = 6291457;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
reagent.impl.util.partial_ifn.prototype.call = function() {
  var G__34952__delegate = function(self__, a) {
    var self____$1 = this;
    var _ = self____$1;
    var or__29600__auto___34953 = self__.p;
    if (cljs.core.truth_(or__29600__auto___34953)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__34952 = function(self__, var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 1) {
      var G__34954__i = 0, G__34954__a = new Array(arguments.length - 1);
      while (G__34954__i < G__34954__a.length) {
        G__34954__a[G__34954__i] = arguments[G__34954__i + 1];
        ++G__34954__i;
      }
      a = new cljs.core.IndexedSeq(G__34954__a, 0);
    }
    return G__34952__delegate.call(this, self__, a);
  };
  G__34952.cljs$lang$maxFixedArity = 1;
  G__34952.cljs$lang$applyTo = function(arglist__34955) {
    var self__ = cljs.core.first(arglist__34955);
    var a = cljs.core.rest(arglist__34955);
    return G__34952__delegate(self__, a);
  };
  G__34952.cljs$core$IFn$_invoke$arity$variadic = G__34952__delegate;
  return G__34952;
}();
reagent.impl.util.partial_ifn.prototype.apply = function(self__, args34951) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args34951)));
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__34956__delegate = function(a) {
    var _ = this;
    var or__29600__auto___34957 = self__.p;
    if (cljs.core.truth_(or__29600__auto___34957)) {
    } else {
      self__.p = cljs.core.apply.call(null, cljs.core.partial, self__.f, self__.args);
    }
    return cljs.core.apply.call(null, self__.p, a);
  };
  var G__34956 = function(var_args) {
    var self__ = this;
    var a = null;
    if (arguments.length > 0) {
      var G__34958__i = 0, G__34958__a = new Array(arguments.length - 0);
      while (G__34958__i < G__34958__a.length) {
        G__34958__a[G__34958__i] = arguments[G__34958__i + 0];
        ++G__34958__i;
      }
      a = new cljs.core.IndexedSeq(G__34958__a, 0);
    }
    return G__34956__delegate.call(this, a);
  };
  G__34956.cljs$lang$maxFixedArity = 0;
  G__34956.cljs$lang$applyTo = function(arglist__34959) {
    var a = cljs.core.seq(arglist__34959);
    return G__34956__delegate(a);
  };
  G__34956.cljs$core$IFn$_invoke$arity$variadic = G__34956__delegate;
  return G__34956;
}();
reagent.impl.util.partial_ifn.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._EQ_.call(null, self__.f, other.f) && cljs.core._EQ_.call(null, self__.args, other.args);
};
reagent.impl.util.partial_ifn.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.f, self__.args], null));
};
reagent.impl.util.partial_ifn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "args", "args", -1338879193, null), cljs.core.with_meta(new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
reagent.impl.util.partial_ifn.cljs$lang$type = true;
reagent.impl.util.partial_ifn.cljs$lang$ctorStr = "reagent.impl.util/partial-ifn";
reagent.impl.util.partial_ifn.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "reagent.impl.util/partial-ifn");
};
reagent.impl.util.__GT_partial_ifn = function reagent$impl$util$__GT_partial_ifn(f, args, p) {
  return new reagent.impl.util.partial_ifn(f, args, p);
};
reagent.impl.util.merge_class = function reagent$impl$util$merge_class(p1, p2) {
  var class$ = function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var c1 = temp__4657__auto__;
      var temp__4657__auto____$1 = (new cljs.core.Keyword(null, "class", "class", -2030961996)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4657__auto____$1)) {
        var c2 = temp__4657__auto____$1;
        return [cljs.core.str(c1), cljs.core.str(" "), cljs.core.str(c2)].join("");
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (class$ == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "class", "class", -2030961996), class$);
  }
};
reagent.impl.util.merge_style = function reagent$impl$util$merge_style(p1, p2) {
  var style = function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p1);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var s1 = temp__4657__auto__;
      var temp__4657__auto____$1 = (new cljs.core.Keyword(null, "style", "style", -496642736)).cljs$core$IFn$_invoke$arity$1(p2);
      if (cljs.core.truth_(temp__4657__auto____$1)) {
        var s2 = temp__4657__auto____$1;
        return cljs.core.merge.call(null, s1, s2);
      } else {
        return null;
      }
    } else {
      return null;
    }
  }();
  if (style == null) {
    return p2;
  } else {
    return cljs.core.assoc.call(null, p2, new cljs.core.Keyword(null, "style", "style", -496642736), style);
  }
};
reagent.impl.util.merge_props = function reagent$impl$util$merge_props(p1, p2) {
  if (p1 == null) {
    return p2;
  } else {
    if (cljs.core.map_QMARK_.call(null, p1)) {
    } else {
      throw new Error("Assert failed: (map? p1)");
    }
    return reagent.impl.util.merge_style.call(null, p1, reagent.impl.util.merge_class.call(null, p1, cljs.core.merge.call(null, p1, p2)));
  }
};
reagent.impl.util._STAR_always_update_STAR_ = false;
if (typeof reagent.impl.util.roots !== "undefined") {
} else {
  reagent.impl.util.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
}
reagent.impl.util.clear_container = function reagent$impl$util$clear_container(node) {
  var G__34961 = node;
  if (G__34961 == null) {
    return null;
  } else {
    return G__34961["innerHTML"] = "";
  }
};
reagent.impl.util.render_component = function reagent$impl$util$render_component(comp, container, callback) {
  var rendered = cljs.core.volatile_BANG_.call(null, null);
  try {
    var _STAR_always_update_STAR_34964 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return cljs.core.vreset_BANG_.call(null, rendered, React["render"](comp.call(null), container, function(_STAR_always_update_STAR_34964, rendered) {
        return function() {
          var _STAR_always_update_STAR_34965 = reagent.impl.util._STAR_always_update_STAR_;
          reagent.impl.util._STAR_always_update_STAR_ = false;
          try {
            cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.assoc, container, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, container], null));
            if (cljs.core.some_QMARK_.call(null, callback)) {
              return callback.call(null);
            } else {
              return null;
            }
          } finally {
            reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_34965;
          }
        };
      }(_STAR_always_update_STAR_34964, rendered)));
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_34964;
    }
  } finally {
    if (cljs.core.truth_(cljs.core.deref.call(null, rendered))) {
    } else {
      reagent.impl.util.clear_container.call(null, container);
    }
  }
};
reagent.impl.util.re_render_component = function reagent$impl$util$re_render_component(comp, container) {
  return reagent.impl.util.render_component.call(null, comp, container, null);
};
reagent.impl.util.unmount_component_at_node = function reagent$impl$util$unmount_component_at_node(container) {
  cljs.core.swap_BANG_.call(null, reagent.impl.util.roots, cljs.core.dissoc, container);
  return React["unmountComponentAtNode"](container);
};
reagent.impl.util.force_update_all = function reagent$impl$util$force_update_all() {
  var seq__34970_34974 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, reagent.impl.util.roots)));
  var chunk__34971_34975 = null;
  var count__34972_34976 = 0;
  var i__34973_34977 = 0;
  while (true) {
    if (i__34973_34977 < count__34972_34976) {
      var v_34978 = cljs.core._nth.call(null, chunk__34971_34975, i__34973_34977);
      cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_34978);
      var G__34979 = seq__34970_34974;
      var G__34980 = chunk__34971_34975;
      var G__34981 = count__34972_34976;
      var G__34982 = i__34973_34977 + 1;
      seq__34970_34974 = G__34979;
      chunk__34971_34975 = G__34980;
      count__34972_34976 = G__34981;
      i__34973_34977 = G__34982;
      continue;
    } else {
      var temp__4657__auto___34983 = cljs.core.seq.call(null, seq__34970_34974);
      if (temp__4657__auto___34983) {
        var seq__34970_34984__$1 = temp__4657__auto___34983;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__34970_34984__$1)) {
          var c__30411__auto___34985 = cljs.core.chunk_first.call(null, seq__34970_34984__$1);
          var G__34986 = cljs.core.chunk_rest.call(null, seq__34970_34984__$1);
          var G__34987 = c__30411__auto___34985;
          var G__34988 = cljs.core.count.call(null, c__30411__auto___34985);
          var G__34989 = 0;
          seq__34970_34974 = G__34986;
          chunk__34971_34975 = G__34987;
          count__34972_34976 = G__34988;
          i__34973_34977 = G__34989;
          continue;
        } else {
          var v_34990 = cljs.core.first.call(null, seq__34970_34984__$1);
          cljs.core.apply.call(null, reagent.impl.util.re_render_component, v_34990);
          var G__34991 = cljs.core.next.call(null, seq__34970_34984__$1);
          var G__34992 = null;
          var G__34993 = 0;
          var G__34994 = 0;
          seq__34970_34974 = G__34991;
          chunk__34971_34975 = G__34992;
          count__34972_34976 = G__34993;
          i__34973_34977 = G__34994;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return "Updated";
};
reagent.impl.util.force_update = function reagent$impl$util$force_update(comp, deep) {
  if (cljs.core.truth_(deep)) {
    var _STAR_always_update_STAR_34996 = reagent.impl.util._STAR_always_update_STAR_;
    reagent.impl.util._STAR_always_update_STAR_ = true;
    try {
      return comp["forceUpdate"]();
    } finally {
      reagent.impl.util._STAR_always_update_STAR_ = _STAR_always_update_STAR_34996;
    }
  } else {
    return comp["forceUpdate"]();
  }
};
goog.provide("reagent.ratom");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.debug");
if (typeof reagent.ratom.debug !== "undefined") {
} else {
  reagent.ratom.debug = false;
}
if (typeof reagent.ratom._running !== "undefined") {
} else {
  reagent.ratom._running = cljs.core.atom.call(null, 0);
}
reagent.ratom.running = function reagent$ratom$running() {
  return cljs.core.deref.call(null, reagent.ratom._running);
};
reagent.ratom.capture_derefed = function reagent$ratom$capture_derefed(f, obj) {
  obj.cljsCaptured = null;
  var _STAR_ratom_context_STAR_38047 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = obj;
  try {
    return f.call(null);
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_38047;
  }
};
reagent.ratom.captured = function reagent$ratom$captured(obj) {
  var c = obj.cljsCaptured;
  obj.cljsCaptured = null;
  return c;
};
reagent.ratom.notify_deref_watcher_BANG_ = function reagent$ratom$notify_deref_watcher_BANG_(derefable) {
  var obj = reagent.ratom._STAR_ratom_context_STAR_;
  if (obj == null) {
    return null;
  } else {
    var captured = obj.cljsCaptured;
    return obj.cljsCaptured = cljs.core.conj.call(null, captured == null ? cljs.core.PersistentHashSet.EMPTY : captured, derefable);
  }
};
reagent.ratom.IReactiveAtom = function() {
};
reagent.ratom.RAtom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RAtom.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RAtom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RAtom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
reagent.ratom.RAtom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.RAtom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.RAtom.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, new_value) {
  var self__ = this;
  var a__$1 = this;
  if (self__.validator == null) {
  } else {
    if (cljs.core.truth_(self__.validator.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str("(validator new-value)")].join(""));
    }
  }
  var old_value = self__.state;
  self__.state = new_value;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a__$1, old_value, new_value);
  }
  return new_value;
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.RAtom.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.RAtom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.RAtom.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
  return self__.state;
};
reagent.ratom.RAtom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), cljs.core.with_meta(new cljs.core.Symbol(null, "watches", "watches", 1367433992, 
  null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
reagent.ratom.RAtom.cljs$lang$type = true;
reagent.ratom.RAtom.cljs$lang$ctorStr = "reagent.ratom/RAtom";
reagent.ratom.RAtom.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "reagent.ratom/RAtom");
};
reagent.ratom.__GT_RAtom = function reagent$ratom$__GT_RAtom(state, meta, validator, watches) {
  return new reagent.ratom.RAtom(state, meta, validator, watches);
};
reagent.ratom.atom = function reagent$ratom$atom(var_args) {
  var args38048 = [];
  var len__30669__auto___38056 = arguments.length;
  var i__30670__auto___38057 = 0;
  while (true) {
    if (i__30670__auto___38057 < len__30669__auto___38056) {
      args38048.push(arguments[i__30670__auto___38057]);
      var G__38058 = i__30670__auto___38057 + 1;
      i__30670__auto___38057 = G__38058;
      continue;
    } else {
    }
    break;
  }
  var G__38052 = args38048.length;
  switch(G__38052) {
    case 1:
      return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args38048.slice(1), 0, null);
      return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30688__auto__);
  }
};
reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new reagent.ratom.RAtom(x, null, null, null);
};
reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__38053) {
  var map__38054 = p__38053;
  var map__38054__$1 = (!(map__38054 == null) ? map__38054.cljs$lang$protocol_mask$partition0$ & 64 || map__38054.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__38054) : map__38054;
  var meta = cljs.core.get.call(null, map__38054__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.call(null, map__38054__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new reagent.ratom.RAtom(x, meta, validator, null);
};
reagent.ratom.atom.cljs$lang$applyTo = function(seq38049) {
  var G__38050 = cljs.core.first.call(null, seq38049);
  var seq38049__$1 = cljs.core.next.call(null, seq38049);
  return reagent.ratom.atom.cljs$core$IFn$_invoke$arity$variadic(G__38050, seq38049__$1);
};
reagent.ratom.atom.cljs$lang$maxFixedArity = 1;
reagent.ratom.RCursor = function(ratom, path, reaction) {
  this.ratom = ratom;
  this.path = path;
  this.reaction = reaction;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.RCursor.prototype._reaction = function() {
  var self__ = this;
  var this$ = this;
  if (self__.reaction == null) {
    return self__.reaction = (!(self__.ratom == null) ? self__.ratom.cljs$lang$protocol_mask$partition0$ & 32768 || self__.ratom.cljs$core$IDeref$ ? true : !self__.ratom.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, self__.ratom) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, self__.ratom)) ? reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.ratom), self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), cljs.core._EQ_.call(null, self__.path, cljs.core.PersistentVector.EMPTY) ? function(this$) {
      return function(p1__38061_SHARP_, p2__38060_SHARP_) {
        return cljs.core.reset_BANG_.call(null, self__.ratom, p2__38060_SHARP_);
      };
    }(this$) : function(this$) {
      return function(p1__38063_SHARP_, p2__38062_SHARP_) {
        return cljs.core.swap_BANG_.call(null, self__.ratom, cljs.core.assoc_in, self__.path, p2__38062_SHARP_);
      };
    }(this$)) : reagent.ratom.make_reaction.call(null, function(this$) {
      return function() {
        return self__.ratom.call(null, self__.path);
      };
    }(this$), new cljs.core.Keyword(null, "on-set", "on-set", -140953470), function(this$) {
      return function(p1__38065_SHARP_, p2__38064_SHARP_) {
        return self__.ratom.call(null, self__.path, p2__38064_SHARP_);
      };
    }(this$));
  } else {
    return self__.reaction;
  }
};
reagent.ratom.RCursor.prototype._peek = function() {
  var self__ = this;
  var this$ = this;
  var _STAR_ratom_context_STAR_38067 = reagent.ratom._STAR_ratom_context_STAR_;
  reagent.ratom._STAR_ratom_context_STAR_ = null;
  try {
    return cljs.core._deref.call(null, this$._reaction());
  } finally {
    reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_38067;
  }
};
reagent.ratom.RCursor.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.RCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cCursor: "), cljs.core.str(self__.path), cljs.core.str(" ")].join(""));
  cljs.core.pr_writer.call(null, a__$1._peek(), writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.RCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.ratom, self__.path], null));
};
reagent.ratom.RCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return other instanceof reagent.ratom.RCursor && cljs.core._EQ_.call(null, self__.path, other.path) && cljs.core._EQ_.call(null, self__.ratom, other.ratom);
};
reagent.ratom.RCursor.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, new_value) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._reset_BANG_.call(null, this$__$1._reaction(), new_value);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y);
};
reagent.ratom.RCursor.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._swap_BANG_.call(null, a__$1._reaction(), f, x, y, more);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._notify_watches.call(null, this$__$1._reaction(), oldval, newval);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._add_watch.call(null, this$__$1._reaction(), key, f);
};
reagent.ratom.RCursor.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._remove_watch.call(null, this$__$1._reaction(), key);
};
reagent.ratom.RCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._deref.call(null, this$__$1._reaction());
};
reagent.ratom.RCursor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ratom", "ratom", 1514010260, null), new cljs.core.Symbol(null, "path", "path", 1452340359, null), cljs.core.with_meta(new cljs.core.Symbol(null, "reaction", "reaction", 2131401315, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
reagent.ratom.RCursor.cljs$lang$type = true;
reagent.ratom.RCursor.cljs$lang$ctorStr = "reagent.ratom/RCursor";
reagent.ratom.RCursor.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "reagent.ratom/RCursor");
};
reagent.ratom.__GT_RCursor = function reagent$ratom$__GT_RCursor(ratom, path, reaction) {
  return new reagent.ratom.RCursor(ratom, path, reaction);
};
reagent.ratom.cursor = function reagent$ratom$cursor(src, path) {
  if (!(path == null) ? path.cljs$lang$protocol_mask$partition0$ & 32768 || path.cljs$core$IDeref$ ? true : !path.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, path) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, path)) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Calling cursor with an atom as the second arg is "), cljs.core.str("deprecated, in (cursor "), cljs.core.str(src), cljs.core.str(" "), cljs.core.str(cljs.core.pr_str.call(null, path)), cljs.core.str(")")].join(""));
    } else {
    }
    if (!(path == null) ? false || path.reagent$ratom$IReactiveAtom$ ? true : !path.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, path) : false : cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, path)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom, not "), cljs.core.str(cljs.core.pr_str.call(null, path))].join("")), cljs.core.str("\n"), cljs.core.str("(satisfies? IReactiveAtom path)")].join(""));
    }
    return new reagent.ratom.RCursor(path, src, null);
  } else {
    if (function() {
      var or__29600__auto__ = !(src == null) ? false || src.reagent$ratom$IReactiveAtom$ ? true : !src.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, src) : false : cljs.core.native_satisfies_QMARK_.call(null, reagent.ratom.IReactiveAtom, src);
      if (or__29600__auto__) {
        return or__29600__auto__;
      } else {
        return cljs.core.ifn_QMARK_.call(null, src) && !cljs.core.vector_QMARK_.call(null, src);
      }
    }()) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("src must be a reactive atom or a function, not "), cljs.core.str(cljs.core.pr_str.call(null, src))].join("")), cljs.core.str("\n"), cljs.core.str("(or (satisfies? IReactiveAtom src) (and (ifn? src) (not (vector? src))))")].join(""));
    }
    return new reagent.ratom.RCursor(src, path, null);
  }
};
reagent.ratom.IDisposable = function() {
};
reagent.ratom.dispose_BANG_ = function reagent$ratom$dispose_BANG_(this$) {
  if (!(this$ == null) && !(this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1 == null)) {
    return this$.reagent$ratom$IDisposable$dispose_BANG_$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = reagent.ratom.dispose_BANG_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = reagent.ratom.dispose_BANG_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IDisposable.dispose!", this$);
      }
    }
  }
};
reagent.ratom.IRunnable = function() {
};
reagent.ratom.run = function reagent$ratom$run(this$) {
  if (!(this$ == null) && !(this$.reagent$ratom$IRunnable$run$arity$1 == null)) {
    return this$.reagent$ratom$IRunnable$run$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = reagent.ratom.run[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = reagent.ratom.run["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRunnable.run", this$);
      }
    }
  }
};
reagent.ratom.IComputedImpl = function() {
};
reagent.ratom._update_watching = function reagent$ratom$_update_watching(this$, derefed) {
  if (!(this$ == null) && !(this$.reagent$ratom$IComputedImpl$_update_watching$arity$2 == null)) {
    return this$.reagent$ratom$IComputedImpl$_update_watching$arity$2(this$, derefed);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = reagent.ratom._update_watching[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, derefed);
    } else {
      var m__30264__auto____$1 = reagent.ratom._update_watching["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, derefed);
      } else {
        throw cljs.core.missing_protocol.call(null, "IComputedImpl.-update-watching", this$);
      }
    }
  }
};
reagent.ratom._handle_change = function reagent$ratom$_handle_change(k, sender, oldval, newval) {
  if (!(k == null) && !(k.reagent$ratom$IComputedImpl$_handle_change$arity$4 == null)) {
    return k.reagent$ratom$IComputedImpl$_handle_change$arity$4(k, sender, oldval, newval);
  } else {
    var x__30263__auto__ = k == null ? null : k;
    var m__30264__auto__ = reagent.ratom._handle_change[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, k, sender, oldval, newval);
    } else {
      var m__30264__auto____$1 = reagent.ratom._handle_change["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, k, sender, oldval, newval);
      } else {
        throw cljs.core.missing_protocol.call(null, "IComputedImpl.-handle-change", k);
      }
    }
  }
};
reagent.ratom._peek_at = function reagent$ratom$_peek_at(this$) {
  if (!(this$ == null) && !(this$.reagent$ratom$IComputedImpl$_peek_at$arity$1 == null)) {
    return this$.reagent$ratom$IComputedImpl$_peek_at$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = reagent.ratom._peek_at[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = reagent.ratom._peek_at["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IComputedImpl.-peek-at", this$);
      }
    }
  }
};
reagent.ratom.Reaction = function(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  this.f = f;
  this.state = state;
  this.dirty_QMARK_ = dirty_QMARK_;
  this.active_QMARK_ = active_QMARK_;
  this.watching = watching;
  this.watches = watches;
  this.auto_run = auto_run;
  this.on_set = on_set;
  this.on_dispose = on_dispose;
  this.cljs$lang$protocol_mask$partition0$ = 2153807872;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_handle_change$arity$4 = function(this$, sender, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = self__.active_QMARK_;
    if (cljs.core.truth_(and__29588__auto__)) {
      return !(oldval === newval);
    } else {
      return and__29588__auto__;
    }
  }())) {
    self__.dirty_QMARK_ = true;
    return function() {
      var or__29600__auto__ = self__.auto_run;
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return reagent.ratom.run;
      }
    }().call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_update_watching$arity$2 = function(this$, derefed) {
  var self__ = this;
  var this$__$1 = this;
  var seq__38076_38089 = cljs.core.seq.call(null, derefed);
  var chunk__38077_38090 = null;
  var count__38078_38091 = 0;
  var i__38079_38092 = 0;
  while (true) {
    if (i__38079_38092 < count__38078_38091) {
      var w_38093 = cljs.core._nth.call(null, chunk__38077_38090, i__38079_38092);
      if (cljs.core.contains_QMARK_.call(null, self__.watching, w_38093)) {
      } else {
        cljs.core.add_watch.call(null, w_38093, this$__$1, reagent.ratom._handle_change);
      }
      var G__38094 = seq__38076_38089;
      var G__38095 = chunk__38077_38090;
      var G__38096 = count__38078_38091;
      var G__38097 = i__38079_38092 + 1;
      seq__38076_38089 = G__38094;
      chunk__38077_38090 = G__38095;
      count__38078_38091 = G__38096;
      i__38079_38092 = G__38097;
      continue;
    } else {
      var temp__4657__auto___38098 = cljs.core.seq.call(null, seq__38076_38089);
      if (temp__4657__auto___38098) {
        var seq__38076_38099__$1 = temp__4657__auto___38098;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38076_38099__$1)) {
          var c__30411__auto___38100 = cljs.core.chunk_first.call(null, seq__38076_38099__$1);
          var G__38101 = cljs.core.chunk_rest.call(null, seq__38076_38099__$1);
          var G__38102 = c__30411__auto___38100;
          var G__38103 = cljs.core.count.call(null, c__30411__auto___38100);
          var G__38104 = 0;
          seq__38076_38089 = G__38101;
          chunk__38077_38090 = G__38102;
          count__38078_38091 = G__38103;
          i__38079_38092 = G__38104;
          continue;
        } else {
          var w_38105 = cljs.core.first.call(null, seq__38076_38099__$1);
          if (cljs.core.contains_QMARK_.call(null, self__.watching, w_38105)) {
          } else {
            cljs.core.add_watch.call(null, w_38105, this$__$1, reagent.ratom._handle_change);
          }
          var G__38106 = cljs.core.next.call(null, seq__38076_38099__$1);
          var G__38107 = null;
          var G__38108 = 0;
          var G__38109 = 0;
          seq__38076_38089 = G__38106;
          chunk__38077_38090 = G__38107;
          count__38078_38091 = G__38108;
          i__38079_38092 = G__38109;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__38080_38110 = cljs.core.seq.call(null, self__.watching);
  var chunk__38081_38111 = null;
  var count__38082_38112 = 0;
  var i__38083_38113 = 0;
  while (true) {
    if (i__38083_38113 < count__38082_38112) {
      var w_38114 = cljs.core._nth.call(null, chunk__38081_38111, i__38083_38113);
      if (cljs.core.contains_QMARK_.call(null, derefed, w_38114)) {
      } else {
        cljs.core.remove_watch.call(null, w_38114, this$__$1);
      }
      var G__38115 = seq__38080_38110;
      var G__38116 = chunk__38081_38111;
      var G__38117 = count__38082_38112;
      var G__38118 = i__38083_38113 + 1;
      seq__38080_38110 = G__38115;
      chunk__38081_38111 = G__38116;
      count__38082_38112 = G__38117;
      i__38083_38113 = G__38118;
      continue;
    } else {
      var temp__4657__auto___38119 = cljs.core.seq.call(null, seq__38080_38110);
      if (temp__4657__auto___38119) {
        var seq__38080_38120__$1 = temp__4657__auto___38119;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38080_38120__$1)) {
          var c__30411__auto___38121 = cljs.core.chunk_first.call(null, seq__38080_38120__$1);
          var G__38122 = cljs.core.chunk_rest.call(null, seq__38080_38120__$1);
          var G__38123 = c__30411__auto___38121;
          var G__38124 = cljs.core.count.call(null, c__30411__auto___38121);
          var G__38125 = 0;
          seq__38080_38110 = G__38122;
          chunk__38081_38111 = G__38123;
          count__38082_38112 = G__38124;
          i__38083_38113 = G__38125;
          continue;
        } else {
          var w_38126 = cljs.core.first.call(null, seq__38080_38120__$1);
          if (cljs.core.contains_QMARK_.call(null, derefed, w_38126)) {
          } else {
            cljs.core.remove_watch.call(null, w_38126, this$__$1);
          }
          var G__38127 = cljs.core.next.call(null, seq__38080_38120__$1);
          var G__38128 = null;
          var G__38129 = 0;
          var G__38130 = 0;
          seq__38080_38110 = G__38127;
          chunk__38081_38111 = G__38128;
          count__38082_38112 = G__38129;
          i__38083_38113 = G__38130;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return self__.watching = derefed;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IComputedImpl$_peek_at$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, self__.dirty_QMARK_)) {
    return self__.state;
  } else {
    var _STAR_ratom_context_STAR_38084 = reagent.ratom._STAR_ratom_context_STAR_;
    reagent.ratom._STAR_ratom_context_STAR_ = null;
    try {
      return cljs.core._deref.call(null, this$__$1);
    } finally {
      reagent.ratom._STAR_ratom_context_STAR_ = _STAR_ratom_context_STAR_38084;
    }
  }
};
reagent.ratom.Reaction.prototype.reagent$ratom$IReactiveAtom$ = true;
reagent.ratom.Reaction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str("#\x3cReaction "), cljs.core.str(cljs.core.hash.call(null, this$__$1)), cljs.core.str(": ")].join(""));
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Reaction.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
reagent.ratom.Reaction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IDisposable$dispose_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var seq__38085_38131 = cljs.core.seq.call(null, self__.watching);
  var chunk__38086_38132 = null;
  var count__38087_38133 = 0;
  var i__38088_38134 = 0;
  while (true) {
    if (i__38088_38134 < count__38087_38133) {
      var w_38135 = cljs.core._nth.call(null, chunk__38086_38132, i__38088_38134);
      cljs.core.remove_watch.call(null, w_38135, this$__$1);
      var G__38136 = seq__38085_38131;
      var G__38137 = chunk__38086_38132;
      var G__38138 = count__38087_38133;
      var G__38139 = i__38088_38134 + 1;
      seq__38085_38131 = G__38136;
      chunk__38086_38132 = G__38137;
      count__38087_38133 = G__38138;
      i__38088_38134 = G__38139;
      continue;
    } else {
      var temp__4657__auto___38140 = cljs.core.seq.call(null, seq__38085_38131);
      if (temp__4657__auto___38140) {
        var seq__38085_38141__$1 = temp__4657__auto___38140;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__38085_38141__$1)) {
          var c__30411__auto___38142 = cljs.core.chunk_first.call(null, seq__38085_38141__$1);
          var G__38143 = cljs.core.chunk_rest.call(null, seq__38085_38141__$1);
          var G__38144 = c__30411__auto___38142;
          var G__38145 = cljs.core.count.call(null, c__30411__auto___38142);
          var G__38146 = 0;
          seq__38085_38131 = G__38143;
          chunk__38086_38132 = G__38144;
          count__38087_38133 = G__38145;
          i__38088_38134 = G__38146;
          continue;
        } else {
          var w_38147 = cljs.core.first.call(null, seq__38085_38141__$1);
          cljs.core.remove_watch.call(null, w_38147, this$__$1);
          var G__38148 = cljs.core.next.call(null, seq__38085_38141__$1);
          var G__38149 = null;
          var G__38150 = 0;
          var G__38151 = 0;
          seq__38085_38131 = G__38148;
          chunk__38086_38132 = G__38149;
          count__38087_38133 = G__38150;
          i__38088_38134 = G__38151;
          continue;
        }
      } else {
      }
    }
    break;
  }
  self__.watching = null;
  self__.state = null;
  self__.dirty_QMARK_ = true;
  if (cljs.core.truth_(self__.active_QMARK_)) {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.dec);
    } else {
    }
    self__.active_QMARK_ = false;
  } else {
  }
  if (cljs.core.truth_(self__.on_dispose)) {
    return self__.on_dispose.call(null);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(a, newval) {
  var self__ = this;
  var a__$1 = this;
  var oldval = self__.state;
  self__.state = newval;
  if (cljs.core.truth_(self__.on_set)) {
    self__.dirty_QMARK_ = true;
    self__.on_set.call(null, oldval, newval);
  } else {
  }
  cljs.core._notify_watches.call(null, a__$1, oldval, newval);
  return newval;
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f__$1) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1)));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f__$1, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f__$1, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f__$1.call(null, reagent.ratom._peek_at.call(null, a__$1), x, y));
};
reagent.ratom.Reaction.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f__$1, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f__$1, reagent.ratom._peek_at.call(null, a__$1), x, y, more));
};
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$ = true;
reagent.ratom.Reaction.prototype.reagent$ratom$IRunnable$run$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var oldstate = self__.state;
  var res = reagent.ratom.capture_derefed.call(null, self__.f, this$__$1);
  var derefed = reagent.ratom.captured.call(null, this$__$1);
  if (cljs.core.not_EQ_.call(null, derefed, self__.watching)) {
    reagent.ratom._update_watching.call(null, this$__$1, derefed);
  } else {
  }
  if (cljs.core.truth_(self__.active_QMARK_)) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    self__.active_QMARK_ = true;
  }
  self__.dirty_QMARK_ = false;
  self__.state = res;
  cljs.core._notify_watches.call(null, this$__$1, oldstate, self__.state);
  return res;
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f__$1) {
      f__$1.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, k, wf) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, k, wf);
};
reagent.ratom.Reaction.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  self__.watches = cljs.core.dissoc.call(null, self__.watches, k);
  if (cljs.core.empty_QMARK_.call(null, self__.watches) && cljs.core.not.call(null, self__.auto_run)) {
    return reagent.ratom.dispose_BANG_.call(null, this$__$1);
  } else {
    return null;
  }
};
reagent.ratom.Reaction.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = self__.auto_run;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    }
  }())) {
    reagent.ratom.notify_deref_watcher_BANG_.call(null, this$__$1);
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      return reagent.ratom.run.call(null, this$__$1);
    } else {
      return self__.state;
    }
  } else {
    if (cljs.core.truth_(self__.dirty_QMARK_)) {
      var oldstate_38152 = self__.state;
      self__.state = self__.f.call(null);
      if (oldstate_38152 === self__.state) {
      } else {
        cljs.core._notify_watches.call(null, this$__$1, oldstate_38152, self__.state);
      }
    } else {
    }
    return self__.state;
  }
};
reagent.ratom.Reaction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty?", "dirty?", -419314319, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "active?", "active?", 2100031303, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "watching", "watching", 1947648227, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "watches", "watches", 1367433992, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "auto-run", "auto-run", -696035332, null), new cljs.core.Symbol(null, "on-set", "on-set", 1499578057, null), new cljs.core.Symbol(null, "on-dispose", "on-dispose", -549129409, null)], null);
};
reagent.ratom.Reaction.cljs$lang$type = true;
reagent.ratom.Reaction.cljs$lang$ctorStr = "reagent.ratom/Reaction";
reagent.ratom.Reaction.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "reagent.ratom/Reaction");
};
reagent.ratom.__GT_Reaction = function reagent$ratom$__GT_Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose) {
  return new reagent.ratom.Reaction(f, state, dirty_QMARK_, active_QMARK_, watching, watches, auto_run, on_set, on_dispose);
};
reagent.ratom.make_reaction = function reagent$ratom$make_reaction(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38158 = arguments.length;
  var i__30670__auto___38159 = 0;
  while (true) {
    if (i__30670__auto___38159 < len__30669__auto___38158) {
      args__30676__auto__.push(arguments[i__30670__auto___38159]);
      var G__38160 = i__30670__auto___38159 + 1;
      i__30670__auto___38159 = G__38160;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic = function(f, p__38155) {
  var map__38156 = p__38155;
  var map__38156__$1 = (!(map__38156 == null) ? map__38156.cljs$lang$protocol_mask$partition0$ & 64 || map__38156.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__38156) : map__38156;
  var auto_run = cljs.core.get.call(null, map__38156__$1, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437));
  var on_set = cljs.core.get.call(null, map__38156__$1, new cljs.core.Keyword(null, "on-set", "on-set", -140953470));
  var on_dispose = cljs.core.get.call(null, map__38156__$1, new cljs.core.Keyword(null, "on-dispose", "on-dispose", 2105306360));
  var derefed = cljs.core.get.call(null, map__38156__$1, new cljs.core.Keyword(null, "derefed", "derefed", 590684583));
  var runner = cljs.core._EQ_.call(null, auto_run, true) ? reagent.ratom.run : auto_run;
  var active = !(derefed == null);
  var dirty = !active;
  var reaction = new reagent.ratom.Reaction(f, null, dirty, active, null, null, runner, on_set, on_dispose);
  if (derefed == null) {
  } else {
    if (cljs.core.truth_(reagent.ratom.debug)) {
      cljs.core.swap_BANG_.call(null, reagent.ratom._running, cljs.core.inc);
    } else {
    }
    reagent.ratom._update_watching.call(null, reaction, derefed);
  }
  return reaction;
};
reagent.ratom.make_reaction.cljs$lang$maxFixedArity = 1;
reagent.ratom.make_reaction.cljs$lang$applyTo = function(seq38153) {
  var G__38154 = cljs.core.first.call(null, seq38153);
  var seq38153__$1 = cljs.core.next.call(null, seq38153);
  return reagent.ratom.make_reaction.cljs$core$IFn$_invoke$arity$variadic(G__38154, seq38153__$1);
};
reagent.ratom.Wrapper = function(state, callback, changed, watches) {
  this.state = state;
  this.callback = callback;
  this.changed = changed;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 114690;
  this.cljs$lang$protocol_mask$partition0$ = 2149613568;
};
reagent.ratom.Wrapper.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = self__.changed;
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs.core.some_QMARK_.call(null, reagent.ratom._STAR_ratom_context_STAR_);
    } else {
      return and__29588__auto__;
    }
  }())) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("derefing stale wrap: "), cljs.core.str(cljs.core.pr_str.call(null, this$__$1))].join(""));
    } else {
    }
  } else {
  }
  return self__.state;
};
reagent.ratom.Wrapper.prototype.cljs$core$IReset$_reset_BANG_$arity$2 = function(this$, newval) {
  var self__ = this;
  var this$__$1 = this;
  var oldval = self__.state;
  self__.changed = true;
  self__.state = newval;
  if (self__.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, this$__$1, oldval, newval);
  }
  self__.callback.call(null, newval);
  return newval;
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$2 = function(a, f) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$3 = function(a, f, x) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$4 = function(a, f, x, y) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, f.call(null, self__.state, x, y));
};
reagent.ratom.Wrapper.prototype.cljs$core$ISwap$_swap_BANG_$arity$5 = function(a, f, x, y, more) {
  var self__ = this;
  var a__$1 = this;
  return cljs.core._reset_BANG_.call(null, a__$1, cljs.core.apply.call(null, f, self__.state, x, y, more));
};
reagent.ratom.Wrapper.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof reagent.ratom.Wrapper && cljs.core.not.call(null, self__.changed) && cljs.core.not.call(null, other.changed) && cljs.core._EQ_.call(null, self__.state, other.state) && cljs.core._EQ_.call(null, self__.callback, other.callback);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.reduce_kv.call(null, function(this$__$1) {
    return function(_, key, f) {
      f.call(null, key, this$__$1, oldval, newval);
      return null;
    };
  }(this$__$1), null, self__.watches);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
reagent.ratom.Wrapper.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return self__.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
reagent.ratom.Wrapper.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  cljs.core._write.call(null, writer, "#\x3cwrap: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
reagent.ratom.Wrapper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "callback", "callback", 935395299, null), cljs.core.with_meta(new cljs.core.Symbol(null, "changed", "changed", -2083710852, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "watches", "watches", 1367433992, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
reagent.ratom.Wrapper.cljs$lang$type = true;
reagent.ratom.Wrapper.cljs$lang$ctorStr = "reagent.ratom/Wrapper";
reagent.ratom.Wrapper.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "reagent.ratom/Wrapper");
};
reagent.ratom.__GT_Wrapper = function reagent$ratom$__GT_Wrapper(state, callback, changed, watches) {
  return new reagent.ratom.Wrapper(state, callback, changed, watches);
};
reagent.ratom.make_wrapper = function reagent$ratom$make_wrapper(value, callback_fn, args) {
  return new reagent.ratom.Wrapper(value, new reagent.impl.util.partial_ifn(callback_fn, args, null), false, null);
};
goog.provide("reagent.impl.batching");
goog.require("cljs.core");
goog.require("reagent.debug");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.util");
goog.require("clojure.string");
if (typeof reagent.impl.batching.mount_count !== "undefined") {
} else {
  reagent.impl.batching.mount_count = 0;
}
reagent.impl.batching.next_mount_count = function reagent$impl$batching$next_mount_count() {
  return reagent.impl.batching.mount_count = reagent.impl.batching.mount_count + 1;
};
reagent.impl.batching.fake_raf = function reagent$impl$batching$fake_raf(f) {
  return setTimeout(f, 16);
};
reagent.impl.batching.next_tick = cljs.core.not.call(null, reagent.impl.util.is_client) ? reagent.impl.batching.fake_raf : function() {
  var w = window;
  var or__29600__auto__ = w["requestAnimationFrame"];
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    var or__29600__auto____$1 = w["webkitRequestAnimationFrame"];
    if (cljs.core.truth_(or__29600__auto____$1)) {
      return or__29600__auto____$1;
    } else {
      var or__29600__auto____$2 = w["mozRequestAnimationFrame"];
      if (cljs.core.truth_(or__29600__auto____$2)) {
        return or__29600__auto____$2;
      } else {
        var or__29600__auto____$3 = w["msRequestAnimationFrame"];
        if (cljs.core.truth_(or__29600__auto____$3)) {
          return or__29600__auto____$3;
        } else {
          return reagent.impl.batching.fake_raf;
        }
      }
    }
  }
}();
reagent.impl.batching.compare_mount_order = function reagent$impl$batching$compare_mount_order(c1, c2) {
  return c1["cljsMountOrder"] - c2["cljsMountOrder"];
};
reagent.impl.batching.run_queue = function reagent$impl$batching$run_queue(a) {
  a.sort(reagent.impl.batching.compare_mount_order);
  var n__30514__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__30514__auto__) {
      var c_38163 = a[i];
      if (cljs.core.truth_(c_38163["cljsIsDirty"])) {
        c_38163["forceUpdate"]();
      } else {
      }
      var G__38164 = i + 1;
      i = G__38164;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.run_funs = function reagent$impl$batching$run_funs(a) {
  var n__30514__auto__ = a.length;
  var i = 0;
  while (true) {
    if (i < n__30514__auto__) {
      a[i].call(null);
      var G__38165 = i + 1;
      i = G__38165;
      continue;
    } else {
      return null;
    }
    break;
  }
};
reagent.impl.batching.RenderQueue = function(queue, scheduled_QMARK_, after_render) {
  this.queue = queue;
  this.scheduled_QMARK_ = scheduled_QMARK_;
  this.after_render = after_render;
};
reagent.impl.batching.RenderQueue.prototype.queue_render = function(c) {
  var self__ = this;
  var this$ = this;
  self__.queue.push(c);
  return this$.schedule();
};
reagent.impl.batching.RenderQueue.prototype.add_after_render = function(f) {
  var self__ = this;
  var _ = this;
  return self__.after_render.push(f);
};
reagent.impl.batching.RenderQueue.prototype.schedule = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.truth_(self__.scheduled_QMARK_)) {
    return null;
  } else {
    self__.scheduled_QMARK_ = true;
    return reagent.impl.batching.next_tick.call(null, function(this$) {
      return function() {
        return this$.run_queue();
      };
    }(this$));
  }
};
reagent.impl.batching.RenderQueue.prototype.run_queue = function() {
  var self__ = this;
  var _ = this;
  var q = self__.queue;
  var aq = self__.after_render;
  self__.queue = [];
  self__.after_render = [];
  self__.scheduled_QMARK_ = false;
  reagent.impl.batching.run_queue.call(null, q);
  return reagent.impl.batching.run_funs.call(null, aq);
};
reagent.impl.batching.RenderQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "queue", "queue", -1198599890, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "scheduled?", "scheduled?", 579986609, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], 
  null)), cljs.core.with_meta(new cljs.core.Symbol(null, "after-render", "after-render", -656902336, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
reagent.impl.batching.RenderQueue.cljs$lang$type = true;
reagent.impl.batching.RenderQueue.cljs$lang$ctorStr = "reagent.impl.batching/RenderQueue";
reagent.impl.batching.RenderQueue.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "reagent.impl.batching/RenderQueue");
};
reagent.impl.batching.__GT_RenderQueue = function reagent$impl$batching$__GT_RenderQueue(queue, scheduled_QMARK_, after_render) {
  return new reagent.impl.batching.RenderQueue(queue, scheduled_QMARK_, after_render);
};
reagent.impl.batching.render_queue = new reagent.impl.batching.RenderQueue([], false, []);
reagent.impl.batching.flush = function reagent$impl$batching$flush() {
  return reagent.impl.batching.render_queue.run_queue();
};
reagent.impl.batching.queue_render = function reagent$impl$batching$queue_render(c) {
  c["cljsIsDirty"] = true;
  return reagent.impl.batching.render_queue.queue_render(c);
};
reagent.impl.batching.mark_rendered = function reagent$impl$batching$mark_rendered(c) {
  return c["cljsIsDirty"] = false;
};
reagent.impl.batching.do_after_flush = function reagent$impl$batching$do_after_flush(f) {
  return reagent.impl.batching.render_queue.add_after_render(f);
};
reagent.impl.batching.do_later = function reagent$impl$batching$do_later(f) {
  reagent.impl.batching.do_after_flush.call(null, f);
  return reagent.impl.batching.render_queue.schedule();
};
reagent.impl.batching.is_reagent_component = function reagent$impl$batching$is_reagent_component(c) {
  var G__38167 = c;
  var G__38167__$1 = G__38167 == null ? null : G__38167["props"];
  if (G__38167__$1 == null) {
    return null;
  } else {
    return G__38167__$1["argv"];
  }
};
reagent.impl.batching.run_reactively = function reagent$impl$batching$run_reactively(c, run) {
  if (cljs.core.truth_(reagent.impl.batching.is_reagent_component.call(null, c))) {
  } else {
    throw new Error("Assert failed: (is-reagent-component c)");
  }
  reagent.impl.batching.mark_rendered.call(null, c);
  var rat = c["cljsRatom"];
  if (rat == null) {
    var res = reagent.ratom.capture_derefed.call(null, run, c);
    var derefed = reagent.ratom.captured.call(null, c);
    if (!(derefed == null)) {
      c["cljsRatom"] = reagent.ratom.make_reaction.call(null, run, new cljs.core.Keyword(null, "auto-run", "auto-run", 1958400437), function(res, derefed, rat) {
        return function() {
          return reagent.impl.batching.queue_render.call(null, c);
        };
      }(res, derefed, rat), new cljs.core.Keyword(null, "derefed", "derefed", 590684583), derefed);
    } else {
    }
    return res;
  } else {
    return reagent.ratom.run.call(null, rat);
  }
};
reagent.impl.batching.dispose = function reagent$impl$batching$dispose(c) {
  var G__38169_38170 = c["cljsRatom"];
  if (G__38169_38170 == null) {
  } else {
    reagent.ratom.dispose_BANG_.call(null, G__38169_38170);
  }
  return reagent.impl.batching.mark_rendered.call(null, c);
};
goog.provide("reagent.impl.component");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.batching");
goog.require("reagent.ratom");
goog.require("reagent.interop");
goog.require("reagent.debug");
reagent.impl.component.state_atom = function reagent$impl$component$state_atom(this$) {
  var sa = this$["cljsState"];
  if (!(sa == null)) {
    return sa;
  } else {
    return this$["cljsState"] = reagent.ratom.atom.call(null, null);
  }
};
reagent.impl.component.as_element = function reagent$impl$component$as_element(x) {
  return reagent.impl.template.as_element(x);
};
reagent.impl.component.reagent_class_QMARK_ = function reagent$impl$component$reagent_class_QMARK_(c) {
  return cljs.core.fn_QMARK_.call(null, c) && cljs.core.some_QMARK_.call(null, c["cljsReactClass"]);
};
reagent.impl.component.do_render_sub = function reagent$impl$component$do_render_sub(c) {
  while (true) {
    var f = c["cljsRender"];
    var _ = cljs.core.ifn_QMARK_.call(null, f) ? null : function() {
      throw new Error("Assert failed: (ifn? f)");
    }();
    var p = c["props"];
    var res = c["reagentRender"] == null ? f.call(null, c) : function() {
      var argv = p["argv"];
      var n = cljs.core.count.call(null, argv);
      var G__38174 = n;
      switch(G__38174) {
        case 1:
          return f.call(null);
          break;
        case 2:
          return f.call(null, cljs.core.nth.call(null, argv, 1));
          break;
        case 3:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2));
          break;
        case 4:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3));
          break;
        case 5:
          return f.call(null, cljs.core.nth.call(null, argv, 1), cljs.core.nth.call(null, argv, 2), cljs.core.nth.call(null, argv, 3), cljs.core.nth.call(null, argv, 4));
          break;
        default:
          return cljs.core.apply.call(null, f, cljs.core.subvec.call(null, argv, 1));
      }
    }();
    if (cljs.core.vector_QMARK_.call(null, res)) {
      return reagent.impl.component.as_element.call(null, res);
    } else {
      if (cljs.core.ifn_QMARK_.call(null, res)) {
        var f__$1 = cljs.core.truth_(reagent.impl.component.reagent_class_QMARK_.call(null, res)) ? function(c, f, _, p, res) {
          return function() {
            var G__38176__delegate = function(args) {
              return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
            };
            var G__38176 = function(var_args) {
              var args = null;
              if (arguments.length > 0) {
                var G__38177__i = 0, G__38177__a = new Array(arguments.length - 0);
                while (G__38177__i < G__38177__a.length) {
                  G__38177__a[G__38177__i] = arguments[G__38177__i + 0];
                  ++G__38177__i;
                }
                args = new cljs.core.IndexedSeq(G__38177__a, 0);
              }
              return G__38176__delegate.call(this, args);
            };
            G__38176.cljs$lang$maxFixedArity = 0;
            G__38176.cljs$lang$applyTo = function(arglist__38178) {
              var args = cljs.core.seq(arglist__38178);
              return G__38176__delegate(args);
            };
            G__38176.cljs$core$IFn$_invoke$arity$variadic = G__38176__delegate;
            return G__38176;
          }();
        }(c, f, _, p, res) : res;
        c["cljsRender"] = f__$1;
        var G__38179 = c;
        c = G__38179;
        continue;
      } else {
        return res;
      }
    }
    break;
  }
};
reagent.impl.component.do_render = function reagent$impl$component$do_render(c) {
  var _STAR_current_component_STAR_38181 = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.component._STAR_current_component_STAR_ = c;
  try {
    var ok = [false];
    try {
      var res = reagent.impl.component.do_render_sub.call(null, c);
      ok[0] = true;
      return res;
    } finally {
      if (cljs.core.truth_(ok[0])) {
      } else {
        console.error([cljs.core.str("Error rendering component "), cljs.core.str(reagent.impl.component.comp_name.call(null))].join(""));
      }
    }
  } finally {
    reagent.impl.component._STAR_current_component_STAR_ = _STAR_current_component_STAR_38181;
  }
};
reagent.impl.component.static_fns = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "render", "render", -1408033454), function() {
  var c = this;
  if (cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_)) {
    return reagent.impl.batching.run_reactively.call(null, c, function(c) {
      return function() {
        return reagent.impl.component.do_render.call(null, c);
      };
    }(c));
  } else {
    return reagent.impl.component.do_render.call(null, c);
  }
}], null);
reagent.impl.component.custom_wrapper = function reagent$impl$component$custom_wrapper(key, f) {
  var G__38183 = key instanceof cljs.core.Keyword ? key.fqn : null;
  switch(G__38183) {
    case "getDefaultProps":
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("getDefaultProps not supported yet"), cljs.core.str("\n"), cljs.core.str("false")].join(""));break;
    case "getInitialState":
      return function(G__38183) {
        return function() {
          var c = this;
          return cljs.core.reset_BANG_.call(null, reagent.impl.component.state_atom.call(null, c), f.call(null, c));
        };
      }(G__38183);
      break;
    case "componentWillReceiveProps":
      return function(G__38183) {
        return function(props) {
          var c = this;
          return f.call(null, c, props["argv"]);
        };
      }(G__38183);
      break;
    case "shouldComponentUpdate":
      return function(G__38183) {
        return function(nextprops, nextstate) {
          var or__29600__auto__ = reagent.impl.util._STAR_always_update_STAR_;
          if (cljs.core.truth_(or__29600__auto__)) {
            return or__29600__auto__;
          } else {
            var c = this;
            var old_argv = c["props"]["argv"];
            var new_argv = nextprops["argv"];
            if (f == null) {
              return old_argv == null || new_argv == null || cljs.core.not_EQ_.call(null, old_argv, new_argv);
            } else {
              return f.call(null, c, old_argv, new_argv);
            }
          }
        };
      }(G__38183);
      break;
    case "componentWillUpdate":
      return function(G__38183) {
        return function(nextprops) {
          var c = this;
          return f.call(null, c, nextprops["argv"]);
        };
      }(G__38183);
      break;
    case "componentDidUpdate":
      return function(G__38183) {
        return function(oldprops) {
          var c = this;
          return f.call(null, c, oldprops["argv"]);
        };
      }(G__38183);
      break;
    case "componentWillMount":
      return function(G__38183) {
        return function() {
          var c = this;
          c["cljsMountOrder"] = reagent.impl.batching.next_mount_count.call(null);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__38183);
      break;
    case "componentWillUnmount":
      return function(G__38183) {
        return function() {
          var c = this;
          reagent.impl.batching.dispose.call(null, c);
          if (f == null) {
            return null;
          } else {
            return f.call(null, c);
          }
        };
      }(G__38183);
      break;
    default:
      return null;
  }
};
reagent.impl.component.default_wrapper = function reagent$impl$component$default_wrapper(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
    return function() {
      var G__38185__delegate = function(args) {
        var c = this;
        return cljs.core.apply.call(null, f, c, args);
      };
      var G__38185 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__38186__i = 0, G__38186__a = new Array(arguments.length - 0);
          while (G__38186__i < G__38186__a.length) {
            G__38186__a[G__38186__i] = arguments[G__38186__i + 0];
            ++G__38186__i;
          }
          args = new cljs.core.IndexedSeq(G__38186__a, 0);
        }
        return G__38185__delegate.call(this, args);
      };
      G__38185.cljs$lang$maxFixedArity = 0;
      G__38185.cljs$lang$applyTo = function(arglist__38187) {
        var args = cljs.core.seq(arglist__38187);
        return G__38185__delegate(args);
      };
      G__38185.cljs$core$IFn$_invoke$arity$variadic = G__38185__delegate;
      return G__38185;
    }();
  } else {
    return f;
  }
};
reagent.impl.component.dont_wrap = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), null, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), null, new cljs.core.Keyword(null, "render", "render", -1408033454), null, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), null], null), null);
reagent.impl.component.dont_bind = function reagent$impl$component$dont_bind(f) {
  if (cljs.core.fn_QMARK_.call(null, f)) {
    var G__38189 = f;
    G__38189["__reactDontBind"] = true;
    return G__38189;
  } else {
    return f;
  }
};
reagent.impl.component.get_wrapper = function reagent$impl$component$get_wrapper(key, f, name) {
  if (cljs.core.truth_(reagent.impl.component.dont_wrap.call(null, key))) {
    return reagent.impl.component.dont_bind.call(null, f);
  } else {
    var wrap = reagent.impl.component.custom_wrapper.call(null, key, f);
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = wrap;
      if (cljs.core.truth_(and__29588__auto__)) {
        return f;
      } else {
        return and__29588__auto__;
      }
    }())) {
      if (cljs.core.ifn_QMARK_.call(null, f)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected function in "), cljs.core.str(name), cljs.core.str(key), cljs.core.str(" but got "), cljs.core.str(f)].join("")), cljs.core.str("\n"), cljs.core.str("(ifn? f)")].join(""));
      }
    } else {
    }
    var or__29600__auto__ = wrap;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return reagent.impl.component.default_wrapper.call(null, f);
    }
  }
};
reagent.impl.component.obligatory = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), null, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), null, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), null], null);
reagent.impl.component.dash_to_camel = reagent.impl.util.memoize_1.call(null, reagent.impl.util.dash_to_camel);
reagent.impl.component.camelify_map_keys = function reagent$impl$component$camelify_map_keys(fun_map) {
  return cljs.core.reduce_kv.call(null, function(m, k, v) {
    return cljs.core.assoc.call(null, m, cljs.core.keyword.call(null, reagent.impl.component.dash_to_camel.call(null, k)), v);
  }, cljs.core.PersistentArrayMap.EMPTY, fun_map);
};
reagent.impl.component.add_obligatory = function reagent$impl$component$add_obligatory(fun_map) {
  return cljs.core.merge.call(null, reagent.impl.component.obligatory, fun_map);
};
reagent.impl.component.add_render = function reagent$impl$component$add_render(fun_map, render_f, name) {
  var fm = cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "cljsRender", "cljsRender", 247449928), render_f, new cljs.core.Keyword(null, "render", "render", -1408033454), (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(reagent.impl.component.static_fns));
  return cljs.core.assoc.call(null, fm, new cljs.core.Keyword(null, "cljsName", "cljsName", 999824949), function(fm) {
    return function() {
      return name;
    };
  }(fm));
};
reagent.impl.component.fun_name = function reagent$impl$component$fun_name(f) {
  var or__29600__auto__ = function() {
    var and__29588__auto__ = cljs.core.fn_QMARK_.call(null, f);
    if (and__29588__auto__) {
      var or__29600__auto__ = f["displayName"];
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return f["name"];
      }
    } else {
      return and__29588__auto__;
    }
  }();
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    var or__29600__auto____$1 = function() {
      var and__29588__auto__ = !(f == null) ? f.cljs$lang$protocol_mask$partition1$ & 4096 || f.cljs$core$INamed$ ? true : false : false;
      if (and__29588__auto__) {
        return cljs.core.name.call(null, f);
      } else {
        return and__29588__auto__;
      }
    }();
    if (cljs.core.truth_(or__29600__auto____$1)) {
      return or__29600__auto____$1;
    } else {
      var m = cljs.core.meta.call(null, f);
      if (cljs.core.map_QMARK_.call(null, m)) {
        return (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m);
      } else {
        return null;
      }
    }
  }
};
reagent.impl.component.wrap_funs = function reagent$impl$component$wrap_funs(fmap) {
  var fun_map = function() {
    var temp__4659__auto__ = (new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104)).cljs$core$IFn$_invoke$arity$1(fmap);
    if (temp__4659__auto__ == null) {
      return fmap;
    } else {
      var cf = temp__4659__auto__;
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, fmap, new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383), cf), new cljs.core.Keyword(null, "componentFunction", "componentFunction", 825866104));
    }
  }();
  var render_fun = function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "reagentRender", "reagentRender", -358306383)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(fun_map);
    }
  }();
  var _ = cljs.core.ifn_QMARK_.call(null, render_fun) ? null : function() {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Render must be a function, not "), cljs.core.str(cljs.core.pr_str.call(null, render_fun))].join("")), cljs.core.str("\n"), cljs.core.str("(ifn? render-fun)")].join(""));
  }();
  var name = [cljs.core.str(function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "displayName", "displayName", -809144601)).cljs$core$IFn$_invoke$arity$1(fun_map);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return reagent.impl.component.fun_name.call(null, render_fun);
    }
  }())].join("");
  var name_SINGLEQUOTE_ = cljs.core.empty_QMARK_.call(null, name) ? [cljs.core.str(cljs.core.gensym.call(null, "reagent"))].join("") : clojure.string.replace.call(null, name, /\$/, ".");
  var fmap__$1 = reagent.impl.component.add_render.call(null, cljs.core.assoc.call(null, fun_map, new cljs.core.Keyword(null, "displayName", "displayName", -809144601), name_SINGLEQUOTE_), render_fun, name_SINGLEQUOTE_);
  return cljs.core.reduce_kv.call(null, function(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1) {
    return function(m, k, v) {
      return cljs.core.assoc.call(null, m, k, reagent.impl.component.get_wrapper.call(null, k, v, name_SINGLEQUOTE_));
    };
  }(fun_map, render_fun, _, name, name_SINGLEQUOTE_, fmap__$1), cljs.core.PersistentArrayMap.EMPTY, fmap__$1);
};
reagent.impl.component.map_to_js = function reagent$impl$component$map_to_js(m) {
  return cljs.core.reduce_kv.call(null, function(o, k, v) {
    var G__38199 = o;
    G__38199[cljs.core.name.call(null, k)] = v;
    return G__38199;
  }, {}, m);
};
reagent.impl.component.cljsify = function reagent$impl$component$cljsify(body) {
  return reagent.impl.component.map_to_js.call(null, reagent.impl.component.wrap_funs.call(null, reagent.impl.component.add_obligatory.call(null, reagent.impl.component.camelify_map_keys.call(null, body))));
};
reagent.impl.component.create_class = function reagent$impl$component$create_class(body) {
  if (cljs.core.map_QMARK_.call(null, body)) {
  } else {
    throw new Error("Assert failed: (map? body)");
  }
  var spec = reagent.impl.component.cljsify.call(null, body);
  var res = React["createClass"](spec);
  var f = function(spec, res) {
    return function() {
      var G__38200__delegate = function(args) {
        if (typeof console !== "undefined") {
          console.warn([cljs.core.str("Warning: "), cljs.core.str("Calling the result of create-class as a function is "), cljs.core.str("deprecated in "), cljs.core.str(res["displayName"]), cljs.core.str(". Use a vector "), cljs.core.str("instead.")].join(""));
        } else {
        }
        return reagent.impl.component.as_element.call(null, cljs.core.apply.call(null, cljs.core.vector, res, args));
      };
      var G__38200 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__38201__i = 0, G__38201__a = new Array(arguments.length - 0);
          while (G__38201__i < G__38201__a.length) {
            G__38201__a[G__38201__i] = arguments[G__38201__i + 0];
            ++G__38201__i;
          }
          args = new cljs.core.IndexedSeq(G__38201__a, 0);
        }
        return G__38200__delegate.call(this, args);
      };
      G__38200.cljs$lang$maxFixedArity = 0;
      G__38200.cljs$lang$applyTo = function(arglist__38202) {
        var args = cljs.core.seq(arglist__38202);
        return G__38200__delegate(args);
      };
      G__38200.cljs$core$IFn$_invoke$arity$variadic = G__38200__delegate;
      return G__38200;
    }();
  }(spec, res);
  reagent.impl.util.cache_react_class.call(null, f, res);
  reagent.impl.util.cache_react_class.call(null, res, res);
  return f;
};
reagent.impl.component.component_path = function reagent$impl$component$component_path(c) {
  var elem = function() {
    var G__38208 = function() {
      var or__29600__auto__ = function() {
        var G__38210 = c;
        if (G__38210 == null) {
          return null;
        } else {
          return G__38210["_reactInternalInstance"];
        }
      }();
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return c;
      }
    }();
    if (G__38208 == null) {
      return null;
    } else {
      return G__38208["_currentElement"];
    }
  }();
  var name = function() {
    var G__38211 = elem;
    var G__38211__$1 = G__38211 == null ? null : G__38211["type"];
    if (G__38211__$1 == null) {
      return null;
    } else {
      return G__38211__$1["displayName"];
    }
  }();
  var path = function() {
    var G__38212 = elem;
    var G__38212__$1 = G__38212 == null ? null : G__38212["_owner"];
    var G__38212__$2 = G__38212__$1 == null ? null : reagent$impl$component$component_path.call(null, G__38212__$1);
    if (G__38212__$2 == null) {
      return null;
    } else {
      return [cljs.core.str(G__38212__$2), cljs.core.str(" \x3e ")].join("");
    }
  }();
  var res = [cljs.core.str(path), cljs.core.str(name)].join("");
  if (cljs.core.empty_QMARK_.call(null, res)) {
    return null;
  } else {
    return res;
  }
};
reagent.impl.component.comp_name = function reagent$impl$component$comp_name() {
  var c = reagent.impl.component._STAR_current_component_STAR_;
  var n = function() {
    var or__29600__auto__ = reagent.impl.component.component_path.call(null, c);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      var G__38214 = c;
      if (G__38214 == null) {
        return null;
      } else {
        return G__38214["cljsName"]();
      }
    }
  }();
  if (!cljs.core.empty_QMARK_.call(null, n)) {
    return [cljs.core.str(" (in "), cljs.core.str(n), cljs.core.str(")")].join("");
  } else {
    return "";
  }
};
reagent.impl.component.shallow_obj_to_map = function reagent$impl$component$shallow_obj_to_map(o) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__30380__auto__ = function reagent$impl$component$shallow_obj_to_map_$_iter__38219(s__38220) {
      return new cljs.core.LazySeq(null, function() {
        var s__38220__$1 = s__38220;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__38220__$1);
          if (temp__4657__auto__) {
            var s__38220__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__38220__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__38220__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__38222 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__38221 = 0;
                while (true) {
                  if (i__38221 < size__30379__auto__) {
                    var k = cljs.core._nth.call(null, c__30378__auto__, i__38221);
                    cljs.core.chunk_append.call(null, b__38222, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null));
                    var G__38223 = i__38221 + 1;
                    i__38221 = G__38223;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__38222), reagent$impl$component$shallow_obj_to_map_$_iter__38219.call(null, cljs.core.chunk_rest.call(null, s__38220__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__38222), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__38220__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), o[k]], null), reagent$impl$component$shallow_obj_to_map_$_iter__38219.call(null, cljs.core.rest.call(null, s__38220__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, cljs.core.js_keys.call(null, o));
  }());
};
reagent.impl.component.elem_counter = 0;
reagent.impl.component.reactify_component = function reagent$impl$component$reactify_component(comp) {
  return React["createClass"]({"displayName":"react-wrapper", "render":function() {
    var this$ = this;
    return reagent.impl.component.as_element.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [comp, cljs.core.assoc.call(null, reagent.impl.component.shallow_obj_to_map.call(null, this$["props"]), new cljs.core.Keyword(null, "-elem-count", "-elem-count", 663797079), reagent.impl.component.elem_counter = reagent.impl.component.elem_counter + 1)], null));
  }});
};
goog.provide("reagent.impl.template");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.batching");
goog.require("clojure.string");
goog.require("reagent.debug");
reagent.impl.template.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
reagent.impl.template.NativeWrapper = function(comp) {
  this.comp = comp;
};
reagent.impl.template.NativeWrapper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null)], null);
};
reagent.impl.template.NativeWrapper.cljs$lang$type = true;
reagent.impl.template.NativeWrapper.cljs$lang$ctorStr = "reagent.impl.template/NativeWrapper";
reagent.impl.template.NativeWrapper.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "reagent.impl.template/NativeWrapper");
};
reagent.impl.template.__GT_NativeWrapper = function reagent$impl$template$__GT_NativeWrapper(comp) {
  return new reagent.impl.template.NativeWrapper(comp);
};
reagent.impl.template.named_QMARK_ = function reagent$impl$template$named_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
reagent.impl.template.hiccup_tag_QMARK_ = function reagent$impl$template$hiccup_tag_QMARK_(x) {
  var or__29600__auto__ = reagent.impl.template.named_QMARK_.call(null, x);
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return typeof x === "string";
  }
};
reagent.impl.template.valid_tag_QMARK_ = function reagent$impl$template$valid_tag_QMARK_(x) {
  var or__29600__auto__ = reagent.impl.template.hiccup_tag_QMARK_.call(null, x);
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return cljs.core.ifn_QMARK_.call(null, x) || x instanceof reagent.impl.template.NativeWrapper;
  }
};
reagent.impl.template.prop_name_cache = {"class":"className", "for":"htmlFor", "charset":"charSet"};
reagent.impl.template.obj_get = function reagent$impl$template$obj_get(o, k) {
  if (cljs.core.truth_(o.hasOwnProperty(k))) {
    return o[k];
  } else {
    return null;
  }
};
reagent.impl.template.cached_prop_name = function reagent$impl$template$cached_prop_name(k) {
  if (cljs.core.truth_(reagent.impl.template.named_QMARK_.call(null, k))) {
    var temp__4659__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.prop_name_cache, cljs.core.name.call(null, k));
    if (temp__4659__auto__ == null) {
      return reagent.impl.template.prop_name_cache[cljs.core.name.call(null, k)] = reagent.impl.util.dash_to_camel.call(null, k);
    } else {
      var k_SINGLEQUOTE_ = temp__4659__auto__;
      return k_SINGLEQUOTE_;
    }
  } else {
    return k;
  }
};
reagent.impl.template.convert_prop_value = function reagent$impl$template$convert_prop_value(x) {
  if (typeof x === "string" || typeof x === "number" || cljs.core.fn_QMARK_.call(null, x)) {
    return x;
  } else {
    if (cljs.core.truth_(reagent.impl.template.named_QMARK_.call(null, x))) {
      return cljs.core.name.call(null, x);
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.reduce_kv.call(null, function(o, k, v) {
          var G__38227 = o;
          G__38227[reagent.impl.template.cached_prop_name.call(null, k)] = reagent$impl$template$convert_prop_value.call(null, v);
          return G__38227;
        }, {}, x);
      } else {
        if (cljs.core.coll_QMARK_.call(null, x)) {
          return cljs.core.clj__GT_js.call(null, x);
        } else {
          if (cljs.core.ifn_QMARK_.call(null, x)) {
            return function() {
              var G__38228__delegate = function(args) {
                return cljs.core.apply.call(null, x, args);
              };
              var G__38228 = function(var_args) {
                var args = null;
                if (arguments.length > 0) {
                  var G__38229__i = 0, G__38229__a = new Array(arguments.length - 0);
                  while (G__38229__i < G__38229__a.length) {
                    G__38229__a[G__38229__i] = arguments[G__38229__i + 0];
                    ++G__38229__i;
                  }
                  args = new cljs.core.IndexedSeq(G__38229__a, 0);
                }
                return G__38228__delegate.call(this, args);
              };
              G__38228.cljs$lang$maxFixedArity = 0;
              G__38228.cljs$lang$applyTo = function(arglist__38230) {
                var args = cljs.core.seq(arglist__38230);
                return G__38228__delegate(args);
              };
              G__38228.cljs$core$IFn$_invoke$arity$variadic = G__38228__delegate;
              return G__38228;
            }();
          } else {
            return cljs.core.clj__GT_js.call(null, x);
          }
        }
      }
    }
  }
};
reagent.impl.template.set_id_class = function reagent$impl$template$set_id_class(props, id, class$) {
  var p = props == null ? {} : props;
  if (cljs.core.some_QMARK_.call(null, id) && p["id"] == null) {
    p["id"] = id;
  } else {
  }
  if (cljs.core.some_QMARK_.call(null, class$)) {
    var old_38231 = p["className"];
    p["className"] = cljs.core.some_QMARK_.call(null, old_38231) ? [cljs.core.str(class$), cljs.core.str(" "), cljs.core.str(old_38231)].join("") : class$;
  } else {
  }
  return p;
};
reagent.impl.template.convert_props = function reagent$impl$template$convert_props(props, id_class) {
  var id = id_class["id"];
  var class$ = id_class["className"];
  var no_id_class = id == null && class$ == null;
  if (no_id_class && cljs.core.empty_QMARK_.call(null, props)) {
    return null;
  } else {
    var objprops = reagent.impl.template.convert_prop_value.call(null, props);
    if (no_id_class) {
      return objprops;
    } else {
      return reagent.impl.template.set_id_class.call(null, objprops, id, class$);
    }
  }
};
reagent.impl.template.input_unmount = function reagent$impl$template$input_unmount(this$) {
  return this$["cljsInputValue"] = null;
};
reagent.impl.template.these_inputs_have_selection_api = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, ["url", null, "tel", null, "text", null, "textarea", null, "password", null, "search", null], null), null);
reagent.impl.template.has_selection_api_QMARK_ = function reagent$impl$template$has_selection_api_QMARK_(input_type) {
  return cljs.core.contains_QMARK_.call(null, reagent.impl.template.these_inputs_have_selection_api, input_type);
};
reagent.impl.template.input_set_value = function reagent$impl$template$input_set_value(this$) {
  var temp__4661__auto__ = this$["cljsInputValue"];
  if (temp__4661__auto__ == null) {
    return null;
  } else {
    var value = temp__4661__auto__;
    this$["cljsInputDirty"] = false;
    var node = this$["getDOMNode"]();
    var node_value = node["value"];
    if (cljs.core.not_EQ_.call(null, value, node_value)) {
      if (cljs.core.not.call(null, function() {
        var and__29588__auto__ = node === document.activeElement;
        if (and__29588__auto__) {
          var and__29588__auto____$1 = reagent.impl.template.has_selection_api_QMARK_.call(null, node["type"]);
          if (cljs.core.truth_(and__29588__auto____$1)) {
            return typeof value === "string" && typeof node_value === "string";
          } else {
            return and__29588__auto____$1;
          }
        } else {
          return and__29588__auto__;
        }
      }())) {
        return node["value"] = value;
      } else {
        var existing_offset_from_end = cljs.core.count.call(null, node_value) - node["selectionStart"];
        var new_cursor_offset = cljs.core.count.call(null, value) - existing_offset_from_end;
        node["value"] = value;
        node["selectionStart"] = new_cursor_offset;
        return node["selectionEnd"] = new_cursor_offset;
      }
    } else {
      return null;
    }
  }
};
reagent.impl.template.input_handle_change = function reagent$impl$template$input_handle_change(this$, on_change, e) {
  var res = on_change.call(null, e);
  if (cljs.core.truth_(this$["cljsInputDirty"])) {
  } else {
    this$["cljsInputDirty"] = true;
    reagent.impl.batching.do_later.call(null, function(res) {
      return function() {
        return reagent.impl.template.input_set_value.call(null, this$);
      };
    }(res));
  }
  return res;
};
reagent.impl.template.input_render_setup = function reagent$impl$template$input_render_setup(this$, jsprops) {
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = jsprops["hasOwnProperty"]("onChange");
    if (cljs.core.truth_(and__29588__auto__)) {
      return jsprops["hasOwnProperty"]("value");
    } else {
      return and__29588__auto__;
    }
  }())) {
    var v = jsprops["value"];
    var value = v == null ? "" : v;
    var on_change = jsprops["onChange"];
    this$["cljsInputValue"] = value;
    delete jsprops["value"];
    var G__38234 = jsprops;
    G__38234["defaultValue"] = value;
    G__38234["onChange"] = function(G__38234, v, value, on_change) {
      return function(p1__38232_SHARP_) {
        return reagent.impl.template.input_handle_change.call(null, this$, on_change, p1__38232_SHARP_);
      };
    }(G__38234, v, value, on_change);
    return G__38234;
  } else {
    return this$["cljsInputValue"] = null;
  }
};
reagent.impl.template.input_component_QMARK_ = function reagent$impl$template$input_component_QMARK_(x) {
  return x === "input" || x === "textarea";
};
reagent.impl.template.reagent_input_class = null;
reagent.impl.template.input_spec = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "display-name", "display-name", 694513143), "ReagentInput", new cljs.core.Keyword(null, "component-did-update", "component-did-update", -1468549173), reagent.impl.template.input_set_value, new cljs.core.Keyword(null, "component-will-unmount", "component-will-unmount", -2058314698), reagent.impl.template.input_unmount, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), 
function(argv, comp, jsprops, first_child) {
  var this$ = reagent.impl.component._STAR_current_component_STAR_;
  reagent.impl.template.input_render_setup.call(null, this$, jsprops);
  return reagent.impl.template.make_element.call(null, argv, comp, jsprops, first_child);
}], null);
reagent.impl.template.reagent_input = function reagent$impl$template$reagent_input() {
  if (reagent.impl.template.reagent_input_class == null) {
    reagent.impl.template.reagent_input_class = reagent.impl.component.create_class.call(null, reagent.impl.template.input_spec);
  } else {
  }
  return reagent.impl.template.reagent_input_class;
};
reagent.impl.template.parse_tag = function reagent$impl$template$parse_tag(hiccup_tag) {
  var vec__38236 = cljs.core.next.call(null, cljs.core.re_matches.call(null, reagent.impl.template.re_tag, cljs.core.name.call(null, hiccup_tag)));
  var tag = cljs.core.nth.call(null, vec__38236, 0, null);
  var id = cljs.core.nth.call(null, vec__38236, 1, null);
  var class$ = cljs.core.nth.call(null, vec__38236, 2, null);
  var class_SINGLEQUOTE_ = cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, /\./, " ") : null;
  if (cljs.core.truth_(tag)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid tag: '"), cljs.core.str(hiccup_tag), cljs.core.str("'"), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str("tag")].join(""));
  }
  return {"name":tag, "id":id, "className":class_SINGLEQUOTE_};
};
reagent.impl.template.fn_to_class = function reagent$impl$template$fn_to_class(f) {
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Expected a function, not "), cljs.core.str(cljs.core.pr_str.call(null, f))].join("")), cljs.core.str("\n"), cljs.core.str("(ifn? f)")].join(""));
  }
  if (!!(cljs.core.fn_QMARK_.call(null, f) && cljs.core.some_QMARK_.call(null, f["type"])) && typeof console !== "undefined") {
    console.warn([cljs.core.str("Warning: "), cljs.core.str("Using native React classes directly in Hiccup forms "), cljs.core.str("is not supported. Use create-element or "), cljs.core.str("adapt-react-class instead: "), cljs.core.str(f["type"]), cljs.core.str(reagent.impl.component.comp_name.call(null))].join(""));
  } else {
  }
  var spec = cljs.core.meta.call(null, f);
  var withrender = cljs.core.assoc.call(null, spec, new cljs.core.Keyword(null, "reagent-render", "reagent-render", -985383853), f);
  var res = reagent.impl.component.create_class.call(null, withrender);
  var wrapf = reagent.impl.util.cached_react_class.call(null, res);
  reagent.impl.util.cache_react_class.call(null, f, wrapf);
  return wrapf;
};
reagent.impl.template.as_class = function reagent$impl$template$as_class(tag) {
  var temp__4659__auto__ = reagent.impl.util.cached_react_class.call(null, tag);
  if (temp__4659__auto__ == null) {
    return reagent.impl.template.fn_to_class.call(null, tag);
  } else {
    var cached_class = temp__4659__auto__;
    return cached_class;
  }
};
reagent.impl.template.get_key = function reagent$impl$template$get_key(x) {
  if (cljs.core.map_QMARK_.call(null, x)) {
    try {
      return cljs.core.get.call(null, x, new cljs.core.Keyword(null, "key", "key", -1516042587));
    } catch (e38238) {
      var e = e38238;
      return null;
    }
  } else {
    return null;
  }
};
reagent.impl.template.key_from_vec = function reagent$impl$template$key_from_vec(v) {
  var temp__4659__auto__ = function() {
    var G__38240 = cljs.core.meta.call(null, v);
    if (G__38240 == null) {
      return null;
    } else {
      return reagent.impl.template.get_key.call(null, G__38240);
    }
  }();
  if (temp__4659__auto__ == null) {
    return reagent.impl.template.get_key.call(null, cljs.core.nth.call(null, v, 1, null));
  } else {
    var k = temp__4659__auto__;
    return k;
  }
};
reagent.impl.template.reag_element = function reagent$impl$template$reag_element(tag, v) {
  var c = reagent.impl.template.as_class.call(null, tag);
  var jsprops = {"argv":v};
  var G__38242_38243 = v;
  var G__38242_38244__$1 = G__38242_38243 == null ? null : reagent.impl.template.key_from_vec.call(null, G__38242_38243);
  if (G__38242_38244__$1 == null) {
  } else {
    jsprops["key"] = G__38242_38244__$1;
  }
  return React["createElement"](c, jsprops);
};
reagent.impl.template.adapt_react_class = function reagent$impl$template$adapt_react_class(c) {
  return new reagent.impl.template.NativeWrapper({"name":c, "id":null, "class":null});
};
reagent.impl.template.tag_name_cache = {};
reagent.impl.template.cached_parse = function reagent$impl$template$cached_parse(x) {
  var temp__4659__auto__ = reagent.impl.template.obj_get.call(null, reagent.impl.template.tag_name_cache, x);
  if (temp__4659__auto__ == null) {
    return reagent.impl.template.tag_name_cache[x] = reagent.impl.template.parse_tag.call(null, x);
  } else {
    var s = temp__4659__auto__;
    return s;
  }
};
reagent.impl.template.native_element = function reagent$impl$template$native_element(parsed, argv) {
  var comp = parsed["name"];
  var props = cljs.core.nth.call(null, argv, 1, null);
  var hasprops = props == null || cljs.core.map_QMARK_.call(null, props);
  var jsprops = reagent.impl.template.convert_props.call(null, hasprops ? props : null, parsed);
  var first_child = hasprops ? 2 : 1;
  if (cljs.core.truth_(reagent.impl.template.input_component_QMARK_.call(null, comp))) {
    return reagent.impl.template.as_element.call(null, cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [reagent.impl.template.reagent_input.call(null), argv, comp, jsprops, first_child], null), cljs.core.meta.call(null, argv)));
  } else {
    var p = function() {
      var temp__4659__auto__ = function() {
        var G__38247 = cljs.core.meta.call(null, argv);
        if (G__38247 == null) {
          return null;
        } else {
          return reagent.impl.template.get_key.call(null, G__38247);
        }
      }();
      if (temp__4659__auto__ == null) {
        return jsprops;
      } else {
        var key = temp__4659__auto__;
        var G__38248 = jsprops == null ? {} : jsprops;
        G__38248["key"] = key;
        return G__38248;
      }
    }();
    return reagent.impl.template.make_element.call(null, argv, comp, p, first_child);
  }
};
reagent.impl.template.vec_to_elem = function reagent$impl$template$vec_to_elem(v) {
  while (true) {
    if (cljs.core.count.call(null, v) > 0) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Hiccup form should not be empty: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str("(pos? (count v))")].join(""));
    }
    var tag = cljs.core.nth.call(null, v, 0);
    if (cljs.core.truth_(reagent.impl.template.valid_tag_QMARK_.call(null, tag))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Hiccup form: "), cljs.core.str(cljs.core.pr_str.call(null, v)), cljs.core.str(reagent.impl.component.comp_name.call(null))].join("")), cljs.core.str("\n"), cljs.core.str("(valid-tag? tag)")].join(""));
    }
    if (cljs.core.truth_(reagent.impl.template.hiccup_tag_QMARK_.call(null, tag))) {
      var n = cljs.core.name.call(null, tag);
      var pos = n.indexOf("\x3e");
      if (pos === -1) {
        return reagent.impl.template.native_element.call(null, reagent.impl.template.cached_parse.call(null, n), v);
      } else {
        var G__38249 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, n, 0, pos), cljs.core.assoc.call(null, v, 0, cljs.core.subs.call(null, n, pos + 1))], null);
        v = G__38249;
        continue;
      }
    } else {
      if (tag instanceof reagent.impl.template.NativeWrapper) {
        return reagent.impl.template.native_element.call(null, tag.comp, v);
      } else {
        return reagent.impl.template.reag_element.call(null, tag, v);
      }
    }
    break;
  }
};
reagent.impl.template.as_element = function reagent$impl$template$as_element(x) {
  if (typeof x === "string") {
    return x;
  } else {
    if (cljs.core.vector_QMARK_.call(null, x)) {
      return reagent.impl.template.vec_to_elem.call(null, x);
    } else {
      if (cljs.core.seq_QMARK_.call(null, x)) {
        return reagent.impl.template.expand_seq_check.call(null, x);
      } else {
        return x;
      }
    }
  }
};
reagent.impl.template.expand_seq = function reagent$impl$template$expand_seq(s) {
  var a = cljs.core.into_array.call(null, s);
  var n__30514__auto___38250 = a.length;
  var i_38251 = 0;
  while (true) {
    if (i_38251 < n__30514__auto___38250) {
      a[i_38251] = reagent.impl.template.as_element.call(null, a[i_38251]);
      var G__38252 = i_38251 + 1;
      i_38251 = G__38252;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_dev = function reagent$impl$template$expand_seq_dev(s, o) {
  var a = cljs.core.into_array.call(null, s);
  var n__30514__auto___38253 = a.length;
  var i_38254 = 0;
  while (true) {
    if (i_38254 < n__30514__auto___38253) {
      var val_38255 = a[i_38254];
      if (cljs.core.vector_QMARK_.call(null, val_38255) && reagent.impl.template.key_from_vec.call(null, val_38255) == null) {
        o["no-key"] = true;
      } else {
      }
      a[i_38254] = reagent.impl.template.as_element.call(null, val_38255);
      var G__38256 = i_38254 + 1;
      i_38254 = G__38256;
      continue;
    } else {
    }
    break;
  }
  return a;
};
reagent.impl.template.expand_seq_check = function reagent$impl$template$expand_seq_check(x) {
  var ctx = {};
  var res = reagent.ratom._STAR_ratom_context_STAR_ == null ? reagent.impl.template.expand_seq_dev.call(null, x, ctx) : reagent.ratom.capture_derefed.call(null, function(ctx) {
    return function() {
      return reagent.impl.template.expand_seq_dev.call(null, x, ctx);
    };
  }(ctx), ctx);
  if (cljs.core.truth_(reagent.ratom.captured.call(null, ctx))) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Reactive deref not supported in lazy seq, "), cljs.core.str("it should be wrapped in doall"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value:\n"), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = cljs.core.not.call(null, reagent.impl.component._STAR_non_reactive_STAR_);
    if (and__29588__auto__) {
      return ctx["no-key"];
    } else {
      return and__29588__auto__;
    }
  }())) {
    if (typeof console !== "undefined") {
      console.warn([cljs.core.str("Warning: "), cljs.core.str("Every element in a seq should have a unique "), cljs.core.str(":key"), cljs.core.str(reagent.impl.component.comp_name.call(null)), cljs.core.str(". Value: "), cljs.core.str(cljs.core.pr_str.call(null, x))].join(""));
    } else {
    }
  } else {
  }
  return res;
};
reagent.impl.template.make_element = function reagent$impl$template$make_element(argv, comp, jsprops, first_child) {
  var G__38258 = cljs.core.count.call(null, argv) - first_child;
  switch(G__38258) {
    case 0:
      return React["createElement"](comp, jsprops);
      break;
    case 1:
      return React["createElement"](comp, jsprops, reagent.impl.template.as_element.call(null, cljs.core.nth.call(null, argv, first_child)));
      break;
    default:
      return React["createElement"].apply(null, cljs.core.reduce_kv.call(null, function(G__38258) {
        return function(a, k, v) {
          if (k >= first_child) {
            a.push(reagent.impl.template.as_element.call(null, v));
          } else {
          }
          return a;
        };
      }(G__38258), [comp, jsprops], argv));
  }
};
goog.provide("reagent.core");
goog.require("cljs.core");
goog.require("reagent.impl.util");
goog.require("reagent.impl.component");
goog.require("reagent.interop");
goog.require("reagent.ratom");
goog.require("reagent.impl.template");
goog.require("reagent.impl.batching");
goog.require("reagent.debug");
reagent.core.is_client = reagent.impl.util.is_client;
reagent.core.create_element = function reagent$core$create_element(var_args) {
  var args38262 = [];
  var len__30669__auto___38269 = arguments.length;
  var i__30670__auto___38270 = 0;
  while (true) {
    if (i__30670__auto___38270 < len__30669__auto___38269) {
      args38262.push(arguments[i__30670__auto___38270]);
      var G__38271 = i__30670__auto___38270 + 1;
      i__30670__auto___38270 = G__38271;
      continue;
    } else {
    }
    break;
  }
  var G__38268 = args38262.length;
  switch(G__38268) {
    case 1:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args38262.slice(3), 0, null);
      return reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30688__auto__);
  }
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return reagent.core.create_element.call(null, type, null);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$2 = function(type, props) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error("Assert failed: (not (map? props))");
  }
  return React.createElement(type, props);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$3 = function(type, props, child) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error("Assert failed: (not (map? props))");
  }
  return React.createElement(type, props, child);
};
reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic = function(type, props, child, children) {
  if (!cljs.core.map_QMARK_.call(null, props)) {
  } else {
    throw new Error("Assert failed: (not (map? props))");
  }
  return cljs.core.apply.call(null, React.createElement, type, props, child, children);
};
reagent.core.create_element.cljs$lang$applyTo = function(seq38263) {
  var G__38264 = cljs.core.first.call(null, seq38263);
  var seq38263__$1 = cljs.core.next.call(null, seq38263);
  var G__38265 = cljs.core.first.call(null, seq38263__$1);
  var seq38263__$2 = cljs.core.next.call(null, seq38263__$1);
  var G__38266 = cljs.core.first.call(null, seq38263__$2);
  var seq38263__$3 = cljs.core.next.call(null, seq38263__$2);
  return reagent.core.create_element.cljs$core$IFn$_invoke$arity$variadic(G__38264, G__38265, G__38266, seq38263__$3);
};
reagent.core.create_element.cljs$lang$maxFixedArity = 3;
reagent.core.as_element = function reagent$core$as_element(form) {
  return reagent.impl.template.as_element.call(null, form);
};
reagent.core.adapt_react_class = function reagent$core$adapt_react_class(c) {
  if (cljs.core.truth_(c)) {
  } else {
    throw new Error("Assert failed: c");
  }
  return reagent.impl.template.adapt_react_class.call(null, c);
};
reagent.core.reactify_component = function reagent$core$reactify_component(c) {
  if (cljs.core.truth_(c)) {
  } else {
    throw new Error("Assert failed: c");
  }
  return reagent.impl.component.reactify_component.call(null, c);
};
reagent.core.render = function reagent$core$render(var_args) {
  var args38273 = [];
  var len__30669__auto___38276 = arguments.length;
  var i__30670__auto___38277 = 0;
  while (true) {
    if (i__30670__auto___38277 < len__30669__auto___38276) {
      args38273.push(arguments[i__30670__auto___38277]);
      var G__38278 = i__30670__auto___38277 + 1;
      i__30670__auto___38277 = G__38278;
      continue;
    } else {
    }
    break;
  }
  var G__38275 = args38273.length;
  switch(G__38275) {
    case 2:
      return reagent.core.render.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return reagent.core.render.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args38273.length)].join(""));;
  }
};
reagent.core.render.cljs$core$IFn$_invoke$arity$2 = function(comp, container) {
  return reagent.core.render.call(null, comp, container, null);
};
reagent.core.render.cljs$core$IFn$_invoke$arity$3 = function(comp, container, callback) {
  var f = function() {
    return reagent.core.as_element.call(null, cljs.core.fn_QMARK_.call(null, comp) ? comp.call(null) : comp);
  };
  return reagent.impl.util.render_component.call(null, f, container, callback);
};
reagent.core.render.cljs$lang$maxFixedArity = 3;
reagent.core.unmount_component_at_node = function reagent$core$unmount_component_at_node(container) {
  return reagent.impl.util.unmount_component_at_node.call(null, container);
};
reagent.core.render_to_string = function reagent$core$render_to_string(component) {
  var _STAR_non_reactive_STAR_38281 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToString"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_38281;
  }
};
reagent.core.as_component = reagent.core.as_element;
reagent.core.render_component = reagent.core.render;
reagent.core.render_component_to_string = reagent.core.render_to_string;
reagent.core.render_to_static_markup = function reagent$core$render_to_static_markup(component) {
  var _STAR_non_reactive_STAR_38283 = reagent.impl.component._STAR_non_reactive_STAR_;
  reagent.impl.component._STAR_non_reactive_STAR_ = true;
  try {
    return React["renderToStaticMarkup"](reagent.core.as_element.call(null, component));
  } finally {
    reagent.impl.component._STAR_non_reactive_STAR_ = _STAR_non_reactive_STAR_38283;
  }
};
reagent.core.force_update_all = function reagent$core$force_update_all() {
  return reagent.impl.util.force_update_all.call(null);
};
goog.exportSymbol("reagent.core.force_update_all", reagent.core.force_update_all);
reagent.core.create_class = function reagent$core$create_class(spec) {
  return reagent.impl.component.create_class.call(null, spec);
};
reagent.core.current_component = function reagent$core$current_component() {
  return reagent.impl.component._STAR_current_component_STAR_;
};
reagent.core.state_atom = function reagent$core$state_atom(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error("Assert failed: (util/reagent-component? this)");
  }
  return reagent.impl.component.state_atom.call(null, this$);
};
reagent.core.state = function reagent$core$state(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error("Assert failed: (util/reagent-component? this)");
  }
  return cljs.core.deref.call(null, reagent.core.state_atom.call(null, this$));
};
reagent.core.replace_state = function reagent$core$replace_state(this$, new_state) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error("Assert failed: (util/reagent-component? this)");
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error("Assert failed: (or (nil? new-state) (map? new-state))");
  }
  return cljs.core.reset_BANG_.call(null, reagent.core.state_atom.call(null, this$), new_state);
};
reagent.core.set_state = function reagent$core$set_state(this$, new_state) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error("Assert failed: (util/reagent-component? this)");
  }
  if (new_state == null || cljs.core.map_QMARK_.call(null, new_state)) {
  } else {
    throw new Error("Assert failed: (or (nil? new-state) (map? new-state))");
  }
  return cljs.core.swap_BANG_.call(null, reagent.core.state_atom.call(null, this$), cljs.core.merge, new_state);
};
reagent.core.force_update = function reagent$core$force_update(var_args) {
  var args38284 = [];
  var len__30669__auto___38287 = arguments.length;
  var i__30670__auto___38288 = 0;
  while (true) {
    if (i__30670__auto___38288 < len__30669__auto___38287) {
      args38284.push(arguments[i__30670__auto___38288]);
      var G__38289 = i__30670__auto___38288 + 1;
      i__30670__auto___38288 = G__38289;
      continue;
    } else {
    }
    break;
  }
  var G__38286 = args38284.length;
  switch(G__38286) {
    case 1:
      return reagent.core.force_update.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return reagent.core.force_update.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args38284.length)].join(""));;
  }
};
reagent.core.force_update.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  return reagent.core.force_update.call(null, this$, false);
};
reagent.core.force_update.cljs$core$IFn$_invoke$arity$2 = function(this$, deep) {
  return reagent.impl.util.force_update.call(null, this$, deep);
};
reagent.core.force_update.cljs$lang$maxFixedArity = 2;
reagent.core.props = function reagent$core$props(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error("Assert failed: (util/reagent-component? this)");
  }
  return reagent.impl.util.get_props.call(null, this$);
};
reagent.core.children = function reagent$core$children(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error("Assert failed: (util/reagent-component? this)");
  }
  return reagent.impl.util.get_children.call(null, this$);
};
reagent.core.argv = function reagent$core$argv(this$) {
  if (cljs.core.truth_(reagent.impl.util.reagent_component_QMARK_.call(null, this$))) {
  } else {
    throw new Error("Assert failed: (util/reagent-component? this)");
  }
  return reagent.impl.util.get_argv.call(null, this$);
};
reagent.core.dom_node = function reagent$core$dom_node(this$) {
  return this$["getDOMNode"]();
};
reagent.core.merge_props = function reagent$core$merge_props(defaults, props) {
  return reagent.impl.util.merge_props.call(null, defaults, props);
};
reagent.core.flush = function reagent$core$flush() {
  return reagent.impl.batching.flush.call(null);
};
reagent.core.atom = function reagent$core$atom(var_args) {
  var args38291 = [];
  var len__30669__auto___38296 = arguments.length;
  var i__30670__auto___38297 = 0;
  while (true) {
    if (i__30670__auto___38297 < len__30669__auto___38296) {
      args38291.push(arguments[i__30670__auto___38297]);
      var G__38298 = i__30670__auto___38297 + 1;
      i__30670__auto___38297 = G__38298;
      continue;
    } else {
    }
    break;
  }
  var G__38295 = args38291.length;
  switch(G__38295) {
    case 1:
      return reagent.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args38291.slice(1), 0, null);
      return reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30688__auto__);
  }
};
reagent.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return reagent.ratom.atom.call(null, x);
};
reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, rest) {
  return cljs.core.apply.call(null, reagent.ratom.atom, x, rest);
};
reagent.core.atom.cljs$lang$applyTo = function(seq38292) {
  var G__38293 = cljs.core.first.call(null, seq38292);
  var seq38292__$1 = cljs.core.next.call(null, seq38292);
  return reagent.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__38293, seq38292__$1);
};
reagent.core.atom.cljs$lang$maxFixedArity = 1;
reagent.core.wrap = function reagent$core$wrap(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38303 = arguments.length;
  var i__30670__auto___38304 = 0;
  while (true) {
    if (i__30670__auto___38304 < len__30669__auto___38303) {
      args__30676__auto__.push(arguments[i__30670__auto___38304]);
      var G__38305 = i__30670__auto___38304 + 1;
      i__30670__auto___38304 = G__38305;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 2 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(2), 0, null) : null;
  return reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30677__auto__);
};
reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic = function(value, reset_fn, args) {
  if (cljs.core.ifn_QMARK_.call(null, reset_fn)) {
  } else {
    throw new Error("Assert failed: (ifn? reset-fn)");
  }
  return reagent.ratom.make_wrapper.call(null, value, reset_fn, args);
};
reagent.core.wrap.cljs$lang$maxFixedArity = 2;
reagent.core.wrap.cljs$lang$applyTo = function(seq38300) {
  var G__38301 = cljs.core.first.call(null, seq38300);
  var seq38300__$1 = cljs.core.next.call(null, seq38300);
  var G__38302 = cljs.core.first.call(null, seq38300__$1);
  var seq38300__$2 = cljs.core.next.call(null, seq38300__$1);
  return reagent.core.wrap.cljs$core$IFn$_invoke$arity$variadic(G__38301, G__38302, seq38300__$2);
};
reagent.core.cursor = function reagent$core$cursor(src, path) {
  return reagent.ratom.cursor.call(null, src, path);
};
reagent.core.next_tick = function reagent$core$next_tick(f) {
  return reagent.impl.batching.next_tick.call(null, f);
};
reagent.core.partial = function reagent$core$partial(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38308 = arguments.length;
  var i__30670__auto___38309 = 0;
  while (true) {
    if (i__30670__auto___38309 < len__30669__auto___38308) {
      args__30676__auto__.push(arguments[i__30670__auto___38309]);
      var G__38310 = i__30670__auto___38309 + 1;
      i__30670__auto___38309 = G__38310;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return new reagent.impl.util.partial_ifn(f, args, null);
};
reagent.core.partial.cljs$lang$maxFixedArity = 1;
reagent.core.partial.cljs$lang$applyTo = function(seq38306) {
  var G__38307 = cljs.core.first.call(null, seq38306);
  var seq38306__$1 = cljs.core.next.call(null, seq38306);
  return reagent.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__38307, seq38306__$1);
};
reagent.core.component_path = function reagent$core$component_path(c) {
  return reagent.impl.component.component_path.call(null, c);
};
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.FreeList");
goog.async.FreeList = goog.defineClass(null, {constructor:function(create, reset, limit) {
  this.limit_ = limit;
  this.create_ = create;
  this.reset_ = reset;
  this.occupants_ = 0;
  this.head_ = null;
}, get:function() {
  var item;
  if (this.occupants_ > 0) {
    this.occupants_--;
    item = this.head_;
    this.head_ = item.next;
    item.next = null;
  } else {
    item = this.create_();
  }
  return item;
}, put:function(item) {
  this.reset_(item);
  if (this.occupants_ < this.limit_) {
    this.occupants_++;
    item.next = this.head_;
    this.head_ = item;
  }
}, occupants:function() {
  return this.occupants_;
}});
goog.provide("goog.async.WorkItem");
goog.provide("goog.async.WorkQueue");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.async.WorkQueue = function() {
  this.workHead_ = null;
  this.workTail_ = null;
};
goog.define("goog.async.WorkQueue.DEFAULT_MAX_UNUSED", 100);
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(function() {
  return new goog.async.WorkItem;
}, function(item) {
  item.reset();
}, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);
goog.async.WorkQueue.prototype.add = function(fn, scope) {
  var item = this.getUnusedItem_();
  item.set(fn, scope);
  if (this.workTail_) {
    this.workTail_.next = item;
    this.workTail_ = item;
  } else {
    goog.asserts.assert(!this.workHead_);
    this.workHead_ = item;
    this.workTail_ = item;
  }
};
goog.async.WorkQueue.prototype.remove = function() {
  var item = null;
  if (this.workHead_) {
    item = this.workHead_;
    this.workHead_ = this.workHead_.next;
    if (!this.workHead_) {
      this.workTail_ = null;
    }
    item.next = null;
  }
  return item;
};
goog.async.WorkQueue.prototype.returnUnused = function(item) {
  goog.async.WorkQueue.freelist_.put(item);
};
goog.async.WorkQueue.prototype.getUnusedItem_ = function() {
  return goog.async.WorkQueue.freelist_.get();
};
goog.async.WorkItem = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.async.WorkItem.prototype.set = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
  this.next = null;
};
goog.async.WorkItem.prototype.reset = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.functions.once = function(f) {
  var inner = f;
  return function() {
    if (inner) {
      var tmp = inner;
      inner = null;
      tmp();
    }
  };
};
goog.functions.debounce = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  return (function(var_args) {
    goog.global.clearTimeout(timeout);
    var args = arguments;
    timeout = goog.global.setTimeout(function() {
      f.apply(null, args);
    }, interval);
  });
};
goog.functions.throttle = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  var shouldFire = false;
  var args = [];
  var handleTimeout = function() {
    timeout = null;
    if (shouldFire) {
      shouldFire = false;
      fire();
    }
  };
  var fire = function() {
    timeout = goog.global.setTimeout(handleTimeout, interval);
    f.apply(null, args);
  };
  return (function(var_args) {
    args = arguments;
    if (!timeout) {
      fire();
    } else {
      shouldFire = true;
    }
  });
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdge_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchEdge_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(["Edge"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || !goog.global.Window || !goog.global.Window.prototype || goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.async.run");
goog.require("goog.async.WorkQueue");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.add(callback, opt_context);
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve(undefined);
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function(opt_realSetTimeout) {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
    if (opt_realSetTimeout) {
      opt_realSetTimeout(goog.async.run.processWorkQueue);
    }
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = new goog.async.WorkQueue;
if (goog.DEBUG) {
  goog.async.run.resetQueue = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = new goog.async.WorkQueue;
  };
}
goog.async.run.processWorkQueue = function() {
  var item = null;
  while (item = goog.async.run.workQueue_.remove()) {
    try {
      item.fn.call(item.scope);
    } catch (e) {
      goog.async.throwException(e);
    }
    goog.async.run.workQueue_.returnUnused(item);
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.callbackEntriesTail_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  if (resolver != goog.nullFunction) {
    try {
      var self = this;
      resolver.call(opt_context, function(value) {
        self.resolve_(goog.Promise.State_.FULFILLED, value);
      }, function(reason) {
        if (goog.DEBUG && !(reason instanceof goog.Promise.CancellationError)) {
          try {
            if (reason instanceof Error) {
              throw reason;
            } else {
              throw new Error("Promise rejected.");
            }
          } catch (e) {
          }
        }
        self.resolve_(goog.Promise.State_.REJECTED, reason);
      });
    } catch (e) {
      this.resolve_(goog.Promise.State_.REJECTED, e);
    }
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_ = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.next = null;
  this.always = false;
};
goog.Promise.CallbackEntry_.prototype.reset = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.always = false;
};
goog.define("goog.Promise.DEFAULT_MAX_UNUSED", 100);
goog.Promise.freelist_ = new goog.async.FreeList(function() {
  return new goog.Promise.CallbackEntry_;
}, function(item) {
  item.reset();
}, goog.Promise.DEFAULT_MAX_UNUSED);
goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {
  var entry = goog.Promise.freelist_.get();
  entry.onFulfilled = onFulfilled;
  entry.onRejected = onRejected;
  entry.context = context;
  return entry;
};
goog.Promise.returnEntry_ = function(entry) {
  goog.Promise.freelist_.put(entry);
};
goog.Promise.resolve = function(opt_value) {
  if (opt_value instanceof goog.Promise) {
    return opt_value;
  }
  var promise = new goog.Promise(goog.nullFunction);
  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);
  return promise;
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.resolveThen_ = function(value, onFulfilled, onRejected) {
  var isThenable = goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);
  if (!isThenable) {
    goog.async.run(goog.partial(onFulfilled, value));
  }
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.allSettled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toSettle = promises.length;
    var results = [];
    if (!toSettle) {
      resolve(results);
      return;
    }
    var onSettled = function(index, fulfilled, result) {
      toSettle--;
      results[index] = fulfilled ? {fulfilled:true, value:result} : {fulfilled:false, reason:result};
      if (toSettle == 0) {
        resolve(results);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onSettled, i, true), goog.partial(onSettled, i, false));
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenVoid = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  this.addCallbackEntry_(goog.Promise.getCallbackEntry_(opt_onFulfilled || goog.nullFunction, opt_onRejected || null, opt_context));
};
goog.Promise.prototype.thenAlways = function(onSettled, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
  entry.always = true;
  this.addCallbackEntry_(entry);
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
      this.parent_ = null;
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childEntry = null;
  var beforeChildEntry = null;
  for (var entry = this.callbackEntries_;entry;entry = entry.next) {
    if (!entry.always) {
      childCount++;
      if (entry.child == childPromise) {
        childEntry = entry;
      }
      if (childEntry && childCount > 1) {
        break;
      }
    }
    if (!childEntry) {
      beforeChildEntry = entry;
    }
  }
  if (childEntry) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      if (beforeChildEntry) {
        this.removeEntryAfter_(beforeChildEntry);
      } else {
        this.popEntry_();
      }
      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if (!this.hasEntry_() && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  this.queueEntry_(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(callbackEntry);
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  }
  this.state_ = goog.Promise.State_.BLOCKED;
  var isThenable = goog.Promise.maybeThen_(x, this.unblockAndFulfill_, this.unblockAndReject_, this);
  if (isThenable) {
    return;
  }
  this.result_ = x;
  this.state_ = state;
  this.parent_ = null;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {
  if (value instanceof goog.Promise) {
    value.thenVoid(onFulfilled, onRejected, context);
    return true;
  } else {
    if (goog.Thenable.isImplementedBy(value)) {
      value = (value);
      value.then(onFulfilled, onRejected, context);
      return true;
    } else {
      if (goog.isObject(value)) {
        try {
          var then = value["then"];
          if (goog.isFunction(then)) {
            goog.Promise.tryThen_(value, then, onFulfilled, onRejected, context);
            return true;
          }
        } catch (e) {
          onRejected.call(context, e);
          return true;
        }
      }
    }
  }
  return false;
};
goog.Promise.tryThen_ = function(thenable, then, onFulfilled, onRejected, context) {
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      onFulfilled.call(context, value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      onRejected.call(context, reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.hasEntry_ = function() {
  return !!this.callbackEntries_;
};
goog.Promise.prototype.queueEntry_ = function(entry) {
  goog.asserts.assert(entry.onFulfilled != null);
  if (this.callbackEntriesTail_) {
    this.callbackEntriesTail_.next = entry;
    this.callbackEntriesTail_ = entry;
  } else {
    this.callbackEntries_ = entry;
    this.callbackEntriesTail_ = entry;
  }
};
goog.Promise.prototype.popEntry_ = function() {
  var entry = null;
  if (this.callbackEntries_) {
    entry = this.callbackEntries_;
    this.callbackEntries_ = entry.next;
    entry.next = null;
  }
  if (!this.callbackEntries_) {
    this.callbackEntriesTail_ = null;
  }
  if (entry != null) {
    goog.asserts.assert(entry.onFulfilled != null);
  }
  return entry;
};
goog.Promise.prototype.removeEntryAfter_ = function(previous) {
  goog.asserts.assert(this.callbackEntries_);
  goog.asserts.assert(previous != null);
  if (previous.next == this.callbackEntriesTail_) {
    this.callbackEntriesTail_ = previous;
  }
  previous.next = previous.next.next;
};
goog.Promise.prototype.executeCallbacks_ = function() {
  var entry = null;
  while (entry = this.popEntry_()) {
    if (goog.Promise.LONG_STACK_TRACES) {
      this.currentStep_++;
    }
    this.executeCallback_(entry, this.state_, this.result_);
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected && !callbackEntry.always) {
    this.removeUnhandledRejection_();
  }
  if (callbackEntry.child) {
    callbackEntry.child.parent_ = null;
    goog.Promise.invokeCallback_(callbackEntry, state, result);
  } else {
    try {
      callbackEntry.always ? callbackEntry.onFulfilled.call(callbackEntry.context) : goog.Promise.invokeCallback_(callbackEntry, state, result);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  }
  goog.Promise.returnEntry_(callbackEntry);
};
goog.Promise.invokeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled.call(callbackEntry.context, result);
  } else {
    if (callbackEntry.onRejected) {
      callbackEntry.onRejected.call(callbackEntry.context, result);
    }
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    callback.call(opt_scope);
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_EDGE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.operaVersion_ = function() {
  var version = goog.global.opera.version;
  try {
    return version();
  } catch (e) {
    return version;
  }
};
goog.userAgent.determineVersion_ = function() {
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    return goog.userAgent.operaVersion_();
  }
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", WHEEL:"wheel", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", 
CHANGE:"change", RESET:"reset", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", 
LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXT:"text", 
TEXTINPUT:"textInput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", 
DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified", BEFOREPRINT:"beforeprint", AFTERPRINT:"afterprint"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  if (!goog.isNull(relevantTouch)) {
    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX : relevantTouch.pageX;
    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY : relevantTouch.pageY;
    this.screenX = relevantTouch.screenX || 0;
    this.screenY = relevantTouch.screenY || 0;
  } else {
    this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
    this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
    this.screenX = e.screenX || 0;
    this.screenY = e.screenY || 0;
  }
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    if (src.attachEvent) {
      src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    } else {
      throw Error("addEventListener and attachEvent are unavailable.");
    }
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = key;
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return [];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = true;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && result !== false;
        }
      }
    }
  }
  return retval;
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.Promise");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.INVALID_TIMEOUT_ID_ = -1;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return goog.Timer.INVALID_TIMEOUT_ID_;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.Timer.promise = function(delay, opt_result) {
  var timerKey = null;
  return (new goog.Promise(function(resolve, reject) {
    timerKey = goog.Timer.callOnce(function() {
      resolve(opt_result);
    }, delay);
    if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
      reject(new Error("Failed to schedule timer."));
    }
  })).thenCatch(function(error) {
    goog.Timer.clear(timerKey);
    throw error;
  });
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return (eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return (eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return (new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  if (object == null) {
    sb.push("null");
    return;
  }
  if (typeof object == "object") {
    if (goog.isArray(object)) {
      this.serializeArray(object, sb);
      return;
    } else {
      if (object instanceof String || object instanceof Number || object instanceof Boolean) {
        object = object.valueOf();
      } else {
        this.serializeObject_((object), sb);
        return;
      }
    }
  }
  switch(typeof object) {
    case "string":
      this.serializeString_(object, sb);
      break;
    case "number":
      this.serializeNumber_(object, sb);
      break;
    case "boolean":
      sb.push(String(object));
      break;
    case "function":
      sb.push("null");
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("￿") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    var rv = goog.json.Serializer.charToJsonCharCache_[c];
    if (!rv) {
      rv = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1);
      goog.json.Serializer.charToJsonCharCache_[c] = rv;
    }
    return rv;
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? String(n) : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet("area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr");
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
          goog.asserts.fail("String value requires balanced quotes, got: " + value);
          value = goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0;i < value.length;i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_RE_ = /^[-,."'%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "'");
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL)) {
    return (goog.global.URL);
  } else {
    if (goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL)) {
      return (goog.global.webkitURL);
    } else {
      if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"‪", RLE:"‫", PDF:"‬", LRM:"‎", RLM:"‏"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿" + "‎Ⰰ-﬜︀-﹯﻽-￿";
goog.i18n.bidi.rtlChars_ = "֑-ۯۺ-߿‏יִ-﷿ﹰ-ﻼ";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1״").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1׳");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      element.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      element.dir = "rtl";
      break;
    default:
      element.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function() {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "'");
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl;
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;
  return trustedResourceUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(tagName, opt_attributes, opt_content);
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0;i < styleSheet.length;i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      value = goog.html.SafeHtml.getStyleValue_(value);
    } else {
      if (/^on/i.test(name)) {
        throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (goog.isString(value)) {
                value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
              } else {
                throw Error('Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl, goog.string.Const, or string,' + ' value "' + value + '" given.');
              }
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.html.SafeScript");
goog.require("goog.asserts");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeScript = function() {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(script) {
  var scriptString = goog.string.Const.unwrap(script);
  if (scriptString.length === 0) {
    return goog.html.SafeScript.EMPTY;
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
  };
}
goog.html.SafeScript.unwrap = function(safeScript) {
  if (safeScript instanceof goog.html.SafeScript && safeScript.constructor === goog.html.SafeScript && safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeScript, got '" + safeScript + "'");
    return "type_error:SafeScript";
  }
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(script) {
  return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(script);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(script) {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = script;
  return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.html.uncheckedconversions");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(justification, html, opt_dir) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(justification, script) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmpty(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(justification, style) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(justification, styleSheet) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (col.getCount && typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (col.getValues && typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (col.getKeys && typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (col.getValues && typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (col.contains && typeof col.contains == "function") {
    return col.contains(val);
  }
  if (col.containsValue && typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (col.isEmpty && typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (col.clear && typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (col.forEach && typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return (goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num ? 1 : 0);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global["StopIteration"] : {message:"StopIteration", stack:""};
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var val = iterator.next();
    if (f.call(opt_obj, val, undefined, iterator)) {
      return val;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return (this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push((key));
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (version != selfObj.version_) {
      throw Error("The map has changed since the iterator was created");
    }
    if (i >= selfObj.keys_.length) {
      throw goog.iter.StopIteration;
    }
    var key = selfObj.keys_[i++];
    return opt_keys ? key : selfObj.map_[key];
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  var html = goog.debug.exposeExceptionAsHtml(err, opt_fn);
  return goog.html.SafeHtml.unwrap(html);
};
goog.debug.exposeExceptionAsHtml = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var viewSourceUrl = goog.debug.createViewSourceUrl_(e.fileName);
    var error = goog.html.SafeHtml.concat(goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Message: " + e.message + "\nUrl: "), goog.html.SafeHtml.create("a", {href:viewSourceUrl, target:"_new"}, e.fileName), goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + e.stack + "-\x3e " + "[end]\n\nJS stack traversal:\n" + goog.debug.getStacktrace(opt_fn) + "-\x3e "));
    return error;
  } catch (e2) {
    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Exception trying to expose exception! You win, we lose. " + e2);
  }
};
goog.debug.createViewSourceUrl_ = function(opt_fileName) {
  if (!goog.isDefAndNotNull(opt_fileName)) {
    opt_fileName = "";
  }
  if (!/^https?:\/\//i.test(opt_fileName)) {
    return goog.html.SafeUrl.fromConstant(goog.string.Const.from("sanitizedviewsrc"));
  }
  var sanitizedFileName = goog.html.SafeUrl.sanitize(opt_fileName);
  return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("view-source scheme plus HTTP/HTTPS URL"), "view-source:" + goog.html.SafeUrl.unwrap(sanitizedFileName));
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return {"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return {"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.runtimeType = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return !!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return (goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress", DOWNLOAD_PROGRESS:"downloadprogress", UPLOAD_PROGRESS:"uploadprogress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, PRECONDITION_REQUIRED:428, TOO_MANY_REQUESTS:429, REQUEST_HEADER_FIELDS_TOO_LARGE:431, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, NETWORK_AUTHENTICATION_REQUIRED:511, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return (this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return (uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
  if (!uri) {
    return uri;
  }
  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && goog.global.self && goog.global.self.location) {
    var protocol = goog.global.self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri), true);
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri), true);
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.parseQueryData = function(encodedQuery, callback) {
  if (!encodedQuery) {
    return;
  }
  var pairs = encodedQuery.split("\x26");
  for (var i = 0;i < pairs.length;i++) {
    var indexOfEquals = pairs[i].indexOf("\x3d");
    var name = null;
    var value = null;
    if (indexOfEquals >= 0) {
      name = pairs[i].substring(0, indexOfEquals);
      value = pairs[i].substring(indexOfEquals + 1);
    } else {
      name = pairs[i];
    }
    callback(name, value ? goog.string.urlDecode(value) : "");
  }
};
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return -1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.progressEventsEnabled_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.setProgressEventsEnabled = function(enabled) {
  this.progressEventsEnabled_ = enabled;
};
goog.net.XhrIo.prototype.getProgressEventsEnabled = function() {
  return this.progressEventsEnabled_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  if (this.getProgressEventsEnabled() && "onprogress" in this.xhr_) {
    this.xhr_.onprogress = goog.bind(function(e) {
      this.onProgressHandler_(e, true);
    }, this);
    if (this.xhr_.upload) {
      this.xhr_.upload.onprogress = goog.bind(this.onProgressHandler_, this);
    }
  }
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.onProgressHandler_ = function(e, opt_isDownload) {
  goog.asserts.assert(e.type === goog.net.EventType.PROGRESS, "goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");
  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(e, goog.net.EventType.PROGRESS));
  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(e, opt_isDownload ? goog.net.EventType.DOWNLOAD_PROGRESS : goog.net.EventType.UPLOAD_PROGRESS));
};
goog.net.XhrIo.buildProgressEvent_ = function(e, eventType) {
  return ({type:eventType, lengthComputable:e.lengthComputable, loaded:e.loaded, total:e.total});
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return !!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return -1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("ajax.protocols");
goog.require("cljs.core");
ajax.protocols.AjaxImpl = function() {
};
ajax.protocols._js_ajax_request = function ajax$protocols$_js_ajax_request(this$, request, handler) {
  if (!(this$ == null) && !(this$.ajax$protocols$AjaxImpl$_js_ajax_request$arity$3 == null)) {
    return this$.ajax$protocols$AjaxImpl$_js_ajax_request$arity$3(this$, request, handler);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._js_ajax_request[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, request, handler);
    } else {
      var m__30264__auto____$1 = ajax.protocols._js_ajax_request["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, request, handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
      }
    }
  }
};
ajax.protocols.AjaxRequest = function() {
};
ajax.protocols._abort = function ajax$protocols$_abort(this$) {
  if (!(this$ == null) && !(this$.ajax$protocols$AjaxRequest$_abort$arity$1 == null)) {
    return this$.ajax$protocols$AjaxRequest$_abort$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._abort[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = ajax.protocols._abort["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "AjaxRequest.-abort", this$);
      }
    }
  }
};
ajax.protocols.AjaxResponse = function() {
};
ajax.protocols._status = function ajax$protocols$_status(this$) {
  if (!(this$ == null) && !(this$.ajax$protocols$AjaxResponse$_status$arity$1 == null)) {
    return this$.ajax$protocols$AjaxResponse$_status$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._status[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = ajax.protocols._status["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status", this$);
      }
    }
  }
};
ajax.protocols._status_text = function ajax$protocols$_status_text(this$) {
  if (!(this$ == null) && !(this$.ajax$protocols$AjaxResponse$_status_text$arity$1 == null)) {
    return this$.ajax$protocols$AjaxResponse$_status_text$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._status_text[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = ajax.protocols._status_text["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status-text", this$);
      }
    }
  }
};
ajax.protocols._body = function ajax$protocols$_body(this$) {
  if (!(this$ == null) && !(this$.ajax$protocols$AjaxResponse$_body$arity$1 == null)) {
    return this$.ajax$protocols$AjaxResponse$_body$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._body[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = ajax.protocols._body["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "AjaxResponse.-body", this$);
      }
    }
  }
};
ajax.protocols._get_response_header = function ajax$protocols$_get_response_header(this$, header) {
  if (!(this$ == null) && !(this$.ajax$protocols$AjaxResponse$_get_response_header$arity$2 == null)) {
    return this$.ajax$protocols$AjaxResponse$_get_response_header$arity$2(this$, header);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._get_response_header[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, header);
    } else {
      var m__30264__auto____$1 = ajax.protocols._get_response_header["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, header);
      } else {
        throw cljs.core.missing_protocol.call(null, "AjaxResponse.-get-response-header", this$);
      }
    }
  }
};
ajax.protocols._was_aborted = function ajax$protocols$_was_aborted(this$) {
  if (!(this$ == null) && !(this$.ajax$protocols$AjaxResponse$_was_aborted$arity$1 == null)) {
    return this$.ajax$protocols$AjaxResponse$_was_aborted$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._was_aborted[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = ajax.protocols._was_aborted["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "AjaxResponse.-was-aborted", this$);
      }
    }
  }
};
ajax.protocols.Interceptor = function() {
};
ajax.protocols._process_request = function ajax$protocols$_process_request(this$, request) {
  if (!(this$ == null) && !(this$.ajax$protocols$Interceptor$_process_request$arity$2 == null)) {
    return this$.ajax$protocols$Interceptor$_process_request$arity$2(this$, request);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._process_request[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, request);
    } else {
      var m__30264__auto____$1 = ajax.protocols._process_request["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, request);
      } else {
        throw cljs.core.missing_protocol.call(null, "Interceptor.-process-request", this$);
      }
    }
  }
};
ajax.protocols._process_response = function ajax$protocols$_process_response(this$, response) {
  if (!(this$ == null) && !(this$.ajax$protocols$Interceptor$_process_response$arity$2 == null)) {
    return this$.ajax$protocols$Interceptor$_process_response$arity$2(this$, response);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = ajax.protocols._process_response[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, response);
    } else {
      var m__30264__auto____$1 = ajax.protocols._process_response["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, response);
      } else {
        throw cljs.core.missing_protocol.call(null, "Interceptor.-process-response", this$);
      }
    }
  }
};
ajax.protocols.Response = function(status, body, status_text, headers, was_aborted, __meta, __extmap, __hash) {
  this.status = status;
  this.body = body;
  this.status_text = status_text;
  this.headers = headers;
  this.was_aborted = was_aborted;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
ajax.protocols.Response.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
ajax.protocols.Response.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k36418, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__36420 = k36418 instanceof cljs.core.Keyword ? k36418.fqn : null;
  switch(G__36420) {
    case "status":
      return self__.status;
      break;
    case "body":
      return self__.body;
      break;
    case "status-text":
      return self__.status_text;
      break;
    case "headers":
      return self__.headers;
      break;
    case "was-aborted":
      return self__.was_aborted;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k36418, else__30225__auto__);
  }
};
ajax.protocols.Response.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#ajax.protocols.Response{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "status", "status", -1997798413), self__.status], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "body", "body", -2049205669), self__.body], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), self__.status_text], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), self__.headers], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "was-aborted", "was-aborted", -2120084828), self__.was_aborted], null)], null), self__.__extmap));
};
ajax.protocols.Response.prototype.cljs$core$IIterable$ = true;
ajax.protocols.Response.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__36417) {
  var self__ = this;
  var G__36417__$1 = this;
  return new cljs.core.RecordIter(0, G__36417__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "body", "body", -2049205669), new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), new cljs.core.Keyword(null, "headers", "headers", -835030129), new cljs.core.Keyword(null, "was-aborted", "was-aborted", -2120084828)], null), cljs.core._iterator.call(null, 
  self__.__extmap));
};
ajax.protocols.Response.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
ajax.protocols.Response.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new ajax.protocols.Response(self__.status, self__.body, self__.status_text, self__.headers, self__.was_aborted, self__.__meta, self__.__extmap, self__.__hash);
};
ajax.protocols.Response.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
ajax.protocols.Response.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
ajax.protocols.Response.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
ajax.protocols.Response.prototype.ajax$protocols$AjaxResponse$ = true;
ajax.protocols.Response.prototype.ajax$protocols$AjaxResponse$_body$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(this$__$1);
};
ajax.protocols.Response.prototype.ajax$protocols$AjaxResponse$_status$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(this$__$1);
};
ajax.protocols.Response.prototype.ajax$protocols$AjaxResponse$_status_text$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return (new cljs.core.Keyword(null, "status-text", "status-text", -1834235478)).cljs$core$IFn$_invoke$arity$1(this$__$1);
};
ajax.protocols.Response.prototype.ajax$protocols$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get.call(null, (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(this$__$1), header);
};
ajax.protocols.Response.prototype.ajax$protocols$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return (new cljs.core.Keyword(null, "was-aborted", "was-aborted", -2120084828)).cljs$core$IFn$_invoke$arity$1(this$__$1);
};
ajax.protocols.Response.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "was-aborted", "was-aborted", -2120084828), null, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), null, new cljs.core.Keyword(null, "headers", "headers", -835030129), null, new cljs.core.Keyword(null, "status", "status", -1997798413), null, new cljs.core.Keyword(null, "body", "body", -2049205669), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new ajax.protocols.Response(self__.status, self__.body, self__.status_text, self__.headers, self__.was_aborted, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
ajax.protocols.Response.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__36417) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__36421 = cljs.core.keyword_identical_QMARK_;
  var expr__36422 = k__30230__auto__;
  if (cljs.core.truth_(pred__36421.call(null, new cljs.core.Keyword(null, "status", "status", -1997798413), expr__36422))) {
    return new ajax.protocols.Response(G__36417, self__.body, self__.status_text, self__.headers, self__.was_aborted, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__36421.call(null, new cljs.core.Keyword(null, "body", "body", -2049205669), expr__36422))) {
      return new ajax.protocols.Response(self__.status, G__36417, self__.status_text, self__.headers, self__.was_aborted, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__36421.call(null, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), expr__36422))) {
        return new ajax.protocols.Response(self__.status, self__.body, G__36417, self__.headers, self__.was_aborted, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__36421.call(null, new cljs.core.Keyword(null, "headers", "headers", -835030129), expr__36422))) {
          return new ajax.protocols.Response(self__.status, self__.body, self__.status_text, G__36417, self__.was_aborted, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__36421.call(null, new cljs.core.Keyword(null, "was-aborted", "was-aborted", -2120084828), expr__36422))) {
            return new ajax.protocols.Response(self__.status, self__.body, self__.status_text, self__.headers, G__36417, self__.__meta, self__.__extmap, null);
          } else {
            return new ajax.protocols.Response(self__.status, self__.body, self__.status_text, self__.headers, self__.was_aborted, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__36417), null);
          }
        }
      }
    }
  }
};
ajax.protocols.Response.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "status", "status", -1997798413), self__.status], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669), self__.body], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), self__.status_text], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), self__.headers], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "was-aborted", "was-aborted", -2120084828), self__.was_aborted], null)], 
  null), self__.__extmap));
};
ajax.protocols.Response.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__36417) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new ajax.protocols.Response(self__.status, self__.body, self__.status_text, self__.headers, self__.was_aborted, G__36417, self__.__extmap, self__.__hash);
};
ajax.protocols.Response.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
ajax.protocols.Response.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "status", "status", -357266886, null), new cljs.core.Symbol(null, "body", "body", -408674142, null), new cljs.core.Symbol(null, "status-text", "status-text", -193703951, null), new cljs.core.Symbol(null, "headers", "headers", 805501398, null), new cljs.core.Symbol(null, "was-aborted", "was-aborted", -479553301, null)], null);
};
ajax.protocols.Response.cljs$lang$type = true;
ajax.protocols.Response.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "ajax.protocols/Response");
};
ajax.protocols.Response.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "ajax.protocols/Response");
};
ajax.protocols.__GT_Response = function ajax$protocols$__GT_Response(status, body, status_text, headers, was_aborted) {
  return new ajax.protocols.Response(status, body, status_text, headers, was_aborted, null, null, null);
};
ajax.protocols.map__GT_Response = function ajax$protocols$map__GT_Response(G__36419) {
  return new ajax.protocols.Response((new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(G__36419), (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(G__36419), (new cljs.core.Keyword(null, "status-text", "status-text", -1834235478)).cljs$core$IFn$_invoke$arity$1(G__36419), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(G__36419), (new cljs.core.Keyword(null, "was-aborted", 
  "was-aborted", -2120084828)).cljs$core$IFn$_invoke$arity$1(G__36419), null, cljs.core.dissoc.call(null, G__36419, new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "body", "body", -2049205669), new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), new cljs.core.Keyword(null, "headers", "headers", -835030129), new cljs.core.Keyword(null, "was-aborted", "was-aborted", -2120084828)), null);
};
goog.provide("ajax.xml_http_request");
goog.require("cljs.core");
goog.require("ajax.protocols");
ajax.xml_http_request.ready_state = function ajax$xml_http_request$ready_state(e) {
  return (new cljs.core.PersistentArrayMap(null, 5, [0, new cljs.core.Keyword(null, "not-initialized", "not-initialized", -1937378906), 1, new cljs.core.Keyword(null, "connection-established", "connection-established", -1403749733), 2, new cljs.core.Keyword(null, "request-received", "request-received", 2110590540), 3, new cljs.core.Keyword(null, "processing-request", "processing-request", -264947221), 4, new cljs.core.Keyword(null, "response-ready", "response-ready", 245208276)], null)).call(null, 
  e.target.readyState);
};
XMLHttpRequest.prototype.ajax$protocols$AjaxImpl$ = true;
XMLHttpRequest.prototype.ajax$protocols$AjaxImpl$_js_ajax_request$arity$3 = function(this$, p__36428, handler) {
  var map__36429 = p__36428;
  var map__36429__$1 = (!(map__36429 == null) ? map__36429.cljs$lang$protocol_mask$partition0$ & 64 || map__36429.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36429) : map__36429;
  var uri = cljs.core.get.call(null, map__36429__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var method = cljs.core.get.call(null, map__36429__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var body = cljs.core.get.call(null, map__36429__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var headers = cljs.core.get.call(null, map__36429__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var timeout = cljs.core.get.call(null, map__36429__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var with_credentials = cljs.core.get.call(null, map__36429__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var response_format = cljs.core.get.call(null, map__36429__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var this$__$1 = this;
  this$__$1.withCredentials = with_credentials;
  this$__$1.onreadystatechange = function(this$__$1, map__36429, map__36429__$1, uri, method, body, headers, timeout, with_credentials, response_format) {
    return function(p1__36427_SHARP_) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "response-ready", "response-ready", 245208276), ajax.xml_http_request.ready_state.call(null, p1__36427_SHARP_))) {
        return handler.call(null, this$__$1);
      } else {
        return null;
      }
    };
  }(this$__$1, map__36429, map__36429__$1, uri, method, body, headers, timeout, with_credentials, response_format);
  this$__$1.open(method, uri, true);
  this$__$1.timeout = timeout;
  var temp__4657__auto___36437 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(response_format);
  if (cljs.core.truth_(temp__4657__auto___36437)) {
    var response_type_36438 = temp__4657__auto___36437;
    this$__$1.responseType = cljs.core.name.call(null, response_type_36438);
  } else {
  }
  var seq__36431_36439 = cljs.core.seq.call(null, headers);
  var chunk__36432_36440 = null;
  var count__36433_36441 = 0;
  var i__36434_36442 = 0;
  while (true) {
    if (i__36434_36442 < count__36433_36441) {
      var vec__36435_36443 = cljs.core._nth.call(null, chunk__36432_36440, i__36434_36442);
      var k_36444 = cljs.core.nth.call(null, vec__36435_36443, 0, null);
      var v_36445 = cljs.core.nth.call(null, vec__36435_36443, 1, null);
      this$__$1.setRequestHeader(k_36444, v_36445);
      var G__36446 = seq__36431_36439;
      var G__36447 = chunk__36432_36440;
      var G__36448 = count__36433_36441;
      var G__36449 = i__36434_36442 + 1;
      seq__36431_36439 = G__36446;
      chunk__36432_36440 = G__36447;
      count__36433_36441 = G__36448;
      i__36434_36442 = G__36449;
      continue;
    } else {
      var temp__4657__auto___36450 = cljs.core.seq.call(null, seq__36431_36439);
      if (temp__4657__auto___36450) {
        var seq__36431_36451__$1 = temp__4657__auto___36450;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__36431_36451__$1)) {
          var c__30411__auto___36452 = cljs.core.chunk_first.call(null, seq__36431_36451__$1);
          var G__36453 = cljs.core.chunk_rest.call(null, seq__36431_36451__$1);
          var G__36454 = c__30411__auto___36452;
          var G__36455 = cljs.core.count.call(null, c__30411__auto___36452);
          var G__36456 = 0;
          seq__36431_36439 = G__36453;
          chunk__36432_36440 = G__36454;
          count__36433_36441 = G__36455;
          i__36434_36442 = G__36456;
          continue;
        } else {
          var vec__36436_36457 = cljs.core.first.call(null, seq__36431_36451__$1);
          var k_36458 = cljs.core.nth.call(null, vec__36436_36457, 0, null);
          var v_36459 = cljs.core.nth.call(null, vec__36436_36457, 1, null);
          this$__$1.setRequestHeader(k_36458, v_36459);
          var G__36460 = cljs.core.next.call(null, seq__36431_36451__$1);
          var G__36461 = null;
          var G__36462 = 0;
          var G__36463 = 0;
          seq__36431_36439 = G__36460;
          chunk__36432_36440 = G__36461;
          count__36433_36441 = G__36462;
          i__36434_36442 = G__36463;
          continue;
        }
      } else {
      }
    }
    break;
  }
  this$__$1.send(function() {
    var or__29600__auto__ = body;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return "";
    }
  }());
  return this$__$1;
};
XMLHttpRequest.prototype.ajax$protocols$AjaxRequest$ = true;
XMLHttpRequest.prototype.ajax$protocols$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort();
};
XMLHttpRequest.prototype.ajax$protocols$AjaxResponse$ = true;
XMLHttpRequest.prototype.ajax$protocols$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.response;
};
XMLHttpRequest.prototype.ajax$protocols$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.status;
};
XMLHttpRequest.prototype.ajax$protocols$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.statusText;
};
XMLHttpRequest.prototype.ajax$protocols$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
XMLHttpRequest.prototype.ajax$protocols$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, 0, this$__$1.readyState);
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  this.scheme_ = "";
  this.userInfo_ = "";
  this.domain_ = "";
  this.port_ = null;
  this.path_ = "";
  this.fragment_ = "";
  this.isReadOnly_ = false;
  this.ignoreCase_ = false;
  this.queryData_;
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ":");
  }
  var domain = this.getDomain();
  if (domain || scheme == "file") {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), "@");
    }
    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_, true));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return !!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return !!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return !!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return !!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, values);
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return (this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return !!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return (!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
  if (!val) {
    return "";
  }
  return opt_preserveReserved ? decodeURI(val.replace(/%25/g, "%2525")) : decodeURIComponent(val);
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra, opt_removeDoubleEncoding) {
  if (goog.isString(unescapedPart)) {
    var encoded = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
    if (opt_removeDoubleEncoding) {
      encoded = goog.Uri.removeDoubleEncoding_(encoded);
    }
    return encoded;
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.keyMap_ = null;
  this.count_ = null;
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var self = this;
      goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {
        self.add(goog.string.urlDecode(name), value);
      });
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = this.keyMap_.getValues();
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.valueCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.getZero();
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.getMinValue();
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.getMaxValue();
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.getZero();
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.getTwoPwr24DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.getZero = function() {
  var idZero = goog.math.Long.ValueCacheId_.ZERO;
  if (!goog.math.Long.valueCache_[idZero]) {
    goog.math.Long.valueCache_[idZero] = goog.math.Long.fromInt(0);
  }
  return goog.math.Long.valueCache_[idZero];
};
goog.math.Long.getOne = function() {
  var idOne = goog.math.Long.ValueCacheId_.ONE;
  if (!goog.math.Long.valueCache_[idOne]) {
    goog.math.Long.valueCache_[idOne] = goog.math.Long.fromInt(1);
  }
  return goog.math.Long.valueCache_[idOne];
};
goog.math.Long.getNegOne = function() {
  var idNegOne = goog.math.Long.ValueCacheId_.NEG_ONE;
  if (!goog.math.Long.valueCache_[idNegOne]) {
    goog.math.Long.valueCache_[idNegOne] = goog.math.Long.fromInt(-1);
  }
  return goog.math.Long.valueCache_[idNegOne];
};
goog.math.Long.getMaxValue = function() {
  var idMaxValue = goog.math.Long.ValueCacheId_.MAX_VALUE;
  if (!goog.math.Long.valueCache_[idMaxValue]) {
    goog.math.Long.valueCache_[idMaxValue] = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
  }
  return goog.math.Long.valueCache_[idMaxValue];
};
goog.math.Long.getMinValue = function() {
  var idMinValue = goog.math.Long.ValueCacheId_.MIN_VALUE;
  if (!goog.math.Long.valueCache_[idMinValue]) {
    goog.math.Long.valueCache_[idMinValue] = goog.math.Long.fromBits(0, 2147483648 | 0);
  }
  return goog.math.Long.valueCache_[idMinValue];
};
goog.math.Long.getTwoPwr24 = function() {
  var idTwoPwr24 = goog.math.Long.ValueCacheId_.TWO_PWR_24;
  if (!goog.math.Long.valueCache_[idTwoPwr24]) {
    goog.math.Long.valueCache_[idTwoPwr24] = goog.math.Long.fromInt(1 << 24);
  }
  return goog.math.Long.valueCache_[idTwoPwr24];
};
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.getMinValue())) {
    return goog.math.Long.getMinValue();
  } else {
    return this.not().add(goog.math.Long.getOne());
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.getZero();
  } else {
    if (other.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    return other.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return this.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.getTwoPwr24()) && other.lessThan(goog.math.Long.getTwoPwr24())) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    if (other.equals(goog.math.Long.getOne()) || other.equals(goog.math.Long.getNegOne())) {
      return goog.math.Long.getMinValue();
    } else {
      if (other.equals(goog.math.Long.getMinValue())) {
        return goog.math.Long.getOne();
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.getZero())) {
          return other.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.getZero();
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.getOne();
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.math.Long.ValueCacheId_ = {MAX_VALUE:1, MIN_VALUE:2, ZERO:3, ONE:4, NEG_ONE:5, TWO_PWR_24:6};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return -Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return [this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return [tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return [em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("com.cognitect.transit");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
cljs.core.UUID.prototype.cljs$core$IComparable$ = true;
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__36470_36474 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__36471_36475 = null;
  var count__36472_36476 = 0;
  var i__36473_36477 = 0;
  while (true) {
    if (i__36473_36477 < count__36472_36476) {
      var k_36478 = cljs.core._nth.call(null, chunk__36471_36475, i__36473_36477);
      var v_36479 = b[k_36478];
      a[k_36478] = v_36479;
      var G__36480 = seq__36470_36474;
      var G__36481 = chunk__36471_36475;
      var G__36482 = count__36472_36476;
      var G__36483 = i__36473_36477 + 1;
      seq__36470_36474 = G__36480;
      chunk__36471_36475 = G__36481;
      count__36472_36476 = G__36482;
      i__36473_36477 = G__36483;
      continue;
    } else {
      var temp__4657__auto___36484 = cljs.core.seq.call(null, seq__36470_36474);
      if (temp__4657__auto___36484) {
        var seq__36470_36485__$1 = temp__4657__auto___36484;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__36470_36485__$1)) {
          var c__30411__auto___36486 = cljs.core.chunk_first.call(null, seq__36470_36485__$1);
          var G__36487 = cljs.core.chunk_rest.call(null, seq__36470_36485__$1);
          var G__36488 = c__30411__auto___36486;
          var G__36489 = cljs.core.count.call(null, c__30411__auto___36486);
          var G__36490 = 0;
          seq__36470_36474 = G__36487;
          chunk__36471_36475 = G__36488;
          count__36472_36476 = G__36489;
          i__36473_36477 = G__36490;
          continue;
        } else {
          var k_36491 = cljs.core.first.call(null, seq__36470_36485__$1);
          var v_36492 = b[k_36491];
          a[k_36491] = v_36492;
          var G__36493 = cljs.core.next.call(null, seq__36470_36485__$1);
          var G__36494 = null;
          var G__36495 = 0;
          var G__36496 = 0;
          seq__36470_36474 = G__36493;
          chunk__36471_36475 = G__36494;
          count__36472_36476 = G__36495;
          i__36473_36477 = G__36496;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function cognitect$transit$reader(var_args) {
  var args36497 = [];
  var len__30669__auto___36500 = arguments.length;
  var i__30670__auto___36501 = 0;
  while (true) {
    if (i__30670__auto___36501 < len__30669__auto___36500) {
      args36497.push(arguments[i__30670__auto___36501]);
      var G__36502 = i__30670__auto___36501 + 1;
      i__30670__auto___36501 = G__36502;
      continue;
    } else {
    }
    break;
  }
  var G__36499 = args36497.length;
  switch(G__36499) {
    case 1:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36497.length)].join(""));;
  }
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.reader.call(null, type, null);
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
    return cljs.core.symbol.call(null, v);
  }, ":", function(v) {
    return cljs.core.keyword.call(null, v);
  }, "set", function(v) {
    return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
  }, "list", function(v) {
    return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
  }, "cmap", function(v) {
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < v.length) {
        var G__36504 = i + 2;
        var G__36505 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
        i = G__36504;
        ret = G__36505;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, ret);
      }
      break;
    }
  }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts))), "mapBuilder":new cognitect.transit.MapBuilder, "arrayBuilder":new cognitect.transit.VectorBuilder, "prefersStrings":false}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.reader.cljs$lang$maxFixedArity = 2;
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__36506_36510 = cljs.core.seq.call(null, v);
  var chunk__36507_36511 = null;
  var count__36508_36512 = 0;
  var i__36509_36513 = 0;
  while (true) {
    if (i__36509_36513 < count__36508_36512) {
      var x_36514 = cljs.core._nth.call(null, chunk__36507_36511, i__36509_36513);
      ret.push(x_36514);
      var G__36515 = seq__36506_36510;
      var G__36516 = chunk__36507_36511;
      var G__36517 = count__36508_36512;
      var G__36518 = i__36509_36513 + 1;
      seq__36506_36510 = G__36515;
      chunk__36507_36511 = G__36516;
      count__36508_36512 = G__36517;
      i__36509_36513 = G__36518;
      continue;
    } else {
      var temp__4657__auto___36519 = cljs.core.seq.call(null, seq__36506_36510);
      if (temp__4657__auto___36519) {
        var seq__36506_36520__$1 = temp__4657__auto___36519;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__36506_36520__$1)) {
          var c__30411__auto___36521 = cljs.core.chunk_first.call(null, seq__36506_36520__$1);
          var G__36522 = cljs.core.chunk_rest.call(null, seq__36506_36520__$1);
          var G__36523 = c__30411__auto___36521;
          var G__36524 = cljs.core.count.call(null, c__30411__auto___36521);
          var G__36525 = 0;
          seq__36506_36510 = G__36522;
          chunk__36507_36511 = G__36523;
          count__36508_36512 = G__36524;
          i__36509_36513 = G__36525;
          continue;
        } else {
          var x_36526 = cljs.core.first.call(null, seq__36506_36520__$1);
          ret.push(x_36526);
          var G__36527 = cljs.core.next.call(null, seq__36506_36520__$1);
          var G__36528 = null;
          var G__36529 = 0;
          var G__36530 = 0;
          seq__36506_36510 = G__36527;
          chunk__36507_36511 = G__36528;
          count__36508_36512 = G__36529;
          i__36509_36513 = G__36530;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__36531_36535 = cljs.core.seq.call(null, v);
  var chunk__36532_36536 = null;
  var count__36533_36537 = 0;
  var i__36534_36538 = 0;
  while (true) {
    if (i__36534_36538 < count__36533_36537) {
      var x_36539 = cljs.core._nth.call(null, chunk__36532_36536, i__36534_36538);
      ret.push(x_36539);
      var G__36540 = seq__36531_36535;
      var G__36541 = chunk__36532_36536;
      var G__36542 = count__36533_36537;
      var G__36543 = i__36534_36538 + 1;
      seq__36531_36535 = G__36540;
      chunk__36532_36536 = G__36541;
      count__36533_36537 = G__36542;
      i__36534_36538 = G__36543;
      continue;
    } else {
      var temp__4657__auto___36544 = cljs.core.seq.call(null, seq__36531_36535);
      if (temp__4657__auto___36544) {
        var seq__36531_36545__$1 = temp__4657__auto___36544;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__36531_36545__$1)) {
          var c__30411__auto___36546 = cljs.core.chunk_first.call(null, seq__36531_36545__$1);
          var G__36547 = cljs.core.chunk_rest.call(null, seq__36531_36545__$1);
          var G__36548 = c__30411__auto___36546;
          var G__36549 = cljs.core.count.call(null, c__30411__auto___36546);
          var G__36550 = 0;
          seq__36531_36535 = G__36547;
          chunk__36532_36536 = G__36548;
          count__36533_36537 = G__36549;
          i__36534_36538 = G__36550;
          continue;
        } else {
          var x_36551 = cljs.core.first.call(null, seq__36531_36545__$1);
          ret.push(x_36551);
          var G__36552 = cljs.core.next.call(null, seq__36531_36545__$1);
          var G__36553 = null;
          var G__36554 = 0;
          var G__36555 = 0;
          seq__36531_36535 = G__36552;
          chunk__36532_36536 = G__36553;
          count__36533_36537 = G__36554;
          i__36534_36538 = G__36555;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__36556_36560 = cljs.core.seq.call(null, v);
  var chunk__36557_36561 = null;
  var count__36558_36562 = 0;
  var i__36559_36563 = 0;
  while (true) {
    if (i__36559_36563 < count__36558_36562) {
      var x_36564 = cljs.core._nth.call(null, chunk__36557_36561, i__36559_36563);
      ret.push(x_36564);
      var G__36565 = seq__36556_36560;
      var G__36566 = chunk__36557_36561;
      var G__36567 = count__36558_36562;
      var G__36568 = i__36559_36563 + 1;
      seq__36556_36560 = G__36565;
      chunk__36557_36561 = G__36566;
      count__36558_36562 = G__36567;
      i__36559_36563 = G__36568;
      continue;
    } else {
      var temp__4657__auto___36569 = cljs.core.seq.call(null, seq__36556_36560);
      if (temp__4657__auto___36569) {
        var seq__36556_36570__$1 = temp__4657__auto___36569;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__36556_36570__$1)) {
          var c__30411__auto___36571 = cljs.core.chunk_first.call(null, seq__36556_36570__$1);
          var G__36572 = cljs.core.chunk_rest.call(null, seq__36556_36570__$1);
          var G__36573 = c__30411__auto___36571;
          var G__36574 = cljs.core.count.call(null, c__30411__auto___36571);
          var G__36575 = 0;
          seq__36556_36560 = G__36572;
          chunk__36557_36561 = G__36573;
          count__36558_36562 = G__36574;
          i__36559_36563 = G__36575;
          continue;
        } else {
          var x_36576 = cljs.core.first.call(null, seq__36556_36570__$1);
          ret.push(x_36576);
          var G__36577 = cljs.core.next.call(null, seq__36556_36570__$1);
          var G__36578 = null;
          var G__36579 = 0;
          var G__36580 = 0;
          seq__36556_36560 = G__36577;
          chunk__36557_36561 = G__36578;
          count__36558_36562 = G__36579;
          i__36559_36563 = G__36580;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
  return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function cognitect$transit$writer(var_args) {
  var args36581 = [];
  var len__30669__auto___36592 = arguments.length;
  var i__30670__auto___36593 = 0;
  while (true) {
    if (i__30670__auto___36593 < len__30669__auto___36592) {
      args36581.push(arguments[i__30670__auto___36593]);
      var G__36594 = i__30670__auto___36593 + 1;
      i__30670__auto___36593 = G__36594;
      continue;
    } else {
    }
    break;
  }
  var G__36583 = args36581.length;
  switch(G__36583) {
    case 1:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36581.length)].join(""));;
  }
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.writer.call(null, type, null);
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  var keyword_handler = new cognitect.transit.KeywordHandler;
  var symbol_handler = new cognitect.transit.SymbolHandler;
  var list_handler = new cognitect.transit.ListHandler;
  var map_handler = new cognitect.transit.MapHandler;
  var set_handler = new cognitect.transit.SetHandler;
  var vector_handler = new cognitect.transit.VectorHandler;
  var uuid_handler = new cognitect.transit.UUIDHandler;
  var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
  cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
  symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
  return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(m, kfn, vfn) {
      return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(obj, k, v) {
          var G__36584 = obj;
          G__36584.push(kfn.call(null, k), vfn.call(null, v));
          return G__36584;
        };
      }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
    var x36585 = cljs.core.clone.call(null, handlers);
    x36585.forEach = function(x36585, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(f) {
        var coll = this;
        var seq__36586 = cljs.core.seq.call(null, coll);
        var chunk__36587 = null;
        var count__36588 = 0;
        var i__36589 = 0;
        while (true) {
          if (i__36589 < count__36588) {
            var vec__36590 = cljs.core._nth.call(null, chunk__36587, i__36589);
            var k = cljs.core.nth.call(null, vec__36590, 0, null);
            var v = cljs.core.nth.call(null, vec__36590, 1, null);
            f.call(null, v, k);
            var G__36596 = seq__36586;
            var G__36597 = chunk__36587;
            var G__36598 = count__36588;
            var G__36599 = i__36589 + 1;
            seq__36586 = G__36596;
            chunk__36587 = G__36597;
            count__36588 = G__36598;
            i__36589 = G__36599;
            continue;
          } else {
            var temp__4657__auto__ = cljs.core.seq.call(null, seq__36586);
            if (temp__4657__auto__) {
              var seq__36586__$1 = temp__4657__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__36586__$1)) {
                var c__30411__auto__ = cljs.core.chunk_first.call(null, seq__36586__$1);
                var G__36600 = cljs.core.chunk_rest.call(null, seq__36586__$1);
                var G__36601 = c__30411__auto__;
                var G__36602 = cljs.core.count.call(null, c__30411__auto__);
                var G__36603 = 0;
                seq__36586 = G__36600;
                chunk__36587 = G__36601;
                count__36588 = G__36602;
                i__36589 = G__36603;
                continue;
              } else {
                var vec__36591 = cljs.core.first.call(null, seq__36586__$1);
                var k = cljs.core.nth.call(null, vec__36591, 0, null);
                var v = cljs.core.nth.call(null, vec__36591, 1, null);
                f.call(null, v, k);
                var G__36604 = cljs.core.next.call(null, seq__36586__$1);
                var G__36605 = null;
                var G__36606 = 0;
                var G__36607 = 0;
                seq__36586 = G__36604;
                chunk__36587 = G__36605;
                count__36588 = G__36606;
                i__36589 = G__36607;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x36585, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
    return x36585;
  }(), "unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(x) {
      if (x instanceof cljs.core.PersistentArrayMap) {
        return x.arr;
      } else {
        return false;
      }
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.writer.cljs$lang$maxFixedArity = 2;
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function cognitect$transit$write_handler(var_args) {
  var args36608 = [];
  var len__30669__auto___36614 = arguments.length;
  var i__30670__auto___36615 = 0;
  while (true) {
    if (i__30670__auto___36615 < len__30669__auto___36614) {
      args36608.push(arguments[i__30670__auto___36615]);
      var G__36616 = i__30670__auto___36615 + 1;
      i__30670__auto___36615 = G__36616;
      continue;
    } else {
    }
    break;
  }
  var G__36610 = args36608.length;
  switch(G__36610) {
    case 2:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36608.length)].join(""));;
  }
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2 = function(tag_fn, rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, null, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3 = function(tag_fn, rep_fn, str_rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
  if (typeof cognitect.transit.t_cognitect$transit36611 !== "undefined") {
  } else {
    cognitect.transit.t_cognitect$transit36611 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, meta36612) {
      this.tag_fn = tag_fn;
      this.rep_fn = rep_fn;
      this.str_rep_fn = str_rep_fn;
      this.verbose_handler_fn = verbose_handler_fn;
      this.meta36612 = meta36612;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cognitect.transit.t_cognitect$transit36611.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_36613, meta36612__$1) {
      var self__ = this;
      var _36613__$1 = this;
      return new cognitect.transit.t_cognitect$transit36611(self__.tag_fn, self__.rep_fn, self__.str_rep_fn, self__.verbose_handler_fn, meta36612__$1);
    };
    cognitect.transit.t_cognitect$transit36611.prototype.cljs$core$IMeta$_meta$arity$1 = function(_36613) {
      var self__ = this;
      var _36613__$1 = this;
      return self__.meta36612;
    };
    cognitect.transit.t_cognitect$transit36611.prototype.tag = function(o) {
      var self__ = this;
      var _ = this;
      return self__.tag_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit36611.prototype.rep = function(o) {
      var self__ = this;
      var _ = this;
      return self__.rep_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit36611.prototype.stringRep = function(o) {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.str_rep_fn)) {
        return self__.str_rep_fn.call(null, o);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit36611.prototype.getVerboseHandler = function() {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.verbose_handler_fn)) {
        return self__.verbose_handler_fn.call(null);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit36611.getBasis = function() {
      return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag-fn", "tag-fn", 242055482, null), new cljs.core.Symbol(null, "rep-fn", "rep-fn", -1724891035, null), new cljs.core.Symbol(null, "str-rep-fn", "str-rep-fn", -1179615016, null), new cljs.core.Symbol(null, "verbose-handler-fn", "verbose-handler-fn", 547340594, null), new cljs.core.Symbol(null, "meta36612", "meta36612", -1313242682, null)], null);
    };
    cognitect.transit.t_cognitect$transit36611.cljs$lang$type = true;
    cognitect.transit.t_cognitect$transit36611.cljs$lang$ctorStr = "cognitect.transit/t_cognitect$transit36611";
    cognitect.transit.t_cognitect$transit36611.cljs$lang$ctorPrWriter = function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
      return cljs.core._write.call(null, writer__30207__auto__, "cognitect.transit/t_cognitect$transit36611");
    };
    cognitect.transit.__GT_t_cognitect$transit36611 = function cognitect$transit$__GT_t_cognitect$transit36611(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta36612) {
      return new cognitect.transit.t_cognitect$transit36611(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta36612);
    };
  }
  return new cognitect.transit.t_cognitect$transit36611(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.write_handler.cljs$lang$maxFixedArity = 4;
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.intValue.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  var or__29600__auto__ = com.cognitect.transit.types.isUUID.call(null, x);
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return x instanceof cljs.core.UUID;
  }
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, function(listenerObj, key) {
    if (this.keys_.hasOwnProperty(key)) {
      goog.events.unlistenByKey(listenerObj);
    }
  }, this);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return {};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  this.headers_ = opt_headers;
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return !xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.net.XhrManager.base(this, "constructor");
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || xhrIo.isSuccess() || request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  this.requests_.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.provide("ajax.xhrio");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrManager");
goog.require("goog.json");
goog.require("goog.net.EventType");
goog.require("goog.events");
goog.require("ajax.protocols");
goog.require("goog.net.ErrorCode");
goog.net.XhrIo.prototype.ajax$protocols$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$protocols$AjaxImpl$_js_ajax_request$arity$3 = function(this$, p__36621, handler) {
  var map__36622 = p__36621;
  var map__36622__$1 = (!(map__36622 == null) ? map__36622.cljs$lang$protocol_mask$partition0$ & 64 || map__36622.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36622) : map__36622;
  var uri = cljs.core.get.call(null, map__36622__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var method = cljs.core.get.call(null, map__36622__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var body = cljs.core.get.call(null, map__36622__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var headers = cljs.core.get.call(null, map__36622__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var timeout = cljs.core.get.call(null, map__36622__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var with_credentials = cljs.core.get.call(null, map__36622__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var this$__$1 = this;
  var G__36624 = this$__$1;
  goog.events.listen(G__36624, goog.net.EventType.COMPLETE, function(G__36624, this$__$1, map__36622, map__36622__$1, uri, method, body, headers, timeout, with_credentials) {
    return function(p1__36620_SHARP_) {
      return handler.call(null, p1__36620_SHARP_.target);
    };
  }(G__36624, this$__$1, map__36622, map__36622__$1, uri, method, body, headers, timeout, with_credentials));
  G__36624.setTimeoutInterval(timeout);
  G__36624.setWithCredentials(with_credentials);
  G__36624.send(uri, method, body, cljs.core.clj__GT_js.call(null, headers));
  return G__36624;
};
goog.net.XhrIo.prototype.ajax$protocols$AjaxRequest$ = true;
goog.net.XhrIo.prototype.ajax$protocols$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort(goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$ = true;
goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getResponseText();
};
goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatus();
};
goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatusText();
};
goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
goog.net.XhrIo.prototype.ajax$protocols$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, this$__$1.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
goog.net.XhrManager.prototype.ajax$protocols$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$protocols$AjaxImpl$_js_ajax_request$arity$3 = function(this$, p__36625, handler) {
  var map__36626 = p__36625;
  var map__36626__$1 = (!(map__36626 == null) ? map__36626.cljs$lang$protocol_mask$partition0$ & 64 || map__36626.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36626) : map__36626;
  var uri = cljs.core.get.call(null, map__36626__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var method = cljs.core.get.call(null, map__36626__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var body = cljs.core.get.call(null, map__36626__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var headers = cljs.core.get.call(null, map__36626__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var id = cljs.core.get.call(null, map__36626__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var timeout = cljs.core.get.call(null, map__36626__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var priority = cljs.core.get.call(null, map__36626__$1, new cljs.core.Keyword(null, "priority", "priority", 1431093715));
  var max_retries = cljs.core.get.call(null, map__36626__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", -1933762121));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, cljs.core.clj__GT_js.call(null, headers), priority, handler, max_retries);
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("cognitect.transit");
goog.require("goog.net.XhrIo");
goog.require("ajax.xml_http_request");
goog.require("goog.json");
goog.require("goog.Uri.QueryData");
goog.require("goog.structs");
goog.require("goog.json.Serializer");
goog.require("ajax.protocols");
goog.require("clojure.string");
goog.require("ajax.xhrio");
ajax.core.process_response = function ajax$core$process_response(response, interceptor) {
  return ajax.protocols._process_response.call(null, interceptor, response);
};
ajax.core.process_request = function ajax$core$process_request(request, interceptor) {
  return ajax.protocols._process_request.call(null, interceptor, request);
};
ajax.core.StandardInterceptor = function(name, request, response, __meta, __extmap, __hash) {
  this.name = name;
  this.request = request;
  this.response = response;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
ajax.core.StandardInterceptor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
ajax.core.StandardInterceptor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k36782, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__36784 = k36782 instanceof cljs.core.Keyword ? k36782.fqn : null;
  switch(G__36784) {
    case "name":
      return self__.name;
      break;
    case "request":
      return self__.request;
      break;
    case "response":
      return self__.response;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k36782, else__30225__auto__);
  }
};
ajax.core.StandardInterceptor.prototype.ajax$protocols$Interceptor$ = true;
ajax.core.StandardInterceptor.prototype.ajax$protocols$Interceptor$_process_request$arity$2 = function(p__36785, opts) {
  var self__ = this;
  var map__36786 = p__36785;
  var map__36786__$1 = (!(map__36786 == null) ? map__36786.cljs$lang$protocol_mask$partition0$ & 64 || map__36786.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36786) : map__36786;
  var request__$1 = cljs.core.get.call(null, map__36786__$1, new cljs.core.Keyword(null, "request", "request", 1772954723));
  var map__36788 = this;
  var map__36788__$1 = (!(map__36788 == null) ? map__36788.cljs$lang$protocol_mask$partition0$ & 64 || map__36788.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36788) : map__36788;
  var request__$2 = cljs.core.get.call(null, map__36788__$1, new cljs.core.Keyword(null, "request", "request", 1772954723));
  return request__$2.call(null, opts);
};
ajax.core.StandardInterceptor.prototype.ajax$protocols$Interceptor$_process_response$arity$2 = function(p__36790, xhrio) {
  var self__ = this;
  var map__36791 = p__36790;
  var map__36791__$1 = (!(map__36791 == null) ? map__36791.cljs$lang$protocol_mask$partition0$ & 64 || map__36791.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36791) : map__36791;
  var response__$1 = cljs.core.get.call(null, map__36791__$1, new cljs.core.Keyword(null, "response", "response", -1068424192));
  var map__36793 = this;
  var map__36793__$1 = (!(map__36793 == null) ? map__36793.cljs$lang$protocol_mask$partition0$ & 64 || map__36793.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36793) : map__36793;
  var response__$2 = cljs.core.get.call(null, map__36793__$1, new cljs.core.Keyword(null, "response", "response", -1068424192));
  return response__$2.call(null, xhrio);
};
ajax.core.StandardInterceptor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#ajax.core.StandardInterceptor{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1843675177), self__.name], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "request", "request", 1772954723), self__.request], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "response", "response", -1068424192), self__.response], null)], null), self__.__extmap));
};
ajax.core.StandardInterceptor.prototype.cljs$core$IIterable$ = true;
ajax.core.StandardInterceptor.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__36781) {
  var self__ = this;
  var G__36781__$1 = this;
  return new cljs.core.RecordIter(0, G__36781__$1, 3, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "request", "request", 1772954723), new cljs.core.Keyword(null, "response", "response", -1068424192)], null), cljs.core._iterator.call(null, self__.__extmap));
};
ajax.core.StandardInterceptor.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
ajax.core.StandardInterceptor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new ajax.core.StandardInterceptor(self__.name, self__.request, self__.response, self__.__meta, self__.__extmap, self__.__hash);
};
ajax.core.StandardInterceptor.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
ajax.core.StandardInterceptor.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
ajax.core.StandardInterceptor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
ajax.core.StandardInterceptor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "response", "response", -1068424192), null, new cljs.core.Keyword(null, "request", "request", 1772954723), null, new cljs.core.Keyword(null, "name", "name", 1843675177), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new ajax.core.StandardInterceptor(self__.name, self__.request, self__.response, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
ajax.core.StandardInterceptor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__36781) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__36795 = cljs.core.keyword_identical_QMARK_;
  var expr__36796 = k__30230__auto__;
  if (cljs.core.truth_(pred__36795.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), expr__36796))) {
    return new ajax.core.StandardInterceptor(G__36781, self__.request, self__.response, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__36795.call(null, new cljs.core.Keyword(null, "request", "request", 1772954723), expr__36796))) {
      return new ajax.core.StandardInterceptor(self__.name, G__36781, self__.response, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__36795.call(null, new cljs.core.Keyword(null, "response", "response", -1068424192), expr__36796))) {
        return new ajax.core.StandardInterceptor(self__.name, self__.request, G__36781, self__.__meta, self__.__extmap, null);
      } else {
        return new ajax.core.StandardInterceptor(self__.name, self__.request, self__.response, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__36781), null);
      }
    }
  }
};
ajax.core.StandardInterceptor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "name", "name", 1843675177), self__.name], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "request", "request", 1772954723), self__.request], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "response", "response", -1068424192), self__.response], null)], null), self__.__extmap));
};
ajax.core.StandardInterceptor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__36781) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new ajax.core.StandardInterceptor(self__.name, self__.request, self__.response, G__36781, self__.__extmap, self__.__hash);
};
ajax.core.StandardInterceptor.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
ajax.core.StandardInterceptor.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "request", "request", -881481046, null), new cljs.core.Symbol(null, "response", "response", 572107335, null)], null);
};
ajax.core.StandardInterceptor.cljs$lang$type = true;
ajax.core.StandardInterceptor.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "ajax.core/StandardInterceptor");
};
ajax.core.StandardInterceptor.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "ajax.core/StandardInterceptor");
};
ajax.core.__GT_StandardInterceptor = function ajax$core$__GT_StandardInterceptor(name, request, response) {
  return new ajax.core.StandardInterceptor(name, request, response, null, null, null);
};
ajax.core.map__GT_StandardInterceptor = function ajax$core$map__GT_StandardInterceptor(G__36783) {
  return new ajax.core.StandardInterceptor((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(G__36783), (new cljs.core.Keyword(null, "request", "request", 1772954723)).cljs$core$IFn$_invoke$arity$1(G__36783), (new cljs.core.Keyword(null, "response", "response", -1068424192)).cljs$core$IFn$_invoke$arity$1(G__36783), null, cljs.core.dissoc.call(null, G__36783, new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "request", "request", 
  1772954723), new cljs.core.Keyword(null, "response", "response", -1068424192)), null);
};
ajax.core.to_interceptor = function ajax$core$to_interceptor(m) {
  return ajax.core.map__GT_StandardInterceptor.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "request", "request", 1772954723), cljs.core.identity, new cljs.core.Keyword(null, "response", "response", -1068424192), cljs.core.identity], null), m));
};
ajax.core.get_content_type = function ajax$core$get_content_type(response) {
  var or__29600__auto__ = ajax.protocols._get_response_header.call(null, response, "Content-Type");
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return "";
  }
};
ajax.core.abort = function ajax$core$abort(this$) {
  return ajax.protocols._abort.call(null, this$);
};
ajax.core.success_QMARK_ = function ajax$core$success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.exception_message = function ajax$core$exception_message(e) {
  return e.message;
};
ajax.core.exception_response = function ajax$core$exception_response(e, status, p__36799, xhrio) {
  var map__36802 = p__36799;
  var map__36802__$1 = (!(map__36802 == null) ? map__36802.cljs$lang$protocol_mask$partition0$ & 64 || map__36802.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36802) : map__36802;
  var description = cljs.core.get.call(null, map__36802__$1, new cljs.core.Keyword(null, "description", "description", -1428560544));
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), null], null);
  var status_text = [cljs.core.str(ajax.core.exception_message.call(null, e)), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "parse", "parse", -1162164619), new cljs.core.Keyword(null, "original-text", "original-text", 744448452), ajax.protocols._body.call(null, xhrio));
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), ajax.protocols._status_text.call(null, xhrio), new cljs.core.Keyword(null, "parse-error", "parse-error", 255902478), parse_error);
  }
};
ajax.core.fail = function ajax$core$fail(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___36808 = arguments.length;
  var i__30670__auto___36809 = 0;
  while (true) {
    if (i__30670__auto___36809 < len__30669__auto___36808) {
      args__30676__auto__.push(arguments[i__30670__auto___36809]);
      var G__36810 = i__30670__auto___36809 + 1;
      i__30670__auto___36809 = G__36810;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 3 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(3), 0, null) : null;
  return ajax.core.fail.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30677__auto__);
};
ajax.core.fail.cljs$core$IFn$_invoke$arity$variadic = function(status, status_text, failure, params) {
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), failure], null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.reduce.call(null, cljs.core.conj, response, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, params)))], null);
};
ajax.core.fail.cljs$lang$maxFixedArity = 3;
ajax.core.fail.cljs$lang$applyTo = function(seq36804) {
  var G__36805 = cljs.core.first.call(null, seq36804);
  var seq36804__$1 = cljs.core.next.call(null, seq36804);
  var G__36806 = cljs.core.first.call(null, seq36804__$1);
  var seq36804__$2 = cljs.core.next.call(null, seq36804__$1);
  var G__36807 = cljs.core.first.call(null, seq36804__$2);
  var seq36804__$3 = cljs.core.next.call(null, seq36804__$2);
  return ajax.core.fail.cljs$core$IFn$_invoke$arity$variadic(G__36805, G__36806, G__36807, seq36804__$3);
};
ajax.core.content_type_to_request_header = function ajax$core$content_type_to_request_header(content_type) {
  return clojure.string.join.call(null, ", ", cljs.core.map.call(null, function(p1__36811_SHARP_) {
    return [cljs.core.str(p1__36811_SHARP_), cljs.core.str("; charset\x3dutf-8")].join("");
  }, typeof content_type === "string" ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content_type], null) : content_type));
};
ajax.core.ResponseFormat = function(read, description, content_type, __meta, __extmap, __hash) {
  this.read = read;
  this.description = description;
  this.content_type = content_type;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
ajax.core.ResponseFormat.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
ajax.core.ResponseFormat.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k36814, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__36816 = k36814 instanceof cljs.core.Keyword ? k36814.fqn : null;
  switch(G__36816) {
    case "read":
      return self__.read;
      break;
    case "description":
      return self__.description;
      break;
    case "content-type":
      return self__.content_type;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k36814, else__30225__auto__);
  }
};
ajax.core.ResponseFormat.prototype.ajax$protocols$Interceptor$ = true;
ajax.core.ResponseFormat.prototype.ajax$protocols$Interceptor$_process_request$arity$2 = function(p__36817, request) {
  var self__ = this;
  var map__36818 = p__36817;
  var map__36818__$1 = (!(map__36818 == null) ? map__36818.cljs$lang$protocol_mask$partition0$ & 64 || map__36818.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36818) : map__36818;
  var content_type__$1 = cljs.core.get.call(null, map__36818__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  var map__36820 = this;
  var map__36820__$1 = (!(map__36820 == null) ? map__36820.cljs$lang$protocol_mask$partition0$ & 64 || map__36820.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36820) : map__36820;
  var content_type__$2 = cljs.core.get.call(null, map__36820__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  return cljs.core.update.call(null, request, new cljs.core.Keyword(null, "headers", "headers", -835030129), function(map__36820, map__36820__$1, content_type__$2, map__36818, map__36818__$1, content_type__$1) {
    return function(p1__36812_SHARP_) {
      return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["Accept", ajax.core.content_type_to_request_header.call(null, content_type__$2)], null), function() {
        var or__29600__auto__ = p1__36812_SHARP_;
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }());
    };
  }(map__36820, map__36820__$1, content_type__$2, map__36818, map__36818__$1, content_type__$1));
};
ajax.core.ResponseFormat.prototype.ajax$protocols$Interceptor$_process_response$arity$2 = function(p__36822, xhrio) {
  var self__ = this;
  var map__36823 = p__36822;
  var map__36823__$1 = (!(map__36823 == null) ? map__36823.cljs$lang$protocol_mask$partition0$ & 64 || map__36823.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36823) : map__36823;
  var format = map__36823__$1;
  var read__$1 = cljs.core.get.call(null, map__36823__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  var map__36825 = this;
  var map__36825__$1 = (!(map__36825 == null) ? map__36825.cljs$lang$protocol_mask$partition0$ & 64 || map__36825.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36825) : map__36825;
  var format__$1 = map__36825__$1;
  var read__$2 = cljs.core.get.call(null, map__36825__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  try {
    var status = ajax.protocols._status.call(null, xhrio);
    var fail = cljs.core.partial.call(null, ajax.core.fail, status);
    var G__36828 = status;
    switch(G__36828) {
      case 0:
        if (xhrio instanceof ajax.protocols.Response) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, xhrio], null);
        } else {
          return fail.call(null, "Request failed.", new cljs.core.Keyword(null, "failed", "failed", -1397425762));
        }
        break;
      case -1:
        if (cljs.core.truth_(ajax.protocols._was_aborted.call(null, xhrio))) {
          return fail.call(null, "Request aborted by client.", new cljs.core.Keyword(null, "aborted", "aborted", 1775972619));
        } else {
          return fail.call(null, "Request timed out.", new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
        }
        break;
      case 204:
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, null], null);
        break;
      case 205:
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, null], null);
        break;
      default:
        try {
          var response = read__$2.call(null, xhrio);
          if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response], null);
          } else {
            return fail.call(null, ajax.protocols._status_text.call(null, xhrio), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), response);
          }
        } catch (e36829) {
          if (e36829 instanceof Object) {
            var e = e36829;
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format__$1, xhrio)], null);
          } else {
            throw e36829;
          }
        }
      ;
    }
  } catch (e36827) {
    if (e36827 instanceof Object) {
      var e = e36827;
      var message = e.message;
      return ajax.core.fail.call(null, 0, message, new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "exception", "exception", -335277064), e);
    } else {
      throw e36827;
    }
  }
};
ajax.core.ResponseFormat.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#ajax.core.ResponseFormat{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "read", "read", 1140058661), self__.read], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "description", "description", -1428560544), self__.description], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "content-type", "content-type", -508222634), self__.content_type], null)], null), self__.__extmap));
};
ajax.core.ResponseFormat.prototype.cljs$core$IIterable$ = true;
ajax.core.ResponseFormat.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__36813) {
  var self__ = this;
  var G__36813__$1 = this;
  return new cljs.core.RecordIter(0, G__36813__$1, 3, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "read", "read", 1140058661), new cljs.core.Keyword(null, "description", "description", -1428560544), new cljs.core.Keyword(null, "content-type", "content-type", -508222634)], null), cljs.core._iterator.call(null, self__.__extmap));
};
ajax.core.ResponseFormat.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
ajax.core.ResponseFormat.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new ajax.core.ResponseFormat(self__.read, self__.description, self__.content_type, self__.__meta, self__.__extmap, self__.__hash);
};
ajax.core.ResponseFormat.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
ajax.core.ResponseFormat.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
ajax.core.ResponseFormat.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
ajax.core.ResponseFormat.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "description", "description", -1428560544), null, new cljs.core.Keyword(null, "read", "read", 1140058661), null, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new ajax.core.ResponseFormat(self__.read, self__.description, self__.content_type, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
ajax.core.ResponseFormat.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__36813) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__36830 = cljs.core.keyword_identical_QMARK_;
  var expr__36831 = k__30230__auto__;
  if (cljs.core.truth_(pred__36830.call(null, new cljs.core.Keyword(null, "read", "read", 1140058661), expr__36831))) {
    return new ajax.core.ResponseFormat(G__36813, self__.description, self__.content_type, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__36830.call(null, new cljs.core.Keyword(null, "description", "description", -1428560544), expr__36831))) {
      return new ajax.core.ResponseFormat(self__.read, G__36813, self__.content_type, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__36830.call(null, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), expr__36831))) {
        return new ajax.core.ResponseFormat(self__.read, self__.description, G__36813, self__.__meta, self__.__extmap, null);
      } else {
        return new ajax.core.ResponseFormat(self__.read, self__.description, self__.content_type, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__36813), null);
      }
    }
  }
};
ajax.core.ResponseFormat.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "read", "read", 1140058661), self__.read], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "description", "description", -1428560544), self__.description], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "content-type", "content-type", -508222634), self__.content_type], null)], null), self__.__extmap));
};
ajax.core.ResponseFormat.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__36813) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new ajax.core.ResponseFormat(self__.read, self__.description, self__.content_type, G__36813, self__.__extmap, self__.__hash);
};
ajax.core.ResponseFormat.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
ajax.core.ResponseFormat.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "read", "read", -1514377108, null), new cljs.core.Symbol(null, "description", "description", 211970983, null), new cljs.core.Symbol(null, "content-type", "content-type", 1132308893, null)], null);
};
ajax.core.ResponseFormat.cljs$lang$type = true;
ajax.core.ResponseFormat.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "ajax.core/ResponseFormat");
};
ajax.core.ResponseFormat.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "ajax.core/ResponseFormat");
};
ajax.core.__GT_ResponseFormat = function ajax$core$__GT_ResponseFormat(read, description, content_type) {
  return new ajax.core.ResponseFormat(read, description, content_type, null, null, null);
};
ajax.core.map__GT_ResponseFormat = function ajax$core$map__GT_ResponseFormat(G__36815) {
  return new ajax.core.ResponseFormat((new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(G__36815), (new cljs.core.Keyword(null, "description", "description", -1428560544)).cljs$core$IFn$_invoke$arity$1(G__36815), (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(G__36815), null, cljs.core.dissoc.call(null, G__36815, new cljs.core.Keyword(null, "read", "read", 1140058661), new cljs.core.Keyword(null, "description", 
  "description", -1428560544), new cljs.core.Keyword(null, "content-type", "content-type", -508222634)), null);
};
ajax.core.params_to_str_alt = function ajax$core$params_to_str_alt(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.vec_param_to_str = function ajax$core$vec_param_to_str(var_args) {
  var args36835 = [];
  var len__30669__auto___36838 = arguments.length;
  var i__30670__auto___36839 = 0;
  while (true) {
    if (i__30670__auto___36839 < len__30669__auto___36838) {
      args36835.push(arguments[i__30670__auto___36839]);
      var G__36840 = i__30670__auto___36839 + 1;
      i__30670__auto___36839 = G__36840;
      continue;
    } else {
    }
    break;
  }
  var G__36837 = args36835.length;
  switch(G__36837) {
    case 3:
      return ajax.core.vec_param_to_str.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return ajax.core.vec_param_to_str.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.vec_param_to_str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36835.length)].join(""));;
  }
};
ajax.core.vec_param_to_str.cljs$core$IFn$_invoke$arity$3 = function(prefix, key, value) {
  return ajax.core.param_to_str.call(null, prefix, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, value], null));
};
ajax.core.vec_param_to_str.cljs$core$IFn$_invoke$arity$2 = function(prefix, key) {
  return function(value) {
    return ajax.core.param_to_str.call(null, prefix, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, value], null));
  };
};
ajax.core.vec_param_to_str.cljs$core$IFn$_invoke$arity$1 = function(prefix) {
  return function(key, value) {
    return ajax.core.param_to_str.call(null, prefix, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, value], null));
  };
};
ajax.core.vec_param_to_str.cljs$lang$maxFixedArity = 3;
ajax.core.param_to_str = function ajax$core$param_to_str(var_args) {
  var args36842 = [];
  var len__30669__auto___36849 = arguments.length;
  var i__30670__auto___36850 = 0;
  while (true) {
    if (i__30670__auto___36850 < len__30669__auto___36849) {
      args36842.push(arguments[i__30670__auto___36850]);
      var G__36851 = i__30670__auto___36850 + 1;
      i__30670__auto___36850 = G__36851;
      continue;
    } else {
    }
    break;
  }
  var G__36844 = args36842.length;
  switch(G__36844) {
    case 2:
      return ajax.core.param_to_str.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.param_to_str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36842.length)].join(""));;
  }
};
ajax.core.param_to_str.cljs$core$IFn$_invoke$arity$2 = function(prefix, p__36845) {
  var vec__36846 = p__36845;
  var key = cljs.core.nth.call(null, vec__36846, 0, null);
  var value = cljs.core.nth.call(null, vec__36846, 1, null);
  var k1 = key instanceof cljs.core.Keyword ? cljs.core.name.call(null, key) : key;
  var new_key = cljs.core.truth_(prefix) ? [cljs.core.str(prefix), cljs.core.str("["), cljs.core.str(k1), cljs.core.str("]")].join("") : k1;
  if (typeof value === "string") {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_key, value], null)], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, value)) {
      return cljs.core.mapcat.call(null, ajax.core.param_to_str.call(null, new_key), cljs.core.seq.call(null, value));
    } else {
      if (cljs.core.sequential_QMARK_.call(null, value)) {
        return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map_indexed.call(null, ajax.core.vec_param_to_str.call(null, new_key), cljs.core.seq.call(null, value)));
      } else {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_key, value], null)], null);
      }
    }
  }
};
ajax.core.param_to_str.cljs$core$IFn$_invoke$arity$1 = function(prefix) {
  return function(p__36847) {
    var vec__36848 = p__36847;
    var key = cljs.core.nth.call(null, vec__36848, 0, null);
    var value = cljs.core.nth.call(null, vec__36848, 1, null);
    var k1 = key instanceof cljs.core.Keyword ? cljs.core.name.call(null, key) : key;
    var new_key = cljs.core.truth_(prefix) ? [cljs.core.str(prefix), cljs.core.str("["), cljs.core.str(k1), cljs.core.str("]")].join("") : k1;
    if (typeof value === "string") {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_key, value], null)], null);
    } else {
      if (cljs.core.map_QMARK_.call(null, value)) {
        return cljs.core.mapcat.call(null, ajax.core.param_to_str.call(null, new_key), cljs.core.seq.call(null, value));
      } else {
        if (cljs.core.sequential_QMARK_.call(null, value)) {
          return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map_indexed.call(null, ajax.core.vec_param_to_str.call(null, new_key), cljs.core.seq.call(null, value)));
        } else {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_key, value], null)], null);
        }
      }
    }
  };
};
ajax.core.param_to_str.cljs$lang$maxFixedArity = 2;
ajax.core.to_utf8_writer = function ajax$core$to_utf8_writer(to_str) {
  return to_str;
};
ajax.core.params_to_str = function ajax$core$params_to_str(params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p__36855) {
    var vec__36856 = p__36855;
    var k = cljs.core.nth.call(null, vec__36856, 0, null);
    var v = cljs.core.nth.call(null, vec__36856, 1, null);
    return [cljs.core.str(k), cljs.core.str("\x3d"), cljs.core.str(v)].join("");
  }, cljs.core.mapcat.call(null, ajax.core.param_to_str.call(null, null), cljs.core.seq.call(null, params))));
};
ajax.core.uri_with_params = function ajax$core$uri_with_params(var_args) {
  var args36857 = [];
  var len__30669__auto___36860 = arguments.length;
  var i__30670__auto___36861 = 0;
  while (true) {
    if (i__30670__auto___36861 < len__30669__auto___36860) {
      args36857.push(arguments[i__30670__auto___36861]);
      var G__36862 = i__30670__auto___36861 + 1;
      i__30670__auto___36861 = G__36862;
      continue;
    } else {
    }
    break;
  }
  var G__36859 = args36857.length;
  switch(G__36859) {
    case 3:
      return ajax.core.uri_with_params.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return ajax.core.uri_with_params.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.uri_with_params.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36857.length)].join(""));;
  }
};
ajax.core.uri_with_params.cljs$core$IFn$_invoke$arity$3 = function(params, params_to_str, uri) {
  if (cljs.core.truth_(params)) {
    return [cljs.core.str(uri), cljs.core.str(cljs.core.truth_(cljs.core.re_find.call(null, /\?/, uri)) ? "\x26" : "?"), cljs.core.str(params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.uri_with_params.cljs$core$IFn$_invoke$arity$2 = function(params, params_to_str) {
  return function(uri) {
    if (cljs.core.truth_(params)) {
      return [cljs.core.str(uri), cljs.core.str(cljs.core.truth_(cljs.core.re_find.call(null, /\?/, uri)) ? "\x26" : "?"), cljs.core.str(params_to_str.call(null, params))].join("");
    } else {
      return uri;
    }
  };
};
ajax.core.uri_with_params.cljs$core$IFn$_invoke$arity$1 = function(params) {
  return function(params_to_str, uri) {
    if (cljs.core.truth_(params)) {
      return [cljs.core.str(uri), cljs.core.str(cljs.core.truth_(cljs.core.re_find.call(null, /\?/, uri)) ? "\x26" : "?"), cljs.core.str(params_to_str.call(null, params))].join("");
    } else {
      return uri;
    }
  };
};
ajax.core.uri_with_params.cljs$lang$maxFixedArity = 3;
ajax.core.get_request_format = function ajax$core$get_request_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), format, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }
};
ajax.core.ProcessGet = function(params_to_str, __meta, __extmap, __hash) {
  this.params_to_str = params_to_str;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
ajax.core.ProcessGet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
ajax.core.ProcessGet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k36865, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__36867 = k36865 instanceof cljs.core.Keyword ? k36865.fqn : null;
  switch(G__36867) {
    case "params-to-str":
      return self__.params_to_str;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k36865, else__30225__auto__);
  }
};
ajax.core.ProcessGet.prototype.ajax$protocols$Interceptor$ = true;
ajax.core.ProcessGet.prototype.ajax$protocols$Interceptor$_process_request$arity$2 = function(_, p__36868) {
  var self__ = this;
  var map__36869 = p__36868;
  var map__36869__$1 = (!(map__36869 == null) ? map__36869.cljs$lang$protocol_mask$partition0$ & 64 || map__36869.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36869) : map__36869;
  var request = map__36869__$1;
  var method = cljs.core.get.call(null, map__36869__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var ___$1 = this;
  if (cljs.core._EQ_.call(null, method, "GET")) {
    return cljs.core.reduced.call(null, cljs.core.update.call(null, request, new cljs.core.Keyword(null, "uri", "uri", -774711847), ajax.core.uri_with_params.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(request), self__.params_to_str)));
  } else {
    return request;
  }
};
ajax.core.ProcessGet.prototype.ajax$protocols$Interceptor$_process_response$arity$2 = function(_, response) {
  var self__ = this;
  var ___$1 = this;
  return response;
};
ajax.core.ProcessGet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#ajax.core.ProcessGet{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "params-to-str", "params-to-str", -934869108), self__.params_to_str], null)], null), self__.__extmap));
};
ajax.core.ProcessGet.prototype.cljs$core$IIterable$ = true;
ajax.core.ProcessGet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__36864) {
  var self__ = this;
  var G__36864__$1 = this;
  return new cljs.core.RecordIter(0, G__36864__$1, 1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "params-to-str", "params-to-str", -934869108)], null), cljs.core._iterator.call(null, self__.__extmap));
};
ajax.core.ProcessGet.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
ajax.core.ProcessGet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new ajax.core.ProcessGet(self__.params_to_str, self__.__meta, self__.__extmap, self__.__hash);
};
ajax.core.ProcessGet.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 1 + cljs.core.count.call(null, self__.__extmap);
};
ajax.core.ProcessGet.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
ajax.core.ProcessGet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
ajax.core.ProcessGet.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params-to-str", "params-to-str", -934869108), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new ajax.core.ProcessGet(self__.params_to_str, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
ajax.core.ProcessGet.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__36864) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__36871 = cljs.core.keyword_identical_QMARK_;
  var expr__36872 = k__30230__auto__;
  if (cljs.core.truth_(pred__36871.call(null, new cljs.core.Keyword(null, "params-to-str", "params-to-str", -934869108), expr__36872))) {
    return new ajax.core.ProcessGet(G__36864, self__.__meta, self__.__extmap, null);
  } else {
    return new ajax.core.ProcessGet(self__.params_to_str, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__36864), null);
  }
};
ajax.core.ProcessGet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "params-to-str", "params-to-str", -934869108), self__.params_to_str], null)], null), self__.__extmap));
};
ajax.core.ProcessGet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__36864) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new ajax.core.ProcessGet(self__.params_to_str, G__36864, self__.__extmap, self__.__hash);
};
ajax.core.ProcessGet.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
ajax.core.ProcessGet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "params-to-str", "params-to-str", 705662419, null)], null);
};
ajax.core.ProcessGet.cljs$lang$type = true;
ajax.core.ProcessGet.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "ajax.core/ProcessGet");
};
ajax.core.ProcessGet.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "ajax.core/ProcessGet");
};
ajax.core.__GT_ProcessGet = function ajax$core$__GT_ProcessGet(params_to_str) {
  return new ajax.core.ProcessGet(params_to_str, null, null, null);
};
ajax.core.map__GT_ProcessGet = function ajax$core$map__GT_ProcessGet(G__36866) {
  return new ajax.core.ProcessGet((new cljs.core.Keyword(null, "params-to-str", "params-to-str", -934869108)).cljs$core$IFn$_invoke$arity$1(G__36866), null, cljs.core.dissoc.call(null, G__36866, new cljs.core.Keyword(null, "params-to-str", "params-to-str", -934869108)), null);
};
ajax.core.throw_error = function ajax$core$throw_error(args) {
  throw new Error([cljs.core.str(args)].join(""));
};
ajax.core.DirectSubmission = function(__meta, __extmap, __hash) {
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
ajax.core.DirectSubmission.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
ajax.core.DirectSubmission.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k36876, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__36878 = k36876;
  switch(G__36878) {
    default:
      return cljs.core.get.call(null, self__.__extmap, k36876, else__30225__auto__);
  }
};
ajax.core.DirectSubmission.prototype.ajax$protocols$Interceptor$ = true;
ajax.core.DirectSubmission.prototype.ajax$protocols$Interceptor$_process_request$arity$2 = function(_, p__36879) {
  var self__ = this;
  var map__36880 = p__36879;
  var map__36880__$1 = (!(map__36880 == null) ? map__36880.cljs$lang$protocol_mask$partition0$ & 64 || map__36880.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36880) : map__36880;
  var request = map__36880__$1;
  var body = cljs.core.get.call(null, map__36880__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var params = cljs.core.get.call(null, map__36880__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var ___$1 = this;
  if (body == null) {
    return request;
  } else {
    return cljs.core.reduced.call(null, request);
  }
};
ajax.core.DirectSubmission.prototype.ajax$protocols$Interceptor$_process_response$arity$2 = function(_, response) {
  var self__ = this;
  var ___$1 = this;
  return response;
};
ajax.core.DirectSubmission.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#ajax.core.DirectSubmission{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.EMPTY, self__.__extmap));
};
ajax.core.DirectSubmission.prototype.cljs$core$IIterable$ = true;
ajax.core.DirectSubmission.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__36875) {
  var self__ = this;
  var G__36875__$1 = this;
  return new cljs.core.RecordIter(0, G__36875__$1, 0, cljs.core.PersistentVector.EMPTY, cljs.core._iterator.call(null, self__.__extmap));
};
ajax.core.DirectSubmission.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
ajax.core.DirectSubmission.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new ajax.core.DirectSubmission(self__.__meta, self__.__extmap, self__.__hash);
};
ajax.core.DirectSubmission.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 0 + cljs.core.count.call(null, self__.__extmap);
};
ajax.core.DirectSubmission.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
ajax.core.DirectSubmission.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
ajax.core.DirectSubmission.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.EMPTY, k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new ajax.core.DirectSubmission(self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
ajax.core.DirectSubmission.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__36875) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__36882 = cljs.core.keyword_identical_QMARK_;
  var expr__36883 = k__30230__auto__;
  return new ajax.core.DirectSubmission(self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__36875), null);
};
ajax.core.DirectSubmission.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.EMPTY, self__.__extmap));
};
ajax.core.DirectSubmission.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__36875) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new ajax.core.DirectSubmission(G__36875, self__.__extmap, self__.__hash);
};
ajax.core.DirectSubmission.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
ajax.core.DirectSubmission.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
ajax.core.DirectSubmission.cljs$lang$type = true;
ajax.core.DirectSubmission.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "ajax.core/DirectSubmission");
};
ajax.core.DirectSubmission.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "ajax.core/DirectSubmission");
};
ajax.core.__GT_DirectSubmission = function ajax$core$__GT_DirectSubmission() {
  return new ajax.core.DirectSubmission(null, null, null);
};
ajax.core.map__GT_DirectSubmission = function ajax$core$map__GT_DirectSubmission(G__36877) {
  return new ajax.core.DirectSubmission(null, cljs.core.dissoc.call(null, G__36877), null);
};
ajax.core.apply_request_format = function ajax$core$apply_request_format(write, params) {
  return write.call(null, params);
};
ajax.core.ApplyRequestFormat = function(__meta, __extmap, __hash) {
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k36887, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__36889 = k36887;
  switch(G__36889) {
    default:
      return cljs.core.get.call(null, self__.__extmap, k36887, else__30225__auto__);
  }
};
ajax.core.ApplyRequestFormat.prototype.ajax$protocols$Interceptor$ = true;
ajax.core.ApplyRequestFormat.prototype.ajax$protocols$Interceptor$_process_request$arity$2 = function(_, p__36890) {
  var self__ = this;
  var map__36891 = p__36890;
  var map__36891__$1 = (!(map__36891 == null) ? map__36891.cljs$lang$protocol_mask$partition0$ & 64 || map__36891.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36891) : map__36891;
  var request = map__36891__$1;
  var uri = cljs.core.get.call(null, map__36891__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var method = cljs.core.get.call(null, map__36891__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var format = cljs.core.get.call(null, map__36891__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var params = cljs.core.get.call(null, map__36891__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var headers = cljs.core.get.call(null, map__36891__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var ___$1 = this;
  var map__36893 = ajax.core.get_request_format.call(null, format);
  var map__36893__$1 = (!(map__36893 == null) ? map__36893.cljs$lang$protocol_mask$partition0$ & 64 || map__36893.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36893) : map__36893;
  var write = cljs.core.get.call(null, map__36893__$1, new cljs.core.Keyword(null, "write", "write", -1857649168));
  var content_type = cljs.core.get.call(null, map__36893__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  var body = !(write == null) ? ajax.core.apply_request_format.call(null, write, params) : ajax.core.throw_error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["unrecognized request format: ", format], null));
  var headers__$1 = function() {
    var or__29600__auto__ = headers;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return cljs.core.assoc.call(null, request, new cljs.core.Keyword(null, "body", "body", -2049205669), body, new cljs.core.Keyword(null, "headers", "headers", -835030129), cljs.core.truth_(content_type) ? cljs.core.assoc.call(null, headers__$1, "Content-Type", ajax.core.content_type_to_request_header.call(null, content_type)) : headers__$1);
};
ajax.core.ApplyRequestFormat.prototype.ajax$protocols$Interceptor$_process_response$arity$2 = function(_, xhrio) {
  var self__ = this;
  var ___$1 = this;
  return xhrio;
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#ajax.core.ApplyRequestFormat{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, cljs.core.PersistentVector.EMPTY, self__.__extmap));
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$IIterable$ = true;
ajax.core.ApplyRequestFormat.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__36886) {
  var self__ = this;
  var G__36886__$1 = this;
  return new cljs.core.RecordIter(0, G__36886__$1, 0, cljs.core.PersistentVector.EMPTY, cljs.core._iterator.call(null, self__.__extmap));
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new ajax.core.ApplyRequestFormat(self__.__meta, self__.__extmap, self__.__hash);
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 0 + cljs.core.count.call(null, self__.__extmap);
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, cljs.core.PersistentHashSet.EMPTY, k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new ajax.core.ApplyRequestFormat(self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__36886) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__36895 = cljs.core.keyword_identical_QMARK_;
  var expr__36896 = k__30230__auto__;
  return new ajax.core.ApplyRequestFormat(self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__36886), null);
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.PersistentVector.EMPTY, self__.__extmap));
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__36886) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new ajax.core.ApplyRequestFormat(G__36886, self__.__extmap, self__.__hash);
};
ajax.core.ApplyRequestFormat.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
ajax.core.ApplyRequestFormat.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
ajax.core.ApplyRequestFormat.cljs$lang$type = true;
ajax.core.ApplyRequestFormat.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "ajax.core/ApplyRequestFormat");
};
ajax.core.ApplyRequestFormat.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "ajax.core/ApplyRequestFormat");
};
ajax.core.__GT_ApplyRequestFormat = function ajax$core$__GT_ApplyRequestFormat() {
  return new ajax.core.ApplyRequestFormat(null, null, null);
};
ajax.core.map__GT_ApplyRequestFormat = function ajax$core$map__GT_ApplyRequestFormat(G__36888) {
  return new ajax.core.ApplyRequestFormat(null, cljs.core.dissoc.call(null, G__36888), null);
};
ajax.core.transit_type = function ajax$core$transit_type(p__36899) {
  var map__36902 = p__36899;
  var map__36902__$1 = (!(map__36902 == null) ? map__36902.cljs$lang$protocol_mask$partition0$ & 64 || map__36902.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36902) : map__36902;
  var type = cljs.core.get.call(null, map__36902__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
  var or__29600__auto__ = type;
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return new cljs.core.Keyword(null, "json", "json", 1279968570);
  }
};
ajax.core.transit_write_fn = function ajax$core$transit_write_fn(type, request) {
  var writer = function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "writer", "writer", -277568236)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cognitect.transit.writer.call(null, type, request);
    }
  }();
  return function(writer) {
    return function ajax$core$transit_write_fn_$_transit_write_params(params) {
      return cognitect.transit.write.call(null, writer, params);
    };
  }(writer);
};
ajax.core.transit_request_format = function ajax$core$transit_request_format(var_args) {
  var args36904 = [];
  var len__30669__auto___36907 = arguments.length;
  var i__30670__auto___36908 = 0;
  while (true) {
    if (i__30670__auto___36908 < len__30669__auto___36907) {
      args36904.push(arguments[i__30670__auto___36908]);
      var G__36909 = i__30670__auto___36908 + 1;
      i__30670__auto___36908 = G__36909;
      continue;
    } else {
    }
    break;
  }
  var G__36906 = args36904.length;
  switch(G__36906) {
    case 0:
      return ajax.core.transit_request_format.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return ajax.core.transit_request_format.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36904.length)].join(""));;
  }
};
ajax.core.transit_request_format.cljs$core$IFn$_invoke$arity$0 = function() {
  return ajax.core.transit_request_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
ajax.core.transit_request_format.cljs$core$IFn$_invoke$arity$1 = function(request) {
  var type = ajax.core.transit_type.call(null, request);
  var mime_type = cljs.core._EQ_.call(null, type, new cljs.core.Keyword(null, "json", "json", 1279968570)) ? "json" : "msgpack";
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.transit_write_fn.call(null, type, request), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), [cljs.core.str("application/transit+"), cljs.core.str(mime_type)].join("")], null);
};
ajax.core.transit_request_format.cljs$lang$maxFixedArity = 1;
ajax.core.transit_read_fn = function ajax$core$transit_read_fn(request) {
  var reader = function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "reader", "reader", 169660853)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cognitect.transit.reader.call(null, new cljs.core.Keyword(null, "json", "json", 1279968570), request);
    }
  }();
  return function(reader) {
    return function ajax$core$transit_read_fn_$_transit_read_response(response) {
      var data = cognitect.transit.read.call(null, reader, ajax.protocols._body.call(null, response));
      if (cljs.core.truth_((new cljs.core.Keyword(null, "raw", "raw", 1604651272)).cljs$core$IFn$_invoke$arity$1(request))) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  }(reader);
};
ajax.core.transit_response_format = function ajax$core$transit_response_format(var_args) {
  var args36911 = [];
  var len__30669__auto___36914 = arguments.length;
  var i__30670__auto___36915 = 0;
  while (true) {
    if (i__30670__auto___36915 < len__30669__auto___36914) {
      args36911.push(arguments[i__30670__auto___36915]);
      var G__36916 = i__30670__auto___36915 + 1;
      i__30670__auto___36915 = G__36916;
      continue;
    } else {
    }
    break;
  }
  var G__36913 = args36911.length;
  switch(G__36913) {
    case 0:
      return ajax.core.transit_response_format.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return ajax.core.transit_response_format.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return ajax.core.transit_response_format.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36911.length)].join(""));;
  }
};
ajax.core.transit_response_format.cljs$core$IFn$_invoke$arity$0 = function() {
  return ajax.core.transit_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
ajax.core.transit_response_format.cljs$core$IFn$_invoke$arity$1 = function(request) {
  return ajax.core.transit_response_format.call(null, ajax.core.transit_type.call(null, request), request);
};
ajax.core.transit_response_format.cljs$core$IFn$_invoke$arity$2 = function(type, request) {
  return ajax.core.map__GT_ResponseFormat.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.transit_read_fn.call(null, request), new cljs.core.Keyword(null, "description", "description", -1428560544), "Transit", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["application/transit+json"], null)], null));
};
ajax.core.transit_response_format.cljs$lang$maxFixedArity = 2;
ajax.core.url_request_format = function ajax$core$url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.to_utf8_writer.call(null, ajax.core.params_to_str), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function ajax$core$raw_response_format(var_args) {
  var args36918 = [];
  var len__30669__auto___36921 = arguments.length;
  var i__30670__auto___36922 = 0;
  while (true) {
    if (i__30670__auto___36922 < len__30669__auto___36921) {
      args36918.push(arguments[i__30670__auto___36922]);
      var G__36923 = i__30670__auto___36922 + 1;
      i__30670__auto___36922 = G__36923;
      continue;
    } else {
    }
    break;
  }
  var G__36920 = args36918.length;
  switch(G__36920) {
    case 0:
      return ajax.core.raw_response_format.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return ajax.core.raw_response_format.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36918.length)].join(""));;
  }
};
ajax.core.raw_response_format.cljs$core$IFn$_invoke$arity$0 = function() {
  return ajax.core.map__GT_ResponseFormat.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.protocols._body, new cljs.core.Keyword(null, "description", "description", -1428560544), "raw text", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*/*"], null)], null));
};
ajax.core.raw_response_format.cljs$core$IFn$_invoke$arity$1 = function(_) {
  return ajax.core.raw_response_format.call(null);
};
ajax.core.raw_response_format.cljs$lang$maxFixedArity = 1;
ajax.core.text_request_format = function ajax$core$text_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.to_utf8_writer.call(null, cljs.core.identity), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
};
ajax.core.text_response_format = ajax.core.raw_response_format;
ajax.core.write_json = function ajax$core$write_json(data) {
  return (new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function ajax$core$json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/json"], null);
};
ajax.core.strip_prefix = function ajax$core$strip_prefix(prefix, text) {
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = prefix;
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
    } else {
      return and__29588__auto__;
    }
  }())) {
    return text.substring(prefix.length);
  } else {
    return text;
  }
};
ajax.core.json_read = function ajax$core$json_read(var_args) {
  var args36925 = [];
  var len__30669__auto___36928 = arguments.length;
  var i__30670__auto___36929 = 0;
  while (true) {
    if (i__30670__auto___36929 < len__30669__auto___36928) {
      args36925.push(arguments[i__30670__auto___36929]);
      var G__36930 = i__30670__auto___36929 + 1;
      i__30670__auto___36929 = G__36930;
      continue;
    } else {
    }
    break;
  }
  var G__36927 = args36925.length;
  switch(G__36927) {
    case 4:
      return ajax.core.json_read.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 3:
      return ajax.core.json_read.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return ajax.core.json_read.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.json_read.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36925.length)].join(""));;
  }
};
ajax.core.json_read.cljs$core$IFn$_invoke$arity$4 = function(prefix, raw, keywords_QMARK_, xhrio) {
  var text = ajax.core.strip_prefix.call(null, prefix, ajax.protocols._body.call(null, xhrio));
  var json = goog.json.parse(text);
  if (cljs.core.truth_(raw)) {
    return json;
  } else {
    return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
  }
};
ajax.core.json_read.cljs$core$IFn$_invoke$arity$3 = function(prefix, raw, keywords_QMARK_) {
  return function(xhrio) {
    var text = ajax.core.strip_prefix.call(null, prefix, ajax.protocols._body.call(null, xhrio));
    var json = goog.json.parse(text);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
};
ajax.core.json_read.cljs$core$IFn$_invoke$arity$2 = function(prefix, raw) {
  return function(keywords_QMARK_, xhrio) {
    var text = ajax.core.strip_prefix.call(null, prefix, ajax.protocols._body.call(null, xhrio));
    var json = goog.json.parse(text);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
};
ajax.core.json_read.cljs$core$IFn$_invoke$arity$1 = function(prefix) {
  return function(raw, keywords_QMARK_, xhrio) {
    var text = ajax.core.strip_prefix.call(null, prefix, ajax.protocols._body.call(null, xhrio));
    var json = goog.json.parse(text);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
};
ajax.core.json_read.cljs$lang$maxFixedArity = 4;
ajax.core.json_response_format = function ajax$core$json_response_format(var_args) {
  var args36932 = [];
  var len__30669__auto___36938 = arguments.length;
  var i__30670__auto___36939 = 0;
  while (true) {
    if (i__30670__auto___36939 < len__30669__auto___36938) {
      args36932.push(arguments[i__30670__auto___36939]);
      var G__36940 = i__30670__auto___36939 + 1;
      i__30670__auto___36939 = G__36940;
      continue;
    } else {
    }
    break;
  }
  var G__36934 = args36932.length;
  switch(G__36934) {
    case 0:
      return ajax.core.json_response_format.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return ajax.core.json_response_format.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36932.length)].join(""));;
  }
};
ajax.core.json_response_format.cljs$core$IFn$_invoke$arity$0 = function() {
  return ajax.core.json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
ajax.core.json_response_format.cljs$core$IFn$_invoke$arity$1 = function(p__36935) {
  var map__36936 = p__36935;
  var map__36936__$1 = (!(map__36936 == null) ? map__36936.cljs$lang$protocol_mask$partition0$ & 64 || map__36936.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36936) : map__36936;
  var prefix = cljs.core.get.call(null, map__36936__$1, new cljs.core.Keyword(null, "prefix", "prefix", -265908465));
  var keywords_QMARK_ = cljs.core.get.call(null, map__36936__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733));
  var raw = cljs.core.get.call(null, map__36936__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
  return ajax.core.map__GT_ResponseFormat.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.json_read.call(null, prefix, raw, keywords_QMARK_), new cljs.core.Keyword(null, "description", "description", -1428560544), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : 
  null)].join(""), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["application/json"], null)], null));
};
ajax.core.json_response_format.cljs$lang$maxFixedArity = 1;
ajax.core.default_formats = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["application/json", ajax.core.json_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["application/transit+json", ajax.core.transit_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["application/transit+transit", 
ajax.core.transit_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/plain", ajax.core.text_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/html", ajax.core.text_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*/*", ajax.core.raw_response_format], null)], null);
ajax.core.get_format = function ajax$core$get_format(var_args) {
  var args36942 = [];
  var len__30669__auto___36945 = arguments.length;
  var i__30670__auto___36946 = 0;
  while (true) {
    if (i__30670__auto___36946 < len__30669__auto___36945) {
      args36942.push(arguments[i__30670__auto___36946]);
      var G__36947 = i__30670__auto___36946 + 1;
      i__30670__auto___36946 = G__36947;
      continue;
    } else {
    }
    break;
  }
  var G__36944 = args36942.length;
  switch(G__36944) {
    case 2:
      return ajax.core.get_format.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.get_format.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36942.length)].join(""));;
  }
};
ajax.core.get_format.cljs$core$IFn$_invoke$arity$2 = function(request, format_entry) {
  if (format_entry == null || cljs.core.map_QMARK_.call(null, format_entry)) {
    return format_entry;
  } else {
    if (cljs.core.vector_QMARK_.call(null, format_entry)) {
      return ajax.core.get_format.call(null, request, cljs.core.second.call(null, format_entry));
    } else {
      return format_entry.call(null, request);
    }
  }
};
ajax.core.get_format.cljs$core$IFn$_invoke$arity$1 = function(request) {
  return function(format_entry) {
    if (format_entry == null || cljs.core.map_QMARK_.call(null, format_entry)) {
      return format_entry;
    } else {
      if (cljs.core.vector_QMARK_.call(null, format_entry)) {
        return ajax.core.get_format.call(null, request, cljs.core.second.call(null, format_entry));
      } else {
        return format_entry.call(null, request);
      }
    }
  };
};
ajax.core.get_format.cljs$lang$maxFixedArity = 2;
ajax.core.get_accept_entries = function ajax$core$get_accept_entries(var_args) {
  var args36949 = [];
  var len__30669__auto___36952 = arguments.length;
  var i__30670__auto___36953 = 0;
  while (true) {
    if (i__30670__auto___36953 < len__30669__auto___36952) {
      args36949.push(arguments[i__30670__auto___36953]);
      var G__36954 = i__30670__auto___36953 + 1;
      i__30670__auto___36953 = G__36954;
      continue;
    } else {
    }
    break;
  }
  var G__36951 = args36949.length;
  switch(G__36951) {
    case 2:
      return ajax.core.get_accept_entries.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.get_accept_entries.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36949.length)].join(""));;
  }
};
ajax.core.get_accept_entries.cljs$core$IFn$_invoke$arity$2 = function(request, format_entry) {
  var fe = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, request, format_entry));
  if (fe == null) {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*/*"], null);
  } else {
    if (typeof fe === "string") {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fe], null);
    } else {
      return fe;
    }
  }
};
ajax.core.get_accept_entries.cljs$core$IFn$_invoke$arity$1 = function(request) {
  return function(format_entry) {
    var fe = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, request, format_entry));
    if (fe == null) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*/*"], null);
    } else {
      if (typeof fe === "string") {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fe], null);
      } else {
        return fe;
      }
    }
  };
};
ajax.core.get_accept_entries.cljs$lang$maxFixedArity = 2;
ajax.core.content_type_matches = function ajax$core$content_type_matches(var_args) {
  var args36956 = [];
  var len__30669__auto___36959 = arguments.length;
  var i__30670__auto___36960 = 0;
  while (true) {
    if (i__30670__auto___36960 < len__30669__auto___36959) {
      args36956.push(arguments[i__30670__auto___36960]);
      var G__36961 = i__30670__auto___36960 + 1;
      i__30670__auto___36960 = G__36961;
      continue;
    } else {
    }
    break;
  }
  var G__36958 = args36956.length;
  switch(G__36958) {
    case 2:
      return ajax.core.content_type_matches.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.content_type_matches.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36956.length)].join(""));;
  }
};
ajax.core.content_type_matches.cljs$core$IFn$_invoke$arity$2 = function(content_type, accept) {
  return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
};
ajax.core.content_type_matches.cljs$core$IFn$_invoke$arity$1 = function(content_type) {
  return function(accept) {
    return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
  };
};
ajax.core.content_type_matches.cljs$lang$maxFixedArity = 2;
ajax.core.detect_content_type = function ajax$core$detect_content_type(var_args) {
  var args36963 = [];
  var len__30669__auto___36966 = arguments.length;
  var i__30670__auto___36967 = 0;
  while (true) {
    if (i__30670__auto___36967 < len__30669__auto___36966) {
      args36963.push(arguments[i__30670__auto___36967]);
      var G__36968 = i__30670__auto___36967 + 1;
      i__30670__auto___36967 = G__36968;
      continue;
    } else {
    }
    break;
  }
  var G__36965 = args36963.length;
  switch(G__36965) {
    case 3:
      return ajax.core.detect_content_type.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return ajax.core.detect_content_type.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.detect_content_type.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36963.length)].join(""));;
  }
};
ajax.core.detect_content_type.cljs$core$IFn$_invoke$arity$3 = function(content_type, request, format_entry) {
  var accept = ajax.core.get_accept_entries.call(null, request, format_entry);
  return cljs.core.some.call(null, ajax.core.content_type_matches.call(null, content_type), accept);
};
ajax.core.detect_content_type.cljs$core$IFn$_invoke$arity$2 = function(content_type, request) {
  return function(format_entry) {
    var accept = ajax.core.get_accept_entries.call(null, request, format_entry);
    return cljs.core.some.call(null, ajax.core.content_type_matches.call(null, content_type), accept);
  };
};
ajax.core.detect_content_type.cljs$core$IFn$_invoke$arity$1 = function(content_type) {
  return function(request, format_entry) {
    var accept = ajax.core.get_accept_entries.call(null, request, format_entry);
    return cljs.core.some.call(null, ajax.core.content_type_matches.call(null, content_type), accept);
  };
};
ajax.core.detect_content_type.cljs$lang$maxFixedArity = 3;
ajax.core.get_default_format = function ajax$core$get_default_format(response, p__36970) {
  var map__36973 = p__36970;
  var map__36973__$1 = (!(map__36973 == null) ? map__36973.cljs$lang$protocol_mask$partition0$ & 64 || map__36973.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36973) : map__36973;
  var request = map__36973__$1;
  var response_format = cljs.core.get.call(null, map__36973__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var f = ajax.core.detect_content_type.call(null, ajax.core.get_content_type.call(null, response), request);
  return ajax.core.get_format.call(null, request, cljs.core.first.call(null, cljs.core.filter.call(null, f, response_format)));
};
ajax.core.detect_response_format_read = function ajax$core$detect_response_format_read(var_args) {
  var args36975 = [];
  var len__30669__auto___36978 = arguments.length;
  var i__30670__auto___36979 = 0;
  while (true) {
    if (i__30670__auto___36979 < len__30669__auto___36978) {
      args36975.push(arguments[i__30670__auto___36979]);
      var G__36980 = i__30670__auto___36979 + 1;
      i__30670__auto___36979 = G__36980;
      continue;
    } else {
    }
    break;
  }
  var G__36977 = args36975.length;
  switch(G__36977) {
    case 2:
      return ajax.core.detect_response_format_read.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.detect_response_format_read.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36975.length)].join(""));;
  }
};
ajax.core.detect_response_format_read.cljs$core$IFn$_invoke$arity$2 = function(request, response) {
  var format = ajax.core.get_default_format.call(null, response, request);
  return (new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(format).call(null, response);
};
ajax.core.detect_response_format_read.cljs$core$IFn$_invoke$arity$1 = function(request) {
  return function(response) {
    var format = ajax.core.get_default_format.call(null, response, request);
    return (new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(format).call(null, response);
  };
};
ajax.core.detect_response_format_read.cljs$lang$maxFixedArity = 2;
ajax.core.accept_header = function ajax$core$accept_header(p__36982) {
  var map__36985 = p__36982;
  var map__36985__$1 = (!(map__36985 == null) ? map__36985.cljs$lang$protocol_mask$partition0$ & 64 || map__36985.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36985) : map__36985;
  var request = map__36985__$1;
  var response_format = cljs.core.get.call(null, map__36985__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return cljs.core.mapcat.call(null, ajax.core.get_accept_entries.call(null, request), response_format);
  } else {
    return ajax.core.get_accept_entries.call(null, request, response_format);
  }
};
ajax.core.detect_response_format = function ajax$core$detect_response_format(var_args) {
  var args36987 = [];
  var len__30669__auto___36990 = arguments.length;
  var i__30670__auto___36991 = 0;
  while (true) {
    if (i__30670__auto___36991 < len__30669__auto___36990) {
      args36987.push(arguments[i__30670__auto___36991]);
      var G__36992 = i__30670__auto___36991 + 1;
      i__30670__auto___36991 = G__36992;
      continue;
    } else {
    }
    break;
  }
  var G__36989 = args36987.length;
  switch(G__36989) {
    case 0:
      return ajax.core.detect_response_format.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return ajax.core.detect_response_format.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36987.length)].join(""));;
  }
};
ajax.core.detect_response_format.cljs$core$IFn$_invoke$arity$0 = function() {
  return ajax.core.detect_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.default_formats], null));
};
ajax.core.detect_response_format.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  var accept = ajax.core.accept_header.call(null, opts);
  return ajax.core.map__GT_ResponseFormat.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.detect_response_format_read.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), [cljs.core.str("(from "), cljs.core.str(accept), cljs.core.str(")")].join(""), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), accept], null));
};
ajax.core.detect_response_format.cljs$lang$maxFixedArity = 1;
ajax.core.get_response_format = function ajax$core$get_response_format(p__36994) {
  var map__36997 = p__36994;
  var map__36997__$1 = (!(map__36997 == null) ? map__36997.cljs$lang$protocol_mask$partition0$ & 64 || map__36997.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36997) : map__36997;
  var opts = map__36997__$1;
  var response_format = cljs.core.get.call(null, map__36997__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (response_format instanceof ajax.core.ResponseFormat) {
    return response_format;
  } else {
    if (cljs.core.vector_QMARK_.call(null, response_format)) {
      return ajax.core.detect_response_format.call(null, opts);
    } else {
      if (cljs.core.map_QMARK_.call(null, response_format)) {
        return ajax.core.map__GT_ResponseFormat.call(null, response_format);
      } else {
        if (cljs.core.ifn_QMARK_.call(null, response_format)) {
          return ajax.core.map__GT_ResponseFormat.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), response_format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null));
        } else {
          return ajax.core.throw_error.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["unrecognized response format: ", response_format], null));
        }
      }
    }
  }
};
ajax.core.normalize_method = function ajax$core$normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.js_handler = function ajax$core$js_handler(var_args) {
  var args36999 = [];
  var len__30669__auto___37002 = arguments.length;
  var i__30670__auto___37003 = 0;
  while (true) {
    if (i__30670__auto___37003 < len__30669__auto___37002) {
      args36999.push(arguments[i__30670__auto___37003]);
      var G__37004 = i__30670__auto___37003 + 1;
      i__30670__auto___37003 = G__37004;
      continue;
    } else {
    }
    break;
  }
  var G__37001 = args36999.length;
  switch(G__37001) {
    case 3:
      return ajax.core.js_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return ajax.core.js_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.js_handler.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args36999.length)].join(""));;
  }
};
ajax.core.js_handler.cljs$core$IFn$_invoke$arity$3 = function(handler, interceptors, response) {
  var process = function ajax$core$process(response__$1, interceptor) {
    return ajax.protocols._process_response.call(null, interceptor, response__$1);
  };
  var processed = cljs.core.reduce.call(null, process, response, interceptors);
  return handler.call(null, processed);
};
ajax.core.js_handler.cljs$core$IFn$_invoke$arity$2 = function(handler, interceptors) {
  return function(response) {
    var process = function ajax$core$process(response__$1, interceptor) {
      return ajax.protocols._process_response.call(null, interceptor, response__$1);
    };
    var processed = cljs.core.reduce.call(null, process, response, interceptors);
    return handler.call(null, processed);
  };
};
ajax.core.js_handler.cljs$core$IFn$_invoke$arity$1 = function(handler) {
  return function(interceptors, response) {
    var process = function ajax$core$process(response__$1, interceptor) {
      return ajax.protocols._process_response.call(null, interceptor, response__$1);
    };
    var processed = cljs.core.reduce.call(null, process, response, interceptors);
    return handler.call(null, processed);
  };
};
ajax.core.js_handler.cljs$lang$maxFixedArity = 3;
ajax.core.base_handler = function ajax$core$base_handler(interceptors, p__37006) {
  var map__37009 = p__37006;
  var map__37009__$1 = (!(map__37009 == null) ? map__37009.cljs$lang$protocol_mask$partition0$ & 64 || map__37009.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37009) : map__37009;
  var handler = cljs.core.get.call(null, map__37009__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  if (cljs.core.truth_(handler)) {
    return ajax.core.js_handler.call(null, handler, interceptors);
  } else {
    return ajax.core.throw_error.call(null, "No ajax handler provided.");
  }
};
ajax.core.request_interceptors = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new ajax.core.ProcessGet(ajax.core.params_to_str, null, null, null), new ajax.core.DirectSubmission(null, null, null), new ajax.core.ApplyRequestFormat(null, null, null)], null);
ajax.core.default_interceptors = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
ajax.core.normalize_request = function ajax$core$normalize_request(request) {
  var response_format = ajax.core.get_response_format.call(null, request);
  return cljs.core.update.call(null, cljs.core.update.call(null, request, new cljs.core.Keyword(null, "method", "method", 55703592), ajax.core.normalize_method), new cljs.core.Keyword(null, "interceptors", "interceptors", -1546782951), function(response_format) {
    return function(p1__37011_SHARP_) {
      return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [response_format], null), function() {
        var or__29600__auto__ = p1__37011_SHARP_;
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.deref.call(null, ajax.core.default_interceptors);
        }
      }(), ajax.core.request_interceptors);
    };
  }(response_format));
};
ajax.core.new_default_api = function ajax$core$new_default_api() {
  return new goog.net.XhrIo;
};
ajax.core.raw_ajax_request = function ajax$core$raw_ajax_request(p__37012) {
  var map__37015 = p__37012;
  var map__37015__$1 = (!(map__37015 == null) ? map__37015.cljs$lang$protocol_mask$partition0$ & 64 || map__37015.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37015) : map__37015;
  var request = map__37015__$1;
  var interceptors = cljs.core.get.call(null, map__37015__$1, new cljs.core.Keyword(null, "interceptors", "interceptors", -1546782951));
  var request__$1 = cljs.core.reduce.call(null, ajax.core.process_request, request, interceptors);
  var handler = ajax.core.base_handler.call(null, cljs.core.reverse.call(null, interceptors), request__$1);
  var api = function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "api", "api", -899839580)).cljs$core$IFn$_invoke$arity$1(request__$1);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return ajax.core.new_default_api.call(null);
    }
  }();
  return ajax.protocols._js_ajax_request.call(null, api, request__$1, handler);
};
ajax.core.ajax_request = function ajax$core$ajax_request(request) {
  return ajax.core.raw_ajax_request.call(null, ajax.core.normalize_request.call(null, request));
};
ajax.core.keyword_request_format = function ajax$core$keyword_request_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "write", "write", -1857649168), format], null);
    } else {
      if (format == null) {
        return ajax.core.transit_request_format.call(null, format_params);
      } else {
        var G__37018 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__37018) {
          case "transit":
            return ajax.core.transit_request_format.call(null, format_params);
            break;
          case "json":
            return ajax.core.json_request_format.call(null);
            break;
          case "text":
            return ajax.core.text_request_format.call(null);
            break;
          case "raw":
            return ajax.core.url_request_format.call(null);
            break;
          case "url":
            return ajax.core.url_request_format.call(null);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.keyword_response_format_element = function ajax$core$keyword_response_format_element(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, format), ajax$core$keyword_response_format_element.call(null, cljs.core.second.call(null, format), format_params)], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, format)) {
      return format;
    } else {
      if (cljs.core.fn_QMARK_.call(null, format)) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
      } else {
        if (format == null) {
          return ajax.core.detect_response_format.call(null);
        } else {
          var G__37021 = format instanceof cljs.core.Keyword ? format.fqn : null;
          switch(G__37021) {
            case "transit":
              return ajax.core.transit_response_format.call(null, format_params);
              break;
            case "json":
              return ajax.core.json_response_format.call(null, format_params);
              break;
            case "text":
              return ajax.core.text_response_format.call(null);
              break;
            case "raw":
              return ajax.core.raw_response_format.call(null);
              break;
            case "detect":
              return ajax.core.detect_response_format.call(null);
              break;
            default:
              return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function ajax$core$keyword_response_format(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return cljs.core.apply.call(null, cljs.core.vector, cljs.core.map.call(null, function(p1__37023_SHARP_) {
      return ajax.core.keyword_response_format_element.call(null, p1__37023_SHARP_, format_params);
    }, format));
  } else {
    return ajax.core.keyword_response_format_element.call(null, format, format_params);
  }
};
ajax.core.transform_handler = function ajax$core$transform_handler(var_args) {
  var args37024 = [];
  var len__30669__auto___37037 = arguments.length;
  var i__30670__auto___37038 = 0;
  while (true) {
    if (i__30670__auto___37038 < len__30669__auto___37037) {
      args37024.push(arguments[i__30670__auto___37038]);
      var G__37039 = i__30670__auto___37038 + 1;
      i__30670__auto___37038 = G__37039;
      continue;
    } else {
    }
    break;
  }
  var G__37026 = args37024.length;
  switch(G__37026) {
    case 2:
      return ajax.core.transform_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return ajax.core.transform_handler.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37024.length)].join(""));;
  }
};
ajax.core.transform_handler.cljs$core$IFn$_invoke$arity$2 = function(p__37027, p__37028) {
  var map__37029 = p__37027;
  var map__37029__$1 = (!(map__37029 == null) ? map__37029.cljs$lang$protocol_mask$partition0$ & 64 || map__37029.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37029) : map__37029;
  var handler = cljs.core.get.call(null, map__37029__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  var error_handler = cljs.core.get.call(null, map__37029__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
  var finally$ = cljs.core.get.call(null, map__37029__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
  var vec__37030 = p__37028;
  var ok = cljs.core.nth.call(null, vec__37030, 0, null);
  var result = cljs.core.nth.call(null, vec__37030, 1, null);
  var temp__4655__auto___37041 = cljs.core.truth_(ok) ? handler : error_handler;
  if (cljs.core.truth_(temp__4655__auto___37041)) {
    var h_37042 = temp__4655__auto___37041;
    h_37042.call(null, result);
  } else {
  }
  if (cljs.core.fn_QMARK_.call(null, finally$)) {
    return finally$.call(null);
  } else {
    return null;
  }
};
ajax.core.transform_handler.cljs$core$IFn$_invoke$arity$1 = function(p__37032) {
  var map__37033 = p__37032;
  var map__37033__$1 = (!(map__37033 == null) ? map__37033.cljs$lang$protocol_mask$partition0$ & 64 || map__37033.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37033) : map__37033;
  var handler = cljs.core.get.call(null, map__37033__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  var error_handler = cljs.core.get.call(null, map__37033__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
  var finally$ = cljs.core.get.call(null, map__37033__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
  return function(map__37033, map__37033__$1, handler, error_handler, finally$) {
    return function(p__37035) {
      var vec__37036 = p__37035;
      var ok = cljs.core.nth.call(null, vec__37036, 0, null);
      var result = cljs.core.nth.call(null, vec__37036, 1, null);
      var temp__4655__auto___37043 = cljs.core.truth_(ok) ? handler : error_handler;
      if (cljs.core.truth_(temp__4655__auto___37043)) {
        var h_37044 = temp__4655__auto___37043;
        h_37044.call(null, result);
      } else {
      }
      if (cljs.core.fn_QMARK_.call(null, finally$)) {
        return finally$.call(null);
      } else {
        return null;
      }
    };
  }(map__37033, map__37033__$1, handler, error_handler, finally$);
};
ajax.core.transform_handler.cljs$lang$maxFixedArity = 2;
ajax.core.transform_opts = function ajax$core$transform_opts(p__37045) {
  var map__37048 = p__37045;
  var map__37048__$1 = (!(map__37048 == null) ? map__37048.cljs$lang$protocol_mask$partition0$ & 64 || map__37048.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37048) : map__37048;
  var opts = map__37048__$1;
  var method = cljs.core.get.call(null, map__37048__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var format = cljs.core.get.call(null, map__37048__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var response_format = cljs.core.get.call(null, map__37048__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var params = cljs.core.get.call(null, map__37048__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var body = cljs.core.get.call(null, map__37048__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var needs_format = body == null && cljs.core.not_EQ_.call(null, method, "GET");
  var rf = cljs.core.truth_(function() {
    var or__29600__auto__ = format;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return needs_format;
    }
  }()) ? ajax.core.keyword_request_format.call(null, format, opts) : null;
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", -195596612), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), rf, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.keyword_response_format.call(null, response_format, opts));
};
ajax.core.easy_ajax_request = function ajax$core$easy_ajax_request(uri, method, opts) {
  return ajax.core.ajax_request.call(null, ajax.core.transform_opts.call(null, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), method)));
};
ajax.core.GET = function ajax$core$GET(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37052 = arguments.length;
  var i__30670__auto___37053 = 0;
  while (true) {
    if (i__30670__auto___37053 < len__30669__auto___37052) {
      args__30676__auto__.push(arguments[i__30670__auto___37053]);
      var G__37054 = i__30670__auto___37053 + 1;
      i__30670__auto___37053 = G__37054;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic = function(uri, opts) {
  var f__36646__auto__ = cljs.core.first.call(null, opts);
  return ajax.core.easy_ajax_request.call(null, uri, "GET", f__36646__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__36646__auto__);
};
ajax.core.GET.cljs$lang$maxFixedArity = 1;
ajax.core.GET.cljs$lang$applyTo = function(seq37050) {
  var G__37051 = cljs.core.first.call(null, seq37050);
  var seq37050__$1 = cljs.core.next.call(null, seq37050);
  return ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic(G__37051, seq37050__$1);
};
ajax.core.HEAD = function ajax$core$HEAD(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37057 = arguments.length;
  var i__30670__auto___37058 = 0;
  while (true) {
    if (i__30670__auto___37058 < len__30669__auto___37057) {
      args__30676__auto__.push(arguments[i__30670__auto___37058]);
      var G__37059 = i__30670__auto___37058 + 1;
      i__30670__auto___37058 = G__37059;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return ajax.core.HEAD.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
ajax.core.HEAD.cljs$core$IFn$_invoke$arity$variadic = function(uri, opts) {
  var f__36646__auto__ = cljs.core.first.call(null, opts);
  return ajax.core.easy_ajax_request.call(null, uri, "HEAD", f__36646__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__36646__auto__);
};
ajax.core.HEAD.cljs$lang$maxFixedArity = 1;
ajax.core.HEAD.cljs$lang$applyTo = function(seq37055) {
  var G__37056 = cljs.core.first.call(null, seq37055);
  var seq37055__$1 = cljs.core.next.call(null, seq37055);
  return ajax.core.HEAD.cljs$core$IFn$_invoke$arity$variadic(G__37056, seq37055__$1);
};
ajax.core.POST = function ajax$core$POST(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37062 = arguments.length;
  var i__30670__auto___37063 = 0;
  while (true) {
    if (i__30670__auto___37063 < len__30669__auto___37062) {
      args__30676__auto__.push(arguments[i__30670__auto___37063]);
      var G__37064 = i__30670__auto___37063 + 1;
      i__30670__auto___37063 = G__37064;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic = function(uri, opts) {
  var f__36646__auto__ = cljs.core.first.call(null, opts);
  return ajax.core.easy_ajax_request.call(null, uri, "POST", f__36646__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__36646__auto__);
};
ajax.core.POST.cljs$lang$maxFixedArity = 1;
ajax.core.POST.cljs$lang$applyTo = function(seq37060) {
  var G__37061 = cljs.core.first.call(null, seq37060);
  var seq37060__$1 = cljs.core.next.call(null, seq37060);
  return ajax.core.POST.cljs$core$IFn$_invoke$arity$variadic(G__37061, seq37060__$1);
};
ajax.core.PUT = function ajax$core$PUT(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37067 = arguments.length;
  var i__30670__auto___37068 = 0;
  while (true) {
    if (i__30670__auto___37068 < len__30669__auto___37067) {
      args__30676__auto__.push(arguments[i__30670__auto___37068]);
      var G__37069 = i__30670__auto___37068 + 1;
      i__30670__auto___37068 = G__37069;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return ajax.core.PUT.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
ajax.core.PUT.cljs$core$IFn$_invoke$arity$variadic = function(uri, opts) {
  var f__36646__auto__ = cljs.core.first.call(null, opts);
  return ajax.core.easy_ajax_request.call(null, uri, "PUT", f__36646__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__36646__auto__);
};
ajax.core.PUT.cljs$lang$maxFixedArity = 1;
ajax.core.PUT.cljs$lang$applyTo = function(seq37065) {
  var G__37066 = cljs.core.first.call(null, seq37065);
  var seq37065__$1 = cljs.core.next.call(null, seq37065);
  return ajax.core.PUT.cljs$core$IFn$_invoke$arity$variadic(G__37066, seq37065__$1);
};
ajax.core.DELETE = function ajax$core$DELETE(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37072 = arguments.length;
  var i__30670__auto___37073 = 0;
  while (true) {
    if (i__30670__auto___37073 < len__30669__auto___37072) {
      args__30676__auto__.push(arguments[i__30670__auto___37073]);
      var G__37074 = i__30670__auto___37073 + 1;
      i__30670__auto___37073 = G__37074;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return ajax.core.DELETE.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
ajax.core.DELETE.cljs$core$IFn$_invoke$arity$variadic = function(uri, opts) {
  var f__36646__auto__ = cljs.core.first.call(null, opts);
  return ajax.core.easy_ajax_request.call(null, uri, "DELETE", f__36646__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__36646__auto__);
};
ajax.core.DELETE.cljs$lang$maxFixedArity = 1;
ajax.core.DELETE.cljs$lang$applyTo = function(seq37070) {
  var G__37071 = cljs.core.first.call(null, seq37070);
  var seq37070__$1 = cljs.core.next.call(null, seq37070);
  return ajax.core.DELETE.cljs$core$IFn$_invoke$arity$variadic(G__37071, seq37070__$1);
};
ajax.core.OPTIONS = function ajax$core$OPTIONS(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37077 = arguments.length;
  var i__30670__auto___37078 = 0;
  while (true) {
    if (i__30670__auto___37078 < len__30669__auto___37077) {
      args__30676__auto__.push(arguments[i__30670__auto___37078]);
      var G__37079 = i__30670__auto___37078 + 1;
      i__30670__auto___37078 = G__37079;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return ajax.core.OPTIONS.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
ajax.core.OPTIONS.cljs$core$IFn$_invoke$arity$variadic = function(uri, opts) {
  var f__36646__auto__ = cljs.core.first.call(null, opts);
  return ajax.core.easy_ajax_request.call(null, uri, "OPTIONS", f__36646__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__36646__auto__);
};
ajax.core.OPTIONS.cljs$lang$maxFixedArity = 1;
ajax.core.OPTIONS.cljs$lang$applyTo = function(seq37075) {
  var G__37076 = cljs.core.first.call(null, seq37075);
  var seq37075__$1 = cljs.core.next.call(null, seq37075);
  return ajax.core.OPTIONS.cljs$core$IFn$_invoke$arity$variadic(G__37076, seq37075__$1);
};
ajax.core.TRACE = function ajax$core$TRACE(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37082 = arguments.length;
  var i__30670__auto___37083 = 0;
  while (true) {
    if (i__30670__auto___37083 < len__30669__auto___37082) {
      args__30676__auto__.push(arguments[i__30670__auto___37083]);
      var G__37084 = i__30670__auto___37083 + 1;
      i__30670__auto___37083 = G__37084;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return ajax.core.TRACE.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
ajax.core.TRACE.cljs$core$IFn$_invoke$arity$variadic = function(uri, opts) {
  var f__36646__auto__ = cljs.core.first.call(null, opts);
  return ajax.core.easy_ajax_request.call(null, uri, "TRACE", f__36646__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__36646__auto__);
};
ajax.core.TRACE.cljs$lang$maxFixedArity = 1;
ajax.core.TRACE.cljs$lang$applyTo = function(seq37080) {
  var G__37081 = cljs.core.first.call(null, seq37080);
  var seq37080__$1 = cljs.core.next.call(null, seq37080);
  return ajax.core.TRACE.cljs$core$IFn$_invoke$arity$variadic(G__37081, seq37080__$1);
};
ajax.core.PATCH = function ajax$core$PATCH(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37087 = arguments.length;
  var i__30670__auto___37088 = 0;
  while (true) {
    if (i__30670__auto___37088 < len__30669__auto___37087) {
      args__30676__auto__.push(arguments[i__30670__auto___37088]);
      var G__37089 = i__30670__auto___37088 + 1;
      i__30670__auto___37088 = G__37089;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return ajax.core.PATCH.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
ajax.core.PATCH.cljs$core$IFn$_invoke$arity$variadic = function(uri, opts) {
  var f__36646__auto__ = cljs.core.first.call(null, opts);
  return ajax.core.easy_ajax_request.call(null, uri, "PATCH", f__36646__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__36646__auto__);
};
ajax.core.PATCH.cljs$lang$maxFixedArity = 1;
ajax.core.PATCH.cljs$lang$applyTo = function(seq37085) {
  var G__37086 = cljs.core.first.call(null, seq37085);
  var seq37085__$1 = cljs.core.next.call(null, seq37085);
  return ajax.core.PATCH.cljs$core$IFn$_invoke$arity$variadic(G__37086, seq37085__$1);
};
goog.provide("markdown.common");
goog.require("cljs.core");
goog.require("clojure.string");
markdown.common.escape_delimiter = [cljs.core.str(cljs.core.char$.call(null, 254)), cljs.core.str(cljs.core.char$.call(null, 491))].join("");
markdown.common.gen_token = function markdown$common$gen_token(n) {
  return [cljs.core.str(markdown.common.escape_delimiter), cljs.core.str(n), cljs.core.str(markdown.common.escape_delimiter)].join("");
};
markdown.common.freeze_string = function markdown$common$freeze_string(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37093 = arguments.length;
  var i__30670__auto___37094 = 0;
  while (true) {
    if (i__30670__auto___37094 < len__30669__auto___37093) {
      args__30676__auto__.push(arguments[i__30670__auto___37094]);
      var G__37095 = i__30670__auto___37094 + 1;
      i__30670__auto___37094 = G__37095;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  var state = cljs.core.last.call(null, args);
  var token = markdown.common.gen_token.call(null, cljs.core.count.call(null, (new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560)).cljs$core$IFn$_invoke$arity$1(state)));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token, cljs.core.assoc_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560), token], null), cljs.core.reduce.call(null, cljs.core.str, cljs.core.flatten.call(null, cljs.core.drop_last.call(null, args))))], null);
};
markdown.common.freeze_string.cljs$lang$maxFixedArity = 0;
markdown.common.freeze_string.cljs$lang$applyTo = function(seq37092) {
  return markdown.common.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq37092));
};
markdown.common.thaw_string = function markdown$common$thaw_string(text, state) {
  while (true) {
    var temp__4655__auto__ = cljs.core.re_seq.call(null, cljs.core.re_pattern.call(null, [cljs.core.str(markdown.common.escape_delimiter), cljs.core.str("\\d+"), cljs.core.str(markdown.common.escape_delimiter)].join("")), text);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var matches = temp__4655__auto__;
      var G__37098 = cljs.core.reduce.call(null, function(text, state, matches, temp__4655__auto__) {
        return function(s, r) {
          return clojure.string.replace.call(null, s, cljs.core.re_pattern.call(null, r), function(text, state, matches, temp__4655__auto__) {
            return function(p1__37096_SHARP_) {
              return cljs.core.get.call(null, (new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560)).cljs$core$IFn$_invoke$arity$1(state), p1__37096_SHARP_, p1__37096_SHARP_);
            };
          }(text, state, matches, temp__4655__auto__));
        };
      }(text, state, matches, temp__4655__auto__), text, matches);
      var G__37099 = cljs.core.update.call(null, state, new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560), function(text, state, matches, temp__4655__auto__) {
        return function(p1__37097_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.dissoc, p1__37097_SHARP_, matches);
        };
      }(text, state, matches, temp__4655__auto__));
      text = G__37098;
      state = G__37099;
      continue;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    }
    break;
  }
};
markdown.common.thaw_strings = function markdown$common$thaw_strings(text, state) {
  if (!cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560)).cljs$core$IFn$_invoke$arity$1(state))) {
    return markdown.common.thaw_string.call(null, text, state);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  }
};
markdown.common.escape_code = function markdown$common$escape_code(s) {
  return clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, s, /&/, "\x26amp;"), /\*/, "\x26#42;"), /\^/, "\x26#94;"), /\_/, "\x26#95;"), /\~/, 
  "\x26#126;"), /\</, "\x26lt;"), /\>/, "\x26gt;"), /\[/, "\x26#91;"), /\]/, "\x26#93;"), /\(/, "\x26#40;"), /\)/, "\x26#41;"), /\"/, "\x26quot;");
};
markdown.common.escaped_chars = function markdown$common$escaped_chars(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }()) ? text : clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, 
  text, /\\\\/, "\x26#92;"), /\\`/, "\x26#8216;"), /\\\*/, "\x26#42;"), /\\_/, "\x26#95;"), /\\\{/, "\x26#123;"), /\\\}/, "\x26#125;"), /\\\[/, "\x26#91;"), /\\\]/, "\x26#93;"), /\\\(/, "\x26#40;"), /\\\)/, "\x26#41;"), /\\#/, "\x26#35;"), /\\\+/, "\x26#43;"), /\\-/, "\x26#45;"), /\\\./, "\x26#46;"), /\\!/, "\x26#33;"), state], null);
};
markdown.common.separator = function markdown$common$separator(escape_QMARK_, text, open, close, separator__$1, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var out = cljs.core.PersistentVector.EMPTY;
    var buf = cljs.core.PersistentVector.EMPTY;
    var tokens = cljs.core.partition_by.call(null, cljs.core.partial.call(null, cljs.core._EQ_, cljs.core.first.call(null, separator__$1)), cljs.core.seq.call(null, text));
    var cur_state = cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), false);
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, tokens)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, cljs.core.into.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "found-token", "found-token", 113525576)).cljs$core$IFn$_invoke$arity$1(cur_state)) ? cljs.core.into.call(null, out, separator__$1) : out, buf)), cljs.core.dissoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576))], null);
      } else {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "found-token", "found-token", 113525576)).cljs$core$IFn$_invoke$arity$1(cur_state))) {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, tokens), separator__$1)) {
            var G__37100 = cljs.core.vec.call(null, cljs.core.concat.call(null, out, cljs.core.seq.call(null, open), cljs.core.truth_(escape_QMARK_) ? cljs.core.seq.call(null, markdown.common.escape_code.call(null, clojure.string.join.call(null, buf))) : buf, cljs.core.seq.call(null, close)));
            var G__37101 = cljs.core.PersistentVector.EMPTY;
            var G__37102 = cljs.core.rest.call(null, tokens);
            var G__37103 = cljs.core.assoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), false);
            out = G__37100;
            buf = G__37101;
            tokens = G__37102;
            cur_state = G__37103;
            continue;
          } else {
            var G__37104 = out;
            var G__37105 = cljs.core.into.call(null, buf, cljs.core.first.call(null, tokens));
            var G__37106 = cljs.core.rest.call(null, tokens);
            var G__37107 = cur_state;
            out = G__37104;
            buf = G__37105;
            tokens = G__37106;
            cur_state = G__37107;
            continue;
          }
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, tokens), separator__$1)) {
            var G__37108 = out;
            var G__37109 = buf;
            var G__37110 = cljs.core.rest.call(null, tokens);
            var G__37111 = cljs.core.assoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), true);
            out = G__37108;
            buf = G__37109;
            tokens = G__37110;
            cur_state = G__37111;
            continue;
          } else {
            var G__37112 = cljs.core.into.call(null, out, cljs.core.first.call(null, tokens));
            var G__37113 = buf;
            var G__37114 = cljs.core.rest.call(null, tokens);
            var G__37115 = cur_state;
            out = G__37112;
            buf = G__37113;
            tokens = G__37114;
            cur_state = G__37115;
            continue;
          }
        }
      }
      break;
    }
  }
};
markdown.common.strong = function markdown$common$strong(text, state) {
  return markdown.common.separator.call(null, false, text, "\x3cstrong\x3e", "\x3c/strong\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*", "*"], null), state);
};
markdown.common.bold = function markdown$common$bold(text, state) {
  return markdown.common.separator.call(null, false, text, "\x3cb\x3e", "\x3c/b\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["_", "_"], null), state);
};
markdown.common.em = function markdown$common$em(text, state) {
  return markdown.common.separator.call(null, false, text, "\x3cem\x3e", "\x3c/em\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*"], null), state);
};
markdown.common.italics = function markdown$common$italics(text, state) {
  return markdown.common.separator.call(null, false, text, "\x3ci\x3e", "\x3c/i\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["_"], null), state);
};
markdown.common.strikethrough = function markdown$common$strikethrough(text, state) {
  return markdown.common.separator.call(null, false, text, "\x3cdel\x3e", "\x3c/del\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["~", "~"], null), state);
};
markdown.common.inline_code = function markdown$common$inline_code(text, state) {
  return markdown.common.separator.call(null, true, text, "\x3ccode\x3e", "\x3c/code\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`"], null), state);
};
markdown.common.heading_text = function markdown$common$heading_text(text) {
  return clojure.string.trim.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, text, /^([ ]+)?[#]+/, ""), /[#]+$/, ""));
};
markdown.common.heading_level = function markdown$common$heading_level(text) {
  var num_hashes = cljs.core.count.call(null, cljs.core.filter.call(null, function(p1__37116_SHARP_) {
    return cljs.core.not_EQ_.call(null, " ", p1__37116_SHARP_);
  }, cljs.core.take_while.call(null, function(p1__37117_SHARP_) {
    return cljs.core._EQ_.call(null, "#", p1__37117_SHARP_) || cljs.core._EQ_.call(null, " ", p1__37117_SHARP_);
  }, cljs.core.seq.call(null, text))));
  if (num_hashes > 0) {
    return num_hashes;
  } else {
    return null;
  }
};
markdown.common.make_heading = function markdown$common$make_heading(text, heading_anchors) {
  var temp__4657__auto__ = markdown.common.heading_level.call(null, text);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var heading = temp__4657__auto__;
    var text__$1 = markdown.common.heading_text.call(null, text);
    return [cljs.core.str("\x3ch"), cljs.core.str(heading), cljs.core.str("\x3e"), cljs.core.str(cljs.core.truth_(heading_anchors) ? [cljs.core.str('\x3ca name\x3d"'), cljs.core.str(clojure.string.replace.call(null, clojure.string.lower_case.call(null, text__$1), " ", "\x26#95;")), cljs.core.str('"\x3e\x3c/a\x3e')].join("") : null), cljs.core.str(text__$1), cljs.core.str("\x3c/h"), cljs.core.str(heading), cljs.core.str("\x3e")].join("");
  } else {
    return null;
  }
};
markdown.common.dashes = function markdown$common$dashes(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }()) ? text : clojure.string.replace.call(null, clojure.string.replace.call(null, text, /\-\-\-/, "\x26mdash;"), /\-\-/, "\x26ndash;"), state], null);
};
goog.provide("markdown.links");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("markdown.common");
markdown.links.href = function markdown$links$href(title, link, state) {
  return markdown.common.freeze_string.call(null, cljs.core.seq.call(null, "\x3ca href\x3d'"), link, cljs.core.seq.call(null, "'\x3e"), title, cljs.core.seq.call(null, "\x3c/a\x3e"), state);
};
markdown.links.img = function markdown$links$img(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37126 = arguments.length;
  var i__30670__auto___37127 = 0;
  while (true) {
    if (i__30670__auto___37127 < len__30669__auto___37126) {
      args__30676__auto__.push(arguments[i__30670__auto___37127]);
      var G__37128 = i__30670__auto___37127 + 1;
      i__30670__auto___37127 = G__37128;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 3 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(3), 0, null) : null;
  return markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__30677__auto__);
};
markdown.links.img.cljs$core$IFn$_invoke$arity$variadic = function(alt, url, state, p__37124) {
  var vec__37125 = p__37124;
  var title = cljs.core.nth.call(null, vec__37125, 0, null);
  return markdown.common.freeze_string.call(null, cljs.core.seq.call(null, '\x3cimg src\x3d"'), url, cljs.core.seq.call(null, '" alt\x3d"'), alt, cljs.core.truth_(cljs.core.not_empty.call(null, title)) ? cljs.core.seq.call(null, cljs.core.apply.call(null, cljs.core.str, '" title\x3d', clojure.string.join.call(null, title), " /\x3e")) : cljs.core.seq.call(null, '" /\x3e'), state);
};
markdown.links.img.cljs$lang$maxFixedArity = 3;
markdown.links.img.cljs$lang$applyTo = function(seq37120) {
  var G__37121 = cljs.core.first.call(null, seq37120);
  var seq37120__$1 = cljs.core.next.call(null, seq37120);
  var G__37122 = cljs.core.first.call(null, seq37120__$1);
  var seq37120__$2 = cljs.core.next.call(null, seq37120__$1);
  var G__37123 = cljs.core.first.call(null, seq37120__$2);
  var seq37120__$3 = cljs.core.next.call(null, seq37120__$2);
  return markdown.links.img.cljs$core$IFn$_invoke$arity$variadic(G__37121, G__37122, G__37123, seq37120__$3);
};
markdown.links.handle_img_link = function markdown$links$handle_img_link(xs, state) {
  if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["[", "!", "["], null), cljs.core.take.call(null, 3, xs))) {
    var xs__$1 = cljs.core.drop.call(null, 3, xs);
    var vec__37133 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "]"), xs__$1);
    var alt = cljs.core.nth.call(null, vec__37133, 0, null);
    var xy = cljs.core.nth.call(null, vec__37133, 1, null);
    var vec__37134 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, ")"), cljs.core.drop.call(null, 2, xy));
    var url_title = cljs.core.nth.call(null, vec__37134, 0, null);
    var zy = cljs.core.nth.call(null, vec__37134, 1, null);
    var vec__37135 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), url_title);
    var url = cljs.core.nth.call(null, vec__37135, 0, null);
    var title = cljs.core.nth.call(null, vec__37135, 1, null);
    var vec__37136 = markdown.links.img.call(null, alt, url, state, cljs.core.not_empty.call(null, title));
    var new_text = cljs.core.nth.call(null, vec__37136, 0, null);
    var new_state = cljs.core.nth.call(null, vec__37136, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, "[", new_text, cljs.core.rest.call(null, zy)), new_state], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xs, state], null);
  }
};
markdown.links.process_link_title = function markdown$links$process_link_title(title, state) {
  return cljs.core.first.call(null, cljs.core.reduce.call(null, function(p1__37138_SHARP_, p2__37137_SHARP_) {
    return cljs.core.apply.call(null, p2__37137_SHARP_, p1__37138_SHARP_);
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [title, state], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.common.italics, markdown.common.em, markdown.common.strong, markdown.common.bold, markdown.common.strikethrough], null)));
};
markdown.links.make_link = function markdown$links$make_link(img_QMARK_) {
  return function markdown$links$make_link_$_link(text, p__37160) {
    var map__37171 = p__37160;
    var map__37171__$1 = (!(map__37171 == null) ? map__37171.cljs$lang$protocol_mask$partition0$ & 64 || map__37171.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37171) : map__37171;
    var state = map__37171__$1;
    var code = cljs.core.get.call(null, map__37171__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
    var codeblock = cljs.core.get.call(null, map__37171__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
    if (cljs.core.truth_(function() {
      var or__29600__auto__ = code;
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return codeblock;
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    } else {
      var out = cljs.core.PersistentVector.EMPTY;
      var tokens = cljs.core.seq.call(null, text);
      var loop_state = state;
      while (true) {
        if (cljs.core.empty_QMARK_.call(null, tokens)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, out), loop_state], null);
        } else {
          var vec__37173 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "["), tokens);
          var head = cljs.core.nth.call(null, vec__37173, 0, null);
          var xs = cljs.core.nth.call(null, vec__37173, 1, null);
          var vec__37174 = markdown.links.handle_img_link.call(null, xs, loop_state);
          var xs__$1 = cljs.core.nth.call(null, vec__37174, 0, null);
          var loop_state__$1 = cljs.core.nth.call(null, vec__37174, 1, null);
          var vec__37175 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "]"), xs__$1);
          var title = cljs.core.nth.call(null, vec__37175, 0, null);
          var ys = cljs.core.nth.call(null, vec__37175, 1, null);
          var vec__37176 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "("), ys);
          var dud = cljs.core.nth.call(null, vec__37176, 0, null);
          var zs = cljs.core.nth.call(null, vec__37176, 1, null);
          var vec__37177 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, ")"), zs);
          var link__$1 = cljs.core.nth.call(null, vec__37177, 0, null);
          var tail = cljs.core.nth.call(null, vec__37177, 1, null);
          if (cljs.core.count.call(null, link__$1) < 2 || cljs.core.count.call(null, tail) < 1 || cljs.core.count.call(null, dud) > 1) {
            var G__37181 = cljs.core.concat.call(null, out, head, markdown.links.process_link_title.call(null, title, state), dud, link__$1);
            var G__37182 = tail;
            var G__37183 = loop_state__$1;
            out = G__37181;
            tokens = G__37182;
            loop_state = G__37183;
            continue;
          } else {
            if (cljs.core.not.call(null, img_QMARK_) && cljs.core.not_EQ_.call(null, cljs.core.last.call(null, head), "!")) {
              var vec__37178 = markdown.links.href.call(null, cljs.core.rest.call(null, markdown.links.process_link_title.call(null, title, state)), cljs.core.rest.call(null, link__$1), loop_state__$1);
              var link_text = cljs.core.nth.call(null, vec__37178, 0, null);
              var new_loop_state = cljs.core.nth.call(null, vec__37178, 1, null);
              var G__37184 = cljs.core.concat.call(null, out, head, link_text);
              var G__37185 = cljs.core.rest.call(null, tail);
              var G__37186 = new_loop_state;
              out = G__37184;
              tokens = G__37185;
              loop_state = G__37186;
              continue;
            } else {
              if (cljs.core.truth_(function() {
                var and__29588__auto__ = img_QMARK_;
                if (cljs.core.truth_(and__29588__auto__)) {
                  return cljs.core._EQ_.call(null, cljs.core.last.call(null, head), "!");
                } else {
                  return and__29588__auto__;
                }
              }())) {
                var alt = cljs.core.rest.call(null, title);
                var vec__37179 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), cljs.core.rest.call(null, link__$1));
                var url = cljs.core.nth.call(null, vec__37179, 0, null);
                var title__$1 = cljs.core.nth.call(null, vec__37179, 1, null);
                var title__$2 = markdown.links.process_link_title.call(null, clojure.string.join.call(null, cljs.core.rest.call(null, title__$1)), loop_state__$1);
                var vec__37180 = markdown.links.img.call(null, alt, url, loop_state__$1, title__$2);
                var img_text = cljs.core.nth.call(null, vec__37180, 0, null);
                var new_loop_state = cljs.core.nth.call(null, vec__37180, 1, null);
                var G__37187 = cljs.core.concat.call(null, cljs.core.butlast.call(null, head), img_text);
                var G__37188 = cljs.core.rest.call(null, tail);
                var G__37189 = new_loop_state;
                out = G__37187;
                tokens = G__37188;
                loop_state = G__37189;
                continue;
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
              }
            }
          }
        }
        break;
      }
    }
  };
};
markdown.links.link = markdown.links.make_link.call(null, false);
markdown.links.image = markdown.links.make_link.call(null, true);
markdown.links.reference = function markdown$links$reference(text) {
  return cljs.core.re_find.call(null, /^\[[a-zA-Z0-9 ]+\]:/, text);
};
markdown.links.parse_reference = function markdown$links$parse_reference(reference, start) {
  return clojure.string.split.call(null, clojure.string.trim.call(null, cljs.core.subs.call(null, reference, start)), /\s+/, 2);
};
markdown.links.parse_reference_link = function markdown$links$parse_reference_link(line, references) {
  var trimmed = clojure.string.trim.call(null, line);
  var temp__4657__auto__ = markdown.links.reference.call(null, trimmed);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var link = temp__4657__auto__;
    return cljs.core.swap_BANG_.call(null, references, cljs.core.assoc, cljs.core.subs.call(null, link, 0, cljs.core.count.call(null, link) - 1), markdown.links.parse_reference.call(null, trimmed, cljs.core.count.call(null, link) + 1));
  } else {
    return null;
  }
};
markdown.links.replace_reference_link = function markdown$links$replace_reference_link(references, reference) {
  var vec__37192 = clojure.string.split.call(null, reference, /\]\s*/, 2);
  var title = cljs.core.nth.call(null, vec__37192, 0, null);
  var id = cljs.core.nth.call(null, vec__37192, 1, null);
  var vec__37193 = cljs.core.get.call(null, references, id);
  var link = cljs.core.nth.call(null, vec__37193, 0, null);
  var alt = cljs.core.nth.call(null, vec__37193, 1, null);
  return [cljs.core.str("\x3ca href\x3d'"), cljs.core.str(link), cljs.core.str("'"), cljs.core.str(cljs.core.truth_(alt) ? [cljs.core.str(" title\x3d'"), cljs.core.str(cljs.core.subs.call(null, alt, 1, cljs.core.count.call(null, alt) - 1)), cljs.core.str("'")].join("") : null), cljs.core.str("\x3e"), cljs.core.str(cljs.core.subs.call(null, title, 1)), cljs.core.str("\x3c/a\x3e")].join("");
};
markdown.links.encode_links = function markdown$links$encode_links(links, i) {
  return cljs.core.second.call(null, cljs.core.reduce.call(null, function(p__37196, link) {
    var vec__37197 = p__37196;
    var i__$1 = cljs.core.nth.call(null, vec__37197, 0, null);
    var encoded = cljs.core.nth.call(null, vec__37197, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i__$1 + 1, cljs.core.assoc.call(null, encoded, markdown.common.gen_token.call(null, i__$1), link)], null);
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i, cljs.core.PersistentArrayMap.EMPTY], null), links));
};
markdown.links.parse_links = function markdown$links$parse_links(references, links) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__37200) {
    var vec__37201 = p__37200;
    var k = cljs.core.nth.call(null, vec__37201, 0, null);
    var v = cljs.core.nth.call(null, vec__37201, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, markdown.links.replace_reference_link.call(null, references, v)], null);
  }, links));
};
markdown.links.freeze_links = function markdown$links$freeze_links(references, text, state) {
  var links = cljs.core.re_seq.call(null, /\[[^\]]+\]\s*\[[a-zA-Z0-9 ]+\]/, text);
  var encoded_links = markdown.links.encode_links.call(null, links, cljs.core.fnil.call(null, cljs.core.count, cljs.core.PersistentVector.EMPTY).call(null, (new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560)).cljs$core$IFn$_invoke$arity$1(state)));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.reduce.call(null, function(links, encoded_links) {
    return function(s, p__37204) {
      var vec__37205 = p__37204;
      var id = cljs.core.nth.call(null, vec__37205, 0, null);
      var link = cljs.core.nth.call(null, vec__37205, 1, null);
      return clojure.string.replace.call(null, s, link, id);
    };
  }(links, encoded_links), text, encoded_links), cljs.core.update.call(null, state, new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560), cljs.core.merge, markdown.links.parse_links.call(null, references, encoded_links))], null);
};
markdown.links.reference_link = function markdown$links$reference_link(text, p__37206) {
  var map__37209 = p__37206;
  var map__37209__$1 = (!(map__37209 == null) ? map__37209.cljs$lang$protocol_mask$partition0$ & 64 || map__37209.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37209) : map__37209;
  var state = map__37209__$1;
  var code = cljs.core.get.call(null, map__37209__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__37209__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var references = cljs.core.get.call(null, map__37209__$1, new cljs.core.Keyword(null, "references", "references", 882562509));
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = references == null;
    if (or__29600__auto__) {
      return or__29600__auto__;
    } else {
      var or__29600__auto____$1 = code;
      if (cljs.core.truth_(or__29600__auto____$1)) {
        return or__29600__auto____$1;
      } else {
        return codeblock;
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(markdown.links.reference.call(null, clojure.string.trim.call(null, text)))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", state], null);
    } else {
      return markdown.links.freeze_links.call(null, references, text, state);
    }
  }
};
markdown.links.implicit_reference_link = function markdown$links$implicit_reference_link(text, state) {
  var replacement_text = clojure.string.replace.call(null, text, /\[([^\]]+)\]\[\]/, "[$1][$1]");
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [replacement_text, state], null);
};
markdown.links.footnote = function markdown$links$footnote(text) {
  return cljs.core.re_find.call(null, /^\[\^[a-zA-Z0-9_-]+\]:/, text);
};
markdown.links.parse_footnote_link = function markdown$links$parse_footnote_link(line, footnotes) {
  var trimmed = clojure.string.trim.call(null, line);
  var temp__4657__auto__ = markdown.links.footnote.call(null, trimmed);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var link = temp__4657__auto__;
    return cljs.core.swap_BANG_.call(null, footnotes, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "unprocessed", "unprocessed", 766771972), cljs.core.subs.call(null, link, 0, cljs.core.count.call(null, link) - 1)], null), markdown.links.parse_reference.call(null, trimmed, cljs.core.count.call(null, link) + 1));
  } else {
    return null;
  }
};
markdown.links.replace_footnote_link = function markdown$links$replace_footnote_link(footnotes, footnote) {
  var next_fn_id = (new cljs.core.Keyword(null, "next-fn-id", "next-fn-id", 738579636)).cljs$core$IFn$_invoke$arity$1(footnotes);
  var link = [cljs.core.str("#fn-"), cljs.core.str(next_fn_id)].join("");
  return [cljs.core.str("\x3ca href\x3d'"), cljs.core.str(link), cljs.core.str("' id\x3d'fnref"), cljs.core.str(next_fn_id), cljs.core.str("'\x3e\x3csup\x3e"), cljs.core.str(next_fn_id), cljs.core.str("\x3c/sup\x3e\x3c/a\x3e")].join("");
};
markdown.links.replace_all_footnote_links = function markdown$links$replace_all_footnote_links(text, p__37211) {
  while (true) {
    var map__37214 = p__37211;
    var map__37214__$1 = (!(map__37214 == null) ? map__37214.cljs$lang$protocol_mask$partition0$ & 64 || map__37214.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37214) : map__37214;
    var state = map__37214__$1;
    var footnotes = cljs.core.get.call(null, map__37214__$1, new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205));
    var matcher = /\[\^[a-zA-Z0-9_-]+\]/;
    var match = cljs.core.re_find.call(null, matcher, text);
    if (match == null) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    } else {
      var next_text = clojure.string.replace_first.call(null, text, matcher, cljs.core.partial.call(null, markdown.links.replace_footnote_link, footnotes));
      var next_state = cljs.core.assoc_in.call(null, cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), new cljs.core.Keyword(null, "next-fn-id", "next-fn-id", 738579636)], null), cljs.core.inc), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), new cljs.core.Keyword(null, 
      "processed", "processed", 800622264), cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), new cljs.core.Keyword(null, "next-fn-id", "next-fn-id", 738579636)], null))], null), cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), 
      new cljs.core.Keyword(null, "unprocessed", "unprocessed", 766771972), match], null)));
      var G__37216 = next_text;
      var G__37217 = next_state;
      text = G__37216;
      p__37211 = G__37217;
      continue;
    }
    break;
  }
};
markdown.links.footnote_link = function markdown$links$footnote_link(text, p__37218) {
  var map__37222 = p__37218;
  var map__37222__$1 = (!(map__37222 == null) ? map__37222.cljs$lang$protocol_mask$partition0$ & 64 || map__37222.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37222) : map__37222;
  var state = map__37222__$1;
  var code = cljs.core.get.call(null, map__37222__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__37222__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var footnotes = cljs.core.get.call(null, map__37222__$1, new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205));
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "unprocessed", "unprocessed", 766771972)).cljs$core$IFn$_invoke$arity$1(footnotes) == null;
    if (or__29600__auto__) {
      return or__29600__auto__;
    } else {
      var or__29600__auto____$1 = code;
      if (cljs.core.truth_(or__29600__auto____$1)) {
        return or__29600__auto____$1;
      } else {
        return codeblock;
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(markdown.links.footnote.call(null, clojure.string.trim.call(null, text)))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", state], null);
    } else {
      var vec__37224 = markdown.links.replace_all_footnote_links.call(null, text, state);
      var text__$1 = cljs.core.nth.call(null, vec__37224, 0, null);
      var state__$1 = cljs.core.nth.call(null, vec__37224, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text__$1, state__$1], null);
    }
  }
};
markdown.links.make_image_reference = function markdown$links$make_image_reference(src, alt, title) {
  var title_text = [cljs.core.str(cljs.core.truth_(title) ? [cljs.core.str('" title\x3d'), cljs.core.str(clojure.string.join.call(null, title)), cljs.core.str("")].join("") : '"')].join("");
  return [cljs.core.str('\x3cimg src\x3d"'), cljs.core.str(src), cljs.core.str('" alt\x3d"'), cljs.core.str(alt), cljs.core.str(title_text), cljs.core.str(" /\x3e")].join("");
};
markdown.links.image_reference_link = function markdown$links$image_reference_link(text, p__37225) {
  var map__37229 = p__37225;
  var map__37229__$1 = (!(map__37229 == null) ? map__37229.cljs$lang$protocol_mask$partition0$ & 64 || map__37229.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37229) : map__37229;
  var state = map__37229__$1;
  var references = cljs.core.get.call(null, map__37229__$1, new cljs.core.Keyword(null, "references", "references", 882562509));
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "reference-links?", "reference-links?", -2003778981)).cljs$core$IFn$_invoke$arity$1(state)) || cljs.core.empty_QMARK_.call(null, references)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var matcher = /!\[([^\]]+)\]\s*(\[[a-zA-Z0-9 ]+\])/;
    var matches = cljs.core.distinct.call(null, cljs.core.re_seq.call(null, matcher, text));
    var ms = matches;
    var new_text = text;
    while (true) {
      if (cljs.core.seq.call(null, ms)) {
        var vec__37231 = cljs.core.first.call(null, ms);
        var m = cljs.core.nth.call(null, vec__37231, 0, null);
        var alt = cljs.core.nth.call(null, vec__37231, 1, null);
        var ref = cljs.core.nth.call(null, vec__37231, 2, null);
        var refval = cljs.core.get.call(null, references, ref);
        var im = markdown.links.make_image_reference.call(null, cljs.core.first.call(null, refval), alt, cljs.core.second.call(null, refval));
        var G__37232 = cljs.core.rest.call(null, ms);
        var G__37233 = clojure.string.replace.call(null, new_text, m, im);
        ms = G__37232;
        new_text = G__37233;
        continue;
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_text, state], null);
      }
      break;
    }
  }
};
goog.provide("markdown.tables");
goog.require("cljs.core");
goog.require("clojure.string");
markdown.tables.parse_table_row = function markdown$tables$parse_table_row(text) {
  return cljs.core.map.call(null, function(p1__37238_SHARP_) {
    return cljs.core.identity.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", -1790561697), p1__37238_SHARP_], null));
  }, cljs.core.map.call(null, clojure.string.trim, function(p1__37237_SHARP_) {
    return clojure.string.split.call(null, p1__37237_SHARP_, /\|/);
  }.call(null, clojure.string.trim.call(null, function(p1__37236_SHARP_) {
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__37236_SHARP_), "|")) {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, p1__37236_SHARP_));
    } else {
      return p1__37236_SHARP_;
    }
  }.call(null, text)))));
};
markdown.tables.table_row__GT_str = function markdown$tables$table_row__GT_str(row_data, is_header_QMARK_) {
  return cljs.core.reduce.call(null, function(row, col) {
    var alignment_str = cljs.core.truth_((new cljs.core.Keyword(null, "alignment", "alignment", 1040093386)).cljs$core$IFn$_invoke$arity$1(col)) ? [cljs.core.str(" align\x3d'"), cljs.core.str(cljs.core.name.call(null, (new cljs.core.Keyword(null, "alignment", "alignment", 1040093386)).cljs$core$IFn$_invoke$arity$1(col))), cljs.core.str("'")].join("") : null;
    if (cljs.core.truth_(is_header_QMARK_)) {
      return [cljs.core.str(row), cljs.core.str("\x3cth"), cljs.core.str(alignment_str), cljs.core.str("\x3e"), cljs.core.str((new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(col)), cljs.core.str("\x3c/th\x3e")].join("");
    } else {
      return [cljs.core.str(row), cljs.core.str("\x3ctd"), cljs.core.str(alignment_str), cljs.core.str("\x3e"), cljs.core.str((new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(col)), cljs.core.str("\x3c/td\x3e")].join("");
    }
  }, "", row_data);
};
markdown.tables.table__GT_str = function markdown$tables$table__GT_str(table) {
  var table_data = cljs.core.map_indexed.call(null, cljs.core.vector, (new cljs.core.Keyword(null, "data", "data", -232669377)).cljs$core$IFn$_invoke$arity$1(table));
  var alignment_seq = (new cljs.core.Keyword(null, "alignment-seq", "alignment-seq", 1587946543)).cljs$core$IFn$_invoke$arity$1(table);
  return [cljs.core.str("\x3ctable\x3e"), cljs.core.str(cljs.core.reduce.call(null, function(table_data, alignment_seq) {
    return function(table_acc, row) {
      var row_idx = cljs.core.first.call(null, row);
      var row_data = cljs.core.mapv.call(null, cljs.core.merge, cljs.core.second.call(null, row), alignment_seq);
      var is_header_QMARK_ = cljs.core._EQ_.call(null, row_idx, 0);
      var is_first_row_QMARK_ = cljs.core._EQ_.call(null, row_idx, 1);
      var is_last_row_QMARK_ = cljs.core._EQ_.call(null, row_idx, cljs.core.count.call(null, table_data) - 1);
      return [cljs.core.str(table_acc), cljs.core.str(is_header_QMARK_ ? "\x3cthead\x3e" : is_first_row_QMARK_ ? "\x3ctbody\x3e" : null), cljs.core.str("\x3ctr\x3e"), cljs.core.str(markdown.tables.table_row__GT_str.call(null, row_data, is_header_QMARK_)), cljs.core.str("\x3c/tr\x3e"), cljs.core.str(is_header_QMARK_ ? "\x3c/thead\x3e" : is_last_row_QMARK_ ? "\x3c/tbody\x3e" : null)].join("");
    };
  }(table_data, alignment_seq), "", table_data)), cljs.core.str("\x3c/table\x3e")].join("");
};
markdown.tables.divider_seq__GT_alignment = function markdown$tables$divider_seq__GT_alignment(divider_seq) {
  return cljs.core.mapv.call(null, function(divider) {
    if (cljs.core._EQ_.call(null, cljs.core.re_find.call(null, /^:-+/, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(divider)), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(divider))) {
      return cljs.core.identity.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alignment", "alignment", 1040093386), new cljs.core.Keyword(null, "left", "left", -399115937)], null));
    } else {
      if (cljs.core._EQ_.call(null, cljs.core.re_find.call(null, /^-+:/, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(divider)), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(divider))) {
        return cljs.core.identity.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alignment", "alignment", 1040093386), new cljs.core.Keyword(null, "right", "right", -452581833)], null));
      } else {
        if (cljs.core._EQ_.call(null, cljs.core.re_find.call(null, /^:-+:/, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(divider)), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(divider))) {
          return cljs.core.identity.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alignment", "alignment", 1040093386), new cljs.core.Keyword(null, "center", "center", -748944368)], null));
        } else {
          return null;
        }
      }
    }
  }, divider_seq);
};
markdown.tables.table = function markdown$tables$table(text, state) {
  var table_row_re = cljs.core.re_find.call(null, /\|(?: [\S ]+ \|)+/, text);
  var table_divider_re = cljs.core.re_find.call(null, /\|(?: :?-+:? \|)+/, text);
  var is_table_row_QMARK_ = cljs.core._EQ_.call(null, table_row_re, text);
  var is_table_header_QMARK_ = is_table_row_QMARK_ && cljs.core.not.call(null, cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "in-table-body?", "in-table-body?", -136773915)], null)));
  var is_table_divider_QMARK_ = function() {
    var and__29588__auto__ = cljs.core._EQ_.call(null, table_divider_re, text);
    if (and__29588__auto__) {
      var and__29588__auto____$1 = cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "in-table-body?", "in-table-body?", -136773915)], null));
      if (cljs.core.truth_(and__29588__auto____$1)) {
        return cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "is-prev-header?", "is-prev-header?", -1637281701)], null));
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }();
  if (is_table_header_QMARK_) {
    var header_seq = markdown.tables.parse_table_row.call(null, text);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", cljs.core.update_in.call(null, cljs.core.assoc_in.call(null, cljs.core.assoc_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "is-prev-header?", "is-prev-header?", -1637281701)], null), true), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "in-table-body?", "in-table-body?", -136773915)], null), true), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "data", "data", -232669377)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentVector.EMPTY), cljs.core.vec.call(null, header_seq))], null);
  } else {
    if (cljs.core.truth_(is_table_divider_QMARK_)) {
      var divider_seq = markdown.tables.parse_table_row.call(null, text);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", cljs.core.assoc_in.call(null, cljs.core.assoc_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "is-prev-header?", "is-prev-header?", -1637281701)], null), false), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
      "table", "table", -564943036), new cljs.core.Keyword(null, "alignment-seq", "alignment-seq", 1587946543)], null), markdown.tables.divider_seq__GT_alignment.call(null, divider_seq))], null);
    } else {
      if (is_table_row_QMARK_) {
        var row_seq = markdown.tables.parse_table_row.call(null, text);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", cljs.core.update_in.call(null, cljs.core.assoc_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "is-prev-header?", "is-prev-header?", -1637281701)], null), false), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
        "table", "table", -564943036), new cljs.core.Keyword(null, "data", "data", -232669377)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentVector.EMPTY), cljs.core.vec.call(null, row_seq))], null);
      } else {
        var out = cljs.core.empty_QMARK_.call(null, cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "data", "data", -232669377)], null))) ? text : [cljs.core.str(markdown.tables.table__GT_str.call(null, (new cljs.core.Keyword(null, "table", "table", -564943036)).cljs$core$IFn$_invoke$arity$1(state))), cljs.core.str(text)].join("");
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [out, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "table", "table", -564943036))], null);
      }
    }
  }
};
goog.provide("markdown.lists");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("markdown.common");
markdown.lists.close_lists = function markdown$lists$close_lists(lists) {
  return clojure.string.join.call(null, function() {
    var iter__30380__auto__ = function markdown$lists$close_lists_$_iter__37249(s__37250) {
      return new cljs.core.LazySeq(null, function() {
        var s__37250__$1 = s__37250;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__37250__$1);
          if (temp__4657__auto__) {
            var s__37250__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__37250__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__37250__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__37252 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__37251 = 0;
                while (true) {
                  if (i__37251 < size__30379__auto__) {
                    var vec__37255 = cljs.core._nth.call(null, c__30378__auto__, i__37251);
                    var list_type = cljs.core.nth.call(null, vec__37255, 0, null);
                    cljs.core.chunk_append.call(null, b__37252, [cljs.core.str("\x3c/li\x3e\x3c/"), cljs.core.str(cljs.core.name.call(null, list_type)), cljs.core.str("\x3e")].join(""));
                    var G__37257 = i__37251 + 1;
                    i__37251 = G__37257;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37252), markdown$lists$close_lists_$_iter__37249.call(null, cljs.core.chunk_rest.call(null, s__37250__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37252), null);
              }
            } else {
              var vec__37256 = cljs.core.first.call(null, s__37250__$2);
              var list_type = cljs.core.nth.call(null, vec__37256, 0, null);
              return cljs.core.cons.call(null, [cljs.core.str("\x3c/li\x3e\x3c/"), cljs.core.str(cljs.core.name.call(null, list_type)), cljs.core.str("\x3e")].join(""), markdown$lists$close_lists_$_iter__37249.call(null, cljs.core.rest.call(null, s__37250__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, lists);
  }());
};
markdown.lists.add_row = function markdown$lists$add_row(row_type, list_type, num_indents, indents, content, state) {
  if (cljs.core.truth_(list_type)) {
    if (num_indents < indents) {
      var lists_to_close = cljs.core.take_while.call(null, function(p1__37258_SHARP_) {
        return cljs.core.second.call(null, p1__37258_SHARP_) > num_indents;
      }, cljs.core.reverse.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state)));
      var remaining_lists = cljs.core.vec.call(null, cljs.core.drop_last.call(null, cljs.core.count.call(null, lists_to_close), (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, cljs.core.str, markdown.lists.close_lists.call(null, lists_to_close), "\x3c/li\x3e\x3cli\x3e", content), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), num_indents > cljs.core.second.call(null, cljs.core.last.call(null, remaining_lists)) ? cljs.core.conj.call(null, remaining_lists, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
      [row_type, num_indents], null)) : remaining_lists)], null);
    } else {
      if (num_indents > indents) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c"), cljs.core.str(cljs.core.name.call(null, row_type)), cljs.core.str("\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lists", "lists", -884730684)], null), cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
        [row_type, num_indents], null))], null);
      } else {
        if (cljs.core._EQ_.call(null, num_indents, indents)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/li\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), state], null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c"), cljs.core.str(cljs.core.name.call(null, row_type)), cljs.core.str("\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row_type, 
    num_indents], null)], null))], null);
  }
};
markdown.lists.ul = function markdown$lists$ul(text, state) {
  var vec__37260 = cljs.core.last.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state));
  var list_type = cljs.core.nth.call(null, vec__37260, 0, null);
  var indents = cljs.core.nth.call(null, vec__37260, 1, null);
  var num_indents = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
  var content = clojure.string.trim.call(null, markdown.common._STAR_substring_STAR_.call(null, text, num_indents + 1));
  return markdown.lists.add_row.call(null, new cljs.core.Keyword(null, "ul", "ul", -1349521403), list_type, num_indents, indents, function() {
    var or__29600__auto__ = markdown.common.make_heading.call(null, content, false);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return content;
    }
  }(), state);
};
markdown.lists.ol = function markdown$lists$ol(text, state) {
  var vec__37262 = cljs.core.last.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state));
  var list_type = cljs.core.nth.call(null, vec__37262, 0, null);
  var indents = cljs.core.nth.call(null, vec__37262, 1, null);
  var num_indents = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
  var content = clojure.string.trim.call(null, clojure.string.join.call(null, cljs.core.drop_while.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), clojure.string.trim.call(null, text))));
  return markdown.lists.add_row.call(null, new cljs.core.Keyword(null, "ol", "ol", 932524051), list_type, num_indents, indents, function() {
    var or__29600__auto__ = markdown.common.make_heading.call(null, content, false);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return content;
    }
  }(), state);
};
markdown.lists.li = function markdown$lists$li(text, p__37263) {
  var map__37266 = p__37263;
  var map__37266__$1 = (!(map__37266 == null) ? map__37266.cljs$lang$protocol_mask$partition0$ & 64 || map__37266.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37266) : map__37266;
  var state = map__37266__$1;
  var code = cljs.core.get.call(null, map__37266__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__37266__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var last_line_empty_QMARK_ = cljs.core.get.call(null, map__37266__$1, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527));
  var eof = cljs.core.get.call(null, map__37266__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var lists = cljs.core.get.call(null, map__37266__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = last_line_empty_QMARK_;
    if (cljs.core.truth_(and__29588__auto__)) {
      return clojure.string.blank_QMARK_.call(null, text);
    } else {
      return and__29588__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.lists.close_lists.call(null, cljs.core.reverse.call(null, lists))), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
  } else {
    if (cljs.core.truth_(function() {
      var or__29600__auto__ = code;
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return codeblock;
      }
    }())) {
      if (cljs.core.truth_(function() {
        var and__29588__auto__ = lists;
        if (cljs.core.truth_(and__29588__auto__)) {
          var or__29600__auto__ = last_line_empty_QMARK_;
          if (cljs.core.truth_(or__29600__auto__)) {
            return or__29600__auto__;
          } else {
            return eof;
          }
        } else {
          return and__29588__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.lists.close_lists.call(null, cljs.core.reverse.call(null, lists))), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      }
    } else {
      if (cljs.core.truth_(function() {
        var and__29588__auto__ = cljs.core.not.call(null, eof);
        if (and__29588__auto__) {
          var and__29588__auto____$1 = lists;
          if (cljs.core.truth_(and__29588__auto____$1)) {
            return clojure.string.blank_QMARK_.call(null, text);
          } else {
            return and__29588__auto____$1;
          }
        } else {
          return and__29588__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true)], null);
      } else {
        var indents = cljs.core.truth_(last_line_empty_QMARK_) ? 0 : cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
        var trimmed = clojure.string.trim.call(null, text);
        var in_list_QMARK_ = (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state);
        if (cljs.core.truth_(cljs.core.re_find.call(null, /^[\*\+-] /, trimmed))) {
          return markdown.lists.ul.call(null, cljs.core.truth_(in_list_QMARK_) ? text : trimmed, state);
        } else {
          if (cljs.core.truth_(cljs.core.re_find.call(null, /^[0-9]+\. /, trimmed))) {
            return markdown.lists.ol.call(null, cljs.core.truth_(in_list_QMARK_) ? text : trimmed, state);
          } else {
            if (indents > 0) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
            } else {
              if (cljs.core.truth_(function() {
                var and__29588__auto__ = function() {
                  var or__29600__auto__ = eof;
                  if (cljs.core.truth_(or__29600__auto__)) {
                    return or__29600__auto__;
                  } else {
                    return last_line_empty_QMARK_;
                  }
                }();
                if (cljs.core.truth_(and__29588__auto__)) {
                  return cljs.core.not_empty.call(null, lists);
                } else {
                  return and__29588__auto__;
                }
              }())) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.lists.close_lists.call(null, cljs.core.reverse.call(null, lists)), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "buf", "buf", -213913340), text)], null);
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
              }
            }
          }
        }
      }
    }
  }
};
goog.provide("markdown.transformers");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("markdown.links");
goog.require("markdown.lists");
goog.require("markdown.tables");
goog.require("markdown.common");
markdown.transformers.heading_QMARK_ = function markdown$transformers$heading_QMARK_(text, type) {
  if (cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [" ", null], null), null), cljs.core.take.call(null, 4, text))) {
    return null;
  } else {
    var trimmed = cljs.core.truth_(text) ? clojure.string.trim.call(null, text) : null;
    var and__29588__auto__ = cljs.core.not_empty.call(null, trimmed);
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs.core.every_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray([type], true), trimmed);
    } else {
      return and__29588__auto__;
    }
  }
};
markdown.transformers.h1_QMARK_ = function markdown$transformers$h1_QMARK_(text) {
  return markdown.transformers.heading_QMARK_.call(null, text, "\x3d");
};
markdown.transformers.h2_QMARK_ = function markdown$transformers$h2_QMARK_(text) {
  return markdown.transformers.heading_QMARK_.call(null, text, "-");
};
markdown.transformers.empty_line = function markdown$transformers$empty_line(text, state) {
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
      var or__29600__auto__ = markdown.transformers.h1_QMARK_.call(null, text);
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return markdown.transformers.h2_QMARK_.call(null, text);
      }
    }()) ? "" : text, clojure.string.blank_QMARK_.call(null, text) ? cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "hr", "hr", 1377740067), new cljs.core.Keyword(null, "heading", "heading", -1312171873)) : state], null);
  }
};
markdown.transformers.superscript = function markdown$transformers$superscript(text, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var tokens = cljs.core.partition_by.call(null, cljs.core.partial.call(null, cljs.core.contains_QMARK_, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "^", null], null), null)), text);
    var buf = cljs.core.PersistentVector.EMPTY;
    var remaining = tokens;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, remaining)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, buf), state], null);
      } else {
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, remaining), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["^"], null))) {
          var G__37270 = cljs.core.into.call(null, buf, cljs.core.concat.call(null, cljs.core.seq.call(null, "\x3csup\x3e"), cljs.core.second.call(null, remaining), cljs.core.seq.call(null, "\x3c/sup\x3e")));
          var G__37271 = cljs.core.drop.call(null, 2, remaining);
          buf = G__37270;
          remaining = G__37271;
          continue;
        } else {
          var G__37272 = cljs.core.into.call(null, buf, cljs.core.first.call(null, remaining));
          var G__37273 = cljs.core.rest.call(null, remaining);
          buf = G__37272;
          remaining = G__37273;
          continue;
        }
      }
      break;
    }
  }
};
markdown.transformers.heading = function markdown$transformers$heading(text, state) {
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(markdown.transformers.h1_QMARK_.call(null, markdown.transformers._STAR_next_line_STAR_))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3ch1\x3e"), cljs.core.str(text), cljs.core.str("\x3c/h1\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
    } else {
      if (cljs.core.truth_(markdown.transformers.h2_QMARK_.call(null, markdown.transformers._STAR_next_line_STAR_))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3ch2\x3e"), cljs.core.str(text), cljs.core.str("\x3c/h2\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
      } else {
        var temp__4655__auto__ = markdown.common.make_heading.call(null, text, (new cljs.core.Keyword(null, "heading-anchors", "heading-anchors", 1713527866)).cljs$core$IFn$_invoke$arity$1(state));
        if (cljs.core.truth_(temp__4655__auto__)) {
          var heading__$1 = temp__4655__auto__;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [heading__$1, cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.br = function markdown$transformers$br(text, p__37274) {
  var map__37277 = p__37274;
  var map__37277__$1 = (!(map__37277 == null) ? map__37277.cljs$lang$protocol_mask$partition0$ & 64 || map__37277.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37277) : map__37277;
  var state = map__37277__$1;
  var code = cljs.core.get.call(null, map__37277__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var lists = cljs.core.get.call(null, map__37277__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", " "], null), cljs.core.take_last.call(null, 2, text)) && cljs.core.not.call(null, function() {
    var or__29600__auto__ = code;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return lists;
    }
  }()) ? [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.drop_last.call(null, 2, text))), cljs.core.str("\x3cbr /\x3e")].join("") : text, state], null);
};
markdown.transformers.autourl_transformer = function markdown$transformers$autourl_transformer(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state)) ? text : clojure.string.replace.call(null, text, /<https?:\/\/[-A-Za-z0-9+&@#\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\/%=~_()|]>/, function(p1__37279_SHARP_) {
    var url = cljs.core.subs.call(null, p1__37279_SHARP_, 1, cljs.core.count.call(null, p1__37279_SHARP_) - 1);
    return [cljs.core.str('\x3ca href\x3d"'), cljs.core.str(url), cljs.core.str('"\x3e'), cljs.core.str(url), cljs.core.str("\x3c/a\x3e")].join("");
  }), state], null);
};
markdown.transformers.autoemail_transformer = function markdown$transformers$autoemail_transformer(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
    var or__29600__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }()) ? text : clojure.string.replace.call(null, text, /<[\w._%+-]+@[\w.-]+\.[\w]{2,4}>/, function(p1__37280_SHARP_) {
    var encoded = cljs.core.truth_((new cljs.core.Keyword(null, "clojurescript", "clojurescript", -299769403)).cljs$core$IFn$_invoke$arity$1(state)) ? cljs.core.subs.call(null, p1__37280_SHARP_, 1, cljs.core.count.call(null, p1__37280_SHARP_) - 1) : cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(c) {
      if (cljs.core.rand.call(null) > .5) {
        return markdown.transformers.formatter.call(null, "\x26#x%02x;", c | 0);
      } else {
        return c;
      }
    }, cljs.core.subs.call(null, p1__37280_SHARP_, 1, cljs.core.count.call(null, p1__37280_SHARP_) - 1)));
    return [cljs.core.str('\x3ca href\x3d"mailto:'), cljs.core.str(encoded), cljs.core.str('"\x3e'), cljs.core.str(encoded), cljs.core.str("\x3c/a\x3e")].join("");
  }), state], null);
};
markdown.transformers.paragraph_text = function markdown$transformers$paragraph_text(last_line_empty_QMARK_, text) {
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = cljs.core.not.call(null, last_line_empty_QMARK_);
    if (and__29588__auto__) {
      return cljs.core.not_empty.call(null, text);
    } else {
      return and__29588__auto__;
    }
  }())) {
    return [cljs.core.str(" "), cljs.core.str(text)].join("");
  } else {
    return text;
  }
};
markdown.transformers.paragraph = function markdown$transformers$paragraph(text, p__37281) {
  var map__37284 = p__37281;
  var map__37284__$1 = (!(map__37284 == null) ? map__37284.cljs$lang$protocol_mask$partition0$ & 64 || map__37284.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37284) : map__37284;
  var state = map__37284__$1;
  var eof = cljs.core.get.call(null, map__37284__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var heading = cljs.core.get.call(null, map__37284__$1, new cljs.core.Keyword(null, "heading", "heading", -1312171873));
  var hr = cljs.core.get.call(null, map__37284__$1, new cljs.core.Keyword(null, "hr", "hr", 1377740067));
  var code = cljs.core.get.call(null, map__37284__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var lists = cljs.core.get.call(null, map__37284__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var blockquote = cljs.core.get.call(null, map__37284__$1, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190));
  var paragraph__$1 = cljs.core.get.call(null, map__37284__$1, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709));
  var last_line_empty_QMARK_ = cljs.core.get.call(null, map__37284__$1, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527));
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = paragraph__$1;
    if (cljs.core.truth_(and__29588__auto__)) {
      return lists;
    } else {
      return and__29588__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/p\x3e"), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709), false)], null);
  } else {
    if (cljs.core.truth_(function() {
      var or__29600__auto__ = heading;
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var or__29600__auto____$1 = hr;
        if (cljs.core.truth_(or__29600__auto____$1)) {
          return or__29600__auto____$1;
        } else {
          var or__29600__auto____$2 = code;
          if (cljs.core.truth_(or__29600__auto____$2)) {
            return or__29600__auto____$2;
          } else {
            var or__29600__auto____$3 = lists;
            if (cljs.core.truth_(or__29600__auto____$3)) {
              return or__29600__auto____$3;
            } else {
              return blockquote;
            }
          }
        }
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    } else {
      if (cljs.core.truth_(paragraph__$1)) {
        if (cljs.core.truth_(function() {
          var or__29600__auto__ = eof;
          if (cljs.core.truth_(or__29600__auto__)) {
            return or__29600__auto__;
          } else {
            return cljs.core.empty_QMARK_.call(null, clojure.string.trim.call(null, text));
          }
        }())) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.paragraph_text.call(null, last_line_empty_QMARK_, text)), cljs.core.str("\x3c/p\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709), false)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.paragraph_text.call(null, last_line_empty_QMARK_, text), state], null);
        }
      } else {
        if (cljs.core.truth_(function() {
          var and__29588__auto__ = cljs.core.not.call(null, eof);
          if (and__29588__auto__) {
            return last_line_empty_QMARK_;
          } else {
            return and__29588__auto__;
          }
        }())) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cp\x3e"), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709), true, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.code = function markdown$transformers$code(text, p__37286) {
  var map__37289 = p__37286;
  var map__37289__$1 = (!(map__37289 == null) ? map__37289.cljs$lang$protocol_mask$partition0$ & 64 || map__37289.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37289) : map__37289;
  var state = map__37289__$1;
  var eof = cljs.core.get.call(null, map__37289__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var lists = cljs.core.get.call(null, map__37289__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var code__$1 = cljs.core.get.call(null, map__37289__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__37289__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = lists;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return codeblock;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(code__$1)) {
      if (cljs.core.truth_(function() {
        var or__29600__auto__ = eof;
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, "    ", clojure.string.join.call(null, cljs.core.take.call(null, 4, text)));
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\n"), cljs.core.str(markdown.common.escape_code.call(null, clojure.string.replace_first.call(null, text, /    /, "")))].join(""), state], null);
      }
    } else {
      if (cljs.core.empty_QMARK_.call(null, clojure.string.trim.call(null, text))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      } else {
        var num_spaces = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
        if (num_spaces > 3) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cpre\x3e\x3ccode\x3e"), cljs.core.str(markdown.common.escape_code.call(null, clojure.string.replace_first.call(null, text, /    /, "")))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), true)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.codeblock = function markdown$transformers$codeblock(text, state) {
  var trimmed = clojure.string.trim.call(null, text);
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take.call(null, 3, trimmed));
    if (and__29588__auto__) {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    } else {
      return and__29588__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.drop.call(null, 3, trimmed)))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null)
    ;
  } else {
    if (cljs.core.truth_(function() {
      var and__29588__auto__ = cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take_last.call(null, 3, trimmed));
      if (and__29588__auto__) {
        return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
      } else {
        return and__29588__auto__;
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.drop_last.call(null, 3, trimmed)))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], 
      null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take.call(null, 3, trimmed))) {
        var vec__37292 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), cljs.core.drop.call(null, 3, trimmed));
        var lang = cljs.core.nth.call(null, vec__37292, 0, null);
        var code = cljs.core.nth.call(null, vec__37292, 1, null);
        var s = cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, code));
        var formatter = (new cljs.core.Keyword(null, "code-style", "code-style", -2144009586)).cljs$core$IFn$_invoke$arity$1(state);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cpre\x3e\x3ccode"), cljs.core.str(cljs.core.truth_(cljs.core.not_empty.call(null, lang)) ? [cljs.core.str(" "), cljs.core.str(cljs.core.truth_(formatter) ? formatter.call(null, clojure.string.join.call(null, lang)) : [cljs.core.str('class\x3d"'), cljs.core.str(clojure.string.join.call(null, lang)), cljs.core.str('"')].join(""))].join("") : null), cljs.core.str("\x3e"), cljs.core.str(markdown.common.escape_code.call(null, 
        cljs.core.empty_QMARK_.call(null, s) ? s : [cljs.core.str(s), cljs.core.str("\n")].join("")))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), true, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), true)], null);
      } else {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.common.escape_code.call(null, text)), cljs.core.str("\n")].join(""), state], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.hr = function markdown$transformers$hr(text, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if ((cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "*", null], null), null), text)) || cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "-", null], null), null), text)) || cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, 
    new cljs.core.PersistentArrayMap(null, 2, [" ", null, "_", null], null), null), text))) && cljs.core.count.call(null, cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [" ", null], null), null), text)) > 2) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3chr/\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "hr", "hr", 1377740067), true)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    }
  }
};
markdown.transformers.blockquote = function markdown$transformers$blockquote(text, p__37293) {
  var map__37296 = p__37293;
  var map__37296__$1 = (!(map__37296 == null) ? map__37296.cljs$lang$protocol_mask$partition0$ & 64 || map__37296.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37296) : map__37296;
  var state = map__37296__$1;
  var eof = cljs.core.get.call(null, map__37296__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var code = cljs.core.get.call(null, map__37296__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__37296__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var lists = cljs.core.get.call(null, map__37296__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var trimmed = clojure.string.trim.call(null, text);
  if (cljs.core.truth_(function() {
    var or__29600__auto__ = code;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      var or__29600__auto____$1 = codeblock;
      if (cljs.core.truth_(or__29600__auto____$1)) {
        return or__29600__auto____$1;
      } else {
        return lists;
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190)).cljs$core$IFn$_invoke$arity$1(state))) {
      if (cljs.core.truth_(function() {
        var or__29600__auto__ = eof;
        if (cljs.core.truth_(or__29600__auto__)) {
          return or__29600__auto__;
        } else {
          return cljs.core.empty_QMARK_.call(null, trimmed);
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["\x3c/p\x3e\x3c/blockquote\x3e", cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), false)], null);
      } else {
        if (cljs.core._EQ_.call(null, "\x3e", trimmed)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["\x3c/p\x3e\x3cp\x3e", state], null);
        } else {
          if (cljs.core._EQ_.call(null, "\x3e-", cljs.core.subs.call(null, trimmed, 0, 2))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/p\x3e\x3cfooter\x3e"), cljs.core.str(cljs.core.subs.call(null, text, 2)), cljs.core.str("\x3c/footer\x3e\x3cp\x3e")].join(""), state], null);
          } else {
            if (cljs.core._EQ_.call(null, "\x3e", cljs.core.subs.call(null, trimmed, 0, 1))) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.subs.call(null, text, 1)), cljs.core.str(" ")].join(""), state], null);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(text), cljs.core.str(" ")].join(""), state], null);
            }
          }
        }
      }
    } else {
      if (cljs.core._EQ_.call(null, "\x3e", cljs.core.first.call(null, text))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cblockquote\x3e\x3cp\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.rest.call(null, text))), cljs.core.str(" ")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), true)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      }
    }
  }
};
markdown.transformers.footer = function markdown$transformers$footer(footnotes) {
  if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "processed", "processed", 800622264)).cljs$core$IFn$_invoke$arity$1(footnotes))) {
    return "";
  } else {
    return function(p1__37298_SHARP_) {
      return [cljs.core.str("\x3col class\x3d'footnotes'\x3e"), cljs.core.str(p1__37298_SHARP_), cljs.core.str("\x3c/ol\x3e")].join("");
    }.call(null, cljs.core.reduce.call(null, function(footnotes__$1, p__37301) {
      var vec__37302 = p__37301;
      var id = cljs.core.nth.call(null, vec__37302, 0, null);
      var label = cljs.core.nth.call(null, vec__37302, 1, null);
      return [cljs.core.str(footnotes__$1), cljs.core.str("\x3cli id\x3d'fn-"), cljs.core.str(id), cljs.core.str("'\x3e"), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", label))), cljs.core.str("\x3ca href\x3d'#fnref"), cljs.core.str(id), cljs.core.str("'\x3e\x26#8617;\x3c/a\x3e\x3c/li\x3e")].join("");
    }, "", cljs.core.into.call(null, cljs.core.sorted_map.call(null), (new cljs.core.Keyword(null, "processed", "processed", 800622264)).cljs$core$IFn$_invoke$arity$1(footnotes))));
  }
};
markdown.transformers.parse_metadata_line = function markdown$transformers$parse_metadata_line(line) {
  if (cljs.core.truth_(line)) {
    var vec__37305 = cljs.core.re_matches.call(null, /^([0-9A-Za-z_-]*):(.*)$/, line);
    var _ = cljs.core.nth.call(null, vec__37305, 0, null);
    var key = cljs.core.nth.call(null, vec__37305, 1, null);
    var val = cljs.core.nth.call(null, vec__37305, 2, null);
    var vec__37306 = cljs.core.re_matches.call(null, /^    (.*)$/, line);
    var ___$1 = cljs.core.nth.call(null, vec__37306, 0, null);
    var next_val = cljs.core.nth.call(null, vec__37306, 1, null);
    if (cljs.core.not_EQ_.call(null, clojure.string.trim.call(null, line), "")) {
      if (cljs.core.truth_(key)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, clojure.string.lower_case.call(null, key)), val], null);
      } else {
        if (cljs.core.truth_(next_val)) {
          return line;
        } else {
          return null;
        }
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
markdown.transformers.flatten_metadata = function markdown$transformers$flatten_metadata(metadata) {
  if (cljs.core.count.call(null, metadata) > 0) {
    var acc = cljs.core.PersistentArrayMap.EMPTY;
    var remain = metadata;
    var prev_key = null;
    while (true) {
      if (!cljs.core.empty_QMARK_.call(null, remain)) {
        var data = cljs.core.first.call(null, remain);
        var vec__37308 = cljs.core.sequential_QMARK_.call(null, data) ? data : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prev_key, data], null);
        var key = cljs.core.nth.call(null, vec__37308, 0, null);
        var val = cljs.core.nth.call(null, vec__37308, 1, null);
        var prev_val = cljs.core.get.call(null, acc, key, cljs.core.PersistentVector.EMPTY);
        var postfix = cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", " "], null), cljs.core.take_last.call(null, 2, val)) ? "\n" : "";
        var norm_val = [cljs.core.str(clojure.string.trim.call(null, val)), cljs.core.str(postfix)].join("");
        var new_val = !cljs.core.empty_QMARK_.call(null, norm_val) ? cljs.core.conj.call(null, prev_val, norm_val) : prev_val;
        var G__37309 = cljs.core.merge.call(null, acc, cljs.core.PersistentArrayMap.fromArray([key, new_val], true, false));
        var G__37310 = cljs.core.rest.call(null, remain);
        var G__37311 = key;
        acc = G__37309;
        remain = G__37310;
        prev_key = G__37311;
        continue;
      } else {
        return acc;
      }
      break;
    }
  } else {
    return null;
  }
};
markdown.transformers.parse_metadata_headers = function markdown$transformers$parse_metadata_headers(lines_seq) {
  if (cljs.core.sequential_QMARK_.call(null, lines_seq)) {
  } else {
    throw new Error("Assert failed: (sequential? lines-seq)");
  }
  if (cljs.core.every_QMARK_.call(null, cljs.core.string_QMARK_, lines_seq)) {
  } else {
    throw new Error("Assert failed: (every? string? lines-seq)");
  }
  return cljs.core.reduce.call(null, function(acc, line) {
    var temp__4655__auto__ = markdown.transformers.parse_metadata_line.call(null, line);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var parsed = temp__4655__auto__;
      return cljs.core.conj.call(null, acc, parsed);
    } else {
      return cljs.core.reduced.call(null, markdown.transformers.flatten_metadata.call(null, acc));
    }
  }, cljs.core.PersistentVector.EMPTY, lines_seq);
};
markdown.transformers.transformer_vector = new cljs.core.PersistentVector(null, 28, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.empty_line, markdown.transformers.codeblock, markdown.transformers.code, markdown.common.escaped_chars, markdown.common.inline_code, markdown.transformers.autoemail_transformer, markdown.transformers.autourl_transformer, markdown.links.image, markdown.links.image_reference_link, markdown.links.link, markdown.links.implicit_reference_link, markdown.links.reference_link, 
markdown.links.footnote_link, markdown.transformers.hr, markdown.lists.li, markdown.transformers.heading, markdown.common.italics, markdown.common.em, markdown.common.strong, markdown.common.bold, markdown.common.strikethrough, markdown.transformers.superscript, markdown.transformers.blockquote, markdown.tables.table, markdown.transformers.paragraph, markdown.transformers.br, markdown.common.thaw_strings, markdown.common.dashes], null);
goog.provide("markdown.core");
goog.require("cljs.core");
goog.require("markdown.common");
goog.require("markdown.links");
goog.require("markdown.transformers");
markdown.core.init_transformer = function markdown$core$init_transformer(p__37314) {
  var map__37321 = p__37314;
  var map__37321__$1 = (!(map__37321 == null) ? map__37321.cljs$lang$protocol_mask$partition0$ & 64 || map__37321.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37321) : map__37321;
  var replacement_transformers = cljs.core.get.call(null, map__37321__$1, new cljs.core.Keyword(null, "replacement-transformers", "replacement-transformers", -2028552897));
  var custom_transformers = cljs.core.get.call(null, map__37321__$1, new cljs.core.Keyword(null, "custom-transformers", "custom-transformers", 1440601790));
  return function(map__37321, map__37321__$1, replacement_transformers, custom_transformers) {
    return function(html, line, next_line, state) {
      var _STAR_next_line_STAR_37323 = markdown.transformers._STAR_next_line_STAR_;
      markdown.transformers._STAR_next_line_STAR_ = next_line;
      try {
        var vec__37324 = cljs.core.reduce.call(null, function(_STAR_next_line_STAR_37323, map__37321, map__37321__$1, replacement_transformers, custom_transformers) {
          return function(p__37325, transformer) {
            var vec__37326 = p__37325;
            var text = cljs.core.nth.call(null, vec__37326, 0, null);
            var state__$1 = cljs.core.nth.call(null, vec__37326, 1, null);
            return transformer.call(null, text, state__$1);
          };
        }(_STAR_next_line_STAR_37323, map__37321, map__37321__$1, replacement_transformers, custom_transformers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [line, state], null), function() {
          var or__29600__auto__ = replacement_transformers;
          if (cljs.core.truth_(or__29600__auto__)) {
            return or__29600__auto__;
          } else {
            return cljs.core.into.call(null, markdown.transformers.transformer_vector, custom_transformers);
          }
        }());
        var text = cljs.core.nth.call(null, vec__37324, 0, null);
        var new_state = cljs.core.nth.call(null, vec__37324, 1, null);
        html.append(text);
        return new_state;
      } finally {
        markdown.transformers._STAR_next_line_STAR_ = _STAR_next_line_STAR_37323;
      }
    };
  }(map__37321, map__37321__$1, replacement_transformers, custom_transformers);
};
markdown.core.format = function markdown$core$format(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37329 = arguments.length;
  var i__30670__auto___37330 = 0;
  while (true) {
    if (i__30670__auto___37330 < len__30669__auto___37329) {
      args__30676__auto__.push(arguments[i__30670__auto___37330]);
      var G__37331 = i__30670__auto___37330 + 1;
      i__30670__auto___37330 = G__37331;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return markdown.core.format.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
markdown.core.format.cljs$core$IFn$_invoke$arity$variadic = function(fmt, args) {
  return cljs.core.apply.call(null, goog.string.format, fmt, args);
};
markdown.core.format.cljs$lang$maxFixedArity = 1;
markdown.core.format.cljs$lang$applyTo = function(seq37327) {
  var G__37328 = cljs.core.first.call(null, seq37327);
  var seq37327__$1 = cljs.core.next.call(null, seq37327);
  return markdown.core.format.cljs$core$IFn$_invoke$arity$variadic(G__37328, seq37327__$1);
};
markdown.core.parse_references = function markdown$core$parse_references(lines) {
  var references = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var seq__37336_37340 = cljs.core.seq.call(null, lines);
  var chunk__37337_37341 = null;
  var count__37338_37342 = 0;
  var i__37339_37343 = 0;
  while (true) {
    if (i__37339_37343 < count__37338_37342) {
      var line_37344 = cljs.core._nth.call(null, chunk__37337_37341, i__37339_37343);
      markdown.links.parse_reference_link.call(null, line_37344, references);
      var G__37345 = seq__37336_37340;
      var G__37346 = chunk__37337_37341;
      var G__37347 = count__37338_37342;
      var G__37348 = i__37339_37343 + 1;
      seq__37336_37340 = G__37345;
      chunk__37337_37341 = G__37346;
      count__37338_37342 = G__37347;
      i__37339_37343 = G__37348;
      continue;
    } else {
      var temp__4657__auto___37349 = cljs.core.seq.call(null, seq__37336_37340);
      if (temp__4657__auto___37349) {
        var seq__37336_37350__$1 = temp__4657__auto___37349;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__37336_37350__$1)) {
          var c__30411__auto___37351 = cljs.core.chunk_first.call(null, seq__37336_37350__$1);
          var G__37352 = cljs.core.chunk_rest.call(null, seq__37336_37350__$1);
          var G__37353 = c__30411__auto___37351;
          var G__37354 = cljs.core.count.call(null, c__30411__auto___37351);
          var G__37355 = 0;
          seq__37336_37340 = G__37352;
          chunk__37337_37341 = G__37353;
          count__37338_37342 = G__37354;
          i__37339_37343 = G__37355;
          continue;
        } else {
          var line_37356 = cljs.core.first.call(null, seq__37336_37350__$1);
          markdown.links.parse_reference_link.call(null, line_37356, references);
          var G__37357 = cljs.core.next.call(null, seq__37336_37350__$1);
          var G__37358 = null;
          var G__37359 = 0;
          var G__37360 = 0;
          seq__37336_37340 = G__37357;
          chunk__37337_37341 = G__37358;
          count__37338_37342 = G__37359;
          i__37339_37343 = G__37360;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.deref.call(null, references);
};
markdown.core.parse_footnotes = function markdown$core$parse_footnotes(lines) {
  var footnotes = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "next-fn-id", "next-fn-id", 738579636), 1, new cljs.core.Keyword(null, "processed", "processed", 800622264), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "unprocessed", "unprocessed", 766771972), cljs.core.PersistentArrayMap.EMPTY], null));
  var seq__37365_37369 = cljs.core.seq.call(null, lines);
  var chunk__37366_37370 = null;
  var count__37367_37371 = 0;
  var i__37368_37372 = 0;
  while (true) {
    if (i__37368_37372 < count__37367_37371) {
      var line_37373 = cljs.core._nth.call(null, chunk__37366_37370, i__37368_37372);
      markdown.links.parse_footnote_link.call(null, line_37373, footnotes);
      var G__37374 = seq__37365_37369;
      var G__37375 = chunk__37366_37370;
      var G__37376 = count__37367_37371;
      var G__37377 = i__37368_37372 + 1;
      seq__37365_37369 = G__37374;
      chunk__37366_37370 = G__37375;
      count__37367_37371 = G__37376;
      i__37368_37372 = G__37377;
      continue;
    } else {
      var temp__4657__auto___37378 = cljs.core.seq.call(null, seq__37365_37369);
      if (temp__4657__auto___37378) {
        var seq__37365_37379__$1 = temp__4657__auto___37378;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__37365_37379__$1)) {
          var c__30411__auto___37380 = cljs.core.chunk_first.call(null, seq__37365_37379__$1);
          var G__37381 = cljs.core.chunk_rest.call(null, seq__37365_37379__$1);
          var G__37382 = c__30411__auto___37380;
          var G__37383 = cljs.core.count.call(null, c__30411__auto___37380);
          var G__37384 = 0;
          seq__37365_37369 = G__37381;
          chunk__37366_37370 = G__37382;
          count__37367_37371 = G__37383;
          i__37368_37372 = G__37384;
          continue;
        } else {
          var line_37385 = cljs.core.first.call(null, seq__37365_37379__$1);
          markdown.links.parse_footnote_link.call(null, line_37385, footnotes);
          var G__37386 = cljs.core.next.call(null, seq__37365_37379__$1);
          var G__37387 = null;
          var G__37388 = 0;
          var G__37389 = 0;
          seq__37365_37369 = G__37386;
          chunk__37366_37370 = G__37387;
          count__37367_37371 = G__37388;
          i__37368_37372 = G__37389;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.deref.call(null, footnotes);
};
markdown.core.parse_metadata = function markdown$core$parse_metadata(lines) {
  var vec__37392 = cljs.core.split_with.call(null, function(p1__37390_SHARP_) {
    return cljs.core.not_empty.call(null, p1__37390_SHARP_.trim());
  }, lines);
  var metadata = cljs.core.nth.call(null, vec__37392, 0, null);
  var lines__$1 = cljs.core.nth.call(null, vec__37392, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.parse_metadata_headers.call(null, metadata), lines__$1], null);
};
markdown.core.md_to_html_string_STAR_ = function markdown$core$md_to_html_string_STAR_(text, params) {
  var _STAR_substring_STAR_37400 = markdown.common._STAR_substring_STAR_;
  var formatter37401 = markdown.transformers.formatter;
  markdown.common._STAR_substring_STAR_ = function(_STAR_substring_STAR_37400, formatter37401) {
    return function(s, n) {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.drop.call(null, n, s));
    };
  }(_STAR_substring_STAR_37400, formatter37401);
  markdown.transformers.formatter = markdown.core.format;
  try {
    var params__$1 = cljs.core.truth_(params) ? cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.assoc, cljs.core.PersistentArrayMap.EMPTY), params) : null;
    var lines = [cljs.core.str(text), cljs.core.str("\n")].join("").split("\n");
    var html = new goog.string.StringBuffer("");
    var references = cljs.core.truth_((new cljs.core.Keyword(null, "reference-links?", "reference-links?", -2003778981)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? markdown.core.parse_references.call(null, lines) : null;
    var footnotes = cljs.core.truth_((new cljs.core.Keyword(null, "footnotes?", "footnotes?", -1590157845)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? markdown.core.parse_footnotes.call(null, lines) : null;
    var vec__37402 = cljs.core.truth_((new cljs.core.Keyword(null, "parse-meta?", "parse-meta?", -1938948742)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? markdown.core.parse_metadata.call(null, lines) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, lines], null);
    var metadata = cljs.core.nth.call(null, vec__37402, 0, null);
    var lines__$1 = cljs.core.nth.call(null, vec__37402, 1, null);
    var transformer = markdown.core.init_transformer.call(null, params__$1);
    var G__37404_37407 = lines__$1;
    var vec__37405_37408 = G__37404_37407;
    var line_37409 = cljs.core.nth.call(null, vec__37405_37408, 0, null);
    var more_37410 = cljs.core.nthnext.call(null, vec__37405_37408, 1);
    var state_37411 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "clojurescript", "clojurescript", -299769403), true, new cljs.core.Keyword(null, "references", "references", 882562509), references, new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), footnotes, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true], null), params__$1);
    var G__37404_37412__$1 = G__37404_37407;
    var state_37413__$1 = state_37411;
    while (true) {
      var vec__37406_37414 = G__37404_37412__$1;
      var line_37415__$1 = cljs.core.nth.call(null, vec__37406_37414, 0, null);
      var more_37416__$1 = cljs.core.nthnext.call(null, vec__37406_37414, 1);
      var state_37417__$2 = state_37413__$1;
      var state_37418__$3 = cljs.core.truth_((new cljs.core.Keyword(null, "buf", "buf", -213913340)).cljs$core$IFn$_invoke$arity$1(state_37417__$2)) ? transformer.call(null, html, (new cljs.core.Keyword(null, "buf", "buf", -213913340)).cljs$core$IFn$_invoke$arity$1(state_37417__$2), cljs.core.first.call(null, more_37416__$1), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state_37417__$2, new cljs.core.Keyword(null, "buf", "buf", -213913340), new cljs.core.Keyword(null, "lists", "lists", 
      -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true)) : state_37417__$2;
      if (cljs.core.truth_(cljs.core.not_empty.call(null, more_37416__$1))) {
        var G__37419 = more_37416__$1;
        var G__37420 = cljs.core.assoc.call(null, transformer.call(null, html, line_37415__$1, cljs.core.first.call(null, more_37416__$1), state_37418__$3), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), cljs.core.empty_QMARK_.call(null, line_37415__$1));
        G__37404_37412__$1 = G__37419;
        state_37413__$1 = G__37420;
        continue;
      } else {
        transformer.call(null, html.append(markdown.transformers.footer.call(null, (new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205)).cljs$core$IFn$_invoke$arity$1(state_37418__$3))), line_37415__$1, "", cljs.core.assoc.call(null, state_37418__$3, new cljs.core.Keyword(null, "eof", "eof", -489063237), true));
      }
      break;
    }
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "metadata", "metadata", 1799301597), metadata, new cljs.core.Keyword(null, "html", "html", -998796897), html.toString()], null);
  } finally {
    markdown.transformers.formatter = formatter37401;
    markdown.common._STAR_substring_STAR_ = _STAR_substring_STAR_37400;
  }
};
markdown.core.md__GT_html = function markdown$core$md__GT_html(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37423 = arguments.length;
  var i__30670__auto___37424 = 0;
  while (true) {
    if (i__30670__auto___37424 < len__30669__auto___37423) {
      args__30676__auto__.push(arguments[i__30670__auto___37424]);
      var G__37425 = i__30670__auto___37424 + 1;
      i__30670__auto___37424 = G__37425;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return markdown.core.md__GT_html.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
markdown.core.md__GT_html.cljs$core$IFn$_invoke$arity$variadic = function(text, params) {
  return (new cljs.core.Keyword(null, "html", "html", -998796897)).cljs$core$IFn$_invoke$arity$1(markdown.core.md_to_html_string_STAR_.call(null, text, params));
};
markdown.core.md__GT_html.cljs$lang$maxFixedArity = 1;
markdown.core.md__GT_html.cljs$lang$applyTo = function(seq37421) {
  var G__37422 = cljs.core.first.call(null, seq37421);
  var seq37421__$1 = cljs.core.next.call(null, seq37421);
  return markdown.core.md__GT_html.cljs$core$IFn$_invoke$arity$variadic(G__37422, seq37421__$1);
};
markdown.core.md__GT_html_with_meta = function markdown$core$md__GT_html_with_meta(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37428 = arguments.length;
  var i__30670__auto___37429 = 0;
  while (true) {
    if (i__30670__auto___37429 < len__30669__auto___37428) {
      args__30676__auto__.push(arguments[i__30670__auto___37429]);
      var G__37430 = i__30670__auto___37429 + 1;
      i__30670__auto___37429 = G__37430;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return markdown.core.md__GT_html_with_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
markdown.core.md__GT_html_with_meta.cljs$core$IFn$_invoke$arity$variadic = function(text, params) {
  return markdown.core.md_to_html_string_STAR_.call(null, text, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parse-meta?", "parse-meta?", -1938948742), true], null), params));
};
markdown.core.md__GT_html_with_meta.cljs$lang$maxFixedArity = 1;
markdown.core.md__GT_html_with_meta.cljs$lang$applyTo = function(seq37426) {
  var G__37427 = cljs.core.first.call(null, seq37426);
  var seq37426__$1 = cljs.core.next.call(null, seq37426);
  return markdown.core.md__GT_html_with_meta.cljs$core$IFn$_invoke$arity$variadic(G__37427, seq37426__$1);
};
markdown.core.mdToHtml = function markdown$core$mdToHtml(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37432 = arguments.length;
  var i__30670__auto___37433 = 0;
  while (true) {
    if (i__30670__auto___37433 < len__30669__auto___37432) {
      args__30676__auto__.push(arguments[i__30670__auto___37433]);
      var G__37434 = i__30670__auto___37433 + 1;
      i__30670__auto___37433 = G__37434;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return markdown.core.mdToHtml.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
goog.exportSymbol("markdown.core.mdToHtml", markdown.core.mdToHtml);
markdown.core.mdToHtml.cljs$core$IFn$_invoke$arity$variadic = function(params) {
  return cljs.core.apply.call(null, markdown.core.md__GT_html, params);
};
markdown.core.mdToHtml.cljs$lang$maxFixedArity = 0;
markdown.core.mdToHtml.cljs$lang$applyTo = function(seq37431) {
  return markdown.core.mdToHtml.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq37431));
};
markdown.core.mdToHtmlWithMeta = function markdown$core$mdToHtmlWithMeta(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37436 = arguments.length;
  var i__30670__auto___37437 = 0;
  while (true) {
    if (i__30670__auto___37437 < len__30669__auto___37436) {
      args__30676__auto__.push(arguments[i__30670__auto___37437]);
      var G__37438 = i__30670__auto___37437 + 1;
      i__30670__auto___37437 = G__37438;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return markdown.core.mdToHtmlWithMeta.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
goog.exportSymbol("markdown.core.mdToHtmlWithMeta", markdown.core.mdToHtmlWithMeta);
markdown.core.mdToHtmlWithMeta.cljs$core$IFn$_invoke$arity$variadic = function(params) {
  return cljs.core.apply.call(null, markdown.core.md__GT_html_with_meta, params);
};
markdown.core.mdToHtmlWithMeta.cljs$lang$maxFixedArity = 0;
markdown.core.mdToHtmlWithMeta.cljs$lang$applyTo = function(seq37435) {
  return markdown.core.mdToHtmlWithMeta.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq37435));
};
goog.provide("reagent.session");
goog.require("cljs.core");
goog.require("reagent.core");
reagent.session.state = reagent.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
reagent.session.cursor = function reagent$session$cursor(ks) {
  return reagent.core.cursor.call(null, reagent.session.state, ks);
};
reagent.session.get = function reagent$session$get(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38317 = arguments.length;
  var i__30670__auto___38318 = 0;
  while (true) {
    if (i__30670__auto___38318 < len__30669__auto___38317) {
      args__30676__auto__.push(arguments[i__30670__auto___38318]);
      var G__38319 = i__30670__auto___38318 + 1;
      i__30670__auto___38318 = G__38319;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return reagent.session.get.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
reagent.session.get.cljs$core$IFn$_invoke$arity$variadic = function(k, p__38315) {
  var vec__38316 = p__38315;
  var default$ = cljs.core.nth.call(null, vec__38316, 0, null);
  var temp_a = reagent.session.cursor.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null));
  var or__29600__auto__ = cljs.core.deref.call(null, temp_a);
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return default$;
  }
};
reagent.session.get.cljs$lang$maxFixedArity = 1;
reagent.session.get.cljs$lang$applyTo = function(seq38313) {
  var G__38314 = cljs.core.first.call(null, seq38313);
  var seq38313__$1 = cljs.core.next.call(null, seq38313);
  return reagent.session.get.cljs$core$IFn$_invoke$arity$variadic(G__38314, seq38313__$1);
};
reagent.session.put_BANG_ = function reagent$session$put_BANG_(k, v) {
  return cljs.core.swap_BANG_.call(null, reagent.session.state, cljs.core.assoc, k, v);
};
reagent.session.get_in = function reagent$session$get_in(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38324 = arguments.length;
  var i__30670__auto___38325 = 0;
  while (true) {
    if (i__30670__auto___38325 < len__30669__auto___38324) {
      args__30676__auto__.push(arguments[i__30670__auto___38325]);
      var G__38326 = i__30670__auto___38325 + 1;
      i__30670__auto___38325 = G__38326;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic = function(ks, p__38322) {
  var vec__38323 = p__38322;
  var default$ = cljs.core.nth.call(null, vec__38323, 0, null);
  var or__29600__auto__ = cljs.core.deref.call(null, reagent.session.cursor.call(null, ks));
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return default$;
  }
};
reagent.session.get_in.cljs$lang$maxFixedArity = 1;
reagent.session.get_in.cljs$lang$applyTo = function(seq38320) {
  var G__38321 = cljs.core.first.call(null, seq38320);
  var seq38320__$1 = cljs.core.next.call(null, seq38320);
  return reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic(G__38321, seq38320__$1);
};
reagent.session.swap_BANG_ = function reagent$session$swap_BANG_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38329 = arguments.length;
  var i__30670__auto___38330 = 0;
  while (true) {
    if (i__30670__auto___38330 < len__30669__auto___38329) {
      args__30676__auto__.push(arguments[i__30670__auto___38330]);
      var G__38331 = i__30670__auto___38330 + 1;
      i__30670__auto___38330 = G__38331;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return reagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
reagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.call(null, cljs.core.swap_BANG_, reagent.session.state, f, args);
};
reagent.session.swap_BANG_.cljs$lang$maxFixedArity = 1;
reagent.session.swap_BANG_.cljs$lang$applyTo = function(seq38327) {
  var G__38328 = cljs.core.first.call(null, seq38327);
  var seq38327__$1 = cljs.core.next.call(null, seq38327);
  return reagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__38328, seq38327__$1);
};
reagent.session.clear_BANG_ = function reagent$session$clear_BANG_() {
  return cljs.core.reset_BANG_.call(null, reagent.session.state, cljs.core.PersistentArrayMap.EMPTY);
};
reagent.session.reset_BANG_ = function reagent$session$reset_BANG_(m) {
  return cljs.core.reset_BANG_.call(null, reagent.session.state, m);
};
reagent.session.remove_BANG_ = function reagent$session$remove_BANG_(k) {
  return cljs.core.swap_BANG_.call(null, reagent.session.state, cljs.core.dissoc, k);
};
reagent.session.assoc_in_BANG_ = function reagent$session$assoc_in_BANG_(ks, v) {
  return cljs.core.swap_BANG_.call(null, reagent.session.state, cljs.core.assoc_in, ks, v);
};
reagent.session.get_BANG_ = function reagent$session$get_BANG_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38336 = arguments.length;
  var i__30670__auto___38337 = 0;
  while (true) {
    if (i__30670__auto___38337 < len__30669__auto___38336) {
      args__30676__auto__.push(arguments[i__30670__auto___38337]);
      var G__38338 = i__30670__auto___38337 + 1;
      i__30670__auto___38337 = G__38338;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return reagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
reagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(k, p__38334) {
  var vec__38335 = p__38334;
  var default$ = cljs.core.nth.call(null, vec__38335, 0, null);
  var cur = reagent.session.get.call(null, k, default$);
  reagent.session.remove_BANG_.call(null, k);
  return cur;
};
reagent.session.get_BANG_.cljs$lang$maxFixedArity = 1;
reagent.session.get_BANG_.cljs$lang$applyTo = function(seq38332) {
  var G__38333 = cljs.core.first.call(null, seq38332);
  var seq38332__$1 = cljs.core.next.call(null, seq38332);
  return reagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__38333, seq38332__$1);
};
reagent.session.get_in_BANG_ = function reagent$session$get_in_BANG_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38343 = arguments.length;
  var i__30670__auto___38344 = 0;
  while (true) {
    if (i__30670__auto___38344 < len__30669__auto___38343) {
      args__30676__auto__.push(arguments[i__30670__auto___38344]);
      var G__38345 = i__30670__auto___38344 + 1;
      i__30670__auto___38344 = G__38345;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return reagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
reagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ks, p__38341) {
  var vec__38342 = p__38341;
  var default$ = cljs.core.nth.call(null, vec__38342, 0, null);
  var cur = reagent.session.get_in.call(null, ks, default$);
  reagent.session.assoc_in_BANG_.call(null, ks, null);
  return cur;
};
reagent.session.get_in_BANG_.cljs$lang$maxFixedArity = 1;
reagent.session.get_in_BANG_.cljs$lang$applyTo = function(seq38339) {
  var G__38340 = cljs.core.first.call(null, seq38339);
  var seq38339__$1 = cljs.core.next.call(null, seq38339);
  return reagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__38340, seq38339__$1);
};
reagent.session.update_BANG_ = function reagent$session$update_BANG_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38350 = arguments.length;
  var i__30670__auto___38351 = 0;
  while (true) {
    if (i__30670__auto___38351 < len__30669__auto___38350) {
      args__30676__auto__.push(arguments[i__30670__auto___38351]);
      var G__38352 = i__30670__auto___38351 + 1;
      i__30670__auto___38351 = G__38352;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 2 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(2), 0, null) : null;
  return reagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30677__auto__);
};
reagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(k, f, args) {
  return cljs.core.swap_BANG_.call(null, reagent.session.state, function(p1__38346_SHARP_) {
    return cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.update, p1__38346_SHARP_, k, f), args);
  });
};
reagent.session.update_BANG_.cljs$lang$maxFixedArity = 2;
reagent.session.update_BANG_.cljs$lang$applyTo = function(seq38347) {
  var G__38348 = cljs.core.first.call(null, seq38347);
  var seq38347__$1 = cljs.core.next.call(null, seq38347);
  var G__38349 = cljs.core.first.call(null, seq38347__$1);
  var seq38347__$2 = cljs.core.next.call(null, seq38347__$1);
  return reagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__38348, G__38349, seq38347__$2);
};
reagent.session.update_in_BANG_ = function reagent$session$update_in_BANG_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38357 = arguments.length;
  var i__30670__auto___38358 = 0;
  while (true) {
    if (i__30670__auto___38358 < len__30669__auto___38357) {
      args__30676__auto__.push(arguments[i__30670__auto___38358]);
      var G__38359 = i__30670__auto___38358 + 1;
      i__30670__auto___38358 = G__38359;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 2 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(2), 0, null) : null;
  return reagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30677__auto__);
};
reagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ks, f, args) {
  return cljs.core.swap_BANG_.call(null, reagent.session.state, function(p1__38353_SHARP_) {
    return cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.update_in, p1__38353_SHARP_, ks, f), args);
  });
};
reagent.session.update_in_BANG_.cljs$lang$maxFixedArity = 2;
reagent.session.update_in_BANG_.cljs$lang$applyTo = function(seq38354) {
  var G__38355 = cljs.core.first.call(null, seq38354);
  var seq38354__$1 = cljs.core.next.call(null, seq38354);
  var G__38356 = cljs.core.first.call(null, seq38354__$1);
  var seq38354__$2 = cljs.core.next.call(null, seq38354__$1);
  return reagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__38355, G__38356, seq38354__$2);
};
goog.provide("humfunding.shared");
goog.require("cljs.core");
goog.require("reagent.core");
goog.require("reagent.session");
humfunding.shared.hum_link = function humfunding$shared$hum_link(target, content) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.btn.btn-primary", "a.btn.btn-primary", -495454127), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), target], null), content], null);
};
humfunding.shared.nav_link = function humfunding$shared$nav_link(uri, title, page, collapsed_QMARK_) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li.nav-item", "li.nav-item", 299679112), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core._EQ_.call(null, page, reagent.session.get.call(null, new cljs.core.Keyword(null, "page", "page", 849072397))) ? "active" : null], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "a.nav-link", "a.nav-link", -1155633499), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), uri, new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function() {
    return cljs.core.reset_BANG_.call(null, collapsed_QMARK_, true);
  }], null), title], null)], null);
};
humfunding.shared.navbar = function humfunding$shared$navbar() {
  var collapsed_QMARK_ = reagent.core.atom.call(null, true);
  return function(collapsed_QMARK_) {
    return function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nav.navbar.navbar-light.bg-faded", "nav.navbar.navbar-light.bg-faded", 244269307), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "button.navbar-toggler.hidden-sm-up", "button.navbar-toggler.hidden-sm-up", -398271905), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-click", "on-click", 
      1632826543), function(collapsed_QMARK_) {
        return function() {
          return cljs.core.swap_BANG_.call(null, collapsed_QMARK_, cljs.core.not);
        };
      }(collapsed_QMARK_)], null), "☰"], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.collapse.navbar-toggleable-xs", "div.collapse.navbar-toggleable-xs", -474131623), cljs.core.truth_(cljs.core.deref.call(null, collapsed_QMARK_)) ? null : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "class", "class", -2030961996), "in"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, 
      [new cljs.core.Keyword(null, "a.navbar-brand", "a.navbar-brand", 691442118), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "#/"], null), "BYU Humanities+ Funding"], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ul.nav.navbar-nav", "ul.nav.navbar-nav", 1805559761), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [humfunding.shared.nav_link, 
      "#/", "Home", new cljs.core.Keyword(null, "home", "home", -74557309), collapsed_QMARK_], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [humfunding.shared.nav_link, "#/iif", "Internships", new cljs.core.Keyword(null, "internship", "internship", -692945875), collapsed_QMARK_], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [humfunding.shared.nav_link, "#/sa", "Study Abroad", new cljs.core.Keyword(null, "study-abroad", 
      "study-abroad", -1463065380), collapsed_QMARK_], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [humfunding.shared.nav_link, "#/el", "Experiential Learning", new cljs.core.Keyword(null, "experiential", "experiential", 1860327333), collapsed_QMARK_], null)], null)], null)], null);
    };
  }(collapsed_QMARK_);
};
humfunding.shared.make_list = function humfunding$shared$make_list(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38441 = arguments.length;
  var i__30670__auto___38442 = 0;
  while (true) {
    if (i__30670__auto___38442 < len__30669__auto___38441) {
      args__30676__auto__.push(arguments[i__30670__auto___38442]);
      var G__38443 = i__30670__auto___38442 + 1;
      i__30670__auto___38442 = G__38443;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return humfunding.shared.make_list.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
humfunding.shared.make_list.cljs$core$IFn$_invoke$arity$variadic = function(type, items) {
  return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [type], null), function() {
    var iter__30380__auto__ = function humfunding$shared$iter__38437(s__38438) {
      return new cljs.core.LazySeq(null, function() {
        var s__38438__$1 = s__38438;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__38438__$1);
          if (temp__4657__auto__) {
            var s__38438__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__38438__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__38438__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__38440 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__38439 = 0;
                while (true) {
                  if (i__38439 < size__30379__auto__) {
                    var i = cljs.core._nth.call(null, c__30378__auto__, i__38439);
                    cljs.core.chunk_append.call(null, b__38440, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), i], null));
                    var G__38444 = i__38439 + 1;
                    i__38439 = G__38444;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__38440), humfunding$shared$iter__38437.call(null, cljs.core.chunk_rest.call(null, s__38438__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__38440), null);
              }
            } else {
              var i = cljs.core.first.call(null, s__38438__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "li", "li", 723558921), i], null), humfunding$shared$iter__38437.call(null, cljs.core.rest.call(null, s__38438__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, items);
  }());
};
humfunding.shared.make_list.cljs$lang$maxFixedArity = 1;
humfunding.shared.make_list.cljs$lang$applyTo = function(seq38435) {
  var G__38436 = cljs.core.first.call(null, seq38435);
  var seq38435__$1 = cljs.core.next.call(null, seq38435);
  return humfunding.shared.make_list.cljs$core$IFn$_invoke$arity$variadic(G__38436, seq38435__$1);
};
humfunding.shared.make_sign_in = function humfunding$shared$make_sign_in(app_type) {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a.btn.btn-primary.signin", "a.btn.btn-primary.signin", -643917282), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "#"], null), "Sign In"], null);
};
goog.provide("goog.history.EventType");
goog.history.EventType = {NAVIGATE:"navigate"};
goog.provide("humfunding.ajax");
goog.require("cljs.core");
goog.require("ajax.core");
humfunding.ajax.default_headers = function humfunding$ajax$default_headers(request) {
  return cljs.core.update.call(null, cljs.core.update.call(null, request, new cljs.core.Keyword(null, "uri", "uri", -774711847), function(p1__38447_SHARP_) {
    return [cljs.core.str(context), cljs.core.str(p1__38447_SHARP_)].join("");
  }), new cljs.core.Keyword(null, "headers", "headers", -835030129), function(p1__38448_SHARP_) {
    return cljs.core.merge.call(null, p1__38448_SHARP_, new cljs.core.PersistentArrayMap(null, 2, ["Accept", "application/transit+json", "x-csrf-token", csrfToken], null));
  });
};
humfunding.ajax.load_interceptors_BANG_ = function humfunding$ajax$load_interceptors_BANG_() {
  return cljs.core.swap_BANG_.call(null, ajax.core.default_interceptors, cljs.core.conj, ajax.core.to_interceptor.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), "default headers", new cljs.core.Keyword(null, "request", "request", 1772954723), humfunding.ajax.default_headers], null)));
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.safe");
goog.provide("goog.dom.safe.InsertAdjacentHtmlPosition");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:"afterbegin", AFTEREND:"afterend", BEFOREBEGIN:"beforebegin", BEFOREEND:"beforeend"};
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    if (goog.dom.canUseQuerySelector_(parent)) {
      retVal = parent.querySelector("." + className);
    } else {
      retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
    }
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = (doc.documentElement);
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0;i < rows;i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0;j < columns;j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.create("br"), html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch((node).tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return (element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return (goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (goog.isDef(node.firstElementChild)) {
    return (node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (goog.isDef(node.lastElementChild)) {
    return (node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (goog.isDef(node.nextElementSibling)) {
    return (node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (goog.isDef(node.previousElementSibling)) {
    return (node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return (node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return (goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (goog.isDef(win.devicePixelRatio)) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.dom.InputType");
goog.dom.InputType = {BUTTON:"button", CHECKBOX:"checkbox", COLOR:"color", DATE:"date", DATETIME:"datetime", DATETIME_LOCAL:"datetime-local", EMAIL:"email", FILE:"file", HIDDEN:"hidden", IMAGE:"image", MENU:"menu", MONTH:"month", NUMBER:"number", PASSWORD:"password", RADIO:"radio", RANGE:"range", RESET:"reset", SEARCH:"search", SELECT_MULTIPLE:"select-multiple", SELECT_ONE:"select-one", SUBMIT:"submit", TEL:"tel", TEXT:"text", TEXTAREA:"textarea", TIME:"time", URL:"url", WEEK:"week"};
goog.provide("goog.history.Event");
goog.require("goog.events.Event");
goog.require("goog.history.EventType");
goog.history.Event = function(token, isNavigation) {
  goog.events.Event.call(this, goog.history.EventType.NAVIGATE);
  this.token = token;
  this.isNavigation = isNavigation;
};
goog.inherits(goog.history.Event, goog.events.Event);
goog.provide("goog.html.legacyconversions");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.define("goog.html.legacyconversions.ALLOW_LEGACY_CONVERSIONS", true);
goog.html.legacyconversions.safeHtmlFromString = function(html) {
  goog.html.legacyconversions.throwIfConversionsDisallowed();
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, null);
};
goog.html.legacyconversions.safeStyleFromString = function(style) {
  goog.html.legacyconversions.throwIfConversionsDisallowed();
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.legacyconversions.trustedResourceUrlFromString = function(url) {
  goog.html.legacyconversions.throwIfConversionsDisallowed();
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.legacyconversions.safeUrlFromString = function(url) {
  goog.html.legacyconversions.throwIfConversionsDisallowed();
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.legacyconversions.reportCallback_ = goog.nullFunction;
goog.html.legacyconversions.setReportCallback = function(callback) {
  goog.html.legacyconversions.reportCallback_ = callback;
};
goog.html.legacyconversions.throwIfConversionsDisallowed = function() {
  if (!goog.html.legacyconversions.ALLOW_LEGACY_CONVERSIONS) {
    throw Error("Error: Legacy conversion from string to goog.html types is disabled");
  }
  goog.html.legacyconversions.reportCallback_();
};
goog.provide("goog.labs.userAgent.device");
goog.require("goog.labs.userAgent.util");
goog.labs.userAgent.device.isMobile = function() {
  return !goog.labs.userAgent.device.isTablet() && (goog.labs.userAgent.util.matchUserAgent("iPod") || goog.labs.userAgent.util.matchUserAgent("iPhone") || goog.labs.userAgent.util.matchUserAgent("Android") || goog.labs.userAgent.util.matchUserAgent("IEMobile"));
};
goog.labs.userAgent.device.isTablet = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Mobile") || goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.device.isDesktop = function() {
  return !goog.labs.userAgent.device.isMobile() && !goog.labs.userAgent.device.isTablet();
};
goog.provide("goog.memoize");
goog.memoize = function(f, opt_serializer) {
  var serializer = opt_serializer || goog.memoize.simpleSerializer;
  return function() {
    if (goog.memoize.ENABLE_MEMOIZE) {
      var thisOrGlobal = this || goog.global;
      var cache = thisOrGlobal[goog.memoize.CACHE_PROPERTY_] || (thisOrGlobal[goog.memoize.CACHE_PROPERTY_] = {});
      var key = serializer(goog.getUid(f), arguments);
      return cache.hasOwnProperty(key) ? cache[key] : cache[key] = f.apply(this, arguments);
    } else {
      return f.apply(this, arguments);
    }
  };
};
goog.define("goog.memoize.ENABLE_MEMOIZE", true);
goog.memoize.clearCache = function(cacheOwner) {
  cacheOwner[goog.memoize.CACHE_PROPERTY_] = {};
};
goog.memoize.CACHE_PROPERTY_ = "closure_memoize_cache_";
goog.memoize.simpleSerializer = function(functionUid, args) {
  var context = [functionUid];
  for (var i = args.length - 1;i >= 0;--i) {
    context.push(typeof args[i], args[i]);
  }
  return context.join("\x0B");
};
goog.provide("goog.History");
goog.provide("goog.History.Event");
goog.provide("goog.History.EventType");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.InputType");
goog.require("goog.dom.safe");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.history.Event");
goog.require("goog.history.EventType");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.html.legacyconversions");
goog.require("goog.labs.userAgent.device");
goog.require("goog.memoize");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.History = function(opt_invisible, opt_blankPageUrl, opt_input, opt_iframe) {
  goog.events.EventTarget.call(this);
  if (opt_invisible && !opt_blankPageUrl) {
    throw Error("Can't use invisible history without providing a blank page.");
  }
  var input;
  if (opt_input) {
    input = opt_input;
  } else {
    var inputId = "history_state" + goog.History.historyCount_;
    var inputHtml = goog.html.SafeHtml.create("input", {type:goog.dom.InputType.TEXT, name:inputId, id:inputId, style:goog.string.Const.from("display:none")});
    goog.dom.safe.documentWrite(document, inputHtml);
    input = goog.dom.getElement(inputId);
  }
  this.hiddenInput_ = (input);
  this.window_ = opt_input ? goog.dom.getWindow(goog.dom.getOwnerDocument(opt_input)) : window;
  var iframeSrc;
  if (goog.isString(opt_blankPageUrl)) {
    iframeSrc = goog.html.legacyconversions.trustedResourceUrlFromString(opt_blankPageUrl);
  } else {
    iframeSrc = opt_blankPageUrl;
  }
  this.iframeSrc_ = iframeSrc;
  if (goog.userAgent.IE && !opt_blankPageUrl) {
    if (window.location.protocol == "https") {
      this.iframeSrc_ = goog.html.TrustedResourceUrl.fromConstant(goog.string.Const.from("https:///"));
    } else {
      this.iframeSrc_ = goog.html.TrustedResourceUrl.fromConstant(goog.string.Const.from('javascript:""'));
    }
  }
  this.timer_ = new goog.Timer(goog.History.PollingType.NORMAL);
  this.registerDisposable(this.timer_);
  this.userVisible_ = !opt_invisible;
  this.eventHandler_ = new goog.events.EventHandler(this);
  if (opt_invisible || goog.History.LEGACY_IE) {
    var iframe;
    if (opt_iframe) {
      iframe = opt_iframe;
    } else {
      var iframeId = "history_iframe" + goog.History.historyCount_;
      var iframeHtml = goog.html.SafeHtml.createIframe(this.iframeSrc_, null, {id:iframeId, style:goog.string.Const.from("display:none"), sandbox:undefined});
      goog.dom.safe.documentWrite(document, iframeHtml);
      iframe = goog.dom.getElement(iframeId);
    }
    this.iframe_ = (iframe);
    this.unsetIframe_ = true;
  }
  if (goog.History.LEGACY_IE) {
    this.eventHandler_.listen(this.window_, goog.events.EventType.LOAD, this.onDocumentLoaded);
    this.documentLoaded = false;
    this.shouldEnable_ = false;
  }
  if (this.userVisible_) {
    this.setHash_(this.getToken(), true);
  } else {
    this.setIframeToken_(this.hiddenInput_.value);
  }
  goog.History.historyCount_++;
};
goog.inherits(goog.History, goog.events.EventTarget);
goog.History.prototype.enabled_ = false;
goog.History.prototype.longerPolling_ = false;
goog.History.prototype.lastToken_ = null;
goog.History.isOnHashChangeSupported = goog.memoize(function() {
  return goog.userAgent.IE ? goog.userAgent.isDocumentModeOrHigher(8) : "onhashchange" in goog.global;
});
goog.History.LEGACY_IE = goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8);
goog.History.HASH_ALWAYS_REQUIRED = goog.History.LEGACY_IE;
goog.History.prototype.lockedToken_ = null;
goog.History.prototype.disposeInternal = function() {
  goog.History.superClass_.disposeInternal.call(this);
  this.eventHandler_.dispose();
  this.setEnabled(false);
};
goog.History.prototype.setEnabled = function(enable) {
  if (enable == this.enabled_) {
    return;
  }
  if (goog.History.LEGACY_IE && !this.documentLoaded) {
    this.shouldEnable_ = enable;
    return;
  }
  if (enable) {
    if (goog.userAgent.OPERA) {
      this.eventHandler_.listen(this.window_.document, goog.History.INPUT_EVENTS_, this.operaDefibrillator_);
    } else {
      if (goog.userAgent.GECKO) {
        this.eventHandler_.listen(this.window_, "pageshow", this.onShow_);
      }
    }
    if (goog.History.isOnHashChangeSupported() && this.userVisible_) {
      this.eventHandler_.listen(this.window_, goog.events.EventType.HASHCHANGE, this.onHashChange_);
      this.enabled_ = true;
      this.dispatchEvent(new goog.history.Event(this.getToken(), false));
    } else {
      if (!(goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) || this.documentLoaded) {
        this.eventHandler_.listen(this.timer_, goog.Timer.TICK, goog.bind(this.check_, this, true));
        this.enabled_ = true;
        if (!goog.History.LEGACY_IE) {
          this.lastToken_ = this.getToken();
          this.dispatchEvent(new goog.history.Event(this.getToken(), false));
        }
        this.timer_.start();
      }
    }
  } else {
    this.enabled_ = false;
    this.eventHandler_.removeAll();
    this.timer_.stop();
  }
};
goog.History.prototype.onDocumentLoaded = function() {
  this.documentLoaded = true;
  if (this.hiddenInput_.value) {
    this.setIframeToken_(this.hiddenInput_.value, true);
  }
  this.setEnabled(this.shouldEnable_);
};
goog.History.prototype.onShow_ = function(e) {
  if (e.getBrowserEvent()["persisted"]) {
    this.setEnabled(false);
    this.setEnabled(true);
  }
};
goog.History.prototype.onHashChange_ = function(e) {
  var hash = this.getLocationFragment_(this.window_);
  if (hash != this.lastToken_) {
    this.update_(hash, true);
  }
};
goog.History.prototype.getToken = function() {
  if (this.lockedToken_ != null) {
    return this.lockedToken_;
  } else {
    if (this.userVisible_) {
      return this.getLocationFragment_(this.window_);
    } else {
      return this.getIframeToken_() || "";
    }
  }
};
goog.History.prototype.setToken = function(token, opt_title) {
  this.setHistoryState_(token, false, opt_title);
};
goog.History.prototype.replaceToken = function(token, opt_title) {
  this.setHistoryState_(token, true, opt_title);
};
goog.History.prototype.getLocationFragment_ = function(win) {
  var href = win.location.href;
  var index = href.indexOf("#");
  return index < 0 ? "" : href.substring(index + 1);
};
goog.History.prototype.setHistoryState_ = function(token, replace, opt_title) {
  if (this.getToken() != token) {
    if (this.userVisible_) {
      this.setHash_(token, replace);
      if (!goog.History.isOnHashChangeSupported()) {
        if (goog.userAgent.IE && !goog.labs.userAgent.device.isMobile()) {
          this.setIframeToken_(token, replace, opt_title);
        }
      }
      if (this.enabled_) {
        this.check_(false);
      }
    } else {
      this.setIframeToken_(token, replace);
      this.lockedToken_ = this.lastToken_ = this.hiddenInput_.value = token;
      this.dispatchEvent(new goog.history.Event(token, false));
    }
  }
};
goog.History.prototype.setHash_ = function(token, opt_replace) {
  var loc = this.window_.location;
  var url = loc.href.split("#")[0];
  var hasHash = goog.string.contains(loc.href, "#");
  if (goog.History.HASH_ALWAYS_REQUIRED || hasHash || token) {
    url += "#" + token;
  }
  if (url != loc.href) {
    if (opt_replace) {
      loc.replace(url);
    } else {
      loc.href = url;
    }
  }
};
goog.History.prototype.setIframeToken_ = function(token, opt_replace, opt_title) {
  if (this.unsetIframe_ || token != this.getIframeToken_()) {
    this.unsetIframe_ = false;
    token = goog.string.urlEncode(token);
    if (goog.userAgent.IE) {
      var doc = goog.dom.getFrameContentDocument(this.iframe_);
      doc.open("text/html", opt_replace ? "replace" : undefined);
      var iframeSourceHtml = goog.html.SafeHtml.concat(goog.html.SafeHtml.create("title", {}, opt_title || this.window_.document.title), goog.html.SafeHtml.create("body", {}, token));
      goog.dom.safe.documentWrite(doc, iframeSourceHtml);
      doc.close();
    } else {
      goog.asserts.assertInstanceof(this.iframeSrc_, goog.html.TrustedResourceUrl, "this.iframeSrc_ must be set on calls to setIframeToken_");
      var url = goog.html.TrustedResourceUrl.unwrap((this.iframeSrc_)) + "#" + token;
      var contentWindow = this.iframe_.contentWindow;
      if (contentWindow) {
        if (opt_replace) {
          contentWindow.location.replace(url);
        } else {
          contentWindow.location.href = url;
        }
      }
    }
  }
};
goog.History.prototype.getIframeToken_ = function() {
  if (goog.userAgent.IE) {
    var doc = goog.dom.getFrameContentDocument(this.iframe_);
    return doc.body ? goog.string.urlDecode(doc.body.innerHTML) : null;
  } else {
    var contentWindow = this.iframe_.contentWindow;
    if (contentWindow) {
      var hash;
      try {
        hash = goog.string.urlDecode(this.getLocationFragment_(contentWindow));
      } catch (e) {
        if (!this.longerPolling_) {
          this.setLongerPolling_(true);
        }
        return null;
      }
      if (this.longerPolling_) {
        this.setLongerPolling_(false);
      }
      return hash || null;
    } else {
      return null;
    }
  }
};
goog.History.prototype.check_ = function(isNavigation) {
  if (this.userVisible_) {
    var hash = this.getLocationFragment_(this.window_);
    if (hash != this.lastToken_) {
      this.update_(hash, isNavigation);
    }
  }
  if (!this.userVisible_ || goog.History.LEGACY_IE) {
    var token = this.getIframeToken_() || "";
    if (this.lockedToken_ == null || token == this.lockedToken_) {
      this.lockedToken_ = null;
      if (token != this.lastToken_) {
        this.update_(token, isNavigation);
      }
    }
  }
};
goog.History.prototype.update_ = function(token, isNavigation) {
  this.lastToken_ = this.hiddenInput_.value = token;
  if (this.userVisible_) {
    if (goog.History.LEGACY_IE) {
      this.setIframeToken_(token);
    }
    this.setHash_(token);
  } else {
    this.setIframeToken_(token);
  }
  this.dispatchEvent(new goog.history.Event(this.getToken(), isNavigation));
};
goog.History.prototype.setLongerPolling_ = function(longerPolling) {
  if (this.longerPolling_ != longerPolling) {
    this.timer_.setInterval(longerPolling ? goog.History.PollingType.LONG : goog.History.PollingType.NORMAL);
  }
  this.longerPolling_ = longerPolling;
};
goog.History.prototype.operaDefibrillator_ = function() {
  this.timer_.stop();
  this.timer_.start();
};
goog.History.INPUT_EVENTS_ = [goog.events.EventType.MOUSEDOWN, goog.events.EventType.KEYDOWN, goog.events.EventType.MOUSEMOVE];
goog.History.historyCount_ = 0;
goog.History.PollingType = {NORMAL:150, LONG:1E4};
goog.History.EventType = goog.history.EventType;
goog.History.Event = goog.history.Event;
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function clojure$walk$walk(inner, outer, form) {
  if (cljs.core.list_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.apply.call(null, cljs.core.list, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.seq_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
    } else {
      if (cljs.core.record_QMARK_.call(null, form)) {
        return outer.call(null, cljs.core.reduce.call(null, function(r, x) {
          return cljs.core.conj.call(null, r, inner.call(null, x));
        }, form, form));
      } else {
        if (cljs.core.coll_QMARK_.call(null, form)) {
          return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
        } else {
          return outer.call(null, form);
        }
      }
    }
  }
};
clojure.walk.postwalk = function clojure$walk$postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$postwalk, f), f, form);
};
clojure.walk.prewalk = function clojure$walk$prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, clojure$walk$prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function clojure$walk$keywordize_keys(m) {
  var f = function(p__38453) {
    var vec__38454 = p__38453;
    var k = cljs.core.nth.call(null, vec__38454, 0, null);
    var v = cljs.core.nth.call(null, vec__38454, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function clojure$walk$stringify_keys(m) {
  var f = function(p__38457) {
    var vec__38458 = p__38457;
    var k = cljs.core.nth.call(null, vec__38458, 0, null);
    var v = cljs.core.nth.call(null, vec__38458, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function clojure$walk$prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function clojure$walk$postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("secretary.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.walk");
secretary.core.IRouteMatches = function() {
};
secretary.core.route_matches = function secretary$core$route_matches(this$, route) {
  if (!(this$ == null) && !(this$.secretary$core$IRouteMatches$route_matches$arity$2 == null)) {
    return this$.secretary$core$IRouteMatches$route_matches$arity$2(this$, route);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = secretary.core.route_matches[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, route);
    } else {
      var m__30264__auto____$1 = secretary.core.route_matches["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, route);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRouteMatches.route-matches", this$);
      }
    }
  }
};
secretary.core.IRouteValue = function() {
};
secretary.core.route_value = function secretary$core$route_value(this$) {
  if (!(this$ == null) && !(this$.secretary$core$IRouteValue$route_value$arity$1 == null)) {
    return this$.secretary$core$IRouteValue$route_value$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = secretary.core.route_value[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = secretary.core.route_value["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRouteValue.route-value", this$);
      }
    }
  }
};
secretary.core.IRenderRoute = function() {
};
secretary.core.render_route = function secretary$core$render_route(var_args) {
  var args38480 = [];
  var len__30669__auto___38483 = arguments.length;
  var i__30670__auto___38484 = 0;
  while (true) {
    if (i__30670__auto___38484 < len__30669__auto___38483) {
      args38480.push(arguments[i__30670__auto___38484]);
      var G__38485 = i__30670__auto___38484 + 1;
      i__30670__auto___38484 = G__38485;
      continue;
    } else {
    }
    break;
  }
  var G__38482 = args38480.length;
  switch(G__38482) {
    case 1:
      return secretary.core.render_route.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return secretary.core.render_route.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args38480.length)].join(""));;
  }
};
secretary.core.render_route.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.secretary$core$IRenderRoute$render_route$arity$1 == null)) {
    return this$.secretary$core$IRenderRoute$render_route$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = secretary.core.render_route[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = secretary.core.render_route["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRenderRoute.render-route", this$);
      }
    }
  }
};
secretary.core.render_route.cljs$core$IFn$_invoke$arity$2 = function(this$, params) {
  if (!(this$ == null) && !(this$.secretary$core$IRenderRoute$render_route$arity$2 == null)) {
    return this$.secretary$core$IRenderRoute$render_route$arity$2(this$, params);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = secretary.core.render_route[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, params);
    } else {
      var m__30264__auto____$1 = secretary.core.render_route["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, params);
      } else {
        throw cljs.core.missing_protocol.call(null, "IRenderRoute.render-route", this$);
      }
    }
  }
};
secretary.core.render_route.cljs$lang$maxFixedArity = 2;
secretary.core._STAR_config_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), ""], null));
secretary.core.get_config = function secretary$core$get_config(path) {
  var path__$1 = cljs.core.sequential_QMARK_.call(null, path) ? path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null);
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, secretary.core._STAR_config_STAR_), path__$1);
};
secretary.core.set_config_BANG_ = function secretary$core$set_config_BANG_(path, val) {
  var path__$1 = cljs.core.sequential_QMARK_.call(null, path) ? path : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null);
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_config_STAR_, cljs.core.assoc_in, path__$1, val);
};
secretary.core.encode = encodeURIComponent;
if (typeof secretary.core.encode_pair !== "undefined") {
} else {
  secretary.core.encode_pair = function() {
    var method_table__30524__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__30525__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__30526__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__30527__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__30528__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "secretary.core", "encode-pair"), function(method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__, hierarchy__30528__auto__) {
      return function(p__38487) {
        var vec__38488 = p__38487;
        var k = cljs.core.nth.call(null, vec__38488, 0, null);
        var v = cljs.core.nth.call(null, vec__38488, 1, null);
        if (cljs.core.sequential_QMARK_.call(null, v) || cljs.core.set_QMARK_.call(null, v)) {
          return new cljs.core.Keyword("secretary.core", "sequential", "secretary.core/sequential", -347187207);
        } else {
          if (function() {
            var or__29600__auto__ = cljs.core.map_QMARK_.call(null, v);
            if (or__29600__auto__) {
              return or__29600__auto__;
            } else {
              if (!(v == null)) {
                if (v.cljs$lang$protocol_mask$partition0$ & 67108864 || v.cljs$core$IRecord$) {
                  return true;
                } else {
                  if (!v.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, v);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, v);
              }
            }
          }()) {
            return new cljs.core.Keyword("secretary.core", "map", "secretary.core/map", -31086646);
          } else {
            return null;
          }
        }
      };
    }(method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__, hierarchy__30528__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__30528__auto__, method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__);
  }();
}
secretary.core.key_index = function secretary$core$key_index(var_args) {
  var args38491 = [];
  var len__30669__auto___38494 = arguments.length;
  var i__30670__auto___38495 = 0;
  while (true) {
    if (i__30670__auto___38495 < len__30669__auto___38494) {
      args38491.push(arguments[i__30670__auto___38495]);
      var G__38496 = i__30670__auto___38495 + 1;
      i__30670__auto___38495 = G__38496;
      continue;
    } else {
    }
    break;
  }
  var G__38493 = args38491.length;
  switch(G__38493) {
    case 1:
      return secretary.core.key_index.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return secretary.core.key_index.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args38491.length)].join(""));;
  }
};
secretary.core.key_index.cljs$core$IFn$_invoke$arity$1 = function(k) {
  return [cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("[]")].join("");
};
secretary.core.key_index.cljs$core$IFn$_invoke$arity$2 = function(k, index) {
  return [cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("["), cljs.core.str(index), cljs.core.str("]")].join("");
};
secretary.core.key_index.cljs$lang$maxFixedArity = 2;
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword("secretary.core", "sequential", "secretary.core/sequential", -347187207), function(p__38498) {
  var vec__38499 = p__38498;
  var k = cljs.core.nth.call(null, vec__38499, 0, null);
  var v = cljs.core.nth.call(null, vec__38499, 1, null);
  var encoded = cljs.core.map_indexed.call(null, function(vec__38499, k, v) {
    return function(i, x) {
      var pair = cljs.core.coll_QMARK_.call(null, x) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k, i), x], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k), x], null);
      return secretary.core.encode_pair.call(null, pair);
    };
  }(vec__38499, k, v), v);
  return clojure.string.join.call(null, "\x26", encoded);
});
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword("secretary.core", "map", "secretary.core/map", -31086646), function(p__38500) {
  var vec__38501 = p__38500;
  var k = cljs.core.nth.call(null, vec__38501, 0, null);
  var v = cljs.core.nth.call(null, vec__38501, 1, null);
  var encoded = cljs.core.map.call(null, function(vec__38501, k, v) {
    return function(p__38502) {
      var vec__38503 = p__38502;
      var ik = cljs.core.nth.call(null, vec__38503, 0, null);
      var iv = cljs.core.nth.call(null, vec__38503, 1, null);
      return secretary.core.encode_pair.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [secretary.core.key_index.call(null, k, cljs.core.name.call(null, ik)), iv], null));
    };
  }(vec__38501, k, v), v);
  return clojure.string.join.call(null, "\x26", encoded);
});
cljs.core._add_method.call(null, secretary.core.encode_pair, new cljs.core.Keyword(null, "default", "default", -1987822328), function(p__38504) {
  var vec__38505 = p__38504;
  var k = cljs.core.nth.call(null, vec__38505, 0, null);
  var v = cljs.core.nth.call(null, vec__38505, 1, null);
  return [cljs.core.str(cljs.core.name.call(null, k)), cljs.core.str("\x3d"), cljs.core.str(secretary.core.encode.call(null, [cljs.core.str(v)].join("")))].join("");
});
secretary.core.encode_query_params = function secretary$core$encode_query_params(query_params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, secretary.core.encode_pair, query_params));
};
secretary.core.encode_uri = function secretary$core$encode_uri(uri) {
  return clojure.string.join.call(null, "/", cljs.core.map.call(null, secretary.core.encode, clojure.string.split.call(null, uri, /\//)));
};
secretary.core.decode = decodeURIComponent;
secretary.core.parse_path = function secretary$core$parse_path(path) {
  var index_re = /\[([^\]]*)\]*/;
  var parts = cljs.core.re_seq.call(null, index_re, path);
  return cljs.core.map.call(null, function(index_re, parts) {
    return function(p__38508) {
      var vec__38509 = p__38508;
      var _ = cljs.core.nth.call(null, vec__38509, 0, null);
      var part = cljs.core.nth.call(null, vec__38509, 1, null);
      if (cljs.core.empty_QMARK_.call(null, part)) {
        return 0;
      } else {
        if (cljs.core.truth_(cljs.core.re_matches.call(null, /\d+/, part))) {
          return parseInt(part);
        } else {
          return part;
        }
      }
    };
  }(index_re, parts), parts);
};
secretary.core.key_parse = function secretary$core$key_parse(k) {
  var re = /([^\[\]]+)((?:\[[^\]]*\])*)?/;
  var vec__38511 = cljs.core.re_matches.call(null, re, k);
  var _ = cljs.core.nth.call(null, vec__38511, 0, null);
  var key = cljs.core.nth.call(null, vec__38511, 1, null);
  var path = cljs.core.nth.call(null, vec__38511, 2, null);
  var parsed_path = cljs.core.truth_(path) ? secretary.core.parse_path.call(null, path) : null;
  return cljs.core.cons.call(null, key, parsed_path);
};
secretary.core.assoc_in_query_params = function secretary$core$assoc_in_query_params(m, path, v) {
  var heads = function(xs) {
    return cljs.core.map_indexed.call(null, function(i, _) {
      return cljs.core.take.call(null, i + 1, xs);
    }, xs);
  };
  var hs = heads.call(null, path);
  var m__$1 = cljs.core.reduce.call(null, function(heads, hs) {
    return function(m__$1, h) {
      if (typeof cljs.core.last.call(null, h) === "number" && !cljs.core.vector_QMARK_.call(null, cljs.core.get_in.call(null, m__$1, cljs.core.butlast.call(null, h)))) {
        return cljs.core.assoc_in.call(null, m__$1, cljs.core.butlast.call(null, h), cljs.core.PersistentVector.EMPTY);
      } else {
        return m__$1;
      }
    };
  }(heads, hs), m, hs);
  if (cljs.core.last.call(null, path) === 0) {
    return cljs.core.update_in.call(null, m__$1, cljs.core.butlast.call(null, path), cljs.core.conj, v);
  } else {
    return cljs.core.assoc_in.call(null, m__$1, path, v);
  }
};
secretary.core.decode_query_params = function secretary$core$decode_query_params(query_string) {
  var parts = clojure.string.split.call(null, query_string, /&/);
  var params = cljs.core.reduce.call(null, function(parts) {
    return function(m, part) {
      var vec__38513 = clojure.string.split.call(null, part, /=/, 2);
      var k = cljs.core.nth.call(null, vec__38513, 0, null);
      var v = cljs.core.nth.call(null, vec__38513, 1, null);
      return secretary.core.assoc_in_query_params.call(null, m, secretary.core.key_parse.call(null, k), secretary.core.decode.call(null, v));
    };
  }(parts), cljs.core.PersistentArrayMap.EMPTY, parts);
  var params__$1 = clojure.walk.keywordize_keys.call(null, params);
  return params__$1;
};
secretary.core.re_matches_STAR_ = function secretary$core$re_matches_STAR_(re, s) {
  var ms = cljs.core.re_matches.call(null, re, s);
  if (cljs.core.truth_(ms)) {
    if (cljs.core.sequential_QMARK_.call(null, ms)) {
      return ms;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ms, ms], null);
    }
  } else {
    return null;
  }
};
secretary.core.re_escape_chars = cljs.core.set.call(null, "\\.*+|?()[]{}$^");
secretary.core.re_escape = function secretary$core$re_escape(s) {
  return cljs.core.reduce.call(null, function(s__$1, c) {
    if (cljs.core.truth_(secretary.core.re_escape_chars.call(null, c))) {
      return [cljs.core.str(s__$1), cljs.core.str("\\"), cljs.core.str(c)].join("");
    } else {
      return [cljs.core.str(s__$1), cljs.core.str(c)].join("");
    }
  }, "", s);
};
secretary.core.lex_STAR_ = function secretary$core$lex_STAR_(s, clauses) {
  return cljs.core.some.call(null, function(p__38517) {
    var vec__38518 = p__38517;
    var re = cljs.core.nth.call(null, vec__38518, 0, null);
    var action = cljs.core.nth.call(null, vec__38518, 1, null);
    var temp__4657__auto__ = cljs.core.re_find.call(null, re, s);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__38519 = temp__4657__auto__;
      var m = cljs.core.nth.call(null, vec__38519, 0, null);
      var c = cljs.core.nth.call(null, vec__38519, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.call(null, s, cljs.core.count.call(null, m)), action.call(null, c)], null);
    } else {
      return null;
    }
  }, clauses);
};
secretary.core.lex_route = function secretary$core$lex_route(s, clauses) {
  var s__$1 = s;
  var pattern = "";
  var params = cljs.core.PersistentVector.EMPTY;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      var vec__38522 = secretary.core.lex_STAR_.call(null, s__$1, clauses);
      var s__$2 = cljs.core.nth.call(null, vec__38522, 0, null);
      var vec__38523 = cljs.core.nth.call(null, vec__38522, 1, null);
      var r = cljs.core.nth.call(null, vec__38523, 0, null);
      var p = cljs.core.nth.call(null, vec__38523, 1, null);
      var G__38524 = s__$2;
      var G__38525 = [cljs.core.str(pattern), cljs.core.str(r)].join("");
      var G__38526 = cljs.core.conj.call(null, params, p);
      s__$1 = G__38524;
      pattern = G__38525;
      params = G__38526;
      continue;
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(pattern), cljs.core.str("$")].join("")), cljs.core.remove.call(null, cljs.core.nil_QMARK_, params)], null);
    }
    break;
  }
};
secretary.core.compile_route = function secretary$core$compile_route(orig_route) {
  var clauses = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^\*([^\s.:*\/]*)/, function(v) {
    var r = "(.*?)";
    var p = cljs.core.seq.call(null, v) ? cljs.core.keyword.call(null, v) : new cljs.core.Keyword(null, "*", "*", -1294732318);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, p], null);
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^\:([^\s.:*\/]+)/, function(v) {
    var r = "([^,;?/]+)";
    var p = cljs.core.keyword.call(null, v);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, p], null);
  }], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [/^([^:*]+)/, function(v) {
    var r = secretary.core.re_escape.call(null, v);
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [r], null);
  }], null)], null);
  var vec__38532 = secretary.core.lex_route.call(null, orig_route, clauses);
  var re = cljs.core.nth.call(null, vec__38532, 0, null);
  var params = cljs.core.nth.call(null, vec__38532, 1, null);
  if (typeof secretary.core.t_secretary$core38533 !== "undefined") {
  } else {
    secretary.core.t_secretary$core38533 = function(compile_route, orig_route, clauses, vec__38532, re, params, meta38534) {
      this.compile_route = compile_route;
      this.orig_route = orig_route;
      this.clauses = clauses;
      this.vec__38532 = vec__38532;
      this.re = re;
      this.params = params;
      this.meta38534 = meta38534;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    secretary.core.t_secretary$core38533.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(clauses, vec__38532, re, params) {
      return function(_38535, meta38534__$1) {
        var self__ = this;
        var _38535__$1 = this;
        return new secretary.core.t_secretary$core38533(self__.compile_route, self__.orig_route, self__.clauses, self__.vec__38532, self__.re, self__.params, meta38534__$1);
      };
    }(clauses, vec__38532, re, params);
    secretary.core.t_secretary$core38533.prototype.cljs$core$IMeta$_meta$arity$1 = function(clauses, vec__38532, re, params) {
      return function(_38535) {
        var self__ = this;
        var _38535__$1 = this;
        return self__.meta38534;
      };
    }(clauses, vec__38532, re, params);
    secretary.core.t_secretary$core38533.prototype.secretary$core$IRouteValue$ = true;
    secretary.core.t_secretary$core38533.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(clauses, vec__38532, re, params) {
      return function(this$) {
        var self__ = this;
        var this$__$1 = this;
        return self__.orig_route;
      };
    }(clauses, vec__38532, re, params);
    secretary.core.t_secretary$core38533.prototype.secretary$core$IRouteMatches$ = true;
    secretary.core.t_secretary$core38533.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(clauses, vec__38532, re, params) {
      return function(_, route) {
        var self__ = this;
        var ___$1 = this;
        var temp__4657__auto__ = secretary.core.re_matches_STAR_.call(null, self__.re, route);
        if (cljs.core.truth_(temp__4657__auto__)) {
          var vec__38536 = temp__4657__auto__;
          var ___$2 = cljs.core.nth.call(null, vec__38536, 0, null);
          var ms = cljs.core.nthnext.call(null, vec__38536, 1);
          return cljs.core.merge_with.call(null, cljs.core.vector, cljs.core.PersistentArrayMap.EMPTY, cljs.core.partition.call(null, 2, cljs.core.interleave.call(null, self__.params, cljs.core.map.call(null, secretary.core.decode, ms))));
        } else {
          return null;
        }
      };
    }(clauses, vec__38532, re, params);
    secretary.core.t_secretary$core38533.getBasis = function(clauses, vec__38532, re, params) {
      return function() {
        return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "compile-route", "compile-route", -1479918120, null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 
        1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "orig-route", "orig-route", 899103121, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Given a route return an instance of IRouteMatches."], null)), new cljs.core.Symbol(null, "orig-route", "orig-route", 899103121, null), new cljs.core.Symbol(null, "clauses", "clauses", -1199594528, null), new cljs.core.Symbol(null, "vec__38532", "vec__38532", -2014827149, null), new cljs.core.Symbol(null, "re", 
        "re", 1869207729, null), new cljs.core.Symbol(null, "params", "params", -1943919534, null), new cljs.core.Symbol(null, "meta38534", "meta38534", -492063076, null)], null);
      };
    }(clauses, vec__38532, re, params);
    secretary.core.t_secretary$core38533.cljs$lang$type = true;
    secretary.core.t_secretary$core38533.cljs$lang$ctorStr = "secretary.core/t_secretary$core38533";
    secretary.core.t_secretary$core38533.cljs$lang$ctorPrWriter = function(clauses, vec__38532, re, params) {
      return function(this__30206__auto__, writer__30207__auto__, opt__30208__auto__) {
        return cljs.core._write.call(null, writer__30207__auto__, "secretary.core/t_secretary$core38533");
      };
    }(clauses, vec__38532, re, params);
    secretary.core.__GT_t_secretary$core38533 = function(clauses, vec__38532, re, params) {
      return function secretary$core$compile_route_$___GT_t_secretary$core38533(compile_route__$1, orig_route__$1, clauses__$1, vec__38532__$1, re__$1, params__$1, meta38534) {
        return new secretary.core.t_secretary$core38533(compile_route__$1, orig_route__$1, clauses__$1, vec__38532__$1, re__$1, params__$1, meta38534);
      };
    }(clauses, vec__38532, re, params);
  }
  return new secretary.core.t_secretary$core38533(secretary$core$compile_route, orig_route, clauses, vec__38532, re, params, cljs.core.PersistentArrayMap.EMPTY);
};
secretary.core.render_route_STAR_ = function secretary$core$render_route_STAR_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38540 = arguments.length;
  var i__30670__auto___38541 = 0;
  while (true) {
    if (i__30670__auto___38541 < len__30669__auto___38540) {
      args__30676__auto__.push(arguments[i__30670__auto___38541]);
      var G__38542 = i__30670__auto___38541 + 1;
      i__30670__auto___38541 = G__38542;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return secretary.core.render_route_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
secretary.core.render_route_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(obj, args) {
  if (!(obj == null) ? false || obj.secretary$core$IRenderRoute$ ? true : !obj.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_.call(null, secretary.core.IRenderRoute, obj) : false : cljs.core.native_satisfies_QMARK_.call(null, secretary.core.IRenderRoute, obj)) {
    return cljs.core.apply.call(null, secretary.core.render_route, obj, args);
  } else {
    return null;
  }
};
secretary.core.render_route_STAR_.cljs$lang$maxFixedArity = 1;
secretary.core.render_route_STAR_.cljs$lang$applyTo = function(seq38537) {
  var G__38538 = cljs.core.first.call(null, seq38537);
  var seq38537__$1 = cljs.core.next.call(null, seq38537);
  return secretary.core.render_route_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__38538, seq38537__$1);
};
secretary.core._STAR_routes_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
secretary.core.add_route_BANG_ = function secretary$core$add_route_BANG_(obj, action) {
  var obj__$1 = typeof obj === "string" ? secretary.core.compile_route.call(null, obj) : obj;
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [obj__$1, action], null));
};
secretary.core.remove_route_BANG_ = function secretary$core$remove_route_BANG_(obj) {
  return cljs.core.swap_BANG_.call(null, secretary.core._STAR_routes_STAR_, function(rs) {
    return cljs.core.filterv.call(null, function(p__38545) {
      var vec__38546 = p__38545;
      var x = cljs.core.nth.call(null, vec__38546, 0, null);
      var _ = cljs.core.nth.call(null, vec__38546, 1, null);
      return cljs.core.not_EQ_.call(null, x, obj);
    }, rs);
  });
};
secretary.core.reset_routes_BANG_ = function secretary$core$reset_routes_BANG_() {
  return cljs.core.reset_BANG_.call(null, secretary.core._STAR_routes_STAR_, cljs.core.PersistentVector.EMPTY);
};
secretary.core.locate_route = function secretary$core$locate_route(route) {
  return cljs.core.some.call(null, function(p__38549) {
    var vec__38550 = p__38549;
    var compiled_route = cljs.core.nth.call(null, vec__38550, 0, null);
    var action = cljs.core.nth.call(null, vec__38550, 1, null);
    var temp__4657__auto__ = secretary.core.route_matches.call(null, compiled_route, route);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var params = temp__4657__auto__;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "action", "action", -811238024), action, new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "route", "route", 329891309), compiled_route], null);
    } else {
      return null;
    }
  }, cljs.core.deref.call(null, secretary.core._STAR_routes_STAR_));
};
secretary.core.locate_route_value = function secretary$core$locate_route_value(uri) {
  return secretary.core.route_value.call(null, (new cljs.core.Keyword(null, "route", "route", 329891309)).cljs$core$IFn$_invoke$arity$1(secretary.core.locate_route.call(null, uri)));
};
secretary.core.prefix = function secretary$core$prefix() {
  return [cljs.core.str(secretary.core.get_config.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465)], null)))].join("");
};
secretary.core.uri_without_prefix = function secretary$core$uri_without_prefix(uri) {
  return clojure.string.replace.call(null, uri, cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(secretary.core.prefix.call(null))].join("")), "");
};
secretary.core.uri_with_leading_slash = function secretary$core$uri_with_leading_slash(uri) {
  if (cljs.core._EQ_.call(null, "/", cljs.core.first.call(null, uri))) {
    return uri;
  } else {
    return [cljs.core.str("/"), cljs.core.str(uri)].join("");
  }
};
secretary.core.dispatch_BANG_ = function secretary$core$dispatch_BANG_(uri) {
  var vec__38554 = clojure.string.split.call(null, secretary.core.uri_without_prefix.call(null, uri), /\?/);
  var uri_path = cljs.core.nth.call(null, vec__38554, 0, null);
  var query_string = cljs.core.nth.call(null, vec__38554, 1, null);
  var uri_path__$1 = secretary.core.uri_with_leading_slash.call(null, uri_path);
  var query_params = cljs.core.truth_(query_string) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534), secretary.core.decode_query_params.call(null, query_string)], null) : null;
  var map__38555 = secretary.core.locate_route.call(null, uri_path__$1);
  var map__38555__$1 = (!(map__38555 == null) ? map__38555.cljs$lang$protocol_mask$partition0$ & 64 || map__38555.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__38555) : map__38555;
  var action = cljs.core.get.call(null, map__38555__$1, new cljs.core.Keyword(null, "action", "action", -811238024));
  var params = cljs.core.get.call(null, map__38555__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var action__$1 = function() {
    var or__29600__auto__ = action;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var params__$1 = cljs.core.merge.call(null, params, query_params);
  return action__$1.call(null, params__$1);
};
secretary.core.invalid_params = function secretary$core$invalid_params(params, validations) {
  return cljs.core.reduce.call(null, function(m, p__38559) {
    var vec__38560 = p__38559;
    var key = cljs.core.nth.call(null, vec__38560, 0, null);
    var validation = cljs.core.nth.call(null, vec__38560, 1, null);
    var value = cljs.core.get.call(null, params, key);
    if (cljs.core.truth_(cljs.core.re_matches.call(null, validation, value))) {
      return m;
    } else {
      return cljs.core.assoc.call(null, m, key, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [value, validation], null));
    }
  }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.partition.call(null, 2, validations));
};
secretary.core.params_valid_QMARK_ = function secretary$core$params_valid_QMARK_(params, validations) {
  return cljs.core.empty_QMARK_.call(null, secretary.core.invalid_params.call(null, params, validations));
};
secretary.core.IRouteMatches["string"] = true;
secretary.core.route_matches["string"] = function(this$, route) {
  return secretary.core.route_matches.call(null, secretary.core.compile_route.call(null, this$), route);
};
RegExp.prototype.secretary$core$IRouteMatches$ = true;
RegExp.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(this$, route) {
  var this$__$1 = this;
  var temp__4657__auto__ = secretary.core.re_matches_STAR_.call(null, this$__$1, route);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__38561 = temp__4657__auto__;
    var _ = cljs.core.nth.call(null, vec__38561, 0, null);
    var ms = cljs.core.nthnext.call(null, vec__38561, 1);
    return cljs.core.vec.call(null, ms);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.secretary$core$IRouteMatches$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRouteMatches$route_matches$arity$2 = function(p__38562, route) {
  var vec__38563 = p__38562;
  var route_string = cljs.core.nth.call(null, vec__38563, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__38563, 1);
  var vec__38564 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__38564, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__38564, 1);
  var params = secretary.core.route_matches.call(null, secretary.core.compile_route.call(null, route_string__$1), route);
  if (cljs.core.truth_(secretary.core.params_valid_QMARK_.call(null, params, validations__$1))) {
    return params;
  } else {
    return null;
  }
};
secretary.core.IRouteValue["string"] = true;
secretary.core.route_value["string"] = function(this$) {
  return secretary.core.route_value.call(null, secretary.core.compile_route.call(null, this$));
};
RegExp.prototype.secretary$core$IRouteValue$ = true;
RegExp.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentVector.prototype.secretary$core$IRouteValue$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRouteValue$route_value$arity$1 = function(p__38565) {
  var vec__38566 = p__38565;
  var route_string = cljs.core.nth.call(null, vec__38566, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__38566, 1);
  var vec__38567 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__38567, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__38567, 1);
  return cljs.core.vec.call(null, cljs.core.cons.call(null, secretary.core.route_value.call(null, route_string__$1), validations__$1));
};
secretary.core.IRenderRoute["string"] = true;
secretary.core.render_route["string"] = function() {
  var G__38573 = null;
  var G__38573__1 = function(this$) {
    return secretary.core.render_route.call(null, this$, cljs.core.PersistentArrayMap.EMPTY);
  };
  var G__38573__2 = function(this$, params) {
    var map__38568 = params;
    var map__38568__$1 = (!(map__38568 == null) ? map__38568.cljs$lang$protocol_mask$partition0$ & 64 || map__38568.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__38568) : map__38568;
    var m = map__38568__$1;
    var query_params = cljs.core.get.call(null, map__38568__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var a = cljs.core.atom.call(null, m);
    var path = this$.replace(new RegExp(":[^\\s.:*/]+|\\*[^\\s.:*/]*", "g"), function(map__38568, map__38568__$1, m, query_params, a) {
      return function($1) {
        var lookup = cljs.core.keyword.call(null, cljs.core._EQ_.call(null, $1, "*") ? $1 : cljs.core.subs.call(null, $1, 1));
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, a), lookup);
        var replacement = cljs.core.sequential_QMARK_.call(null, v) ? function() {
          cljs.core.swap_BANG_.call(null, a, cljs.core.assoc, lookup, cljs.core.next.call(null, v));
          return secretary.core.encode_uri.call(null, cljs.core.first.call(null, v));
        }() : cljs.core.truth_(v) ? secretary.core.encode_uri.call(null, v) : $1;
        return replacement;
      };
    }(map__38568, map__38568__$1, m, query_params, a));
    var path__$1 = [cljs.core.str(secretary.core.get_config.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465)], null))), cljs.core.str(path)].join("");
    var temp__4655__auto__ = function() {
      var and__29588__auto__ = query_params;
      if (cljs.core.truth_(and__29588__auto__)) {
        return secretary.core.encode_query_params.call(null, query_params);
      } else {
        return and__29588__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4655__auto__)) {
      var query_string = temp__4655__auto__;
      return [cljs.core.str(path__$1), cljs.core.str("?"), cljs.core.str(query_string)].join("");
    } else {
      return path__$1;
    }
  };
  G__38573 = function(this$, params) {
    switch(arguments.length) {
      case 1:
        return G__38573__1.call(this, this$);
      case 2:
        return G__38573__2.call(this, this$, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__38573.cljs$core$IFn$_invoke$arity$1 = G__38573__1;
  G__38573.cljs$core$IFn$_invoke$arity$2 = G__38573__2;
  return G__38573;
}();
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$ = true;
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$render_route$arity$1 = function(this$) {
  var this$__$1 = this;
  return secretary.core.render_route.call(null, this$__$1, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.PersistentVector.prototype.secretary$core$IRenderRoute$render_route$arity$2 = function(p__38570, params) {
  var vec__38571 = p__38570;
  var route_string = cljs.core.nth.call(null, vec__38571, 0, null);
  var validations = cljs.core.nthnext.call(null, vec__38571, 1);
  var vec__38572 = this;
  var route_string__$1 = cljs.core.nth.call(null, vec__38572, 0, null);
  var validations__$1 = cljs.core.nthnext.call(null, vec__38572, 1);
  var invalid = secretary.core.invalid_params.call(null, params, validations__$1);
  if (cljs.core.empty_QMARK_.call(null, invalid)) {
    return secretary.core.render_route.call(null, route_string__$1, params);
  } else {
    throw cljs.core.ex_info.call(null, "Could not build route: invalid params", invalid);
  }
};
goog.provide("humfunding.core");
goog.require("cljs.core");
goog.require("ajax.core");
goog.require("secretary.core");
goog.require("markdown.core");
goog.require("goog.history.EventType");
goog.require("reagent.session");
goog.require("reagent.core");
goog.require("humfunding.shared");
goog.require("humfunding.ajax");
goog.require("goog.History");
goog.require("goog.events");
humfunding.core.about_page = function humfunding$core$about_page() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.container", "div.container", 72419955), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.row", "div.row", 133678515), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.col-md-12", "div.col-md-12", -1894925992), "this is the story of humfunding... work in progress"], 
  null)], null)], null);
};
humfunding.core.home_page = function humfunding$core$home_page() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.container", "div.container", 72419955), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.jumbotron", "div.jumbotron", -1632448673), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", -1896887462), "BYU Humanities+ Funding"], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "p", "p", 151049309), "Welcome to the BYU Humanities College funding administration website."], null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.row", "div.row", 133678515), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div.col-md-12.funding-type", "div.col-md-12.funding-type", 
  1646631222)], null)], null)], null);
};
humfunding.core.pages = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "home", "home", -74557309), new cljs.core.Var(function() {
  return humfunding.core.home_page;
}, new cljs.core.Symbol("humfunding.core", "home-page", "humfunding.core/home-page", 2096804441, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, 
"end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "humfunding.core", "humfunding.core", 2101567068, null), new cljs.core.Symbol(null, "home-page", "home-page", -850279575, null), "/home/torysa/Workspace/humfunding/src/cljs/humfunding/core.cljs", 16, 1, 19, 19, cljs.core.list(cljs.core.PersistentVector.EMPTY), 
null, cljs.core.truth_(humfunding.core.home_page) ? humfunding.core.home_page.cljs$lang$test : null]))], null);
humfunding.core.page = function humfunding$core$page() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [humfunding.core.pages.call(null, reagent.session.get.call(null, new cljs.core.Keyword(null, "page", "page", 849072397)))], null);
};
secretary.core.set_config_BANG_.call(null, new cljs.core.Keyword(null, "prefix", "prefix", -265908465), "#");
var action__38470__auto___38582 = function(params__38471__auto__) {
  if (cljs.core.map_QMARK_.call(null, params__38471__auto__)) {
    var map__38578 = params__38471__auto__;
    var map__38578__$1 = (!(map__38578 == null) ? map__38578.cljs$lang$protocol_mask$partition0$ & 64 || map__38578.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__38578) : map__38578;
    return reagent.session.put_BANG_.call(null, new cljs.core.Keyword(null, "page", "page", 849072397), new cljs.core.Keyword(null, "home", "home", -74557309));
  } else {
    if (cljs.core.vector_QMARK_.call(null, params__38471__auto__)) {
      var vec__38580 = params__38471__auto__;
      return reagent.session.put_BANG_.call(null, new cljs.core.Keyword(null, "page", "page", 849072397), new cljs.core.Keyword(null, "home", "home", -74557309));
    } else {
      return null;
    }
  }
};
secretary.core.add_route_BANG_.call(null, "/", action__38470__auto___38582);
humfunding.core.home_route = function(action__38470__auto___38582) {
  return function humfunding$core$home_route(var_args) {
    var args__30676__auto__ = [];
    var len__30669__auto___38583 = arguments.length;
    var i__30670__auto___38584 = 0;
    while (true) {
      if (i__30670__auto___38584 < len__30669__auto___38583) {
        args__30676__auto__.push(arguments[i__30670__auto___38584]);
        var G__38585 = i__30670__auto___38584 + 1;
        i__30670__auto___38584 = G__38585;
        continue;
      } else {
      }
      break;
    }
    var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
    return humfunding.core.home_route.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
  };
}(action__38470__auto___38582);
humfunding.core.home_route.cljs$core$IFn$_invoke$arity$variadic = function(action__38470__auto___38582) {
  return function(args__38469__auto__) {
    return cljs.core.apply.call(null, secretary.core.render_route_STAR_, "/", args__38469__auto__);
  };
}(action__38470__auto___38582);
humfunding.core.home_route.cljs$lang$maxFixedArity = 0;
humfunding.core.home_route.cljs$lang$applyTo = function(action__38470__auto___38582) {
  return function(seq38581) {
    return humfunding.core.home_route.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq38581));
  };
}(action__38470__auto___38582);
humfunding.core.hook_browser_navigation_BANG_ = function humfunding$core$hook_browser_navigation_BANG_() {
  var G__38587 = new goog.History;
  goog.events.listen(G__38587, goog.history.EventType.NAVIGATE, function(G__38587) {
    return function(event) {
      return secretary.core.dispatch_BANG_.call(null, event.token);
    };
  }(G__38587));
  G__38587.setEnabled(true);
  return G__38587;
};
humfunding.core.mount_components = function humfunding$core$mount_components() {
  reagent.core.render.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Var(function() {
    return humfunding.shared.navbar;
  }, new cljs.core.Symbol("humfunding.shared", "navbar", "humfunding.shared/navbar", 1539371998, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, 
  "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "humfunding.shared", "humfunding.shared", 324964042, null), new cljs.core.Symbol(null, "navbar", "navbar", -1070039728, null), "/home/torysa/Workspace/humfunding/src/cljs/humfunding/shared.cljs", 13, 1, 17, 17, cljs.core.list(cljs.core.PersistentVector.EMPTY), 
  null, cljs.core.truth_(humfunding.shared.navbar) ? humfunding.shared.navbar.cljs$lang$test : null]))], null), document.getElementById("navbar"));
  return reagent.core.render.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Var(function() {
    return humfunding.core.page;
  }, new cljs.core.Symbol("humfunding.core", "page", "humfunding.core/page", 1187235428, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, 
  "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "humfunding.core", "humfunding.core", 2101567068, null), new cljs.core.Symbol(null, "page", "page", -1805363372, null), "/home/torysa/Workspace/humfunding/src/cljs/humfunding/core.cljs", 11, 1, 34, 34, cljs.core.list(cljs.core.PersistentVector.EMPTY), null, 
  cljs.core.truth_(humfunding.core.page) ? humfunding.core.page.cljs$lang$test : null]))], null), document.getElementById("app"));
};
humfunding.core.init_BANG_ = function humfunding$core$init_BANG_() {
  humfunding.ajax.load_interceptors_BANG_.call(null);
  humfunding.core.hook_browser_navigation_BANG_.call(null);
  return humfunding.core.mount_components.call(null);
};
goog.provide("humfunding.core_test");
goog.require("cljs.core");
goog.require("cljs.test");
goog.require("reagent.core");
goog.require("humfunding.core");
humfunding.core_test.test_home = function humfunding$core_test$test_home() {
  return cljs.test.test_var.call(null, humfunding$core_test$test_home.cljs$lang$var);
};
humfunding.core_test.test_home.cljs$lang$test = function() {
  try {
    var values__36151__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, true), true);
    var result__36152__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__36151__auto__);
    if (cljs.core.truth_(result__36152__auto__)) {
      cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "pass", "pass", 1574159993), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, true), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core.cons.call(null, cljs.core._EQ_, values__36151__auto__), new cljs.core.Keyword(null, 
      "message", "message", -406056002), null], null));
    } else {
      cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "fail", "fail", 1706214930), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, true), new cljs.core.Keyword(null, "actual", "actual", 107306363), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, 
      new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), values__36151__auto__)), new cljs.core.Symbol(null, "not", "not", 1044554643, null)), new cljs.core.Keyword(null, "message", "message", -406056002), null], null));
    }
    return result__36152__auto__;
  } catch (e38590) {
    var t__36189__auto__ = e38590;
    return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "expected", "expected", 1583670997), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1501502141, null), true, true), new cljs.core.Keyword(null, "actual", "actual", 107306363), t__36189__auto__, new cljs.core.Keyword(null, "message", "message", -406056002), null], 
    null));
  }
};
humfunding.core_test.test_home.cljs$lang$var = new cljs.core.Var(function() {
  return humfunding.core_test.test_home;
}, new cljs.core.Symbol("humfunding.core-test", "test-home", "humfunding.core-test/test-home", -516686834, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), 
new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "humfunding.core-test", "humfunding.core-test", -1359952898, null), new cljs.core.Symbol(null, "test-home", "test-home", 1948456799, null), "/home/torysa/Workspace/humfunding/test/cljs/humfunding/core_test.cljs", 19, 1, 6, 6, cljs.core.List.EMPTY, 
null, cljs.core.truth_(humfunding.core_test.test_home) ? humfunding.core_test.test_home.cljs$lang$test : null]));
goog.provide("humfunding.doo_runner");
goog.require("cljs.core");
goog.require("doo.runner");
goog.require("humfunding.core_test");
doo.runner.set_entry_point_BANG_.call(null, cljs.core.truth_(doo.runner.karma_QMARK_.call(null)) ? function(tc__38614__auto__) {
  jx.reporter.karma.start.call(null, tc__38614__auto__, 1);
  return cljs.test.run_block.call(null, function() {
    var env38622 = cljs.test.empty_env.call(null, new cljs.core.Keyword("jx.reporter.karma", "karma", "jx.reporter.karma/karma", 404831826));
    var summary38623 = cljs.core.volatile_BANG_.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "summary", "summary", 380847952), new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "test", "test", 577538877), 0], null));
    return cljs.core.concat.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env38622, summary38623) {
      return function() {
        cljs.test.set_env_BANG_.call(null, env38622);
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "humfunding.core-test", "humfunding.core-test", -1359952898, null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033)], null));
        return cljs.test.block.call(null, function() {
          var env__36255__auto__ = cljs.test.get_current_env.call(null);
          return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env__36255__auto__, env38622, summary38623) {
            return function() {
              if (env__36255__auto__ == null) {
                cljs.test.set_env_BANG_.call(null, cljs.test.empty_env.call(null));
              } else {
              }
              return null;
            };
          }(env__36255__auto__, env38622, summary38623)], null), cljs.test.test_vars_block.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Var(function() {
            return humfunding.core_test.test_home;
          }, new cljs.core.Symbol("humfunding.core-test", "test-home", "humfunding.core-test/test-home", -516686834, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 
          212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "humfunding.core-test", "humfunding.core-test", -1359952898, null), new cljs.core.Symbol(null, "test-home", "test-home", 1948456799, null), "/home/torysa/Workspace/humfunding/test/cljs/humfunding/core_test.cljs", 
          19, 1, 6, 6, cljs.core.List.EMPTY, null, cljs.core.truth_(humfunding.core_test.test_home) ? humfunding.core_test.test_home.cljs$lang$test : null]))], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env__36255__auto__, env38622, summary38623) {
            return function() {
              if (env__36255__auto__ == null) {
                return cljs.test.clear_env_BANG_.call(null);
              } else {
                return null;
              }
            };
          }(env__36255__auto__, env38622, summary38623)], null));
        }());
      };
    }(env38622, summary38623), function(env38622, summary38623) {
      return function() {
        return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "humfunding.core-test", "humfunding.core-test", -1359952898, null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645)], null));
      };
    }(env38622, summary38623)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env38622, summary38623) {
      return function() {
        return cljs.core._vreset_BANG_.call(null, summary38623, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core._PLUS_).call(null, cljs.core._deref.call(null, summary38623), (new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_and_clear_env_BANG_.call(null))));
      };
    }(env38622, summary38623)], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env38622, summary38623) {
      return function() {
        cljs.test.set_env_BANG_.call(null, env38622);
        cljs.test.do_report.call(null, cljs.core.deref.call(null, summary38623));
        cljs.test.report.call(null, cljs.core.assoc.call(null, cljs.core.deref.call(null, summary38623), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-run-tests", "end-run-tests", 267300563)));
        return cljs.test.clear_env_BANG_.call(null);
      };
    }(env38622, summary38623)], null));
  }());
} : function() {
  return cljs.test.run_block.call(null, function() {
    var env38624 = cljs.test.empty_env.call(null);
    var summary38625 = cljs.core.volatile_BANG_.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "summary", "summary", 380847952), new cljs.core.Keyword(null, "fail", "fail", 1706214930), 0, new cljs.core.Keyword(null, "error", "error", -978969032), 0, new cljs.core.Keyword(null, "pass", "pass", 1574159993), 0, new cljs.core.Keyword(null, "test", "test", 577538877), 0], null));
    return cljs.core.concat.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env38624, summary38625) {
      return function() {
        cljs.test.set_env_BANG_.call(null, env38624);
        cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "humfunding.core-test", "humfunding.core-test", -1359952898, null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", -1701237033)], null));
        return cljs.test.block.call(null, function() {
          var env__36255__auto__ = cljs.test.get_current_env.call(null);
          return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env__36255__auto__, env38624, summary38625) {
            return function() {
              if (env__36255__auto__ == null) {
                cljs.test.set_env_BANG_.call(null, cljs.test.empty_env.call(null));
              } else {
              }
              return null;
            };
          }(env__36255__auto__, env38624, summary38625)], null), cljs.test.test_vars_block.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Var(function() {
            return humfunding.core_test.test_home;
          }, new cljs.core.Symbol("humfunding.core-test", "test-home", "humfunding.core-test/test-home", -516686834, null), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 
          212345235), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "test", "test", 577538877)], [new cljs.core.Symbol(null, "humfunding.core-test", "humfunding.core-test", -1359952898, null), new cljs.core.Symbol(null, "test-home", "test-home", 1948456799, null), "/home/torysa/Workspace/humfunding/test/cljs/humfunding/core_test.cljs", 
          19, 1, 6, 6, cljs.core.List.EMPTY, null, cljs.core.truth_(humfunding.core_test.test_home) ? humfunding.core_test.test_home.cljs$lang$test : null]))], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env__36255__auto__, env38624, summary38625) {
            return function() {
              if (env__36255__auto__ == null) {
                return cljs.test.clear_env_BANG_.call(null);
              } else {
                return null;
              }
            };
          }(env__36255__auto__, env38624, summary38625)], null));
        }());
      };
    }(env38624, summary38625), function(env38624, summary38625) {
      return function() {
        return cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "humfunding.core-test", "humfunding.core-test", -1359952898, null), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 1620675645)], null));
      };
    }(env38624, summary38625)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env38624, summary38625) {
      return function() {
        return cljs.core._vreset_BANG_.call(null, summary38625, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core._PLUS_).call(null, cljs.core._deref.call(null, summary38625), (new cljs.core.Keyword(null, "report-counters", "report-counters", -1702609242)).cljs$core$IFn$_invoke$arity$1(cljs.test.get_and_clear_env_BANG_.call(null))));
      };
    }(env38624, summary38625)], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function(env38624, summary38625) {
      return function() {
        cljs.test.set_env_BANG_.call(null, env38624);
        cljs.test.do_report.call(null, cljs.core.deref.call(null, summary38625));
        cljs.test.report.call(null, cljs.core.assoc.call(null, cljs.core.deref.call(null, summary38625), new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "end-run-tests", "end-run-tests", 267300563)));
        return cljs.test.clear_env_BANG_.call(null);
      };
    }(env38624, summary38625)], null));
  }());
});
goog.provide("goog.i18n.DateTimeSymbols");
goog.provide("goog.i18n.DateTimeSymbols_af");
goog.provide("goog.i18n.DateTimeSymbols_am");
goog.provide("goog.i18n.DateTimeSymbols_ar");
goog.provide("goog.i18n.DateTimeSymbols_az");
goog.provide("goog.i18n.DateTimeSymbols_be");
goog.provide("goog.i18n.DateTimeSymbols_bg");
goog.provide("goog.i18n.DateTimeSymbols_bn");
goog.provide("goog.i18n.DateTimeSymbols_br");
goog.provide("goog.i18n.DateTimeSymbols_bs");
goog.provide("goog.i18n.DateTimeSymbols_ca");
goog.provide("goog.i18n.DateTimeSymbols_chr");
goog.provide("goog.i18n.DateTimeSymbols_cs");
goog.provide("goog.i18n.DateTimeSymbols_cy");
goog.provide("goog.i18n.DateTimeSymbols_da");
goog.provide("goog.i18n.DateTimeSymbols_de");
goog.provide("goog.i18n.DateTimeSymbols_de_AT");
goog.provide("goog.i18n.DateTimeSymbols_de_CH");
goog.provide("goog.i18n.DateTimeSymbols_el");
goog.provide("goog.i18n.DateTimeSymbols_en");
goog.provide("goog.i18n.DateTimeSymbols_en_AU");
goog.provide("goog.i18n.DateTimeSymbols_en_CA");
goog.provide("goog.i18n.DateTimeSymbols_en_GB");
goog.provide("goog.i18n.DateTimeSymbols_en_IE");
goog.provide("goog.i18n.DateTimeSymbols_en_IN");
goog.provide("goog.i18n.DateTimeSymbols_en_ISO");
goog.provide("goog.i18n.DateTimeSymbols_en_SG");
goog.provide("goog.i18n.DateTimeSymbols_en_US");
goog.provide("goog.i18n.DateTimeSymbols_en_ZA");
goog.provide("goog.i18n.DateTimeSymbols_es");
goog.provide("goog.i18n.DateTimeSymbols_es_419");
goog.provide("goog.i18n.DateTimeSymbols_es_ES");
goog.provide("goog.i18n.DateTimeSymbols_es_MX");
goog.provide("goog.i18n.DateTimeSymbols_es_US");
goog.provide("goog.i18n.DateTimeSymbols_et");
goog.provide("goog.i18n.DateTimeSymbols_eu");
goog.provide("goog.i18n.DateTimeSymbols_fa");
goog.provide("goog.i18n.DateTimeSymbols_fi");
goog.provide("goog.i18n.DateTimeSymbols_fil");
goog.provide("goog.i18n.DateTimeSymbols_fr");
goog.provide("goog.i18n.DateTimeSymbols_fr_CA");
goog.provide("goog.i18n.DateTimeSymbols_ga");
goog.provide("goog.i18n.DateTimeSymbols_gl");
goog.provide("goog.i18n.DateTimeSymbols_gsw");
goog.provide("goog.i18n.DateTimeSymbols_gu");
goog.provide("goog.i18n.DateTimeSymbols_haw");
goog.provide("goog.i18n.DateTimeSymbols_he");
goog.provide("goog.i18n.DateTimeSymbols_hi");
goog.provide("goog.i18n.DateTimeSymbols_hr");
goog.provide("goog.i18n.DateTimeSymbols_hu");
goog.provide("goog.i18n.DateTimeSymbols_hy");
goog.provide("goog.i18n.DateTimeSymbols_id");
goog.provide("goog.i18n.DateTimeSymbols_in");
goog.provide("goog.i18n.DateTimeSymbols_is");
goog.provide("goog.i18n.DateTimeSymbols_it");
goog.provide("goog.i18n.DateTimeSymbols_iw");
goog.provide("goog.i18n.DateTimeSymbols_ja");
goog.provide("goog.i18n.DateTimeSymbols_ka");
goog.provide("goog.i18n.DateTimeSymbols_kk");
goog.provide("goog.i18n.DateTimeSymbols_km");
goog.provide("goog.i18n.DateTimeSymbols_kn");
goog.provide("goog.i18n.DateTimeSymbols_ko");
goog.provide("goog.i18n.DateTimeSymbols_ky");
goog.provide("goog.i18n.DateTimeSymbols_ln");
goog.provide("goog.i18n.DateTimeSymbols_lo");
goog.provide("goog.i18n.DateTimeSymbols_lt");
goog.provide("goog.i18n.DateTimeSymbols_lv");
goog.provide("goog.i18n.DateTimeSymbols_mk");
goog.provide("goog.i18n.DateTimeSymbols_ml");
goog.provide("goog.i18n.DateTimeSymbols_mn");
goog.provide("goog.i18n.DateTimeSymbols_mr");
goog.provide("goog.i18n.DateTimeSymbols_ms");
goog.provide("goog.i18n.DateTimeSymbols_mt");
goog.provide("goog.i18n.DateTimeSymbols_my");
goog.provide("goog.i18n.DateTimeSymbols_nb");
goog.provide("goog.i18n.DateTimeSymbols_ne");
goog.provide("goog.i18n.DateTimeSymbols_nl");
goog.provide("goog.i18n.DateTimeSymbols_no");
goog.provide("goog.i18n.DateTimeSymbols_no_NO");
goog.provide("goog.i18n.DateTimeSymbols_or");
goog.provide("goog.i18n.DateTimeSymbols_pa");
goog.provide("goog.i18n.DateTimeSymbols_pl");
goog.provide("goog.i18n.DateTimeSymbols_pt");
goog.provide("goog.i18n.DateTimeSymbols_pt_BR");
goog.provide("goog.i18n.DateTimeSymbols_pt_PT");
goog.provide("goog.i18n.DateTimeSymbols_ro");
goog.provide("goog.i18n.DateTimeSymbols_ru");
goog.provide("goog.i18n.DateTimeSymbols_si");
goog.provide("goog.i18n.DateTimeSymbols_sk");
goog.provide("goog.i18n.DateTimeSymbols_sl");
goog.provide("goog.i18n.DateTimeSymbols_sq");
goog.provide("goog.i18n.DateTimeSymbols_sr");
goog.provide("goog.i18n.DateTimeSymbols_sr_Latn");
goog.provide("goog.i18n.DateTimeSymbols_sv");
goog.provide("goog.i18n.DateTimeSymbols_sw");
goog.provide("goog.i18n.DateTimeSymbols_ta");
goog.provide("goog.i18n.DateTimeSymbols_te");
goog.provide("goog.i18n.DateTimeSymbols_th");
goog.provide("goog.i18n.DateTimeSymbols_tl");
goog.provide("goog.i18n.DateTimeSymbols_tr");
goog.provide("goog.i18n.DateTimeSymbols_uk");
goog.provide("goog.i18n.DateTimeSymbols_ur");
goog.provide("goog.i18n.DateTimeSymbols_uz");
goog.provide("goog.i18n.DateTimeSymbols_vi");
goog.provide("goog.i18n.DateTimeSymbols_zh");
goog.provide("goog.i18n.DateTimeSymbols_zh_CN");
goog.provide("goog.i18n.DateTimeSymbols_zh_HK");
goog.provide("goog.i18n.DateTimeSymbols_zh_TW");
goog.provide("goog.i18n.DateTimeSymbols_zu");
goog.i18n.DateTimeSymbols_en_ISO = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, y MMMM dd", "y MMMM d", "y MMM d", "yyyy-MM-dd"], TIMEFORMATS:["HH:mm:ss v", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], AVAILABLEFORMATS:{"Md":"M/d", 
"MMMMd":"MMMM d", "MMMd":"MMM d"}, FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_af = {ERAS:["v.C.", "n.C."], ERANAMES:["voor Christus", "na Christus"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember"], STANDALONEMONTHS:["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", 
"Oktober", "November", "Desember"], SHORTMONTHS:["Jan.", "Feb.", "Mrt.", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"], STANDALONESHORTMONTHS:["Jan.", "Feb.", "Mrt.", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"], WEEKDAYS:["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"], STANDALONEWEEKDAYS:["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"], SHORTWEEKDAYS:["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"], STANDALONESHORTWEEKDAYS:["So", 
"Ma", "Di", "Wo", "Do", "Vr", "Sa"], NARROWWEEKDAYS:["S", "M", "D", "W", "D", "V", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "D", "W", "D", "V", "S"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["1ste kwartaal", "2de kwartaal", "3de kwartaal", "4de kwartaal"], AMPMS:["vm.", "nm."], DATEFORMATS:["EEEE, dd MMMM y", "dd MMMM y", "dd MMM y", "y-MM-dd"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_am = {ERAS:["ዓ/ዓ", "ዓ/ም"], ERANAMES:["ዓመተ ዓለም", "ዓመተ ምሕረት"], NARROWMONTHS:["ጃ", "ፌ", "ማ", "ኤ", "ሜ", "ጁ", "ጁ", "ኦ", "ሴ", "ኦ", "ኖ", "ዲ"], STANDALONENARROWMONTHS:["ጃ", "ፌ", "ማ", "ኤ", "ሜ", "ጁ", "ጁ", "ኦ", "ሴ", "ኦ", "ኖ", "ዲ"], MONTHS:["ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕሪል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክቶበር", "ኖቬምበር", "ዲሴምበር"], STANDALONEMONTHS:["ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕሪል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክቶበር", "ኖቬምበር", "ዲሴምበር"], SHORTMONTHS:["ጃንዩ", "ፌብሩ", "ማርች", 
"ኤፕሪ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክቶ", "ኖቬም", "ዲሴም"], STANDALONESHORTMONTHS:["ጃንዩ", "ፌብሩ", "ማርች", "ኤፕሪ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክቶ", "ኖቬም", "ዲሴም"], WEEKDAYS:["እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"], STANDALONEWEEKDAYS:["እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"], SHORTWEEKDAYS:["እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"], STANDALONESHORTWEEKDAYS:["እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"], NARROWWEEKDAYS:["እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"], STANDALONENARROWWEEKDAYS:["እ", 
"ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"], SHORTQUARTERS:["ሩብ1", "ሩብ2", "ሩብ3", "ሩብ4"], QUARTERS:["1ኛው ሩብ", "ሁለተኛው ሩብ", "3ኛው ሩብ", "4ኛው ሩብ"], AMPMS:["ጥዋት", "ከሰዓት"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "dd/MM/y"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_ar = {ZERODIGIT:1632, ERAS:["ق.م", "م"], ERANAMES:["قبل الميلاد", "ميلادي"], NARROWMONTHS:["ي", "ف", "م", "أ", "و", "ن", "ل", "غ", "س", "ك", "ب", "د"], STANDALONENARROWMONTHS:["ي", "ف", "م", "أ", "و", "ن", "ل", "غ", "س", "ك", "ب", "د"], MONTHS:["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], STANDALONEMONTHS:["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", 
"ديسمبر"], SHORTMONTHS:["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], STANDALONESHORTMONTHS:["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"], WEEKDAYS:["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], STANDALONEWEEKDAYS:["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], SHORTWEEKDAYS:["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", 
"الخميس", "الجمعة", "السبت"], STANDALONESHORTWEEKDAYS:["الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"], NARROWWEEKDAYS:["ح", "ن", "ث", "ر", "خ", "ج", "س"], STANDALONENARROWWEEKDAYS:["ح", "ن", "ث", "ر", "خ", "ج", "س"], SHORTQUARTERS:["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"], QUARTERS:["الربع الأول", "الربع الثاني", "الربع الثالث", "الربع الرابع"], AMPMS:["ص", "م"], DATEFORMATS:["EEEE، d MMMM، y", "d MMMM، y", "dd‏/MM‏/y", "d‏/M‏/y"], TIMEFORMATS:["h:mm:ss a zzzz", 
"h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:5, WEEKENDRANGE:[4, 5], FIRSTWEEKCUTOFFDAY:4};
goog.i18n.DateTimeSymbols_az = {ERAS:["e.ə.", "b.e."], ERANAMES:["eramızdan əvvəl", "bizim eramızın"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avqust", "sentyabr", "oktyabr", "noyabr", "dekabr"], STANDALONEMONTHS:["Yanvar", "Fevral", "Mart", "Aprel", "May", "İyun", "İyul", "Avqust", "Sentyabr", "Oktyabr", 
"Noyabr", "Dekabr"], SHORTMONTHS:["yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avq", "sen", "okt", "noy", "dek"], STANDALONESHORTMONTHS:["yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avq", "sen", "okt", "noy", "dek"], WEEKDAYS:["bazar", "bazar ertəsi", "çərşənbə axşamı", "çərşənbə", "cümə axşamı", "cümə", "şənbə"], STANDALONEWEEKDAYS:["bazar", "bazar ertəsi", "çərşənbə axşamı", "çərşənbə", "cümə axşamı", "cümə", "şənbə"], SHORTWEEKDAYS:["B.", "B.E.", "Ç.A.", "Ç.", "C.A.", "C.", "Ş."], STANDALONESHORTWEEKDAYS:["B.", 
"B.E.", "Ç.A.", "Ç.", "C.A.", "C.", "Ş."], NARROWWEEKDAYS:["7", "1", "2", "3", "4", "5", "6"], STANDALONENARROWWEEKDAYS:["7", "1", "2", "3", "4", "5", "6"], SHORTQUARTERS:["1-ci kv.", "2-ci kv.", "3-cü kv.", "4-cü kv."], QUARTERS:["1-ci kvartal", "2-ci kvartal", "3-cü kvartal", "4-cü kvartal"], AMPMS:["AM", "PM"], DATEFORMATS:["d MMMM y, EEEE", "d MMMM y", "d MMM y", "dd.MM.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], 
FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_be = {ERAS:["да н.э.", "н.э."], ERANAMES:["да н.э.", "н.э."], NARROWMONTHS:["с", "л", "с", "к", "м", "ч", "л", "ж", "в", "к", "л", "с"], STANDALONENARROWMONTHS:["с", "л", "с", "к", "м", "ч", "л", "ж", "в", "к", "л", "с"], MONTHS:["студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня"], STANDALONEMONTHS:["студзень", "люты", "сакавік", "красавік", "май", "чэрвень", "ліпень", "жнівень", "верасень", 
"кастрычнік", "лістапад", "снежань"], SHORTMONTHS:["сту", "лют", "сак", "кра", "мая", "чэр", "ліп", "жні", "вер", "кас", "ліс", "сне"], STANDALONESHORTMONTHS:["сту", "лют", "сак", "кра", "май", "чэр", "ліп", "жні", "вер", "кас", "ліс", "сне"], WEEKDAYS:["нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"], STANDALONEWEEKDAYS:["нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"], SHORTWEEKDAYS:["нд", "пн", "аў", "ср", "чц", "пт", "сб"], STANDALONESHORTWEEKDAYS:["нд", 
"пн", "аў", "ср", "чц", "пт", "сб"], NARROWWEEKDAYS:["н", "п", "а", "с", "ч", "п", "с"], STANDALONENARROWWEEKDAYS:["н", "п", "а", "с", "ч", "п", "с"], SHORTQUARTERS:["1-шы кв.", "2-гі кв.", "3-ці кв.", "4-ты кв."], QUARTERS:["1-шы квартал", "2-гі квартал", "3-ці квартал", "4-ты квартал"], AMPMS:["да палудня", "пасля палудня"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d.M.y", "d.M.yy"], TIMEFORMATS:["HH.mm.ss zzzz", "HH.mm.ss z", "HH.mm.ss", "HH.mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", 
"{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_bg = {ERAS:["пр.Хр.", "сл.Хр."], ERANAMES:["преди Христа", "след Христа"], NARROWMONTHS:["я", "ф", "м", "а", "м", "ю", "ю", "а", "с", "о", "н", "д"], STANDALONENARROWMONTHS:["я", "ф", "м", "а", "м", "ю", "ю", "а", "с", "о", "н", "д"], MONTHS:["януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември"], STANDALONEMONTHS:["януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", 
"ноември", "декември"], SHORTMONTHS:["ян.", "февр.", "март", "апр.", "май", "юни", "юли", "авг.", "септ.", "окт.", "ноем.", "дек."], STANDALONESHORTMONTHS:["ян.", "февр.", "март", "апр.", "май", "юни", "юли", "авг.", "септ.", "окт.", "ноем.", "дек."], WEEKDAYS:["неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"], STANDALONEWEEKDAYS:["неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"], SHORTWEEKDAYS:["нд", "пн", "вт", "ср", "чт", "пт", "сб"], STANDALONESHORTWEEKDAYS:["нд", 
"пн", "вт", "ср", "чт", "пт", "сб"], NARROWWEEKDAYS:["н", "п", "в", "с", "ч", "п", "с"], STANDALONENARROWWEEKDAYS:["н", "п", "в", "с", "ч", "п", "с"], SHORTQUARTERS:["1. трим.", "2. трим.", "3. трим.", "4. трим."], QUARTERS:["1. тримесечие", "2. тримесечие", "3. тримесечие", "4. тримесечие"], AMPMS:["пр.об.", "сл.об."], DATEFORMATS:["EEEE, d MMMM y 'г'.", "d MMMM y 'г'.", "d.MM.y 'г'.", "d.MM.yy 'г'."], TIMEFORMATS:["H:mm:ss zzzz", "H:mm:ss z", "H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", 
"{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_bn = {ZERODIGIT:2534, ERAS:["খ্রিস্টপূর্ব", "খৃষ্টাব্দ"], ERANAMES:["খ্রিস্টপূর্ব", "খৃষ্টাব্দ"], NARROWMONTHS:["জা", "ফে", "মা", "এ", "মে", "জুন", "জু", "আ", "সে", "অ", "ন", "ডি"], STANDALONENARROWMONTHS:["জা", "ফে", "মা", "এ", "মে", "জুন", "জু", "আ", "সে", "অ", "ন", "ডি"], MONTHS:["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর"], STANDALONEMONTHS:["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", 
"মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর"], SHORTMONTHS:["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর"], STANDALONESHORTMONTHS:["জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর"], WEEKDAYS:["রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"], STANDALONEWEEKDAYS:["রবিবার", "সোমবার", "মঙ্গলবার", 
"বুধবার", "বৃহষ্পতিবার", "শুক্রবার", "শনিবার"], SHORTWEEKDAYS:["রবি", "সোম", "মঙ্গল", "বুধ", "বৃহস্পতি", "শুক্র", "শনি"], STANDALONESHORTWEEKDAYS:["রবি", "সোম", "মঙ্গল", "বুধ", "বৃহস্পতি", "শুক্র", "শনি"], NARROWWEEKDAYS:["র", "সো", "ম", "বু", "বৃ", "শু", "শ"], STANDALONENARROWWEEKDAYS:["র", "সো", "ম", "বু", "বৃ", "শু", "শ"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["ত্রৈমাসিক", "ষাণ্মাসিক", "তৃতীয় চতুর্থাংশ", "চতুর্থ ত্রৈমাসিক"], AMPMS:["am", "pm"], DATEFORMATS:["EEEE, d MMMM, y", "d MMMM, y", 
"d MMM, y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:4, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_br = {ERAS:["BCE", "CE"], ERANAMES:["BCE", "CE"], NARROWMONTHS:["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"], STANDALONENARROWMONTHS:["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"], MONTHS:["Genver", "Cʼhwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu"], STANDALONEMONTHS:["Genver", "Cʼhwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", 
"Kerzu"], SHORTMONTHS:["Gen", "Cʼhwe", "Meur", "Ebr", "Mae", "Mezh", "Goue", "Eost", "Gwen", "Here", "Du", "Ker"], STANDALONESHORTMONTHS:["Gen", "Cʼhwe", "Meur", "Ebr", "Mae", "Mezh", "Goue", "Eost", "Gwen", "Here", "Du", "Ker"], WEEKDAYS:["Sul", "Lun", "Meurzh", "Mercʼher", "Yaou", "Gwener", "Sadorn"], STANDALONEWEEKDAYS:["Sul", "Lun", "Meurzh", "Mercʼher", "Yaou", "Gwener", "Sadorn"], SHORTWEEKDAYS:["Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."], STANDALONESHORTWEEKDAYS:["Sul", "Lun", "Meu.", 
"Mer.", "Yaou", "Gwe.", "Sad."], NARROWWEEKDAYS:["Su", "L", "Mz", "Mc", "Y", "G", "Sa"], STANDALONENARROWWEEKDAYS:["Su", "L", "Mz", "Mc", "Y", "G", "Sa"], SHORTQUARTERS:["1añ trim.", "2l trim.", "3e trim.", "4e trim."], QUARTERS:["1añ trimiziad", "2l trimiziad", "3e trimiziad", "4e trimiziad"], AMPMS:["A.M.", "G.M."], DATEFORMATS:["y MMMM d, EEEE", "y MMMM d", "y MMM d", "y-MM-dd"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", 
"{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_bs = {ERAS:["p. n. e.", "n. e."], ERANAMES:["Prije nove ere", "Nove ere"], NARROWMONTHS:["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"], STANDALONENARROWMONTHS:["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"], MONTHS:["januar", "februar", "mart", "april", "maj", "juni", "juli", "august", "septembar", "oktobar", "novembar", "decembar"], STANDALONEMONTHS:["januar", "februar", "mart", "april", "maj", "juni", "juli", "august", "septembar", "oktobar", 
"novembar", "decembar"], SHORTMONTHS:["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"], STANDALONESHORTMONTHS:["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"], WEEKDAYS:["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"], STANDALONEWEEKDAYS:["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"], SHORTWEEKDAYS:["ned", "pon", "uto", "sri", "čet", "pet", "sub"], STANDALONESHORTWEEKDAYS:["ned", 
"pon", "uto", "sri", "čet", "pet", "sub"], NARROWWEEKDAYS:["N", "P", "U", "S", "Č", "P", "S"], STANDALONENARROWWEEKDAYS:["n", "p", "u", "s", "č", "p", "s"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["Prvi kvartal", "Drugi kvartal", "Treći kvartal", "Četvrti kvartal"], AMPMS:["prije podne", "popodne"], DATEFORMATS:["EEEE, dd. MMMM y.", "dd. MMMM y.", "dd. MMM. y.", "dd.MM.yy."], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} 'u' {0}", "{1} 'u' {0}", 
"{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_ca = {ERAS:["aC", "dC"], ERANAMES:["abans de Crist", "després de Crist"], NARROWMONTHS:["GN", "FB", "MÇ", "AB", "MG", "JN", "JL", "AG", "ST", "OC", "NV", "DS"], STANDALONENARROWMONTHS:["GN", "FB", "MÇ", "AB", "MG", "JN", "JL", "AG", "ST", "OC", "NV", "DS"], MONTHS:["de gener", "de febrer", "de març", "d’abril", "de maig", "de juny", "de juliol", "d’agost", "de setembre", "d’octubre", "de novembre", "de desembre"], STANDALONEMONTHS:["gener", "febrer", "març", "abril", "maig", 
"juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre"], SHORTMONTHS:["gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des."], STANDALONESHORTMONTHS:["gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des."], WEEKDAYS:["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"], STANDALONEWEEKDAYS:["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"], SHORTWEEKDAYS:["dg.", 
"dl.", "dt.", "dc.", "dj.", "dv.", "ds."], STANDALONESHORTWEEKDAYS:["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."], NARROWWEEKDAYS:["dg", "dl", "dt", "dc", "dj", "dv", "ds"], STANDALONENARROWWEEKDAYS:["dg", "dl", "dt", "dc", "dj", "dv", "ds"], SHORTQUARTERS:["1T", "2T", "3T", "4T"], QUARTERS:["1r trimestre", "2n trimestre", "3r trimestre", "4t trimestre"], AMPMS:["a. m.", "p. m."], DATEFORMATS:["EEEE, d MMMM 'de' y", "d MMMM 'de' y", "d MMM y", "d/M/yy"], TIMEFORMATS:["H:mm:ss zzzz", "H:mm:ss z", 
"H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1} 'a les' {0}", "{1}, {0}", "{1} , {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_chr = {ERAS:["ᎤᏓᎷᎸ", "ᎤᎶᏐᏅ"], ERANAMES:["Ꮟ ᏥᏌ ᎾᏕᎲᏍᎬᎾ", "ᎠᎩᏃᎮᎵᏓᏍᏗᏱ ᎠᏕᏘᏱᏍᎬ ᏱᎰᏩ ᏧᏓᏂᎸᎢᏍᏗ"], NARROWMONTHS:["Ꭴ", "Ꭷ", "Ꭰ", "Ꭷ", "Ꭰ", "Ꮥ", "Ꭻ", "Ꭶ", "Ꮪ", "Ꮪ", "Ꮕ", "Ꭵ"], STANDALONENARROWMONTHS:["Ꭴ", "Ꭷ", "Ꭰ", "Ꭷ", "Ꭰ", "Ꮥ", "Ꭻ", "Ꭶ", "Ꮪ", "Ꮪ", "Ꮕ", "Ꭵ"], MONTHS:["ᎤᏃᎸᏔᏅ", "ᎧᎦᎵ", "ᎠᏅᏱ", "ᎧᏬᏂ", "ᎠᏂᏍᎬᏘ", "ᏕᎭᎷᏱ", "ᎫᏰᏉᏂ", "ᎦᎶᏂ", "ᏚᎵᏍᏗ", "ᏚᏂᏅᏗ", "ᏅᏓᏕᏆ", "ᎥᏍᎩᏱ"], STANDALONEMONTHS:["ᎤᏃᎸᏔᏅ", "ᎧᎦᎵ", "ᎠᏅᏱ", "ᎧᏬᏂ", "ᎠᏂᏍᎬᏘ", "ᏕᎭᎷᏱ", "ᎫᏰᏉᏂ", "ᎦᎶᏂ", "ᏚᎵᏍᏗ", "ᏚᏂᏅᏗ", "ᏅᏓᏕᏆ", "ᎥᏍᎩᏱ"], SHORTMONTHS:["ᎤᏃ", 
"ᎧᎦ", "ᎠᏅ", "ᎧᏬ", "ᎠᏂ", "ᏕᎭ", "ᎫᏰ", "ᎦᎶ", "ᏚᎵ", "ᏚᏂ", "ᏅᏓ", "ᎥᏍ"], STANDALONESHORTMONTHS:["ᎤᏃ", "ᎧᎦ", "ᎠᏅ", "ᎧᏬ", "ᎠᏂ", "ᏕᎭ", "ᎫᏰ", "ᎦᎶ", "ᏚᎵ", "ᏚᏂ", "ᏅᏓ", "ᎥᏍ"], WEEKDAYS:["ᎤᎾᏙᏓᏆᏍᎬ", "ᎤᎾᏙᏓᏉᏅᎯ", "ᏔᎵᏁᎢᎦ", "ᏦᎢᏁᎢᎦ", "ᏅᎩᏁᎢᎦ", "ᏧᎾᎩᎶᏍᏗ", "ᎤᎾᏙᏓᏈᏕᎾ"], STANDALONEWEEKDAYS:["ᎤᎾᏙᏓᏆᏍᎬ", "ᎤᎾᏙᏓᏉᏅᎯ", "ᏔᎵᏁᎢᎦ", "ᏦᎢᏁᎢᎦ", "ᏅᎩᏁᎢᎦ", "ᏧᎾᎩᎶᏍᏗ", "ᎤᎾᏙᏓᏈᏕᎾ"], SHORTWEEKDAYS:["ᏆᏍᎬ", "ᏉᏅᎯ", "ᏔᎵᏁ", "ᏦᎢᏁ", "ᏅᎩᏁ", "ᏧᎾᎩ", "ᏈᏕᎾ"], STANDALONESHORTWEEKDAYS:["ᏆᏍᎬ", "ᏉᏅᎯ", "ᏔᎵᏁ", "ᏦᎢᏁ", "ᏅᎩᏁ", "ᏧᎾᎩ", "ᏈᏕᎾ"], NARROWWEEKDAYS:["Ꮖ", "Ꮙ", 
"Ꮤ", "Ꮶ", "Ꮕ", "Ꮷ", "Ꭴ"], STANDALONENARROWWEEKDAYS:["Ꮖ", "Ꮙ", "Ꮤ", "Ꮶ", "Ꮕ", "Ꮷ", "Ꭴ"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["Q1", "Q2", "Q3", "Q4"], AMPMS:["ᏌᎾᎴ", "ᏒᎯᏱᎢᏗᏢ"], DATEFORMATS:["EEEE, MMMM d, y", "MMMM d, y", "MMM d, y", "M/d/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_cs = {ERAS:["př. n. l.", "n. l."], ERANAMES:["př. n. l.", "n. l."], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince"], STANDALONEMONTHS:["leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", 
"listopad", "prosinec"], SHORTMONTHS:["led", "úno", "bře", "dub", "kvě", "čvn", "čvc", "srp", "zář", "říj", "lis", "pro"], STANDALONESHORTMONTHS:["led", "úno", "bře", "dub", "kvě", "čvn", "čvc", "srp", "zář", "říj", "lis", "pro"], WEEKDAYS:["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"], STANDALONEWEEKDAYS:["neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"], SHORTWEEKDAYS:["ne", "po", "út", "st", "čt", "pá", "so"], STANDALONESHORTWEEKDAYS:["ne", "po", "út", 
"st", "čt", "pá", "so"], NARROWWEEKDAYS:["N", "P", "Ú", "S", "Č", "P", "S"], STANDALONENARROWWEEKDAYS:["N", "P", "Ú", "S", "Č", "P", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1. čtvrtletí", "2. čtvrtletí", "3. čtvrtletí", "4. čtvrtletí"], AMPMS:["dopoledne", "odpoledne"], DATEFORMATS:["EEEE d. MMMM y", "d. MMMM y", "d. M. y", "dd.MM.yy"], TIMEFORMATS:["H:mm:ss zzzz", "H:mm:ss z", "H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 
6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_cy = {ERAS:["CC", "OC"], ERANAMES:["Cyn Crist", "Oed Crist"], NARROWMONTHS:["I", "Ch", "M", "E", "M", "M", "G", "A", "M", "H", "T", "Rh"], STANDALONENARROWMONTHS:["I", "Ch", "M", "E", "M", "M", "G", "A", "M", "H", "T", "Rh"], MONTHS:["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr"], STANDALONEMONTHS:["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", 
"Tachwedd", "Rhagfyr"], SHORTMONTHS:["Ion", "Chwef", "Mawrth", "Ebrill", "Mai", "Meh", "Gorff", "Awst", "Medi", "Hyd", "Tach", "Rhag"], STANDALONESHORTMONTHS:["Ion", "Chw", "Maw", "Ebr", "Mai", "Meh", "Gor", "Awst", "Medi", "Hyd", "Tach", "Rhag"], WEEKDAYS:["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"], STANDALONEWEEKDAYS:["Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"], SHORTWEEKDAYS:["Sul", "Llun", 
"Maw", "Mer", "Iau", "Gwen", "Sad"], STANDALONESHORTWEEKDAYS:["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"], NARROWWEEKDAYS:["S", "Ll", "M", "M", "I", "G", "S"], STANDALONENARROWWEEKDAYS:["S", "Ll", "M", "M", "I", "G", "S"], SHORTQUARTERS:["Ch1", "Ch2", "Ch3", "Ch4"], QUARTERS:["Chwarter 1af", "2il chwarter", "3ydd chwarter", "4ydd chwarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "dd/MM/yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], 
DATETIMEFORMATS:["{1} 'am' {0}", "{1} 'am' {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_da = {ERAS:["f.Kr.", "e.Kr."], ERANAMES:["f.Kr.", "e.Kr."], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"], STANDALONEMONTHS:["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", 
"december"], SHORTMONTHS:["jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec."], STANDALONESHORTMONTHS:["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"], WEEKDAYS:["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"], STANDALONEWEEKDAYS:["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"], SHORTWEEKDAYS:["søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør."], STANDALONESHORTWEEKDAYS:["søn", 
"man", "tir", "ons", "tor", "fre", "lør"], NARROWWEEKDAYS:["S", "M", "T", "O", "T", "F", "L"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "O", "T", "F", "L"], SHORTQUARTERS:["1. kvt.", "2. kvt.", "3. kvt.", "4. kvt."], QUARTERS:["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE 'den' d. MMMM y", "d. MMMM y", "d. MMM y", "dd/MM/y"], TIMEFORMATS:["HH.mm.ss zzzz", "HH.mm.ss z", "HH.mm.ss", "HH.mm"], DATETIMEFORMATS:["{1} 'kl.' {0}", "{1} 'kl.' {0}", "{1} {0}", 
"{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_de = {ERAS:["v. Chr.", "n. Chr."], ERANAMES:["v. Chr.", "n. Chr."], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], STANDALONEMONTHS:["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", 
"Dezember"], SHORTMONTHS:["Jan.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez."], STANDALONESHORTMONTHS:["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], WEEKDAYS:["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], STANDALONEWEEKDAYS:["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], SHORTWEEKDAYS:["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."], STANDALONESHORTWEEKDAYS:["So", 
"Mo", "Di", "Mi", "Do", "Fr", "Sa"], NARROWWEEKDAYS:["S", "M", "D", "M", "D", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "D", "M", "D", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"], AMPMS:["vorm.", "nachm."], DATEFORMATS:["EEEE, d. MMMM y", "d. MMMM y", "dd.MM.y", "dd.MM.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} 'um' {0}", "{1} 'um' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_de_AT = {ERAS:["v. Chr.", "n. Chr."], ERANAMES:["v. Chr.", "n. Chr."], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"], STANDALONEMONTHS:["Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", 
"Dezember"], SHORTMONTHS:["Jän.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez."], STANDALONESHORTMONTHS:["Jän", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], WEEKDAYS:["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], STANDALONEWEEKDAYS:["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"], SHORTWEEKDAYS:["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."], STANDALONESHORTWEEKDAYS:["So", 
"Mo", "Di", "Mi", "Do", "Fr", "Sa"], NARROWWEEKDAYS:["S", "M", "D", "M", "D", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "D", "M", "D", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"], AMPMS:["vorm.", "nachm."], DATEFORMATS:["EEEE, d. MMMM y", "d. MMMM y", "dd.MM.y", "dd.MM.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} 'um' {0}", "{1} 'um' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_de_CH = goog.i18n.DateTimeSymbols_de;
goog.i18n.DateTimeSymbols_el = {ERAS:["π.Χ.", "μ.Χ."], ERANAMES:["προ Χριστού", "μετά Χριστόν"], NARROWMONTHS:["Ι", "Φ", "Μ", "Α", "Μ", "Ι", "Ι", "Α", "Σ", "Ο", "Ν", "Δ"], STANDALONENARROWMONTHS:["Ι", "Φ", "Μ", "Α", "Μ", "Ι", "Ι", "Α", "Σ", "Ο", "Ν", "Δ"], MONTHS:["Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου"], STANDALONEMONTHS:["Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", 
"Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος"], SHORTMONTHS:["Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαΐ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ"], STANDALONESHORTMONTHS:["Ιαν", "Φεβ", "Μάρ", "Απρ", "Μάι", "Ιούν", "Ιούλ", "Αύγ", "Σεπ", "Οκτ", "Νοέ", "Δεκ"], WEEKDAYS:["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"], STANDALONEWEEKDAYS:["Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"], SHORTWEEKDAYS:["Κυρ", "Δευ", 
"Τρί", "Τετ", "Πέμ", "Παρ", "Σάβ"], STANDALONESHORTWEEKDAYS:["Κυρ", "Δευ", "Τρί", "Τετ", "Πέμ", "Παρ", "Σάβ"], NARROWWEEKDAYS:["Κ", "Δ", "Τ", "Τ", "Π", "Π", "Σ"], STANDALONENARROWWEEKDAYS:["Κ", "Δ", "Τ", "Τ", "Π", "Π", "Σ"], SHORTQUARTERS:["Τ1", "Τ2", "Τ3", "Τ4"], QUARTERS:["1ο τρίμηνο", "2ο τρίμηνο", "3ο τρίμηνο", "4ο τρίμηνο"], AMPMS:["π.μ.", "μ.μ."], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} - {0}", 
"{1} - {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_en = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, MMMM d, y", "MMMM d, y", "MMM d, y", "M/d/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_en_AU = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "d/MM/y"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_en_CA = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, MMMM d, y", "MMMM d, y", "MMM d, y", "y-MM-dd"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], 
FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_en_GB = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "dd/MM/y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_en_IE = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "dd/MM/y"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], 
FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:2};
goog.i18n.DateTimeSymbols_en_IN = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "dd-MMM-y", "dd/MM/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, 
WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_en_SG = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_en_US = goog.i18n.DateTimeSymbols_en;
goog.i18n.DateTimeSymbols_en_ZA = {ERAS:["BC", "AD"], ERANAMES:["Before Christ", "Anno Domini"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], STANDALONEMONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", 
"November", "December"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], WEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], STANDALONEWEEKDAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], SHORTWEEKDAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], STANDALONESHORTWEEKDAYS:["Sun", 
"Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, dd MMMM y", "dd MMMM y", "dd MMM y", "y/MM/dd"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'at' {0}", "{1} 'at' {0}", "{1}, {0}", "{1}, {0}"], 
FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_es = {ERAS:["a. C.", "d. C."], ERANAMES:["antes de Cristo", "después de Cristo"], NARROWMONTHS:["E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"], STANDALONEMONTHS:["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", 
"Octubre", "Noviembre", "Diciembre"], SHORTMONTHS:["ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic."], STANDALONESHORTMONTHS:["Ene.", "Feb.", "Mar.", "Abr.", "May.", "Jun.", "Jul.", "Ago.", "Sept.", "Oct.", "Nov.", "Dic."], WEEKDAYS:["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"], STANDALONEWEEKDAYS:["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"], SHORTWEEKDAYS:["dom.", "lun.", "mar.", "mié.", "jue.", 
"vie.", "sáb."], STANDALONESHORTWEEKDAYS:["Dom.", "Lun.", "Mar.", "Mié.", "Jue.", "Vie.", "Sáb."], NARROWWEEKDAYS:["D", "L", "M", "X", "J", "V", "S"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "X", "J", "V", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1.er trimestre", "2.º trimestre", "3.er trimestre", "4.º trimestre"], AMPMS:["a. m.", "p. m."], DATEFORMATS:["EEEE, d 'de' MMMM 'de' y", "d 'de' MMMM 'de' y", "d MMM y", "d/M/yy"], TIMEFORMATS:["H:mm:ss (zzzz)", "H:mm:ss z", "H:mm:ss", "H:mm"], 
DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_es_419 = {ERAS:["a. C.", "d. C."], ERANAMES:["antes de Cristo", "después de Cristo"], NARROWMONTHS:["E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"], STANDALONEMONTHS:["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", 
"Octubre", "Noviembre", "Diciembre"], SHORTMONTHS:["ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic."], STANDALONESHORTMONTHS:["Ene.", "Feb.", "Mar.", "Abr.", "May.", "Jun.", "Jul.", "Ago.", "Sept.", "Oct.", "Nov.", "Dic."], WEEKDAYS:["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"], STANDALONEWEEKDAYS:["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"], SHORTWEEKDAYS:["dom.", "lun.", "mar.", "mié.", "jue.", 
"vie.", "sáb."], STANDALONESHORTWEEKDAYS:["Dom.", "Lun.", "Mar.", "Mié.", "Jue.", "Vie.", "Sáb."], NARROWWEEKDAYS:["d", "l", "m", "m", "j", "v", "s"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1.er trimestre", "2.º trimestre", "3.er trimestre", "4.º trimestre"], AMPMS:["a. m.", "p. m."], DATEFORMATS:["EEEE, d 'de' MMMM 'de' y", "d 'de' MMMM 'de' y", "d MMM y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", 
"h:mm a"], DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_es_ES = goog.i18n.DateTimeSymbols_es;
goog.i18n.DateTimeSymbols_es_MX = {ERAS:["a. C.", "d. C."], ERANAMES:["antes de Cristo", "después de Cristo"], NARROWMONTHS:["E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"], STANDALONEMONTHS:["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", 
"Octubre", "Noviembre", "Diciembre"], SHORTMONTHS:["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"], STANDALONESHORTMONTHS:["Ene.", "Feb.", "Mar.", "Abr.", "May.", "Jun.", "Jul.", "Ago.", "Sept.", "Oct.", "Nov.", "Dic."], WEEKDAYS:["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"], STANDALONEWEEKDAYS:["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"], SHORTWEEKDAYS:["dom.", "lun.", "mar.", "mié.", "jue.", "vie.", "sáb."], 
STANDALONESHORTWEEKDAYS:["Dom.", "Lun.", "Mar.", "Mié.", "Jue.", "Vie.", "Sáb."], NARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], SHORTQUARTERS:["1er. trim.", "2º. trim.", "3er. trim.", "4º trim."], QUARTERS:["1er. trimestre", "2º. trimestre", "3er. trimestre", "4º trimestre"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE, d 'de' MMMM 'de' y", "d 'de' MMMM 'de' y", "dd/MM/y", "dd/MM/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", 
"h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_es_US = {ERAS:["a. C.", "d. C."], ERANAMES:["antes de Cristo", "después de Cristo"], NARROWMONTHS:["E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["E", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"], STANDALONEMONTHS:["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", 
"Octubre", "Noviembre", "Diciembre"], SHORTMONTHS:["ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic."], STANDALONESHORTMONTHS:["Ene.", "Feb.", "Mar.", "Abr.", "May.", "Jun.", "Jul.", "Ago.", "Sept.", "Oct.", "Nov.", "Dic."], WEEKDAYS:["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"], STANDALONEWEEKDAYS:["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"], SHORTWEEKDAYS:["dom.", "lun.", "mar.", "mié.", "jue.", 
"vie.", "sáb."], STANDALONESHORTWEEKDAYS:["Dom.", "Lun.", "Mar.", "Mié.", "Jue.", "Vie.", "Sáb."], NARROWWEEKDAYS:["d", "l", "m", "m", "j", "v", "s"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1.er trimestre", "2.º trimestre", "3.er trimestre", "4.º trimestre"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d 'de' MMMM 'de' y", "d 'de' MMMM 'de' y", "d MMM y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], 
DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_et = {ERAS:["e.m.a.", "m.a.j."], ERANAMES:["enne meie aega", "meie aja järgi"], NARROWMONTHS:["J", "V", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "V", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember"], STANDALONEMONTHS:["jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", 
"oktoober", "november", "detsember"], SHORTMONTHS:["jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets"], STANDALONESHORTMONTHS:["jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets"], WEEKDAYS:["pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"], STANDALONEWEEKDAYS:["pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"], SHORTWEEKDAYS:["P", "E", "T", "K", 
"N", "R", "L"], STANDALONESHORTWEEKDAYS:["P", "E", "T", "K", "N", "R", "L"], NARROWWEEKDAYS:["P", "E", "T", "K", "N", "R", "L"], STANDALONENARROWWEEKDAYS:["P", "E", "T", "K", "N", "R", "L"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d. MMMM y", "d. MMMM y", "d. MMM y", "dd.MM.yy"], TIMEFORMATS:["H:mm.ss zzzz", "H:mm.ss z", "H:mm.ss", "H:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], 
FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_eu = {ERAS:["K.a.", "K.o."], ERANAMES:["K.a.", "K.o."], NARROWMONTHS:["U", "O", "M", "A", "M", "E", "U", "A", "I", "U", "A", "A"], STANDALONENARROWMONTHS:["U", "O", "M", "A", "M", "E", "U", "A", "I", "U", "A", "A"], MONTHS:["urtarrilak", "otsailak", "martxoak", "apirilak", "maiatzak", "ekainak", "uztailak", "abuztuak", "irailak", "urriak", "azaroak", "abenduak"], STANDALONEMONTHS:["Urtarrila", "Otsaila", "Martxoa", "Apirila", "Maiatza", "Ekaina", "Uztaila", "Abuztua", "Iraila", 
"Urria", "Azaroa", "Abendua"], SHORTMONTHS:["urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe."], STANDALONESHORTMONTHS:["Urt.", "Ots.", "Mar.", "Api.", "Mai.", "Eka.", "Uzt.", "Abu.", "Ira.", "Urr.", "Aza.", "Abe."], WEEKDAYS:["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"], STANDALONEWEEKDAYS:["Igandea", "Astelehena", "Asteartea", "Asteazkena", "Osteguna", "Ostirala", "Larunbata"], SHORTWEEKDAYS:["ig.", "al.", "ar.", 
"az.", "og.", "or.", "lr."], STANDALONESHORTWEEKDAYS:["Ig.", "Al.", "Ar.", "Az.", "Og.", "Or.", "Lr."], NARROWWEEKDAYS:["I", "A", "A", "A", "O", "O", "L"], STANDALONENARROWWEEKDAYS:["I", "A", "A", "A", "O", "O", "L"], SHORTQUARTERS:["1Hh", "2Hh", "3Hh", "4Hh"], QUARTERS:["1. hiruhilekoa", "2. hiruhilekoa", "3. hiruhilekoa", "4. hiruhilekoa"], AMPMS:["AM", "PM"], DATEFORMATS:["y('e')'ko' MMMM d, EEEE", "y('e')'ko' MMMM d", "y MMM d", "y/MM/dd"], TIMEFORMATS:["HH:mm:ss (zzzz)", "HH:mm:ss (z)", "HH:mm:ss", 
"HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_fa = {ZERODIGIT:1776, ERAS:["ق.م.", "م."], ERANAMES:["قبل از میلاد", "میلادی"], NARROWMONTHS:["ژ", "ف", "م", "آ", "م", "ژ", "ژ", "ا", "س", "ا", "ن", "د"], STANDALONENARROWMONTHS:["ژ", "ف", "م", "آ", "م", "ژ", "ژ", "ا", "س", "ا", "ن", "د"], MONTHS:["ژانویهٔ", "فوریهٔ", "مارس", "آوریل", "مهٔ", "ژوئن", "ژوئیهٔ", "اوت", "سپتامبر", "اکتبر", "نوامبر", "دسامبر"], STANDALONEMONTHS:["ژانویه", "فوریه", "مارس", "آوریل", "مه", "ژوئن", "ژوئیه", "اوت", "سپتامبر", "اکتبر", "نوامبر", "دسامبر"], 
SHORTMONTHS:["ژانویهٔ", "فوریهٔ", "مارس", "آوریل", "مهٔ", "ژوئن", "ژوئیهٔ", "اوت", "سپتامبر", "اکتبر", "نوامبر", "دسامبر"], STANDALONESHORTMONTHS:["ژانویه", "فوریه", "مارس", "آوریل", "مه", "ژوئن", "ژوئیه", "اوت", "سپتامبر", "اکتبر", "نوامبر", "دسامبر"], WEEKDAYS:["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"], STANDALONEWEEKDAYS:["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"], SHORTWEEKDAYS:["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", 
"شنبه"], STANDALONESHORTWEEKDAYS:["یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"], NARROWWEEKDAYS:["ی", "د", "س", "چ", "پ", "ج", "ش"], STANDALONENARROWWEEKDAYS:["ی", "د", "س", "چ", "پ", "ج", "ش"], SHORTQUARTERS:["س‌م۱", "س‌م۲", "س‌م۳", "س‌م۴"], QUARTERS:["سه‌ماههٔ اول", "سه‌ماههٔ دوم", "سه‌ماههٔ سوم", "سه‌ماههٔ چهارم"], AMPMS:["قبل‌ازظهر", "بعدازظهر"], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "y/M/d"], TIMEFORMATS:["H:mm:ss (zzzz)", "H:mm:ss (z)", "H:mm:ss", "H:mm"], 
DATETIMEFORMATS:["{1}، ساعت {0}", "{1}، ساعت {0}", "{1}،‏ {0}", "{1}،‏ {0}"], FIRSTDAYOFWEEK:5, WEEKENDRANGE:[4, 4], FIRSTWEEKCUTOFFDAY:4};
goog.i18n.DateTimeSymbols_fi = {ERAS:["eKr.", "jKr."], ERANAMES:["ennen Kristuksen syntymää", "jälkeen Kristuksen syntymän"], NARROWMONTHS:["T", "H", "M", "H", "T", "K", "H", "E", "S", "L", "M", "J"], STANDALONENARROWMONTHS:["T", "H", "M", "H", "T", "K", "H", "E", "S", "L", "M", "J"], MONTHS:["tammikuuta", "helmikuuta", "maaliskuuta", "huhtikuuta", "toukokuuta", "kesäkuuta", "heinäkuuta", "elokuuta", "syyskuuta", "lokakuuta", "marraskuuta", "joulukuuta"], STANDALONEMONTHS:["tammikuu", "helmikuu", 
"maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu"], SHORTMONTHS:["tammikuuta", "helmikuuta", "maaliskuuta", "huhtikuuta", "toukokuuta", "kesäkuuta", "heinäkuuta", "elokuuta", "syyskuuta", "lokakuuta", "marraskuuta", "joulukuuta"], STANDALONESHORTMONTHS:["tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu"], WEEKDAYS:["sunnuntaina", "maanantaina", "tiistaina", "keskiviikkona", "torstaina", 
"perjantaina", "lauantaina"], STANDALONEWEEKDAYS:["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"], SHORTWEEKDAYS:["su", "ma", "ti", "ke", "to", "pe", "la"], STANDALONESHORTWEEKDAYS:["su", "ma", "ti", "ke", "to", "pe", "la"], NARROWWEEKDAYS:["S", "M", "T", "K", "T", "P", "L"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "K", "T", "P", "L"], SHORTQUARTERS:["1. nelj.", "2. nelj.", "3. nelj.", "4. nelj."], QUARTERS:["1. neljännes", "2. neljännes", "3. neljännes", 
"4. neljännes"], AMPMS:["ap.", "ip."], DATEFORMATS:["cccc d. MMMM y", "d. MMMM y", "d.M.y", "d.M.y"], TIMEFORMATS:["H.mm.ss zzzz", "H.mm.ss z", "H.mm.ss", "H.mm"], DATETIMEFORMATS:["{1} 'klo' {0}", "{1} 'klo' {0}", "{1} 'klo' {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_fil = {ERAS:["BC", "AD"], ERANAMES:["BC", "AD"], NARROWMONTHS:["E", "P", "M", "A", "M", "H", "H", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["E", "P", "M", "A", "M", "H", "H", "A", "S", "O", "N", "D"], MONTHS:["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre"], STANDALONEMONTHS:["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre"], 
SHORTMONTHS:["Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Set", "Okt", "Nob", "Dis"], STANDALONESHORTMONTHS:["Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Set", "Okt", "Nob", "Dis"], WEEKDAYS:["Linggo", "Lunes", "Martes", "Miyerkules", "Huwebes", "Biyernes", "Sabado"], STANDALONEWEEKDAYS:["Linggo", "Lunes", "Martes", "Miyerkules", "Huwebes", "Biyernes", "Sabado"], SHORTWEEKDAYS:["Lin", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"], STANDALONESHORTWEEKDAYS:["Lin", "Lun", "Mar", 
"Miy", "Huw", "Biy", "Sab"], NARROWWEEKDAYS:["L", "L", "M", "M", "H", "B", "S"], STANDALONENARROWWEEKDAYS:["L", "L", "M", "M", "H", "B", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["ika-1 quarter", "ika-2 quarter", "ika-3 quarter", "ika-4 na quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, MMMM d, y", "MMMM d, y", "MMM d, y", "M/d/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'nang' {0}", "{1} 'nang' {0}", "{1}, {0}", "{1}, {0}"], 
FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_fr = {ERAS:["av. J.-C.", "ap. J.-C."], ERANAMES:["avant Jésus-Christ", "après Jésus-Christ"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"], STANDALONEMONTHS:["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", 
"Septembre", "Octobre", "Novembre", "Décembre"], SHORTMONTHS:["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."], STANDALONESHORTMONTHS:["Janv.", "Févr.", "Mars", "Avr.", "Mai", "Juin", "Juil.", "Août", "Sept.", "Oct.", "Nov.", "Déc."], WEEKDAYS:["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"], STANDALONEWEEKDAYS:["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"], SHORTWEEKDAYS:["dim.", "lun.", "mar.", 
"mer.", "jeu.", "ven.", "sam."], STANDALONESHORTWEEKDAYS:["Dim.", "Lun.", "Mar.", "Mer.", "Jeu.", "Ven.", "Sam."], NARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1er trimestre", "2e trimestre", "3e trimestre", "4e trimestre"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "dd/MM/y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_fr_CA = {ERAS:["av. J.-C.", "ap. J.-C."], ERANAMES:["avant Jésus-Christ", "après Jésus-Christ"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"], STANDALONEMONTHS:["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", 
"septembre", "octobre", "novembre", "décembre"], SHORTMONTHS:["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."], STANDALONESHORTMONTHS:["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."], WEEKDAYS:["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"], STANDALONEWEEKDAYS:["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"], SHORTWEEKDAYS:["dim.", "lun.", "mar.", 
"mer.", "jeu.", "ven.", "sam."], STANDALONESHORTWEEKDAYS:["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."], NARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1er trimestre", "2e trimestre", "3e trimestre", "4e trimestre"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "yy-MM-dd"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_ga = {ERAS:["RC", "AD"], ERANAMES:["Roimh Chríost", "Anno Domini"], NARROWMONTHS:["E", "F", "M", "A", "B", "M", "I", "L", "M", "D", "S", "N"], STANDALONENARROWMONTHS:["E", "F", "M", "A", "B", "M", "I", "L", "M", "D", "S", "N"], MONTHS:["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig"], STANDALONEMONTHS:["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", 
"Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig"], SHORTMONTHS:["Ean", "Feabh", "Márta", "Aib", "Beal", "Meith", "Iúil", "Lún", "MFómh", "DFómh", "Samh", "Noll"], STANDALONESHORTMONTHS:["Ean", "Feabh", "Márta", "Aib", "Beal", "Meith", "Iúil", "Lún", "MFómh", "DFómh", "Samh", "Noll"], WEEKDAYS:["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"], STANDALONEWEEKDAYS:["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", 
"Dé Sathairn"], SHORTWEEKDAYS:["Domh", "Luan", "Máirt", "Céad", "Déar", "Aoine", "Sath"], STANDALONESHORTWEEKDAYS:["Domh", "Luan", "Máirt", "Céad", "Déar", "Aoine", "Sath"], NARROWWEEKDAYS:["D", "L", "M", "C", "D", "A", "S"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "C", "D", "A", "S"], SHORTQUARTERS:["R1", "R2", "R3", "R4"], QUARTERS:["1ú ráithe", "2ú ráithe", "3ú ráithe", "4ú ráithe"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "dd/MM/y"], TIMEFORMATS:["HH:mm:ss zzzz", 
"HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:2};
goog.i18n.DateTimeSymbols_gl = {ERAS:["a.C.", "d.C."], ERANAMES:["antes de Cristo", "despois de Cristo"], NARROWMONTHS:["X", "F", "M", "A", "M", "X", "X", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["X", "F", "M", "A", "M", "X", "X", "A", "S", "O", "N", "D"], MONTHS:["xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro"], STANDALONEMONTHS:["Xaneiro", "Febreiro", "Marzo", "Abril", "Maio", "Xuño", "Xullo", "Agosto", "Setembro", 
"Outubro", "Novembro", "Decembro"], SHORTMONTHS:["xan", "feb", "mar", "abr", "mai", "xuñ", "xul", "ago", "set", "out", "nov", "dec"], STANDALONESHORTMONTHS:["Xan", "Feb", "Mar", "Abr", "Mai", "Xuñ", "Xul", "Ago", "Set", "Out", "Nov", "Dec"], WEEKDAYS:["domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"], STANDALONEWEEKDAYS:["Domingo", "Luns", "Martes", "Mércores", "Xoves", "Venres", "Sábado"], SHORTWEEKDAYS:["dom", "lun", "mar", "mér", "xov", "ven", "sáb"], STANDALONESHORTWEEKDAYS:["Dom", 
"Lun", "Mar", "Mér", "Xov", "Ven", "Sáb"], NARROWWEEKDAYS:["D", "L", "M", "M", "X", "V", "S"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "M", "X", "V", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1o trimestre", "2o trimestre", "3o trimestre", "4o trimestre"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE dd MMMM y", "dd MMMM y", "d MMM, y", "dd/MM/yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_gsw = {ERAS:["v. Chr.", "n. Chr."], ERANAMES:["v. Chr.", "n. Chr."], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber"], STANDALONEMONTHS:["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", 
"Novämber", "Dezämber"], SHORTMONTHS:["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"], WEEKDAYS:["Sunntig", "Määntig", "Ziischtig", "Mittwuch", "Dunschtig", "Friitig", "Samschtig"], STANDALONEWEEKDAYS:["Sunntig", "Määntig", "Ziischtig", "Mittwuch", "Dunschtig", "Friitig", "Samschtig"], SHORTWEEKDAYS:["Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."], STANDALONESHORTWEEKDAYS:["Su.", 
"Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."], NARROWWEEKDAYS:["S", "M", "D", "M", "D", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "D", "M", "D", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"], AMPMS:["vorm.", "nam."], DATEFORMATS:["EEEE, d. MMMM y", "d. MMMM y", "dd.MM.y", "dd.MM.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_gu = {ERAS:["ઈસુના જન્મ પહેલા", "ઇસવીસન"], ERANAMES:["ઈસવીસન પૂર્વે", "ઇસવીસન"], NARROWMONTHS:["જા", "ફે", "મા", "એ", "મે", "જૂ", "જુ", "ઑ", "સ", "ઑ", "ન", "ડિ"], STANDALONENARROWMONTHS:["જા", "ફે", "મા", "એ", "મે", "જૂ", "જુ", "ઑ", "સ", "ઑ", "ન", "ડિ"], MONTHS:["જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટોબર", "નવેમ્બર", "ડિસેમ્બર"], STANDALONEMONTHS:["જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", 
"સપ્ટેમ્બર", "ઑક્ટોબર", "નવેમ્બર", "ડિસેમ્બર"], SHORTMONTHS:["જાન્યુ", "ફેબ્રુ", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગ", "સપ્ટે", "ઑક્ટો", "નવે", "ડિસે"], STANDALONESHORTMONTHS:["જાન્યુ", "ફેબ્રુ", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટે", "ઑક્ટો", "નવે", "ડિસે"], WEEKDAYS:["રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"], STANDALONEWEEKDAYS:["રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"], SHORTWEEKDAYS:["રવિ", "સોમ", "મંગળ", 
"બુધ", "ગુરુ", "શુક્ર", "શનિ"], STANDALONESHORTWEEKDAYS:["રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"], NARROWWEEKDAYS:["ર", "સો", "મં", "બુ", "ગુ", "શુ", "શ"], STANDALONENARROWWEEKDAYS:["ર", "સો", "મં", "બુ", "ગુ", "શુ", "શ"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["પહેલો ત્રિમાસ", "બીજો ત્રિમાસ", "ત્રીજો ત્રિમાસ", "ચોથો ત્રિમાસ"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d MMMM, y", "d MMMM, y", "d MMM, y", "d/M/yy"], TIMEFORMATS:["hh:mm:ss a zzzz", "hh:mm:ss a z", "hh:mm:ss a", 
"hh:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_haw = {ERAS:["BCE", "CE"], ERANAMES:["BCE", "CE"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["Ianuali", "Pepeluali", "Malaki", "ʻApelila", "Mei", "Iune", "Iulai", "ʻAukake", "Kepakemapa", "ʻOkakopa", "Nowemapa", "Kekemapa"], STANDALONEMONTHS:["Ianuali", "Pepeluali", "Malaki", "ʻApelila", "Mei", "Iune", "Iulai", "ʻAukake", "Kepakemapa", "ʻOkakopa", 
"Nowemapa", "Kekemapa"], SHORTMONTHS:["Ian.", "Pep.", "Mal.", "ʻAp.", "Mei", "Iun.", "Iul.", "ʻAu.", "Kep.", "ʻOk.", "Now.", "Kek."], STANDALONESHORTMONTHS:["Ian.", "Pep.", "Mal.", "ʻAp.", "Mei", "Iun.", "Iul.", "ʻAu.", "Kep.", "ʻOk.", "Now.", "Kek."], WEEKDAYS:["Lāpule", "Poʻakahi", "Poʻalua", "Poʻakolu", "Poʻahā", "Poʻalima", "Poʻaono"], STANDALONEWEEKDAYS:["Lāpule", "Poʻakahi", "Poʻalua", "Poʻakolu", "Poʻahā", "Poʻalima", "Poʻaono"], SHORTWEEKDAYS:["LP", "P1", "P2", "P3", "P4", "P5", "P6"], STANDALONESHORTWEEKDAYS:["LP", 
"P1", "P2", "P3", "P4", "P5", "P6"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["Q1", "Q2", "Q3", "Q4"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_he = {ERAS:["לפנה״ס", "לספירה"], ERANAMES:["לפני הספירה", "לספירה"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"], STANDALONEMONTHS:["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"], 
SHORTMONTHS:["ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳"], STANDALONESHORTMONTHS:["ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳"], WEEKDAYS:["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "יום שבת"], STANDALONEWEEKDAYS:["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "יום שבת"], SHORTWEEKDAYS:["יום א׳", "יום ב׳", "יום ג׳", "יום ד׳", "יום ה׳", "יום ו׳", 
"שבת"], STANDALONESHORTWEEKDAYS:["יום א׳", "יום ב׳", "יום ג׳", "יום ד׳", "יום ה׳", "יום ו׳", "שבת"], NARROWWEEKDAYS:["א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"], STANDALONENARROWWEEKDAYS:["א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"], SHORTQUARTERS:["רבעון 1", "רבעון 2", "רבעון 3", "רבעון 4"], QUARTERS:["רבעון 1", "רבעון 2", "רבעון 3", "רבעון 4"], AMPMS:["לפנה״צ", "אחה״צ"], DATEFORMATS:["EEEE, d בMMMM y", "d בMMMM y", "d בMMM y", "d.M.y"], TIMEFORMATS:["H:mm:ss zzzz", "H:mm:ss z", "H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1} בשעה {0}", 
"{1} בשעה {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[4, 5], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_hi = {ERAS:["ईसा-पूर्व", "ईस्वी"], ERANAMES:["ईसा-पूर्व", "ईसवी सन"], NARROWMONTHS:["ज", "फ़", "मा", "अ", "म", "जू", "जु", "अ", "सि", "अ", "न", "दि"], STANDALONENARROWMONTHS:["ज", "फ़", "मा", "अ", "म", "जू", "जु", "अ", "सि", "अ", "न", "दि"], MONTHS:["जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर"], STANDALONEMONTHS:["जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", 
"दिसंबर"], SHORTMONTHS:["जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰"], STANDALONESHORTMONTHS:["जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰"], WEEKDAYS:["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"], STANDALONEWEEKDAYS:["रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"], SHORTWEEKDAYS:["रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"], STANDALONESHORTWEEKDAYS:["रवि", 
"सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"], NARROWWEEKDAYS:["र", "सो", "मं", "बु", "गु", "शु", "श"], STANDALONENARROWWEEKDAYS:["र", "सो", "मं", "बु", "गु", "शु", "श"], SHORTQUARTERS:["ति1", "ति2", "ति3", "ति4"], QUARTERS:["पहली तिमाही", "दूसरी तिमाही", "तीसरी तिमाही", "चौथी तिमाही"], AMPMS:["am", "pm"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "dd/MM/y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} को {0}", "{1} को {0}", "{1}, {0}", "{1}, {0}"], 
FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_hr = {ERAS:["pr. Kr.", "p. Kr."], ERANAMES:["Prije Krista", "Poslije Krista"], NARROWMONTHS:["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."], STANDALONENARROWMONTHS:["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."], MONTHS:["siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenoga", "prosinca"], STANDALONEMONTHS:["siječanj", "veljača", "ožujak", "travanj", "svibanj", 
"lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac"], SHORTMONTHS:["sij", "velj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro"], STANDALONESHORTMONTHS:["sij", "velj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro"], WEEKDAYS:["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"], STANDALONEWEEKDAYS:["nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"], SHORTWEEKDAYS:["ned", "pon", 
"uto", "sri", "čet", "pet", "sub"], STANDALONESHORTWEEKDAYS:["ned", "pon", "uto", "sri", "čet", "pet", "sub"], NARROWWEEKDAYS:["N", "P", "U", "S", "Č", "P", "S"], STANDALONENARROWWEEKDAYS:["n", "p", "u", "s", "č", "p", "s"], SHORTQUARTERS:["1kv", "2kv", "3kv", "4kv"], QUARTERS:["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d. MMMM y.", "d. MMMM y.", "d. MMM y.", "dd.MM.y."], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} 'u' {0}", 
"{1} 'u' {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_hu = {ERAS:["i. e.", "i. sz."], ERANAMES:["időszámításunk előtt", "időszámításunk szerint"], NARROWMONTHS:["J", "F", "M", "Á", "M", "J", "J", "A", "Sz", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "Á", "M", "J", "J", "A", "Sz", "O", "N", "D"], MONTHS:["január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december"], STANDALONEMONTHS:["január", "február", "március", "április", "május", "június", 
"július", "augusztus", "szeptember", "október", "november", "december"], SHORTMONTHS:["jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec."], STANDALONESHORTMONTHS:["jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec."], WEEKDAYS:["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"], STANDALONEWEEKDAYS:["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"], SHORTWEEKDAYS:["V", 
"H", "K", "Sze", "Cs", "P", "Szo"], STANDALONESHORTWEEKDAYS:["V", "H", "K", "Sze", "Cs", "P", "Szo"], NARROWWEEKDAYS:["V", "H", "K", "Sz", "Cs", "P", "Sz"], STANDALONENARROWWEEKDAYS:["V", "H", "K", "Sz", "Cs", "P", "Sz"], SHORTQUARTERS:["N1", "N2", "N3", "N4"], QUARTERS:["I. negyedév", "II. negyedév", "III. negyedév", "IV. negyedév"], AMPMS:["de.", "du."], DATEFORMATS:["y. MMMM d., EEEE", "y. MMMM d.", "y. MMM d.", "y. MM. dd."], TIMEFORMATS:["H:mm:ss zzzz", "H:mm:ss z", "H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_hy = {ERAS:["մ.թ.ա.", "մ.թ."], ERANAMES:["մ.թ.ա.", "մ.թ."], NARROWMONTHS:["Հ", "Փ", "Մ", "Ա", "Մ", "Հ", "Հ", "Օ", "Ս", "Հ", "Ն", "Դ"], STANDALONENARROWMONTHS:["Հ", "Փ", "Մ", "Ա", "Մ", "Հ", "Հ", "Օ", "Ս", "Հ", "Ն", "Դ"], MONTHS:["հունվարի", "փետրվարի", "մարտի", "ապրիլի", "մայիսի", "հունիսի", "հուլիսի", "օգոստոսի", "սեպտեմբերի", "հոկտեմբերի", "նոյեմբերի", "դեկտեմբերի"], STANDALONEMONTHS:["հունվար", "փետրվար", "մարտ", "ապրիլ", "մայիս", "հունիս", "հուլիս", "օգոստոս", "սեպտեմբեր", 
"հոկտեմբեր", "նոյեմբեր", "դեկտեմբեր"], SHORTMONTHS:["հնվ", "փտվ", "մրտ", "ապր", "մյս", "հնս", "հլս", "օգս", "սեպ", "հոկ", "նոյ", "դեկ"], STANDALONESHORTMONTHS:["հնվ", "փտվ", "մրտ", "ապր", "մյս", "հնս", "հլս", "օգս", "սեպ", "հոկ", "նոյ", "դեկ"], WEEKDAYS:["կիրակի", "երկուշաբթի", "երեքշաբթի", "չորեքշաբթի", "հինգշաբթի", "ուրբաթ", "շաբաթ"], STANDALONEWEEKDAYS:["կիրակի", "երկուշաբթի", "երեքշաբթի", "չորեքշաբթի", "հինգշաբթի", "ուրբաթ", "շաբաթ"], SHORTWEEKDAYS:["կիր", "երկ", "երք", "չրք", "հնգ", "ուր", "շբթ"], 
STANDALONESHORTWEEKDAYS:["կիր", "երկ", "երք", "չրք", "հնգ", "ուր", "շբթ"], NARROWWEEKDAYS:["Կ", "Ե", "Ե", "Չ", "Հ", "Ու", "Շ"], STANDALONENARROWWEEKDAYS:["Կ", "Ե", "Ե", "Չ", "Հ", "Ու", "Շ"], SHORTQUARTERS:["1-ին եռմս.", "2-րդ եռմս.", "3-րդ եռմս.", "4-րդ եռմս."], QUARTERS:["1-ին եռամսյակ", "2-րդ եռամսյակ", "3-րդ եռամսյակ", "4-րդ եռամսյակ"], AMPMS:["կեսօրից առաջ", "կեսօրից հետո"], DATEFORMATS:["yթ. MMMM d, EEEE", "dd MMMM, yթ.", "dd MMM, yթ.", "dd.MM.yy"], TIMEFORMATS:["H:mm:ss, zzzz", "H:mm:ss, z", 
"H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_id = {ERAS:["SM", "M"], ERANAMES:["Sebelum Masehi", "M"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"], STANDALONEMONTHS:["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", 
"Desember"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des"], WEEKDAYS:["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], STANDALONEWEEKDAYS:["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], SHORTWEEKDAYS:["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"], STANDALONESHORTWEEKDAYS:["Min", "Sen", "Sel", "Rab", "Kam", 
"Jum", "Sab"], NARROWWEEKDAYS:["M", "S", "S", "R", "K", "J", "S"], STANDALONENARROWWEEKDAYS:["M", "S", "S", "R", "K", "J", "S"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["Kuartal ke-1", "Kuartal ke-2", "Kuartal ke-3", "Kuartal ke-4"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, dd MMMM y", "d MMMM y", "d MMM y", "dd/MM/yy"], TIMEFORMATS:["HH.mm.ss zzzz", "HH.mm.ss z", "HH.mm.ss", "HH.mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_in = {ERAS:["SM", "M"], ERANAMES:["Sebelum Masehi", "M"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"], STANDALONEMONTHS:["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", 
"Desember"], SHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des"], WEEKDAYS:["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], STANDALONEWEEKDAYS:["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], SHORTWEEKDAYS:["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"], STANDALONESHORTWEEKDAYS:["Min", "Sen", "Sel", "Rab", "Kam", 
"Jum", "Sab"], NARROWWEEKDAYS:["M", "S", "S", "R", "K", "J", "S"], STANDALONENARROWWEEKDAYS:["M", "S", "S", "R", "K", "J", "S"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["Kuartal ke-1", "Kuartal ke-2", "Kuartal ke-3", "Kuartal ke-4"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, dd MMMM y", "d MMMM y", "d MMM y", "dd/MM/yy"], TIMEFORMATS:["HH.mm.ss zzzz", "HH.mm.ss z", "HH.mm.ss", "HH.mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_is = {ERAS:["f.Kr.", "e.Kr."], ERANAMES:["fyrir Krist", "eftir Krist"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "Á", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "Á", "S", "O", "N", "D"], MONTHS:["janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember"], STANDALONEMONTHS:["janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", 
"desember"], SHORTMONTHS:["jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des."], STANDALONESHORTMONTHS:["jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des."], WEEKDAYS:["sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"], STANDALONEWEEKDAYS:["sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"], SHORTWEEKDAYS:["sun.", "mán.", 
"þri.", "mið.", "fim.", "fös.", "lau."], STANDALONESHORTWEEKDAYS:["sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."], NARROWWEEKDAYS:["S", "M", "Þ", "M", "F", "F", "L"], STANDALONENARROWWEEKDAYS:["S", "M", "Þ", "M", "F", "F", "L"], SHORTQUARTERS:["F1", "F2", "F3", "F4"], QUARTERS:["1. fjórðungur", "2. fjórðungur", "3. fjórðungur", "4. fjórðungur"], AMPMS:["f.h.", "e.h."], DATEFORMATS:["EEEE, d. MMMM y", "d. MMMM y", "d. MMM y", "d.M.y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", 
"HH:mm"], DATETIMEFORMATS:["{1} 'kl.' {0}", "{1} 'kl.' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_it = {ERAS:["aC", "dC"], ERANAMES:["a.C.", "d.C."], NARROWMONTHS:["G", "F", "M", "A", "M", "G", "L", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["G", "F", "M", "A", "M", "G", "L", "A", "S", "O", "N", "D"], MONTHS:["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre"], STANDALONEMONTHS:["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", 
"Novembre", "Dicembre"], SHORTMONTHS:["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic"], STANDALONESHORTMONTHS:["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic"], WEEKDAYS:["domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"], STANDALONEWEEKDAYS:["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"], SHORTWEEKDAYS:["dom", "lun", "mar", "mer", "gio", "ven", "sab"], STANDALONESHORTWEEKDAYS:["dom", 
"lun", "mar", "mer", "gio", "ven", "sab"], NARROWWEEKDAYS:["D", "L", "M", "M", "G", "V", "S"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "M", "G", "V", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1º trimestre", "2º trimestre", "3º trimestre", "4º trimestre"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "dd MMM y", "dd/MM/yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_iw = {ERAS:["לפנה״ס", "לספירה"], ERANAMES:["לפני הספירה", "לספירה"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"], STANDALONEMONTHS:["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"], 
SHORTMONTHS:["ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳"], STANDALONESHORTMONTHS:["ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳"], WEEKDAYS:["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "יום שבת"], STANDALONEWEEKDAYS:["יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "יום שבת"], SHORTWEEKDAYS:["יום א׳", "יום ב׳", "יום ג׳", "יום ד׳", "יום ה׳", "יום ו׳", 
"שבת"], STANDALONESHORTWEEKDAYS:["יום א׳", "יום ב׳", "יום ג׳", "יום ד׳", "יום ה׳", "יום ו׳", "שבת"], NARROWWEEKDAYS:["א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"], STANDALONENARROWWEEKDAYS:["א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"], SHORTQUARTERS:["רבעון 1", "רבעון 2", "רבעון 3", "רבעון 4"], QUARTERS:["רבעון 1", "רבעון 2", "רבעון 3", "רבעון 4"], AMPMS:["לפנה״צ", "אחה״צ"], DATEFORMATS:["EEEE, d בMMMM y", "d בMMMM y", "d בMMM y", "d.M.y"], TIMEFORMATS:["H:mm:ss zzzz", "H:mm:ss z", "H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1} בשעה {0}", 
"{1} בשעה {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[4, 5], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_ja = {ERAS:["紀元前", "西暦"], ERANAMES:["紀元前", "西暦"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], STANDALONEMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], SHORTMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", 
"12月"], STANDALONESHORTMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], WEEKDAYS:["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"], STANDALONEWEEKDAYS:["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"], SHORTWEEKDAYS:["日", "月", "火", "水", "木", "金", "土"], STANDALONESHORTWEEKDAYS:["日", "月", "火", "水", "木", "金", "土"], NARROWWEEKDAYS:["日", "月", "火", "水", "木", "金", "土"], STANDALONENARROWWEEKDAYS:["日", "月", "火", "水", "木", "金", "土"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], 
QUARTERS:["第1四半期", "第2四半期", "第3四半期", "第4四半期"], AMPMS:["午前", "午後"], DATEFORMATS:["y年M月d日EEEE", "y年M月d日", "y/MM/dd", "y/MM/dd"], TIMEFORMATS:["H時mm分ss秒 zzzz", "H:mm:ss z", "H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_ka = {ERAS:["ძვ. წ.", "ახ. წ."], ERANAMES:["ძველი წელთაღრიცხვით", "ახალი წელთაღრიცხვით"], NARROWMONTHS:["ი", "თ", "მ", "ა", "მ", "ი", "ი", "ა", "ს", "ო", "ნ", "დ"], STANDALONENARROWMONTHS:["ი", "თ", "მ", "ა", "მ", "ი", "ი", "ა", "ს", "ო", "ნ", "დ"], MONTHS:["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი"], STANDALONEMONTHS:["იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", 
"აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი"], SHORTMONTHS:["იან", "თებ", "მარ", "აპრ", "მაი", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოე", "დეკ"], STANDALONESHORTMONTHS:["იან", "თებ", "მარ", "აპრ", "მაი", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოე", "დეკ"], WEEKDAYS:["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"], STANDALONEWEEKDAYS:["კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"], SHORTWEEKDAYS:["კვი", "ორშ", "სამ", 
"ოთხ", "ხუთ", "პარ", "შაბ"], STANDALONESHORTWEEKDAYS:["კვი", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"], NARROWWEEKDAYS:["კ", "ო", "ს", "ო", "ხ", "პ", "შ"], STANDALONENARROWWEEKDAYS:["კ", "ო", "ს", "ო", "ხ", "პ", "შ"], SHORTQUARTERS:["I კვ.", "II კვ.", "III კვ.", "IV კვ."], QUARTERS:["I კვარტალი", "II კვარტალი", "III კვარტალი", "IV კვარტალი"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, dd MMMM, y", "d MMMM, y", "d MMM, y", "dd.MM.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], 
DATETIMEFORMATS:["{1} {0}", "{1}, {0}", "{1} {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_kk = {ERAS:["б.з.д.", "б.з."], ERANAMES:["Біздің заманымызға дейін", "Біздің заманымыз"], NARROWMONTHS:["Қ", "А", "Н", "С", "М", "М", "Ш", "Т", "Қ", "Қ", "Қ", "Ж"], STANDALONENARROWMONTHS:["Қ", "А", "Н", "С", "М", "М", "Ш", "Т", "Қ", "Қ", "Қ", "Ж"], MONTHS:["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан"], STANDALONEMONTHS:["қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", 
"қазан", "қараша", "желтоқсан"], SHORTMONTHS:["қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "желт."], STANDALONESHORTMONTHS:["қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "желт."], WEEKDAYS:["жексенбі", "дүйсенбі", "сейсенбі", "сәрсенбі", "бейсенбі", "жұма", "сенбі"], STANDALONEWEEKDAYS:["жексенбі", "дүйсенбі", "сейсенбі", "сәрсенбі", "бейсенбі", "жұма", "сенбі"], SHORTWEEKDAYS:["жек", "дүй", "сей", "сәр", "бей", 
"жұма", "сен"], STANDALONESHORTWEEKDAYS:["жек", "дүй", "сей", "сәр", "бей", "жұма", "сб."], NARROWWEEKDAYS:["Ж", "Д", "С", "С", "Б", "Ж", "С"], STANDALONENARROWWEEKDAYS:["Ж", "Д", "С", "С", "Б", "Ж", "С"], SHORTQUARTERS:["Т1", "Т2", "Т3", "Т4"], QUARTERS:["1-інші тоқсан", "2-інші тоқсан", "3-інші тоқсан", "4-інші тоқсан"], AMPMS:["таңертеңгі", "түстен кейінгі"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "y, dd-MMM", "dd/MM/yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_km = {ERAS:["មុន គ.ស.", "គ.ស."], ERANAMES:["មុន​គ្រិស្តសករាជ", "គ្រិស្តសករាជ"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ"], STANDALONEMONTHS:["មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", 
"ធ្នូ"], SHORTMONTHS:["មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ"], STANDALONESHORTMONTHS:["មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ"], WEEKDAYS:["អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", "សៅរ៍"], STANDALONEWEEKDAYS:["អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", "សៅរ៍"], SHORTWEEKDAYS:["អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", 
"សៅរ៍"], STANDALONESHORTWEEKDAYS:["អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", "សៅរ៍"], NARROWWEEKDAYS:["1", "2", "3", "4", "5", "6", "7"], STANDALONENARROWWEEKDAYS:["1", "2", "3", "4", "5", "6", "7"], SHORTQUARTERS:["ត្រីមាសទី ១", "ត្រីមាសទី ២", "ត្រីមាសទី ៣", "ត្រីមាសទី ៤"], QUARTERS:["ត្រីមាសទី ១", "ត្រីមាសទី ២", "ត្រីមាសទី ៣", "ត្រីមាសទី ៤"], AMPMS:["ព្រឹក", "ល្ងាច"], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", 
"h:mm a"], DATETIMEFORMATS:["{1} នៅ {0}", "{1} នៅ {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_kn = {ERAS:["ಕ್ರಿ.ಪೂ", "ಕ್ರಿ.ಶ"], ERANAMES:["ಕ್ರಿಸ್ತ ಪೂರ್ವ", "ಕ್ರಿಸ್ತ ಶಕ"], NARROWMONTHS:["ಜ", "ಫೆ", "ಮಾ", "ಏ", "ಮೇ", "ಜೂ", "ಜು", "ಆ", "ಸೆ", "ಅ", "ನ", "ಡಿ"], STANDALONENARROWMONTHS:["ಜ", "ಫೆ", "ಮಾ", "ಏ", "ಮೇ", "ಜೂ", "ಜು", "ಆ", "ಸೆ", "ಅ", "ನ", "ಡಿ"], MONTHS:["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಏಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟೆಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್"], STANDALONEMONTHS:["ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಏಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟೆಂಬರ್", 
"ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್"], SHORTMONTHS:["ಜನ", "ಫೆಬ್ರ", "ಮಾರ್ಚ್", "ಏಪ್ರಿ", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗ", "ಸೆಪ್ಟೆಂ", "ಅಕ್ಟೋ", "ನವೆಂ", "ಡಿಸೆಂ"], STANDALONESHORTMONTHS:["ಜನ", "ಫೆಬ್ರ", "ಮಾರ್ಚ್", "ಏಪ್ರಿ", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗ", "ಸೆಪ್ಟೆಂ", "ಅಕ್ಟೋ", "ನವೆಂ", "ಡಿಸೆಂ"], WEEKDAYS:["ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"], STANDALONEWEEKDAYS:["ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"], SHORTWEEKDAYS:["ಭಾನು", "ಸೋಮ", "ಮಂಗಳ", "ಬುಧ", "ಗುರು", 
"ಶುಕ್ರ", "ಶನಿ"], STANDALONESHORTWEEKDAYS:["ಭಾನು", "ಸೋಮ", "ಮಂಗಳ", "ಬುಧ", "ಗುರು", "ಶುಕ್ರ", "ಶನಿ"], NARROWWEEKDAYS:["ಭಾ", "ಸೋ", "ಮಂ", "ಬು", "ಗು", "ಶು", "ಶ"], STANDALONENARROWWEEKDAYS:["ಭಾ", "ಸೋ", "ಮಂ", "ಬು", "ಗು", "ಶು", "ಶ"], SHORTQUARTERS:["ತ್ರೈ 1", "ತ್ರೈ 2", "ತ್ರೈ 3", "ತ್ರೈ 4"], QUARTERS:["1ನೇ ತ್ರೈಮಾಸಿಕ", "2ನೇ ತ್ರೈಮಾಸಿಕ", "3ನೇ ತ್ರೈಮಾಸಿಕ", "4ನೇ ತ್ರೈಮಾಸಿಕ"], AMPMS:["ಪೂರ್ವಾಹ್ನ", "ಅಪರಾಹ್ನ"], DATEFORMATS:["EEEE, MMMM d, y", "MMMM d, y", "MMM d, y", "M/d/yy"], TIMEFORMATS:["hh:mm:ss a zzzz", "hh:mm:ss a z", 
"hh:mm:ss a", "hh:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_ko = {ERAS:["기원전", "서기"], ERANAMES:["기원전", "서기"], NARROWMONTHS:["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], STANDALONENARROWMONTHS:["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], MONTHS:["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], STANDALONEMONTHS:["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], SHORTMONTHS:["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", 
"9월", "10월", "11월", "12월"], STANDALONESHORTMONTHS:["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"], WEEKDAYS:["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"], STANDALONEWEEKDAYS:["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"], SHORTWEEKDAYS:["일", "월", "화", "수", "목", "금", "토"], STANDALONESHORTWEEKDAYS:["일", "월", "화", "수", "목", "금", "토"], NARROWWEEKDAYS:["일", "월", "화", "수", "목", "금", "토"], STANDALONENARROWWEEKDAYS:["일", "월", "화", "수", "목", "금", "토"], SHORTQUARTERS:["1분기", 
"2분기", "3분기", "4분기"], QUARTERS:["제 1/4분기", "제 2/4분기", "제 3/4분기", "제 4/4분기"], AMPMS:["오전", "오후"], DATEFORMATS:["y년 M월 d일 EEEE", "y년 M월 d일", "y. M. d.", "yy. M. d."], TIMEFORMATS:["a h시 m분 s초 zzzz", "a h시 m분 s초 z", "a h:mm:ss", "a h:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_ky = {ERAS:["б.з.ч.", "б.з."], ERANAMES:["биздин заманга чейин", "биздин заман"], NARROWMONTHS:["Я", "Ф", "М", "А", "М", "И", "И", "А", "С", "О", "Н", "Д"], STANDALONENARROWMONTHS:["Я", "Ф", "М", "А", "М", "И", "И", "А", "С", "О", "Н", "Д"], MONTHS:["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь"], STANDALONEMONTHS:["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", 
"Ноябрь", "Декабрь"], SHORTMONTHS:["янв.", "фев.", "мар.", "апр.", "май", "июн.", "июл.", "авг.", "сен.", "окт.", "ноя.", "дек."], STANDALONESHORTMONTHS:["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"], WEEKDAYS:["жекшемби", "дүйшөмбү", "шейшемби", "шаршемби", "бейшемби", "жума", "ишемби"], STANDALONEWEEKDAYS:["жекшемби", "дүйшөмбү", "шейшемби", "шаршемби", "бейшемби", "жума", "ишемби"], SHORTWEEKDAYS:["жек.", "дүй.", "шейш.", "шарш.", "бейш.", "жума", "ишм."], 
STANDALONESHORTWEEKDAYS:["жек.", "дүй.", "шейш.", "шарш.", "бейш.", "жума", "ишм."], NARROWWEEKDAYS:["Ж", "Д", "Ш", "Ш", "Б", "Ж", "И"], STANDALONENARROWWEEKDAYS:["Ж", "Д", "Ш", "Ш", "Б", "Ж", "И"], SHORTQUARTERS:["1-чей.", "2-чей.", "3-чей.", "4-чей."], QUARTERS:["1-чейрек", "2-чейрек", "3-чейрек", "4-чейрек"], AMPMS:["таңкы", "түштөн кийин"], DATEFORMATS:["EEEE, d-MMMM, y-'ж'.", "y MMMM d", "y MMM d", "dd.MM.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_ln = {ERAS:["libóso ya", "nsima ya Y"], ERANAMES:["Yambo ya Yézu Krís", "Nsima ya Yézu Krís"], NARROWMONTHS:["y", "f", "m", "a", "m", "y", "y", "a", "s", "ɔ", "n", "d"], STANDALONENARROWMONTHS:["y", "f", "m", "a", "m", "y", "y", "a", "s", "ɔ", "n", "d"], MONTHS:["sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", 
"sánzá ya zómi na míbalé"], STANDALONEMONTHS:["sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé"], SHORTMONTHS:["yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb"], STANDALONESHORTMONTHS:["yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb"], WEEKDAYS:["eyenga", 
"mokɔlɔ mwa yambo", "mokɔlɔ mwa míbalé", "mokɔlɔ mwa mísáto", "mokɔlɔ ya mínéi", "mokɔlɔ ya mítáno", "mpɔ́sɔ"], STANDALONEWEEKDAYS:["eyenga", "mokɔlɔ mwa yambo", "mokɔlɔ mwa míbalé", "mokɔlɔ mwa mísáto", "mokɔlɔ ya mínéi", "mokɔlɔ ya mítáno", "mpɔ́sɔ"], SHORTWEEKDAYS:["eye", "ybo", "mbl", "mst", "min", "mtn", "mps"], STANDALONESHORTWEEKDAYS:["eye", "ybo", "mbl", "mst", "min", "mtn", "mps"], NARROWWEEKDAYS:["e", "y", "m", "m", "m", "m", "p"], STANDALONENARROWWEEKDAYS:["e", "y", "m", "m", "m", "m", 
"p"], SHORTQUARTERS:["SM1", "SM2", "SM3", "SM4"], QUARTERS:["sánzá mísáto ya yambo", "sánzá mísáto ya míbalé", "sánzá mísáto ya mísáto", "sánzá mísáto ya mínei"], AMPMS:["ntɔ́ngɔ́", "mpókwa"], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "d/M/y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_lo = {ERAS:["ກ່ອນ ຄ.ສ.", "ຄ.ສ."], ERANAMES:["ກ່ອນຄຣິດສັກກະລາດ", "ຄຣິດສັກກະລາດ"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ"], STANDALONEMONTHS:["ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", 
"ພະຈິກ", "ທັນວາ"], SHORTMONTHS:["ມ.ກ.", "ກ.ພ.", "ມ.ນ.", "ມ.ສ.", "ພ.ພ.", "ມິ.ຖ.", "ກ.ລ.", "ສ.ຫ.", "ກ.ຍ.", "ຕ.ລ.", "ພ.ຈ.", "ທ.ວ."], STANDALONESHORTMONTHS:["ມ.ກ.", "ກ.ພ.", "ມ.ນ.", "ມ.ສ.", "ພ.ພ.", "ມິ.ຖ.", "ກ.ລ.", "ສ.ຫ.", "ກ.ຍ.", "ຕ.ລ.", "ພ.ຈ.", "ທ.ວ."], WEEKDAYS:["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"], STANDALONEWEEKDAYS:["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"], SHORTWEEKDAYS:["ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", 
"ວັນສຸກ", "ວັນເສົາ"], STANDALONESHORTWEEKDAYS:["ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"], NARROWWEEKDAYS:["1", "2", "3", "4", "5", "6", "7"], STANDALONENARROWWEEKDAYS:["ອ", "ຈ", "ອ", "ພ", "ພຫ", "ສຸ", "ສ"], SHORTQUARTERS:["ຕມ1", "ຕມ2", "ຕມ3", "ຕມ4"], QUARTERS:["ໄຕຣມາດ 1", "ໄຕຣມາດ 2", "ໄຕຣມາດ 3", "ໄຕຣມາດ 4"], AMPMS:["ກ່ອນທ່ຽງ", "ຫຼັງທ່ຽງ"], DATEFORMATS:["EEEE ທີ d MMMM G y", "d MMMM y", "d MMM y", "d/M/y"], TIMEFORMATS:["H ໂມງ m ນາທີ ss ວິນາທີ zzzz", "H ໂມງ m ນາທີ ss ວິນາທີ z", "H:mm:ss", 
"H:mm"], DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_lt = {ERAS:["pr. Kr.", "po Kr."], ERANAMES:["prieš Kristų", "po Kristaus"], NARROWMONTHS:["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"], STANDALONENARROWMONTHS:["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"], MONTHS:["sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio"], STANDALONEMONTHS:["sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", 
"rugsėjis", "spalis", "lapkritis", "gruodis"], SHORTMONTHS:["saus.", "vas.", "kov.", "bal.", "geg.", "birž.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod."], STANDALONESHORTMONTHS:["saus.", "vas.", "kov.", "bal.", "geg.", "birž.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod."], WEEKDAYS:["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"], STANDALONEWEEKDAYS:["sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", 
"penktadienis", "šeštadienis"], SHORTWEEKDAYS:["sk", "pr", "an", "tr", "kt", "pn", "št"], STANDALONESHORTWEEKDAYS:["sk", "pr", "an", "tr", "kt", "pn", "št"], NARROWWEEKDAYS:["S", "P", "A", "T", "K", "P", "Š"], STANDALONENARROWWEEKDAYS:["S", "P", "A", "T", "K", "P", "Š"], SHORTQUARTERS:["I k.", "II k.", "III k.", "IV k."], QUARTERS:["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"], AMPMS:["priešpiet", "popiet"], DATEFORMATS:["y 'm'. MMMM d 'd'., EEEE", "y 'm'. MMMM d 'd'.", "y-MM-dd", 
"y-MM-dd"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_lv = {ERAS:["p.m.ē.", "m.ē."], ERANAMES:["pirms mūsu ēras", "mūsu ērā"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris"], STANDALONEMONTHS:["Janvāris", "Februāris", "Marts", "Aprīlis", "Maijs", "Jūnijs", "Jūlijs", "Augusts", 
"Septembris", "Oktobris", "Novembris", "Decembris"], SHORTMONTHS:["janv.", "febr.", "marts", "apr.", "maijs", "jūn.", "jūl.", "aug.", "sept.", "okt.", "nov.", "dec."], STANDALONESHORTMONTHS:["Janv.", "Febr.", "Marts", "Apr.", "Maijs", "Jūn.", "Jūl.", "Aug.", "Sept.", "Okt.", "Nov.", "Dec."], WEEKDAYS:["svētdiena", "pirmdiena", "otrdiena", "trešdiena", "ceturtdiena", "piektdiena", "sestdiena"], STANDALONEWEEKDAYS:["Svētdiena", "Pirmdiena", "Otrdiena", "Trešdiena", "Ceturtdiena", "Piektdiena", "Sestdiena"], 
SHORTWEEKDAYS:["Sv", "Pr", "Ot", "Tr", "Ce", "Pk", "Se"], STANDALONESHORTWEEKDAYS:["Sv", "Pr", "Ot", "Tr", "Ce", "Pk", "Se"], NARROWWEEKDAYS:["S", "P", "O", "T", "C", "P", "S"], STANDALONENARROWWEEKDAYS:["S", "P", "O", "T", "C", "P", "S"], SHORTQUARTERS:["1. cet.", "2. cet.", "3. cet.", "4. cet."], QUARTERS:["1. ceturksnis", "2. ceturksnis", "3. ceturksnis", "4. ceturksnis"], AMPMS:["priekšpusdienā", "pēcpusdienā"], DATEFORMATS:["EEEE, y. 'gada' d. MMMM", "y. 'gada' d. MMMM", "y. 'gada' d. MMM", 
"dd.MM.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_mk = {ERAS:["пр.н.е.", "н.е."], ERANAMES:["пред нашата ера", "од нашата ера"], NARROWMONTHS:["ј", "ф", "м", "а", "м", "ј", "ј", "а", "с", "о", "н", "д"], STANDALONENARROWMONTHS:["ј", "ф", "м", "а", "м", "ј", "ј", "а", "с", "о", "н", "д"], MONTHS:["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември"], STANDALONEMONTHS:["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", 
"ноември", "декември"], SHORTMONTHS:["јан.", "фев.", "мар.", "апр.", "мај", "јун.", "јул.", "авг.", "септ.", "окт.", "ноем.", "дек."], STANDALONESHORTMONTHS:["јан.", "фев.", "мар.", "апр.", "мај", "јун.", "јул.", "авг.", "септ.", "окт.", "ноем.", "дек."], WEEKDAYS:["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"], STANDALONEWEEKDAYS:["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"], SHORTWEEKDAYS:["нед.", "пон.", "вт.", "сре.", "чет.", "пет.", "саб."], 
STANDALONESHORTWEEKDAYS:["нед.", "пон.", "вт.", "сре.", "чет.", "пет.", "саб."], NARROWWEEKDAYS:["н", "п", "в", "с", "ч", "п", "с"], STANDALONENARROWWEEKDAYS:["н", "п", "в", "с", "ч", "п", "с"], SHORTQUARTERS:["јан-мар", "апр-јун", "јул-сеп", "окт-дек"], QUARTERS:["прво тромесечје", "второ тромесечје", "трето тромесечје", "четврто тромесечје"], AMPMS:["претпладне", "попладне"], DATEFORMATS:["EEEE, dd MMMM y", "dd MMMM y", "dd.M.y", "dd.M.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", 
"HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_ml = {ERAS:["ക്രി.മു.", "എഡി"], ERANAMES:["ക്രിസ്‌തുവിന് മുമ്പ്", "ആന്നോ ഡൊമിനി"], NARROWMONTHS:["ജ", "ഫ", "മാ", "ഏ", "മെ", "ജൂ", "ജൂ", "ഓ", "സ", "ഒ", "ന", "ഡി"], STANDALONENARROWMONTHS:["ജ", "ഫ", "മാ", "ഏ", "മേ", "ജൂ", "ജൂ", "ഓ", "സ", "ഒ", "ന", "ഡി"], MONTHS:["ജനുവരി", "ഫെബ്രുവരി", "മാർച്ച്", "ഏപ്രിൽ", "മേയ്", "ജൂൺ", "ജൂലൈ", "ആഗസ്റ്റ്", "സെപ്റ്റംബർ", "ഒക്‌ടോബർ", "നവംബർ", "ഡിസംബർ"], STANDALONEMONTHS:["ജനുവരി", "ഫെബ്രുവരി", "മാർച്ച്", "ഏപ്രിൽ", "മേയ്", "ജൂൺ", "ജൂലൈ", "ആഗസ്റ്റ്", 
"സെപ്റ്റംബർ", "ഒക്‌ടോബർ", "നവംബർ", "ഡിസംബർ"], SHORTMONTHS:["ജനു", "ഫെബ്രു", "മാർ", "ഏപ്രി", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗ", "സെപ്റ്റം", "ഒക്ടോ", "നവം", "ഡിസം"], STANDALONESHORTMONTHS:["ജനു", "ഫെബ്രു", "മാർ", "ഏപ്രി", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗ", "സെപ്റ്റം", "ഒക്ടോ", "നവം", "ഡിസം"], WEEKDAYS:["ഞായറാഴ്‌ച", "തിങ്കളാഴ്‌ച", "ചൊവ്വാഴ്ച", "ബുധനാഴ്‌ച", "വ്യാഴാഴ്‌ച", "വെള്ളിയാഴ്‌ച", "ശനിയാഴ്‌ച"], STANDALONEWEEKDAYS:["ഞായറാഴ്‌ച", "തിങ്കളാഴ്‌ച", "ചൊവ്വാഴ്‌ച", "ബുധനാഴ്‌ച", "വ്യാഴാഴ്‌ച", "വെള്ളിയാഴ്‌ച", "ശനിയാഴ്‌ച"], 
SHORTWEEKDAYS:["ഞായർ", "തിങ്കൾ", "ചൊവ്വ", "ബുധൻ", "വ്യാഴം", "വെള്ളി", "ശനി"], STANDALONESHORTWEEKDAYS:["ഞായർ", "തിങ്കൾ", "ചൊവ്വ", "ബുധൻ", "വ്യാഴം", "വെള്ളി", "ശനി"], NARROWWEEKDAYS:["ഞ", "തി", "ച", "ബു", "വ", "വെ", "ശ"], STANDALONENARROWWEEKDAYS:["ഞ", "തി", "ച", "ബു", "വ", "വെ", "ശ"], SHORTQUARTERS:["ഒന്നാം പാദം", "രണ്ടാം പാദം", "മൂന്നാം പാദം", "നാലാം പാദം"], QUARTERS:["ഒന്നാം പാദം", "രണ്ടാം പാദം", "മൂന്നാം പാദം", "നാലാം പാദം"], AMPMS:["AM", "PM"], DATEFORMATS:["y, MMMM d, EEEE", "y, MMMM d", "y, MMM d", 
"dd/MM/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_mn = {ERAS:["МЭӨ", "МЭ"], ERANAMES:["манай эриний өмнөх", "манай эриний"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["Нэгдүгээр сар", "Хоёрдугаар сар", "Гуравдугаар сар", "Дөрөвдүгээр сар", "Тавдугаар сар", "Зургадугаар сар", "Долдугаар сар", "Наймдугаар сар", "Есдүгээр сар", "Аравдугаар сар", "Арван нэгдүгээр сар", "Арван хоёрдугаар сар"], 
STANDALONEMONTHS:["Нэгдүгээр сар", "Хоёрдугаар сар", "Гуравдугаар сар", "Дөрөвдүгээр сар", "Тавдугаар сар", "Зургадугаар сар", "Долдугаар сар", "Наймдугаар сар", "Есдүгээр сар", "Аравдугаар сар", "Арван нэгдүгээр сар", "Арван хоёрдугаар сар"], SHORTMONTHS:["1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", "9-р сар", "10-р сар", "11-р сар", "12-р сар"], STANDALONESHORTMONTHS:["1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", 
"9-р сар", "10-р сар", "11-р сар", "12-р сар"], WEEKDAYS:["ням", "даваа", "мягмар", "лхагва", "пүрэв", "баасан", "бямба"], STANDALONEWEEKDAYS:["ням", "даваа", "мягмар", "лхагва", "пүрэв", "баасан", "бямба"], SHORTWEEKDAYS:["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"], STANDALONESHORTWEEKDAYS:["Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"], NARROWWEEKDAYS:["1", "2", "3", "4", "5", "6", "7"], STANDALONENARROWWEEKDAYS:["1", "2", "3", "4", "5", "6", "7"], SHORTQUARTERS:["У1", "У2", "У3", "У4"], QUARTERS:["1-р улирал", 
"2-р улирал", "3-р улирал", "4-р улирал"], AMPMS:["ҮӨ", "ҮХ"], DATEFORMATS:["EEEE, y 'оны' MM 'сарын' d", "y 'оны' MM 'сарын' d", "y MMM d", "y-MM-dd"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_mr = {ZERODIGIT:2406, ERAS:["इ. स. पू.", "इ. स."], ERANAMES:["ईसवीसनपूर्व", "ईसवीसन"], NARROWMONTHS:["जा", "फे", "मा", "ए", "मे", "जू", "जु", "ऑ", "स", "ऑ", "नो", "डि"], STANDALONENARROWMONTHS:["जा", "फे", "मा", "ए", "मे", "जू", "जु", "ऑ", "स", "ऑ", "नो", "डि"], MONTHS:["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर"], STANDALONEMONTHS:["जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", 
"ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर"], SHORTMONTHS:["जाने", "फेब्रु", "मार्च", "एप्रि", "मे", "जून", "जुलै", "ऑग", "सप्टें", "ऑक्टो", "नोव्हें", "डिसें"], STANDALONESHORTMONTHS:["जाने", "फेब्रु", "मार्च", "एप्रि", "मे", "जून", "जुलै", "ऑग", "सप्टें", "ऑक्टो", "नोव्हें", "डिसें"], WEEKDAYS:["रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"], STANDALONEWEEKDAYS:["रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"], SHORTWEEKDAYS:["रवि", 
"सोम", "मंगळ", "बुध", "गुरु", "शुक्र", "शनि"], STANDALONESHORTWEEKDAYS:["रवि", "सोम", "मंगळ", "बुध", "गुरु", "शुक्र", "शनि"], NARROWWEEKDAYS:["र", "सो", "मं", "बु", "गु", "शु", "श"], STANDALONENARROWWEEKDAYS:["र", "सो", "मं", "बु", "गु", "शु", "श"], SHORTQUARTERS:["ति१", "ति२", "ति३", "ति४"], QUARTERS:["प्रथम तिमाही", "द्वितीय तिमाही", "तृतीय तिमाही", "चतुर्थ तिमाही"], AMPMS:["म.पू.", "म.उ."], DATEFORMATS:["EEEE, d MMMM, y", "d MMMM, y", "d MMM, y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", 
"h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'रोजी' {0}", "{1} 'रोजी' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_ms = {ERAS:["S.M.", "TM"], ERANAMES:["S.M.", "TM"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"], MONTHS:["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"], STANDALONEMONTHS:["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"], 
SHORTMONTHS:["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis"], WEEKDAYS:["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"], STANDALONEWEEKDAYS:["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"], SHORTWEEKDAYS:["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"], STANDALONESHORTWEEKDAYS:["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"], 
NARROWWEEKDAYS:["A", "I", "S", "R", "K", "J", "S"], STANDALONENARROWWEEKDAYS:["A", "I", "S", "R", "K", "J", "S"], SHORTQUARTERS:["S1", "S2", "S3", "S4"], QUARTERS:["Suku pertama", "Suku Ke-2", "Suku Ke-3", "Suku Ke-4"], AMPMS:["PG", "PTG"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "d/MM/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_mt = {ERAS:["QK", "WK"], ERANAMES:["Qabel Kristu", "Wara Kristu"], NARROWMONTHS:["J", "F", "M", "A", "M", "Ġ", "L", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["Jn", "Fr", "Mz", "Ap", "Mj", "Ġn", "Lj", "Aw", "St", "Ob", "Nv", "Dċ"], MONTHS:["Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awwissu", "Settembru", "Ottubru", "Novembru", "Diċembru"], STANDALONEMONTHS:["Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awwissu", "Settembru", 
"Ottubru", "Novembru", "Diċembru"], SHORTMONTHS:["Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Aww", "Set", "Ott", "Nov", "Diċ"], STANDALONESHORTMONTHS:["Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Aww", "Set", "Ott", "Nov", "Diċ"], WEEKDAYS:["Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"], STANDALONEWEEKDAYS:["Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"], SHORTWEEKDAYS:["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"], 
STANDALONESHORTWEEKDAYS:["Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"], NARROWWEEKDAYS:["Ħ", "T", "T", "E", "Ħ", "Ġ", "S"], STANDALONENARROWWEEKDAYS:["Ħd", "Tn", "Tl", "Er", "Ħm", "Ġm", "Sb"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["1el kwart", "2ni kwart", "3et kwart", "4ba’ kwart"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d 'ta'’ MMMM y", "d 'ta'’ MMMM y", "dd MMM y", "dd/MM/y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", 
"{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_my = {ZERODIGIT:4160, ERAS:["ဘီစီ", "အေဒီ"], ERANAMES:["ခရစ်တော် မပေါ်မီကာလ", "ခရစ်တော် ပေါ်ထွန်းပြီးကာလ"], NARROWMONTHS:["ဇ", "ဖ", "မ", "ဧ", "မ", "ဇ", "ဇ", "ဩ", "စ", "အ", "န", "ဒ"], STANDALONENARROWMONTHS:["ဇ", "ဖ", "မ", "ဧ", "မ", "ဇ", "ဇ", "ဩ", "စ", "အ", "န", "ဒ"], MONTHS:["ဇန်နဝါရီ", "ဖေဖော်ဝါရီ", "မတ်", "ဧပြီ", "မေ", "ဇွန်", "ဇူလိုင်", "ဩဂုတ်", "စက်တင်ဘာ", "အောက်တိုဘာ", "နိုဝင်ဘာ", "ဒီဇင်ဘာ"], STANDALONEMONTHS:["ဇန်နဝါရီ", "ဖေဖော်ဝါရီ", "မတ်", "ဧပြီ", "မေ", "ဇွန်", "ဇူလိုင်", 
"ဩဂုတ်", "စက်တင်ဘာ", "အောက်တိုဘာ", "နိုဝင်ဘာ", "ဒီဇင်ဘာ"], SHORTMONTHS:["ဇန်", "ဖေ", "မတ်", "ဧပြီ", "မေ", "ဇွန်", "ဇူ", "ဩ", "စက်", "အောက်", "နို", "ဒီ"], STANDALONESHORTMONTHS:["ဇန်", "ဖေ", "မတ်", "ဧပြီ", "မေ", "ဇွန်", "ဇူ", "ဩ", "စက်", "အောက်", "နို", "ဒီ"], WEEKDAYS:["တနင်္ဂနွေ", "တနင်္လာ", "အင်္ဂါ", "ဗုဒ္ဓဟူး", "ကြာသပတေး", "သောကြာ", "စနေ"], STANDALONEWEEKDAYS:["တနင်္ဂနွေ", "တနင်္လာ", "အင်္ဂါ", "ဗုဒ္ဓဟူး", "ကြာသပတေး", "သောကြာ", "စနေ"], SHORTWEEKDAYS:["တနင်္ဂနွေ", "တနင်္လာ", "အင်္ဂါ", "ဗုဒ္ဓဟူး", 
"ကြာသပတေး", "သောကြာ", "စနေ"], STANDALONESHORTWEEKDAYS:["တနင်္ဂနွေ", "တနင်္လာ", "အင်္ဂါ", "ဗုဒ္ဓဟူး", "ကြာသပတေး", "သောကြာ", "စနေ"], NARROWWEEKDAYS:["တ", "တ", "အ", "ဗ", "က", "သ", "စ"], STANDALONENARROWWEEKDAYS:["တ", "တ", "အ", "ဗ", "က", "သ", "စ"], SHORTQUARTERS:["ပထမ သုံးလပတ်", "ဒုတိယ သုံးလပတ်", "တတိယ သုံးလပတ်", "စတုတ္ထ သုံးလပတ်"], QUARTERS:["ပထမ သုံးလပတ်", "ဒုတိယ သုံးလပတ်", "တတိယ သုံးလပတ်", "စတုတ္ထ သုံးလပတ်"], AMPMS:["နံနက်", "ညနေ"], DATEFORMATS:["EEEE၊ dd MMMM y", "d MMMM y", "d MMM y", "dd-MM-yy"], 
TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1}မှာ {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_nb = {ERAS:["f.Kr.", "e.Kr."], ERANAMES:["f.Kr.", "e.Kr."], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"], STANDALONEMONTHS:["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"], 
SHORTMONTHS:["jan.", "feb.", "mar.", "apr.", "mai", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "des."], STANDALONESHORTMONTHS:["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"], WEEKDAYS:["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"], STANDALONEWEEKDAYS:["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"], SHORTWEEKDAYS:["søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør."], STANDALONESHORTWEEKDAYS:["sø.", "ma.", 
"ti.", "on.", "to.", "fr.", "lø."], NARROWWEEKDAYS:["S", "M", "T", "O", "T", "F", "L"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "O", "T", "F", "L"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE d. MMMM y", "d. MMMM y", "d. MMM y", "dd.MM.y"], TIMEFORMATS:["HH.mm.ss zzzz", "HH.mm.ss z", "HH.mm.ss", "HH.mm"], DATETIMEFORMATS:["{1} {0}", "{1} 'kl.' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_ne = {ZERODIGIT:2406, ERAS:["ईसा पूर्व", "सन्"], ERANAMES:["ईसा पूर्व", "सन्"], NARROWMONTHS:["१", "२", "३", "४", "५", "६", "७", "८", "९", "१०", "११", "१२"], STANDALONENARROWMONTHS:["१", "२", "३", "४", "५", "६", "७", "८", "९", "१०", "११", "१२"], MONTHS:["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मई", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर"], STANDALONEMONTHS:["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", 
"अक्टोबर", "नोभेम्बर", "डिसेम्बर"], SHORTMONTHS:["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर"], STANDALONESHORTMONTHS:["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर"], WEEKDAYS:["आइतबार", "सोमबार", "मङ्गलबार", "बुधबार", "बिहिबार", "शुक्रबार", "शनिबार"], STANDALONEWEEKDAYS:["आइतबार", "सोमबार", "मङ्गलबार", "बुधबार", "बिहिबार", "शुक्रबार", "शनिबार"], SHORTWEEKDAYS:["आइत", 
"सोम", "मङ्गल", "बुध", "बिही", "शुक्र", "शनि"], STANDALONESHORTWEEKDAYS:["आइत", "सोम", "मङ्गल", "बुध", "बिही", "शुक्र", "शनि"], NARROWWEEKDAYS:["आ", "सो", "म", "बु", "बि", "शु", "श"], STANDALONENARROWWEEKDAYS:["आ", "सो", "म", "बु", "बि", "शु", "श"], SHORTQUARTERS:["पहिलो सत्र", "दोस्रो सत्र", "तेस्रो सत्र", "चौथो सत्र"], QUARTERS:["पहिलो सत्र", "दोस्रो सत्र", "तेस्रो सत्र", "चौथो सत्र"], AMPMS:["पूर्वाह्न", "अपराह्न"], DATEFORMATS:["y MMMM d, EEEE", "y MMMM d", "y MMM d", "y-MM-dd"], TIMEFORMATS:["HH:mm:ss zzzz", 
"HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_nl = {ERAS:["v.Chr.", "n.Chr."], ERANAMES:["voor Christus", "na Christus"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"], STANDALONEMONTHS:["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", 
"Oktober", "November", "December"], SHORTMONTHS:["jan.", "feb.", "mrt.", "apr.", "mei", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec."], STANDALONESHORTMONTHS:["Jan.", "Feb.", "Mrt.", "Apr.", "Mei", "Jun.", "Jul.", "Aug.", "Sep.", "Okt.", "Nov.", "Dec."], WEEKDAYS:["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"], STANDALONEWEEKDAYS:["Zondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag", "Zaterdag"], SHORTWEEKDAYS:["zo", "ma", "di", "wo", "do", 
"vr", "za"], STANDALONESHORTWEEKDAYS:["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"], NARROWWEEKDAYS:["Z", "M", "D", "W", "D", "V", "Z"], STANDALONENARROWWEEKDAYS:["Z", "M", "D", "W", "D", "V", "Z"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["1e kwartaal", "2e kwartaal", "3e kwartaal", "4e kwartaal"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "dd-MM-yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", 
"{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_no = {ERAS:["f.Kr.", "e.Kr."], ERANAMES:["f.Kr.", "e.Kr."], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"], STANDALONEMONTHS:["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"], 
SHORTMONTHS:["jan.", "feb.", "mar.", "apr.", "mai", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "des."], STANDALONESHORTMONTHS:["jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des"], WEEKDAYS:["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"], STANDALONEWEEKDAYS:["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"], SHORTWEEKDAYS:["søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør."], STANDALONESHORTWEEKDAYS:["sø.", "ma.", 
"ti.", "on.", "to.", "fr.", "lø."], NARROWWEEKDAYS:["S", "M", "T", "O", "T", "F", "L"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "O", "T", "F", "L"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE d. MMMM y", "d. MMMM y", "d. MMM y", "dd.MM.y"], TIMEFORMATS:["HH.mm.ss zzzz", "HH.mm.ss z", "HH.mm.ss", "HH.mm"], DATETIMEFORMATS:["{1} {0}", "{1} 'kl.' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_no_NO = goog.i18n.DateTimeSymbols_no;
goog.i18n.DateTimeSymbols_or = {ERAS:["BCE", "CE"], ERANAMES:["BCE", "CE"], NARROWMONTHS:["ଜା", "ଫେ", "ମା", "ଅ", "ମଇ", "ଜୁ", "ଜୁ", "ଅ", "ସେ", "ଅ", "ନ", "ଡି"], STANDALONENARROWMONTHS:["ଜା", "ଫେ", "ମା", "ଅ", "ମଇ", "ଜୁ", "ଜୁ", "ଅ", "ସେ", "ଅ", "ନ", "ଡି"], MONTHS:["ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର"], STANDALONEMONTHS:["ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", 
"ଡିସେମ୍ବର"], SHORTMONTHS:["ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର"], STANDALONESHORTMONTHS:["ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର"], WEEKDAYS:["ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"], STANDALONEWEEKDAYS:["ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"], SHORTWEEKDAYS:["ରବି", "ସୋମ", 
"ମଙ୍ଗଳ", "ବୁଧ", "ଗୁରୁ", "ଶୁକ୍ର", "ଶନି"], STANDALONESHORTWEEKDAYS:["ରବି", "ସୋମ", "ମଙ୍ଗଳ", "ବୁଧ", "ଗୁରୁ", "ଶୁକ୍ର", "ଶନି"], NARROWWEEKDAYS:["ର", "ସୋ", "ମ", "ବୁ", "ଗୁ", "ଶୁ", "ଶ"], STANDALONENARROWWEEKDAYS:["ର", "ସୋ", "ମ", "ବୁ", "ଗୁ", "ଶୁ", "ଶ"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["Q1", "Q2", "Q3", "Q4"], AMPMS:["am", "pm"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "d-M-yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_pa = {ERAS:["ਈ. ਪੂ.", "ਸੰਨ"], ERANAMES:["ਈਸਵੀ ਪੂਰਵ", "ਈਸਵੀ ਸੰਨ"], NARROWMONTHS:["ਜ", "ਫ਼", "ਮਾ", "ਅ", "ਮ", "ਜੂ", "ਜੁ", "ਅ", "ਸ", "ਅ", "ਨ", "ਦ"], STANDALONENARROWMONTHS:["ਜ", "ਫ਼", "ਮਾ", "ਅ", "ਮ", "ਜੂ", "ਜੁ", "ਅ", "ਸ", "ਅ", "ਨ", "ਦ"], MONTHS:["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ"], STANDALONEMONTHS:["ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ"], SHORTMONTHS:["ਜਨ", 
"ਫ਼ਰ", "ਮਾਰਚ", "ਅਪ੍ਰੈ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾ", "ਅਗ", "ਸਤੰ", "ਅਕਤੂ", "ਨਵੰ", "ਦਸੰ"], STANDALONESHORTMONTHS:["ਜਨ", "ਫ਼ਰ", "ਮਾਰਚ", "ਅਪ੍ਰੈ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾ", "ਅਗ", "ਸਤੰ", "ਅਕਤੂ", "ਨਵੰ", "ਦਸੰ"], WEEKDAYS:["ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"], STANDALONEWEEKDAYS:["ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"], SHORTWEEKDAYS:["ਐਤ", "ਸੋਮ", "ਮੰਗਲ", "ਬੁੱਧ", "ਵੀਰ", "ਸ਼ੁੱਕਰ", "ਸ਼ਨਿੱਚਰ"], STANDALONESHORTWEEKDAYS:["ਐਤ", "ਸੋਮ", "ਮੰਗਲ", "ਬੁੱਧ", 
"ਵੀਰ", "ਸ਼ੁੱਕਰ", "ਸ਼ਨਿੱਚਰ"], NARROWWEEKDAYS:["ਐ", "ਸੋ", "ਮੰ", "ਬੁੱ", "ਵੀ", "ਸ਼ੁੱ", "ਸ਼"], STANDALONENARROWWEEKDAYS:["ਐ", "ਸੋ", "ਮੰ", "ਬੁੱ", "ਵੀ", "ਸ਼ੁੱ", "ਸ਼"], SHORTQUARTERS:["ਤਿਮਾਹੀ1", "ਤਿਮਾਹੀ2", "ਤਿਮਾਹੀ3", "ਤਿਮਾਹੀ4"], QUARTERS:["ਪਹਿਲੀ ਤਿਮਾਹੀ", "ਦੂਜੀ ਤਿਮਾਹੀ", "ਤੀਜੀ ਤਿਮਾਹੀ", "ਚੌਥੀ ਤਿਮਾਹੀ"], AMPMS:["ਪੂ.ਦੁ.", "ਬਾ.ਦੁ."], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1}, {0}", 
"{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_pl = {ERAS:["p.n.e.", "n.e."], ERANAMES:["p.n.e.", "n.e."], NARROWMONTHS:["s", "l", "m", "k", "m", "c", "l", "s", "w", "p", "l", "g"], STANDALONENARROWMONTHS:["s", "l", "m", "k", "m", "c", "l", "s", "w", "p", "l", "g"], MONTHS:["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia"], STANDALONEMONTHS:["styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", 
"październik", "listopad", "grudzień"], SHORTMONTHS:["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru"], STANDALONESHORTMONTHS:["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru"], WEEKDAYS:["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"], STANDALONEWEEKDAYS:["niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"], SHORTWEEKDAYS:["niedz.", "pon.", "wt.", "śr.", "czw.", "pt.", "sob."], 
STANDALONESHORTWEEKDAYS:["niedz.", "pon.", "wt.", "śr.", "czw.", "pt.", "sob."], NARROWWEEKDAYS:["N", "P", "W", "Ś", "C", "P", "S"], STANDALONENARROWWEEKDAYS:["N", "P", "W", "Ś", "C", "P", "S"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["I kwartał", "II kwartał", "III kwartał", "IV kwartał"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "dd.MM.y", "dd.MM.y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1}, {0}", 
"{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_pt = {ERAS:["a.C.", "d.C."], ERANAMES:["Antes de Cristo", "Ano do Senhor"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"], STANDALONEMONTHS:["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", 
"outubro", "novembro", "dezembro"], SHORTMONTHS:["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"], STANDALONESHORTMONTHS:["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"], WEEKDAYS:["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"], STANDALONEWEEKDAYS:["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"], SHORTWEEKDAYS:["dom", "seg", 
"ter", "qua", "qui", "sex", "sáb"], STANDALONESHORTWEEKDAYS:["dom", "seg", "ter", "qua", "qui", "sex", "sáb"], NARROWWEEKDAYS:["D", "S", "T", "Q", "Q", "S", "S"], STANDALONENARROWWEEKDAYS:["D", "S", "T", "Q", "Q", "S", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1º trimestre", "2º trimestre", "3º trimestre", "4º trimestre"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d 'de' MMMM 'de' y", "d 'de' MMMM 'de' y", "d 'de' MMM 'de' y", "dd/MM/yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", 
"HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_pt_BR = goog.i18n.DateTimeSymbols_pt;
goog.i18n.DateTimeSymbols_pt_PT = {ERAS:["a.C.", "d.C."], ERANAMES:["antes de Cristo", "depois de Cristo"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"], STANDALONEMONTHS:["janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", 
"outubro", "novembro", "dezembro"], SHORTMONTHS:["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"], STANDALONESHORTMONTHS:["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"], WEEKDAYS:["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"], STANDALONEWEEKDAYS:["domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"], SHORTWEEKDAYS:["dom", "seg", 
"ter", "qua", "qui", "sex", "sáb"], STANDALONESHORTWEEKDAYS:["dom", "seg", "ter", "qua", "qui", "sex", "sáb"], NARROWWEEKDAYS:["D", "S", "T", "Q", "Q", "S", "S"], STANDALONENARROWWEEKDAYS:["D", "S", "T", "Q", "Q", "S", "S"], SHORTQUARTERS:["T1", "T2", "T3", "T4"], QUARTERS:["1.º trimestre", "2.º trimestre", "3.º trimestre", "4.º trimestre"], AMPMS:["da manhã", "da tarde"], DATEFORMATS:["EEEE, d 'de' MMMM 'de' y", "d 'de' MMMM 'de' y", "dd/MM/y", "dd/MM/yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", 
"HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} 'às' {0}", "{1} 'às' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_ro = {ERAS:["î.Hr.", "d.Hr."], ERANAMES:["înainte de Hristos", "după Hristos"], NARROWMONTHS:["I", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["I", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"], MONTHS:["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie"], STANDALONEMONTHS:["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", 
"Septembrie", "Octombrie", "Noiembrie", "Decembrie"], SHORTMONTHS:["ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec."], STANDALONESHORTMONTHS:["ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec."], WEEKDAYS:["duminică", "luni", "marți", "miercuri", "joi", "vineri", "sâmbătă"], STANDALONEWEEKDAYS:["Duminică", "Luni", "Marți", "Miercuri", "Joi", "Vineri", "Sâmbătă"], SHORTWEEKDAYS:["Dum", "Lun", "Mar", "Mie", "Joi", 
"Vin", "Sâm"], STANDALONESHORTWEEKDAYS:["Dum", "Lun", "Mar", "Mie", "Joi", "Vin", "Sâm"], NARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], STANDALONENARROWWEEKDAYS:["D", "L", "M", "M", "J", "V", "S"], SHORTQUARTERS:["trim. I", "trim. II", "trim. III", "trim. IV"], QUARTERS:["trimestrul I", "trimestrul al II-lea", "trimestrul al III-lea", "trimestrul al IV-lea"], AMPMS:["a.m.", "p.m."], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "dd.MM.y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", 
"HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_ru = {ERAS:["до н. э.", "н. э."], ERANAMES:["до н. э.", "н. э."], NARROWMONTHS:["Я", "Ф", "М", "А", "М", "И", "И", "А", "С", "О", "Н", "Д"], STANDALONENARROWMONTHS:["Я", "Ф", "М", "А", "М", "И", "И", "А", "С", "О", "Н", "Д"], MONTHS:["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"], STANDALONEMONTHS:["январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", 
"декабрь"], SHORTMONTHS:["янв.", "февр.", "марта", "апр.", "мая", "июня", "июля", "авг.", "сент.", "окт.", "нояб.", "дек."], STANDALONESHORTMONTHS:["янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек."], WEEKDAYS:["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"], STANDALONEWEEKDAYS:["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"], SHORTWEEKDAYS:["вс", "пн", "вт", "ср", "чт", "пт", "сб"], 
STANDALONESHORTWEEKDAYS:["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], NARROWWEEKDAYS:["вс", "пн", "вт", "ср", "чт", "пт", "сб"], STANDALONENARROWWEEKDAYS:["В", "П", "В", "С", "Ч", "П", "С"], SHORTQUARTERS:["1-й кв.", "2-й кв.", "3-й кв.", "4-й кв."], QUARTERS:["1-й квартал", "2-й квартал", "3-й квартал", "4-й квартал"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d MMMM y 'г'.", "d MMMM y 'г'.", "d MMM y 'г'.", "dd.MM.yy"], TIMEFORMATS:["H:mm:ss zzzz", "H:mm:ss z", "H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1}, {0}", 
"{1}, {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_si = {ERAS:["ක්‍රි.පූ.", "ක්‍රි.ව."], ERANAMES:["ක්‍රිස්තු පූර්‍ව", "ක්‍රිස්තු වර්‍ෂ"], NARROWMONTHS:["ජ", "පෙ", "මා", "අ", "මැ", "ජූ", "ජූ", "අ", "සැ", "ඔ", "නෙ", "දෙ"], STANDALONENARROWMONTHS:["ජ", "පෙ", "මා", "අ", "මැ", "ජූ", "ජූ", "අ", "සැ", "ඔ", "නෙ", "දෙ"], MONTHS:["ජනවාරි", "පෙබරවාරි", "මාර්තු", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්"], STANDALONEMONTHS:["ජනවාරි", "පෙබරවාරි", "මාර්තු", "අප්‍රේල්", "මැයි", 
"ජූනි", "ජූලි", "අගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්"], SHORTMONTHS:["ජන", "පෙබ", "මාර්තු", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝ", "සැප්", "ඔක්", "නොවැ", "දෙසැ"], STANDALONESHORTMONTHS:["ජන", "පෙබ", "මාර්", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝ", "සැප්", "ඔක්", "නොවැ", "දෙසැ"], WEEKDAYS:["ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"], STANDALONEWEEKDAYS:["ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"], 
SHORTWEEKDAYS:["ඉරිදා", "සඳුදා", "අඟහ", "බදාදා", "බ්‍රහස්", "සිකු", "සෙන"], STANDALONESHORTWEEKDAYS:["ඉරිදා", "සඳුදා", "අඟහ", "බදාදා", "බ්‍රහස්", "සිකු", "සෙන"], NARROWWEEKDAYS:["ඉ", "ස", "අ", "බ", "බ්‍ර", "සි", "සෙ"], STANDALONENARROWWEEKDAYS:["ඉ", "ස", "අ", "බ", "බ්‍ර", "සි", "සෙ"], SHORTQUARTERS:["කාර්:1", "කාර්:2", "කාර්:3", "කාර්:4"], QUARTERS:["1 වන කාර්තුව", "2 වන කාර්තුව", "3 වන කාර්තුව", "4 වන කාර්තුව"], AMPMS:["පෙ.ව.", "ප.ව."], DATEFORMATS:["y MMMM d, EEEE", "y MMMM d", "y MMM d", "y-MM-dd"], 
TIMEFORMATS:["a h.mm.ss zzzz", "a h.mm.ss z", "a h.mm.ss", "a h.mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_sk = {ERAS:["pred Kr.", "po Kr."], ERANAMES:["pred Kristom", "po Kristovi"], NARROWMONTHS:["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"], STANDALONENARROWMONTHS:["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"], MONTHS:["januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra"], STANDALONEMONTHS:["január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", 
"november", "december"], SHORTMONTHS:["jan", "feb", "mar", "apr", "máj", "jún", "júl", "aug", "sep", "okt", "nov", "dec"], STANDALONESHORTMONTHS:["jan", "feb", "mar", "apr", "máj", "jún", "júl", "aug", "sep", "okt", "nov", "dec"], WEEKDAYS:["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"], STANDALONEWEEKDAYS:["nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"], SHORTWEEKDAYS:["ne", "po", "ut", "st", "št", "pi", "so"], STANDALONESHORTWEEKDAYS:["ne", "po", 
"ut", "st", "št", "pi", "so"], NARROWWEEKDAYS:["N", "P", "U", "S", "Š", "P", "S"], STANDALONENARROWWEEKDAYS:["N", "P", "U", "S", "Š", "P", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1. štvrťrok", "2. štvrťrok", "3. štvrťrok", "4. štvrťrok"], AMPMS:["dopoludnia", "odpoludnia"], DATEFORMATS:["EEEE, d. MMMM y", "d. MMMM y", "d. M. y", "dd.MM.yy"], TIMEFORMATS:["H:mm:ss zzzz", "H:mm:ss z", "H:mm:ss", "H:mm"], DATETIMEFORMATS:["{1}, {0}", "{1}, {0}", "{1}, {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_sl = {ERAS:["pr. n. št.", "po Kr."], ERANAMES:["pred našim štetjem", "naše štetje"], NARROWMONTHS:["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"], STANDALONENARROWMONTHS:["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"], MONTHS:["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december"], STANDALONEMONTHS:["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", 
"oktober", "november", "december"], SHORTMONTHS:["jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "avg.", "sep.", "okt.", "nov.", "dec."], STANDALONESHORTMONTHS:["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"], WEEKDAYS:["nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"], STANDALONEWEEKDAYS:["nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"], SHORTWEEKDAYS:["ned.", "pon.", "tor.", "sre.", "čet.", "pet.", "sob."], 
STANDALONESHORTWEEKDAYS:["ned", "pon", "tor", "sre", "čet", "pet", "sob"], NARROWWEEKDAYS:["n", "p", "t", "s", "č", "p", "s"], STANDALONENARROWWEEKDAYS:["n", "p", "t", "s", "č", "p", "s"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["1. četrtletje", "2. četrtletje", "3. četrtletje", "4. četrtletje"], AMPMS:["dop.", "pop."], DATEFORMATS:["EEEE, dd. MMMM y", "dd. MMMM y", "d. MMM y", "d. MM. yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", 
"{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_sq = {ERAS:["p.e.r.", "e.r."], ERANAMES:["para erës së re", "erës së re"], NARROWMONTHS:["J", "S", "M", "P", "M", "Q", "K", "G", "S", "T", "N", "D"], STANDALONENARROWMONTHS:["J", "S", "M", "P", "M", "Q", "K", "G", "S", "T", "N", "D"], MONTHS:["janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor"], STANDALONEMONTHS:["Janar", "Shkurt", "Mars", "Prill", "Maj", "Qershor", "Korrik", "Gusht", "Shtator", "Tetor", "Nëntor", 
"Dhjetor"], SHORTMONTHS:["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gsh", "Sht", "Tet", "Nën", "Dhj"], STANDALONESHORTMONTHS:["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gsh", "Sht", "Tet", "Nën", "Dhj"], WEEKDAYS:["e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"], STANDALONEWEEKDAYS:["E diel", "E hënë", "E martë", "E mërkurë", "E enjte", "E premte", "E shtunë"], SHORTWEEKDAYS:["Die", "Hën", "Mar", "Mër", "Enj", "Pre", "Sht"], STANDALONESHORTWEEKDAYS:["Die", 
"Hën", "Mar", "Mër", "Enj", "Pre", "Sht"], NARROWWEEKDAYS:["D", "H", "M", "M", "E", "P", "S"], STANDALONENARROWWEEKDAYS:["D", "H", "M", "M", "E", "P", "S"], SHORTQUARTERS:["tremujori I", "tremujori II", "tremujori III", "tremujori IV"], QUARTERS:["tremujori i parë", "tremujori i dytë", "tremujori i tretë", "tremujori i katërt"], AMPMS:["paradite", "pasdite"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "d.M.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} 'në' {0}", 
"{1} 'në' {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_sr = {ERAS:["п. н. е.", "н. е."], ERANAMES:["Пре нове ере", "Нове ере"], NARROWMONTHS:["ј", "ф", "м", "а", "м", "ј", "ј", "а", "с", "о", "н", "д"], STANDALONENARROWMONTHS:["ј", "ф", "м", "а", "м", "ј", "ј", "а", "с", "о", "н", "д"], MONTHS:["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар"], STANDALONEMONTHS:["јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", 
"децембар"], SHORTMONTHS:["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец"], STANDALONESHORTMONTHS:["јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец"], WEEKDAYS:["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"], STANDALONEWEEKDAYS:["недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"], SHORTWEEKDAYS:["нед", "пон", "уто", "сре", "чет", "пет", "суб"], STANDALONESHORTWEEKDAYS:["нед", "пон", 
"уто", "сре", "чет", "пет", "суб"], NARROWWEEKDAYS:["н", "п", "у", "с", "ч", "п", "с"], STANDALONENARROWWEEKDAYS:["н", "п", "у", "с", "ч", "п", "с"], SHORTQUARTERS:["К1", "К2", "К3", "К4"], QUARTERS:["Прво тромесечје", "Друго тромесечје", "Треће тромесечје", "Четврто тромесечје"], AMPMS:["пре подне", "по подне"], DATEFORMATS:["EEEE, dd. MMMM y.", "dd. MMMM y.", "dd.MM.y.", "d.M.yy."], TIMEFORMATS:["HH.mm.ss zzzz", "HH.mm.ss z", "HH.mm.ss", "HH.mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", 
"{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_sr_Latn = {ERAS:["p. n. e.", "n. e."], ERANAMES:["Pre nove ere", "Nove ere"], NARROWMONTHS:["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"], STANDALONENARROWMONTHS:["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"], MONTHS:["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar"], STANDALONEMONTHS:["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", 
"novembar", "decembar"], SHORTMONTHS:["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"], STANDALONESHORTMONTHS:["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"], WEEKDAYS:["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"], STANDALONEWEEKDAYS:["nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"], SHORTWEEKDAYS:["ned", "pon", "uto", "sre", "čet", "pet", "sub"], STANDALONESHORTWEEKDAYS:["ned", 
"pon", "uto", "sre", "čet", "pet", "sub"], NARROWWEEKDAYS:["n", "p", "u", "s", "č", "p", "s"], STANDALONENARROWWEEKDAYS:["n", "p", "u", "s", "č", "p", "s"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["Prvo tromesečje", "Drugo tromesečje", "Treće tromesečje", "Četvrto tromesečje"], AMPMS:["pre podne", "po podne"], DATEFORMATS:["EEEE, dd. MMMM y.", "dd. MMMM y.", "dd.MM.y.", "d.M.yy."], TIMEFORMATS:["HH.mm.ss zzzz", "HH.mm.ss z", "HH.mm.ss", "HH.mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", 
"{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_sv = {ERAS:["f.Kr.", "e.Kr."], ERANAMES:["före Kristus", "efter Kristus"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december"], STANDALONEMONTHS:["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", 
"November", "December"], SHORTMONTHS:["jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec."], STANDALONESHORTMONTHS:["Jan.", "Feb.", "Mars", "Apr.", "Maj", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dec."], WEEKDAYS:["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"], STANDALONEWEEKDAYS:["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"], SHORTWEEKDAYS:["sön", "mån", "tis", "ons", "tors", "fre", "lör"], STANDALONESHORTWEEKDAYS:["Sön", 
"Mån", "Tis", "Ons", "Tor", "Fre", "Lör"], NARROWWEEKDAYS:["S", "M", "T", "O", "T", "F", "L"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "O", "T", "F", "L"], SHORTQUARTERS:["K1", "K2", "K3", "K4"], QUARTERS:["1:a kvartalet", "2:a kvartalet", "3:e kvartalet", "4:e kvartalet"], AMPMS:["fm", "em"], DATEFORMATS:["EEEE d MMMM y", "d MMMM y", "d MMM y", "y-MM-dd"], TIMEFORMATS:["'kl'. HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, 
WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:3};
goog.i18n.DateTimeSymbols_sw = {ERAS:["BC", "AD"], ERANAMES:["Kabla ya Kristo", "Baada ya Kristo"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba"], STANDALONEMONTHS:["Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", 
"Novemba", "Desemba"], SHORTMONTHS:["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des"], WEEKDAYS:["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"], STANDALONEWEEKDAYS:["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"], SHORTWEEKDAYS:["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", 
"Jumamosi"], STANDALONESHORTWEEKDAYS:["Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["R1", "R2", "R3", "R4"], QUARTERS:["Robo ya 1", "Robo ya 2", "Robo ya 3", "Robo ya 4"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, d MMMM y", "d MMMM y", "d MMM y", "dd/MM/y"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_ta = {ERAS:["கி.மு.", "கி.பி."], ERANAMES:["கிறிஸ்துவுக்கு முன்", "அனோ டோமினி"], NARROWMONTHS:["ஜ", "பி", "மா", "ஏ", "மே", "ஜூ", "ஜூ", "ஆ", "செ", "அ", "ந", "டி"], STANDALONENARROWMONTHS:["ஜ", "பி", "மா", "ஏ", "மே", "ஜூ", "ஜூ", "ஆ", "செ", "அ", "ந", "டி"], MONTHS:["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்"], STANDALONEMONTHS:["ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்டு", 
"செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்"], SHORTMONTHS:["ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச."], STANDALONESHORTMONTHS:["ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச."], WEEKDAYS:["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"], STANDALONEWEEKDAYS:["ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"], SHORTWEEKDAYS:["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"], 
STANDALONESHORTWEEKDAYS:["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"], NARROWWEEKDAYS:["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"], STANDALONENARROWWEEKDAYS:["ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"], SHORTQUARTERS:["காலாண்டு1", "காலாண்டு2", "காலாண்டு3", "காலாண்டு4"], QUARTERS:["முதல் காலாண்டு", "இரண்டாம் காலாண்டு", "மூன்றாம் காலாண்டு", "நான்காம் காலாண்டு"], AMPMS:["முற்பகல்", "பிற்பகல்"], DATEFORMATS:["EEEE, d MMMM, y", "d MMMM, y", "d MMM, y", "d-M-yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", 
"h:mm a"], DATETIMEFORMATS:["{1} ’அன்று’ {0}", "{1} ’அன்று’ {0}", "{1}, {0}", "{1}, {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_te = {ERAS:["క్రీపూ", "క్రీశ"], ERANAMES:["క్రీస్తు పూర్వం", "క్రీస్తు శకం"], NARROWMONTHS:["జ", "ఫి", "మా", "ఏ", "మే", "జూ", "జు", "ఆ", "సె", "అ", "న", "డి"], STANDALONENARROWMONTHS:["జ", "ఫి", "మా", "ఏ", "మే", "జూ", "జు", "ఆ", "సె", "అ", "న", "డి"], MONTHS:["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జులై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్"], STANDALONEMONTHS:["జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జులై", "ఆగస్టు", 
"సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్"], SHORTMONTHS:["జన", "ఫిబ్ర", "మార్చి", "ఏప్రి", "మే", "జూన్", "జులై", "ఆగ", "సెప్టెం", "అక్టో", "నవం", "డిసెం"], STANDALONESHORTMONTHS:["జన", "ఫిబ్ర", "మార్చి", "ఏప్రి", "మే", "జూన్", "జులై", "ఆగస్టు", "సెప్టెం", "అక్టో", "నవం", "డిసెం"], WEEKDAYS:["ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"], STANDALONEWEEKDAYS:["ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"], SHORTWEEKDAYS:["ఆది", 
"సోమ", "మంగళ", "బుధ", "గురు", "శుక్ర", "శని"], STANDALONESHORTWEEKDAYS:["ఆది", "సోమ", "మంగళ", "బుధ", "గురు", "శుక్ర", "శని"], NARROWWEEKDAYS:["ఆ", "సో", "మ", "బు", "గు", "శు", "శ"], STANDALONENARROWWEEKDAYS:["ఆ", "సో", "మ", "బు", "గు", "శు", "శ"], SHORTQUARTERS:["త్రై1", "త్రై2", "త్రై3", "త్రై4"], QUARTERS:["1వ త్రైమాసం", "2వ త్రైమాసం", "3వ త్రైమాసం", "4వ త్రైమాసం"], AMPMS:["[AM]", "[PM]"], DATEFORMATS:["d, MMMM y, EEEE", "d MMMM, y", "d MMM, y", "dd-MM-yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", 
"h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[6, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_th = {ERAS:["ปีก่อน ค.ศ.", "ค.ศ."], ERANAMES:["ปีก่อนคริสต์ศักราช", "คริสต์ศักราช"], NARROWMONTHS:["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."], STANDALONENARROWMONTHS:["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."], MONTHS:["มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"], STANDALONEMONTHS:["มกราคม", 
"กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"], SHORTMONTHS:["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."], STANDALONESHORTMONTHS:["ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."], WEEKDAYS:["วันอาทิตย์", "วันจันทร์", "วันอังคาร", "วันพุธ", "วันพฤหัสบดี", "วันศุกร์", "วันเสาร์"], STANDALONEWEEKDAYS:["วันอาทิตย์", "วันจันทร์", 
"วันอังคาร", "วันพุธ", "วันพฤหัสบดี", "วันศุกร์", "วันเสาร์"], SHORTWEEKDAYS:["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."], STANDALONESHORTWEEKDAYS:["อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."], NARROWWEEKDAYS:["อา", "จ", "อ", "พ", "พฤ", "ศ", "ส"], STANDALONENARROWWEEKDAYS:["อา", "จ", "อ", "พ", "พฤ", "ศ", "ส"], SHORTQUARTERS:["ไตรมาส 1", "ไตรมาส 2", "ไตรมาส 3", "ไตรมาส 4"], QUARTERS:["ไตรมาส 1", "ไตรมาส 2", "ไตรมาส 3", "ไตรมาส 4"], AMPMS:["ก่อนเที่ยง", "หลังเที่ยง"], DATEFORMATS:["EEEEที่ d MMMM G y", 
"d MMMM G y", "d MMM y", "d/M/yy"], TIMEFORMATS:["H นาฬิกา mm นาที ss วินาที zzzz", "H นาฬิกา mm นาที ss วินาที z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_tl = {ERAS:["BC", "AD"], ERANAMES:["BC", "AD"], NARROWMONTHS:["E", "P", "M", "A", "M", "H", "H", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["E", "P", "M", "A", "M", "H", "H", "A", "S", "O", "N", "D"], MONTHS:["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre"], STANDALONEMONTHS:["Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre"], 
SHORTMONTHS:["Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Set", "Okt", "Nob", "Dis"], STANDALONESHORTMONTHS:["Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Set", "Okt", "Nob", "Dis"], WEEKDAYS:["Linggo", "Lunes", "Martes", "Miyerkules", "Huwebes", "Biyernes", "Sabado"], STANDALONEWEEKDAYS:["Linggo", "Lunes", "Martes", "Miyerkules", "Huwebes", "Biyernes", "Sabado"], SHORTWEEKDAYS:["Lin", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"], STANDALONESHORTWEEKDAYS:["Lin", "Lun", "Mar", 
"Miy", "Huw", "Biy", "Sab"], NARROWWEEKDAYS:["L", "L", "M", "M", "H", "B", "S"], STANDALONENARROWWEEKDAYS:["L", "L", "M", "M", "H", "B", "S"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["ika-1 quarter", "ika-2 quarter", "ika-3 quarter", "ika-4 na quarter"], AMPMS:["AM", "PM"], DATEFORMATS:["EEEE, MMMM d, y", "MMMM d, y", "MMM d, y", "M/d/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} 'nang' {0}", "{1} 'nang' {0}", "{1}, {0}", "{1}, {0}"], 
FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_tr = {ERAS:["MÖ", "MS"], ERANAMES:["Milattan Önce", "Milattan Sonra"], NARROWMONTHS:["O", "Ş", "M", "N", "M", "H", "T", "A", "E", "E", "K", "A"], STANDALONENARROWMONTHS:["O", "Ş", "M", "N", "M", "H", "T", "A", "E", "E", "K", "A"], MONTHS:["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"], STANDALONEMONTHS:["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"], 
SHORTMONTHS:["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara"], STANDALONESHORTMONTHS:["Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara"], WEEKDAYS:["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"], STANDALONEWEEKDAYS:["Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"], SHORTWEEKDAYS:["Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"], STANDALONESHORTWEEKDAYS:["Paz", "Pzt", "Sal", "Çar", 
"Per", "Cum", "Cmt"], NARROWWEEKDAYS:["P", "P", "S", "Ç", "P", "C", "C"], STANDALONENARROWWEEKDAYS:["P", "P", "S", "Ç", "P", "C", "C"], SHORTQUARTERS:["Ç1", "Ç2", "Ç3", "Ç4"], QUARTERS:["1. çeyrek", "2. çeyrek", "3. çeyrek", "4. çeyrek"], AMPMS:["ÖÖ", "ÖS"], DATEFORMATS:["d MMMM y EEEE", "d MMMM y", "d MMM y", "d MM y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_uk = {ERAS:["до н.е.", "н.е."], ERANAMES:["до нашої ери", "нашої ери"], NARROWMONTHS:["С", "Л", "Б", "К", "Т", "Ч", "Л", "С", "В", "Ж", "Л", "Г"], STANDALONENARROWMONTHS:["С", "Л", "Б", "К", "Т", "Ч", "Л", "С", "В", "Ж", "Л", "Г"], MONTHS:["січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня"], STANDALONEMONTHS:["Січень", "Лютий", "Березень", "Квітень", "Травень", "Червень", "Липень", "Серпень", "Вересень", 
"Жовтень", "Листопад", "Грудень"], SHORTMONTHS:["січ.", "лют.", "бер.", "квіт.", "трав.", "черв.", "лип.", "серп.", "вер.", "жовт.", "лист.", "груд."], STANDALONESHORTMONTHS:["Січ", "Лют", "Бер", "Кві", "Тра", "Чер", "Лип", "Сер", "Вер", "Жов", "Лис", "Гру"], WEEKDAYS:["неділя", "понеділок", "вівторок", "середа", "четвер", "пʼятниця", "субота"], STANDALONEWEEKDAYS:["Неділя", "Понеділок", "Вівторок", "Середа", "Четвер", "Пʼятниця", "Субота"], SHORTWEEKDAYS:["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], 
STANDALONESHORTWEEKDAYS:["Нд", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], NARROWWEEKDAYS:["Н", "П", "В", "С", "Ч", "П", "С"], STANDALONENARROWWEEKDAYS:["Н", "П", "В", "С", "Ч", "П", "С"], SHORTQUARTERS:["I кв.", "II кв.", "III кв.", "IV кв."], QUARTERS:["I квартал", "II квартал", "III квартал", "IV квартал"], AMPMS:["дп", "пп"], DATEFORMATS:["EEEE, d MMMM y 'р'.", "d MMMM y 'р'.", "d MMM y 'р'.", "dd.MM.yy"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_ur = {ERAS:["ق م", "عیسوی سن"], ERANAMES:["قبل مسیح", "عیسوی سن"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر"], STANDALONEMONTHS:["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر"], SHORTMONTHS:["جنوری", 
"فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر"], STANDALONESHORTMONTHS:["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر"], WEEKDAYS:["اتوار", "سوموار", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"], STANDALONEWEEKDAYS:["اتوار", "سوموار", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"], SHORTWEEKDAYS:["اتوار", "سوموار", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"], STANDALONESHORTWEEKDAYS:["اتوار", "سوموار", "منگل", 
"بدھ", "جمعرات", "جمعہ", "ہفتہ"], NARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], STANDALONENARROWWEEKDAYS:["S", "M", "T", "W", "T", "F", "S"], SHORTQUARTERS:["پہلی سہ ماہی", "دوسری سہ ماہی", "تیسری سہ ماہی", "چوتهی سہ ماہی"], QUARTERS:["پہلی سہ ماہی", "دوسری سہ ماہی", "تیسری سہ ماہی", "چوتهی سہ ماہی"], AMPMS:["قبل دوپہر", "بعد دوپہر"], DATEFORMATS:["EEEE، d MMMM، y", "d MMMM، y", "d MMM، y", "d/M/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", 
"{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_uz = {ERAS:["M.A.", "E"], ERANAMES:["M.A.", "E"], NARROWMONTHS:["Y", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["Y", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"], MONTHS:["Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avgust", "Sentabr", "Oktabr", "Noyabr", "Dekabr"], STANDALONEMONTHS:["Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avgust", "Sentabr", "Oktabr", "Noyabr", "Dekabr"], SHORTMONTHS:["Yanv", 
"Fev", "Mar", "Apr", "May", "Iyun", "Iyul", "Avg", "Sen", "Okt", "Noya", "Dek"], STANDALONESHORTMONTHS:["Yanv", "Fev", "Mar", "Apr", "May", "Iyun", "Iyul", "Avg", "Sen", "Okt", "Noya", "Dek"], WEEKDAYS:["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"], STANDALONEWEEKDAYS:["yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"], SHORTWEEKDAYS:["Yaksh", "Dush", "Sesh", "Chor", "Pay", "Jum", "Shan"], STANDALONESHORTWEEKDAYS:["Yaksh", "Dush", 
"Sesh", "Chor", "Pay", "Jum", "Shan"], NARROWWEEKDAYS:["Y", "D", "S", "C", "P", "J", "S"], STANDALONENARROWWEEKDAYS:["Y", "D", "S", "C", "P", "J", "S"], SHORTQUARTERS:["1-ch", "2-ch", "3-ch", "4-ch"], QUARTERS:["1-chorak", "2-chorak", "3-chorak", "4-chorak"], AMPMS:["TO", "TK"], DATEFORMATS:["EEEE, y MMMM dd", "y MMMM d", "y MMM d", "yy/MM/dd"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", "HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 
6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_vi = {ERAS:["tr. CN", "sau CN"], ERANAMES:["tr. CN", "sau CN"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["tháng 1", "tháng 2", "tháng 3", "tháng 4", "tháng 5", "tháng 6", "tháng 7", "tháng 8", "tháng 9", "tháng 10", "tháng 11", "tháng 12"], STANDALONEMONTHS:["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", 
"Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"], SHORTMONTHS:["thg 1", "thg 2", "thg 3", "thg 4", "thg 5", "thg 6", "thg 7", "thg 8", "thg 9", "thg 10", "thg 11", "thg 12"], STANDALONESHORTMONTHS:["Thg 1", "Thg 2", "Thg 3", "Thg 4", "Thg 5", "Thg 6", "Thg 7", "Thg 8", "Thg 9", "Thg 10", "Thg 11", "Thg 12"], WEEKDAYS:["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"], STANDALONEWEEKDAYS:["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"], SHORTWEEKDAYS:["CN", 
"Th 2", "Th 3", "Th 4", "Th 5", "Th 6", "Th 7"], STANDALONESHORTWEEKDAYS:["CN", "Th 2", "Th 3", "Th 4", "Th 5", "Th 6", "Th 7"], NARROWWEEKDAYS:["CN", "T2", "T3", "T4", "T5", "T6", "T7"], STANDALONENARROWWEEKDAYS:["CN", "T2", "T3", "T4", "T5", "T6", "T7"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["Quý 1", "Quý 2", "Quý 3", "Quý 4"], AMPMS:["SA", "CH"], DATEFORMATS:["EEEE, 'ngày' dd MMMM 'năm' y", "'Ngày' dd 'tháng' MM 'năm' y", "dd-MM-y", "dd/MM/y"], TIMEFORMATS:["HH:mm:ss zzzz", "HH:mm:ss z", 
"HH:mm:ss", "HH:mm"], DATETIMEFORMATS:["{0} {1}", "{0} {1}", "{0} {1}", "{0} {1}"], FIRSTDAYOFWEEK:0, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:6};
goog.i18n.DateTimeSymbols_zh = {ERAS:["公元前", "公元"], ERANAMES:["公元前", "公元"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], STANDALONEMONTHS:["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"], SHORTMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], 
STANDALONESHORTMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], WEEKDAYS:["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], STANDALONEWEEKDAYS:["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], SHORTWEEKDAYS:["周日", "周一", "周二", "周三", "周四", "周五", "周六"], STANDALONESHORTWEEKDAYS:["周日", "周一", "周二", "周三", "周四", "周五", "周六"], NARROWWEEKDAYS:["日", "一", "二", "三", "四", "五", "六"], STANDALONENARROWWEEKDAYS:["日", "一", "二", "三", "四", "五", "六"], SHORTQUARTERS:["1季度", "2季度", "3季度", 
"4季度"], QUARTERS:["第一季度", "第二季度", "第三季度", "第四季度"], AMPMS:["上午", "下午"], DATEFORMATS:["y年M月d日EEEE", "y年M月d日", "y年M月d日", "yy/M/d"], TIMEFORMATS:["zzzz ah:mm:ss", "z ah:mm:ss", "ah:mm:ss", "ah:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_zh_CN = goog.i18n.DateTimeSymbols_zh;
goog.i18n.DateTimeSymbols_zh_HK = {ERAS:["BC", "AD"], ERANAMES:["公元前", "公元"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], STANDALONEMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], SHORTMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", 
"12月"], STANDALONESHORTMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], WEEKDAYS:["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], STANDALONEWEEKDAYS:["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], SHORTWEEKDAYS:["週日", "週一", "週二", "週三", "週四", "週五", "週六"], STANDALONESHORTWEEKDAYS:["週日", "週一", "週二", "週三", "週四", "週五", "週六"], NARROWWEEKDAYS:["日", "一", "二", "三", "四", "五", "六"], STANDALONENARROWWEEKDAYS:["日", "一", "二", "三", "四", "五", "六"], SHORTQUARTERS:["Q1", "Q2", 
"Q3", "Q4"], QUARTERS:["第1季", "第2季", "第3季", "第4季"], AMPMS:["上午", "下午"], DATEFORMATS:["y年M月d日EEEE", "y年M月d日", "y年M月d日", "d/M/yy"], TIMEFORMATS:["ah:mm:ss [zzzz]", "ah:mm:ss [z]", "ah:mm:ss", "ah:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_zh_TW = {ERAS:["西元前", "西元"], ERANAMES:["西元前", "西元"], NARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], STANDALONENARROWMONTHS:["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"], MONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], STANDALONEMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], SHORTMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", 
"12月"], STANDALONESHORTMONTHS:["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], WEEKDAYS:["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], STANDALONEWEEKDAYS:["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"], SHORTWEEKDAYS:["週日", "週一", "週二", "週三", "週四", "週五", "週六"], STANDALONESHORTWEEKDAYS:["週日", "週一", "週二", "週三", "週四", "週五", "週六"], NARROWWEEKDAYS:["日", "一", "二", "三", "四", "五", "六"], STANDALONENARROWWEEKDAYS:["日", "一", "二", "三", "四", "五", "六"], SHORTQUARTERS:["1季", "2季", 
"3季", "4季"], QUARTERS:["第1季", "第2季", "第3季", "第4季"], AMPMS:["上午", "下午"], DATEFORMATS:["y年M月d日 EEEE", "y年M月d日", "y年M月d日", "y/M/d"], TIMEFORMATS:["ah:mm:ss [zzzz]", "ah:mm:ss [z]", "ah:mm:ss", "ah:mm"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
goog.i18n.DateTimeSymbols_zu = {ERAS:["BC", "AD"], ERANAMES:["BC", "AD"], NARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], STANDALONENARROWMONTHS:["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], MONTHS:["Januwari", "Februwari", "Mashi", "Apreli", "Meyi", "Juni", "Julayi", "Agasti", "Septhemba", "Okthoba", "Novemba", "Disemba"], STANDALONEMONTHS:["Januwari", "Februwari", "Mashi", "Apreli", "Meyi", "Juni", "Julayi", "Agasti", "Septhemba", "Okthoba", "Novemba", 
"Disemba"], SHORTMONTHS:["Jan", "Feb", "Mas", "Apr", "Mey", "Jun", "Jul", "Aga", "Sep", "Okt", "Nov", "Dis"], STANDALONESHORTMONTHS:["Jan", "Feb", "Mas", "Apr", "Mey", "Jun", "Jul", "Aga", "Sep", "Okt", "Nov", "Dis"], WEEKDAYS:["Sonto", "Msombuluko", "Lwesibili", "Lwesithathu", "Lwesine", "Lwesihlanu", "Mgqibelo"], STANDALONEWEEKDAYS:["Sonto", "Msombuluko", "Lwesibili", "Lwesithathu", "Lwesine", "Lwesihlanu", "Mgqibelo"], SHORTWEEKDAYS:["Son", "Mso", "Bil", "Tha", "Sin", "Hla", "Mgq"], STANDALONESHORTWEEKDAYS:["Son", 
"Mso", "Bil", "Tha", "Sin", "Hla", "Mgq"], NARROWWEEKDAYS:["S", "M", "T", "T", "S", "H", "M"], STANDALONENARROWWEEKDAYS:["S", "M", "B", "T", "S", "H", "M"], SHORTQUARTERS:["Q1", "Q2", "Q3", "Q4"], QUARTERS:["ikota engu-1", "ikota engu-2", "ikota engu-3", "ikota engu-4"], AMPMS:["Ekuseni", "Ntambama"], DATEFORMATS:["EEEE, MMMM d, y", "MMMM d, y", "MMM d, y", "M/d/yy"], TIMEFORMATS:["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"], DATETIMEFORMATS:["{1} {0}", "{1} {0}", "{1} {0}", "{1} {0}"], 
FIRSTDAYOFWEEK:6, WEEKENDRANGE:[5, 6], FIRSTWEEKCUTOFFDAY:5};
if (goog.LOCALE == "af") {
  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_af;
} else {
  if (goog.LOCALE == "am") {
    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_am;
  } else {
    if (goog.LOCALE == "ar") {
      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ar;
    } else {
      if (goog.LOCALE == "az") {
        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_az;
      } else {
        if (goog.LOCALE == "be") {
          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_be;
        } else {
          if (goog.LOCALE == "bg") {
            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_bg;
          } else {
            if (goog.LOCALE == "bn") {
              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_bn;
            } else {
              if (goog.LOCALE == "br") {
                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_br;
              } else {
                if (goog.LOCALE == "bs") {
                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_bs;
                } else {
                  if (goog.LOCALE == "ca") {
                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ca;
                  } else {
                    if (goog.LOCALE == "chr") {
                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_chr;
                    } else {
                      if (goog.LOCALE == "cs") {
                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_cs;
                      } else {
                        if (goog.LOCALE == "cy") {
                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_cy;
                        } else {
                          if (goog.LOCALE == "da") {
                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_da;
                          } else {
                            if (goog.LOCALE == "de") {
                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_de;
                            } else {
                              if (goog.LOCALE == "de_AT" || goog.LOCALE == "de-AT") {
                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_de_AT;
                              } else {
                                if (goog.LOCALE == "de_CH" || goog.LOCALE == "de-CH") {
                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_de;
                                } else {
                                  if (goog.LOCALE == "el") {
                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_el;
                                  } else {
                                    if (goog.LOCALE == "en") {
                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en;
                                    } else {
                                      if (goog.LOCALE == "en_AU" || goog.LOCALE == "en-AU") {
                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en_AU;
                                      } else {
                                        if (goog.LOCALE == "en_CA" || goog.LOCALE == "en-CA") {
                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en_CA;
                                        } else {
                                          if (goog.LOCALE == "en_GB" || goog.LOCALE == "en-GB") {
                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en_GB;
                                          } else {
                                            if (goog.LOCALE == "en_IE" || goog.LOCALE == "en-IE") {
                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en_IE;
                                            } else {
                                              if (goog.LOCALE == "en_IN" || goog.LOCALE == "en-IN") {
                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en_IN;
                                              } else {
                                                if (goog.LOCALE == "en_SG" || goog.LOCALE == "en-SG") {
                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en_SG;
                                                } else {
                                                  if (goog.LOCALE == "en_US" || goog.LOCALE == "en-US") {
                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en;
                                                  } else {
                                                    if (goog.LOCALE == "en_ZA" || goog.LOCALE == "en-ZA") {
                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en_ZA;
                                                    } else {
                                                      if (goog.LOCALE == "es") {
                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_es;
                                                      } else {
                                                        if (goog.LOCALE == "es_419" || goog.LOCALE == "es-419") {
                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_es_419;
                                                        } else {
                                                          if (goog.LOCALE == "es_ES" || goog.LOCALE == "es-ES") {
                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_es;
                                                          } else {
                                                            if (goog.LOCALE == "es_MX" || goog.LOCALE == "es-MX") {
                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_es_MX;
                                                            } else {
                                                              if (goog.LOCALE == "es_US" || goog.LOCALE == "es-US") {
                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_es_US;
                                                              } else {
                                                                if (goog.LOCALE == "et") {
                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_et;
                                                                } else {
                                                                  if (goog.LOCALE == "eu") {
                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_eu;
                                                                  } else {
                                                                    if (goog.LOCALE == "fa") {
                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_fa;
                                                                    } else {
                                                                      if (goog.LOCALE == "fi") {
                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_fi;
                                                                      } else {
                                                                        if (goog.LOCALE == "fil") {
                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_fil;
                                                                        } else {
                                                                          if (goog.LOCALE == "fr") {
                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_fr;
                                                                          } else {
                                                                            if (goog.LOCALE == "fr_CA" || goog.LOCALE == "fr-CA") {
                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_fr_CA;
                                                                            } else {
                                                                              if (goog.LOCALE == "ga") {
                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ga;
                                                                              } else {
                                                                                if (goog.LOCALE == "gl") {
                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_gl;
                                                                                } else {
                                                                                  if (goog.LOCALE == "gsw") {
                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_gsw;
                                                                                  } else {
                                                                                    if (goog.LOCALE == "gu") {
                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_gu;
                                                                                    } else {
                                                                                      if (goog.LOCALE == "haw") {
                                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_haw;
                                                                                      } else {
                                                                                        if (goog.LOCALE == "he") {
                                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_he;
                                                                                        } else {
                                                                                          if (goog.LOCALE == "hi") {
                                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_hi;
                                                                                          } else {
                                                                                            if (goog.LOCALE == "hr") {
                                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_hr;
                                                                                            } else {
                                                                                              if (goog.LOCALE == "hu") {
                                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_hu;
                                                                                              } else {
                                                                                                if (goog.LOCALE == "hy") {
                                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_hy;
                                                                                                } else {
                                                                                                  if (goog.LOCALE == "id") {
                                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_id;
                                                                                                  } else {
                                                                                                    if (goog.LOCALE == "in") {
                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_in;
                                                                                                    } else {
                                                                                                      if (goog.LOCALE == "is") {
                                                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_is;
                                                                                                      } else {
                                                                                                        if (goog.LOCALE == "it") {
                                                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_it;
                                                                                                        } else {
                                                                                                          if (goog.LOCALE == "iw") {
                                                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_iw;
                                                                                                          } else {
                                                                                                            if (goog.LOCALE == "ja") {
                                                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ja;
                                                                                                            } else {
                                                                                                              if (goog.LOCALE == "ka") {
                                                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ka;
                                                                                                              } else {
                                                                                                                if (goog.LOCALE == "kk") {
                                                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_kk;
                                                                                                                } else {
                                                                                                                  if (goog.LOCALE == "km") {
                                                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_km;
                                                                                                                  } else {
                                                                                                                    if (goog.LOCALE == "kn") {
                                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_kn;
                                                                                                                    } else {
                                                                                                                      if (goog.LOCALE == "ko") {
                                                                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ko;
                                                                                                                      } else {
                                                                                                                        if (goog.LOCALE == "ky") {
                                                                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ky;
                                                                                                                        } else {
                                                                                                                          if (goog.LOCALE == "ln") {
                                                                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ln;
                                                                                                                          } else {
                                                                                                                            if (goog.LOCALE == "lo") {
                                                                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_lo;
                                                                                                                            } else {
                                                                                                                              if (goog.LOCALE == "lt") {
                                                                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_lt;
                                                                                                                              } else {
                                                                                                                                if (goog.LOCALE == "lv") {
                                                                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_lv;
                                                                                                                                } else {
                                                                                                                                  if (goog.LOCALE == "mk") {
                                                                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_mk;
                                                                                                                                  } else {
                                                                                                                                    if (goog.LOCALE == "ml") {
                                                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ml;
                                                                                                                                    } else {
                                                                                                                                      if (goog.LOCALE == "mn") {
                                                                                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_mn;
                                                                                                                                      } else {
                                                                                                                                        if (goog.LOCALE == "mr") {
                                                                                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_mr;
                                                                                                                                        } else {
                                                                                                                                          if (goog.LOCALE == "ms") {
                                                                                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ms;
                                                                                                                                          } else {
                                                                                                                                            if (goog.LOCALE == "mt") {
                                                                                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_mt;
                                                                                                                                            } else {
                                                                                                                                              if (goog.LOCALE == "my") {
                                                                                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_my;
                                                                                                                                              } else {
                                                                                                                                                if (goog.LOCALE == "nb") {
                                                                                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_nb;
                                                                                                                                                } else {
                                                                                                                                                  if (goog.LOCALE == "ne") {
                                                                                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ne;
                                                                                                                                                  } else {
                                                                                                                                                    if (goog.LOCALE == "nl") {
                                                                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_nl;
                                                                                                                                                    } else {
                                                                                                                                                      if (goog.LOCALE == "no") {
                                                                                                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_no;
                                                                                                                                                      } else {
                                                                                                                                                        if (goog.LOCALE == "no_NO" || goog.LOCALE == "no-NO") {
                                                                                                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_no;
                                                                                                                                                        } else {
                                                                                                                                                          if (goog.LOCALE == "or") {
                                                                                                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_or;
                                                                                                                                                          } else {
                                                                                                                                                            if (goog.LOCALE == "pa") {
                                                                                                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_pa;
                                                                                                                                                            } else {
                                                                                                                                                              if (goog.LOCALE == "pl") {
                                                                                                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_pl;
                                                                                                                                                              } else {
                                                                                                                                                                if (goog.LOCALE == "pt") {
                                                                                                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_pt;
                                                                                                                                                                } else {
                                                                                                                                                                  if (goog.LOCALE == "pt_BR" || goog.LOCALE == "pt-BR") {
                                                                                                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_pt;
                                                                                                                                                                  } else {
                                                                                                                                                                    if (goog.LOCALE == "pt_PT" || goog.LOCALE == "pt-PT") {
                                                                                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_pt_PT;
                                                                                                                                                                    } else {
                                                                                                                                                                      if (goog.LOCALE == "ro") {
                                                                                                                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ro;
                                                                                                                                                                      } else {
                                                                                                                                                                        if (goog.LOCALE == "ru") {
                                                                                                                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ru;
                                                                                                                                                                        } else {
                                                                                                                                                                          if (goog.LOCALE == "si") {
                                                                                                                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_si;
                                                                                                                                                                          } else {
                                                                                                                                                                            if (goog.LOCALE == "sk") {
                                                                                                                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_sk;
                                                                                                                                                                            } else {
                                                                                                                                                                              if (goog.LOCALE == "sl") {
                                                                                                                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_sl;
                                                                                                                                                                              } else {
                                                                                                                                                                                if (goog.LOCALE == "sq") {
                                                                                                                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_sq;
                                                                                                                                                                                } else {
                                                                                                                                                                                  if (goog.LOCALE == "sr") {
                                                                                                                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_sr;
                                                                                                                                                                                  } else {
                                                                                                                                                                                    if (goog.LOCALE == "sr_Latn" || goog.LOCALE == "sr-Latn") {
                                                                                                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_sr_Latn;
                                                                                                                                                                                    } else {
                                                                                                                                                                                      if (goog.LOCALE == "sv") {
                                                                                                                                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_sv;
                                                                                                                                                                                      } else {
                                                                                                                                                                                        if (goog.LOCALE == "sw") {
                                                                                                                                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_sw;
                                                                                                                                                                                        } else {
                                                                                                                                                                                          if (goog.LOCALE == "ta") {
                                                                                                                                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ta;
                                                                                                                                                                                          } else {
                                                                                                                                                                                            if (goog.LOCALE == "te") {
                                                                                                                                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_te;
                                                                                                                                                                                            } else {
                                                                                                                                                                                              if (goog.LOCALE == "th") {
                                                                                                                                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_th;
                                                                                                                                                                                              } else {
                                                                                                                                                                                                if (goog.LOCALE == "tl") {
                                                                                                                                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_tl;
                                                                                                                                                                                                } else {
                                                                                                                                                                                                  if (goog.LOCALE == "tr") {
                                                                                                                                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_tr;
                                                                                                                                                                                                  } else {
                                                                                                                                                                                                    if (goog.LOCALE == "uk") {
                                                                                                                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_uk;
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                      if (goog.LOCALE == "ur") {
                                                                                                                                                                                                        goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_ur;
                                                                                                                                                                                                      } else {
                                                                                                                                                                                                        if (goog.LOCALE == "uz") {
                                                                                                                                                                                                          goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_uz;
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                          if (goog.LOCALE == "vi") {
                                                                                                                                                                                                            goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_vi;
                                                                                                                                                                                                          } else {
                                                                                                                                                                                                            if (goog.LOCALE == "zh") {
                                                                                                                                                                                                              goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_zh;
                                                                                                                                                                                                            } else {
                                                                                                                                                                                                              if (goog.LOCALE == "zh_CN" || goog.LOCALE == "zh-CN") {
                                                                                                                                                                                                                goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_zh;
                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                if (goog.LOCALE == "zh_HK" || goog.LOCALE == "zh-HK") {
                                                                                                                                                                                                                  goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_zh_HK;
                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                  if (goog.LOCALE == "zh_TW" || goog.LOCALE == "zh-TW") {
                                                                                                                                                                                                                    goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_zh_TW;
                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                    if (goog.LOCALE == "zu") {
                                                                                                                                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_zu;
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                      goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_en;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
;goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || width == "" || replacement.length >= width) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = parseFloat(value).toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("bouncer.core");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.format");
bouncer.core.build_multi_step = function bouncer$core$build_multi_step(var_args) {
  var args38362 = [];
  var len__30669__auto___38368 = arguments.length;
  var i__30670__auto___38369 = 0;
  while (true) {
    if (i__30670__auto___38369 < len__30669__auto___38368) {
      args38362.push(arguments[i__30670__auto___38369]);
      var G__38370 = i__30670__auto___38369 + 1;
      i__30670__auto___38369 = G__38370;
      continue;
    } else {
    }
    break;
  }
  var G__38364 = args38362.length;
  switch(G__38364) {
    case 2:
      return bouncer.core.build_multi_step.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return bouncer.core.build_multi_step.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args38362.length)].join(""));;
  }
};
bouncer.core.build_multi_step.cljs$core$IFn$_invoke$arity$2 = function(key_or_vec, fn_vec) {
  return bouncer.core.build_multi_step.call(null, key_or_vec, fn_vec, cljs.core.PersistentVector.EMPTY);
};
bouncer.core.build_multi_step.cljs$core$IFn$_invoke$arity$3 = function(key_or_vec, p__38365, acc) {
  while (true) {
    var vec__38366 = p__38365;
    var f_or_list = cljs.core.nth.call(null, vec__38366, 0, null);
    var rest = cljs.core.nthnext.call(null, vec__38366, 1);
    if (cljs.core.not.call(null, f_or_list)) {
      return acc;
    } else {
      if (cljs.core.sequential_QMARK_.call(null, f_or_list)) {
        var vec__38367 = f_or_list;
        var f = cljs.core.nth.call(null, vec__38367, 0, null);
        var opts = cljs.core.nthnext.call(null, vec__38367, 1);
        var G__38372 = key_or_vec;
        var G__38373 = rest;
        var G__38374 = cljs.core.conj.call(null, acc, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f, key_or_vec], null), opts));
        key_or_vec = G__38372;
        p__38365 = G__38373;
        acc = G__38374;
        continue;
      } else {
        var G__38375 = key_or_vec;
        var G__38376 = rest;
        var G__38377 = cljs.core.conj.call(null, acc, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f_or_list, key_or_vec], null));
        key_or_vec = G__38375;
        p__38365 = G__38376;
        acc = G__38377;
        continue;
      }
    }
    break;
  }
};
bouncer.core.build_multi_step.cljs$lang$maxFixedArity = 3;
bouncer.core.merge_path = function bouncer$core$merge_path(parent_key, validations_map) {
  var parent_key__$1 = parent_key instanceof cljs.core.Keyword ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [parent_key], null) : parent_key;
  return cljs.core.mapcat.call(null, function(parent_key__$1) {
    return function(p__38380) {
      var vec__38381 = p__38380;
      var key = cljs.core.nth.call(null, vec__38381, 0, null);
      var validations = cljs.core.nth.call(null, vec__38381, 1, null);
      if (cljs.core.vector_QMARK_.call(null, key)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, cljs.core.vector, cljs.core.concat.call(null, parent_key__$1, key)), validations], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, cljs.core.vector, cljs.core.concat.call(null, parent_key__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key], null))), validations], null);
      }
    };
  }(parent_key__$1), validations_map);
};
bouncer.core.build_steps = function bouncer$core$build_steps(p__38382) {
  var vec__38386 = p__38382;
  var head = cljs.core.nth.call(null, vec__38386, 0, null);
  var tail = cljs.core.nthnext.call(null, vec__38386, 1);
  var forms = vec__38386;
  var forms__$1 = cljs.core.map_QMARK_.call(null, head) ? cljs.core.vec.call(null, cljs.core.mapcat.call(null, cljs.core.identity, head)) : forms;
  return cljs.core.reduce.call(null, function(forms__$1, vec__38386, head, tail, forms) {
    return function(acc, p__38387) {
      var vec__38388 = p__38387;
      var key_or_vec = cljs.core.nth.call(null, vec__38388, 0, null);
      var sym_or_coll = cljs.core.nth.call(null, vec__38388, 1, null);
      var rule = vec__38388;
      if (cljs.core.vector_QMARK_.call(null, sym_or_coll)) {
        return cljs.core.concat.call(null, acc, bouncer.core.build_multi_step.call(null, key_or_vec, sym_or_coll));
      } else {
        if (cljs.core.map_QMARK_.call(null, sym_or_coll)) {
          return cljs.core.concat.call(null, acc, bouncer$core$build_steps.call(null, bouncer.core.merge_path.call(null, key_or_vec, sym_or_coll)));
        } else {
          return cljs.core.conj.call(null, acc, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym_or_coll, key_or_vec], null));
        }
      }
    };
  }(forms__$1, vec__38386, head, tail, forms), cljs.core.PersistentVector.EMPTY, cljs.core.partition.call(null, 2, forms__$1));
};
bouncer.core.pre_condition_met_QMARK_ = function bouncer$core$pre_condition_met_QMARK_(pre_fn, map) {
  var or__29600__auto__ = pre_fn == null;
  if (or__29600__auto__) {
    return or__29600__auto__;
  } else {
    return pre_fn.call(null, map);
  }
};
bouncer.core.wrap = function bouncer$core$wrap(message_fn, acc, p__38390) {
  var vec__38397 = p__38390;
  var pred = cljs.core.nth.call(null, vec__38397, 0, null);
  var k = cljs.core.nth.call(null, vec__38397, 1, null);
  var args = cljs.core.nthnext.call(null, vec__38397, 2);
  var k__$1 = cljs.core.vector_QMARK_.call(null, k) ? k : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null);
  var error_path = cljs.core.cons.call(null, new cljs.core.Keyword("bouncer.core", "errors", "bouncer.core/errors", -444562289), k__$1);
  var map__38398 = cljs.core.meta.call(null, pred);
  var map__38398__$1 = (!(map__38398 == null) ? map__38398.cljs$lang$protocol_mask$partition0$ & 64 || map__38398.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__38398) : map__38398;
  var metadata = map__38398__$1;
  var optional = cljs.core.get.call(null, map__38398__$1, new cljs.core.Keyword(null, "optional", "optional", 2053951509), false);
  var default_message_format = cljs.core.get.call(null, map__38398__$1, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "Custom validation failed for %s");
  var meta_with_defaults = cljs.core.merge.call(null, metadata, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), default_message_format, new cljs.core.Keyword(null, "optional", "optional", 2053951509), optional], null));
  var vec__38399 = cljs.core.split_with.call(null, cljs.core.complement.call(null, cljs.core.keyword_QMARK_), args);
  var args__$1 = cljs.core.nth.call(null, vec__38399, 0, null);
  var opts = cljs.core.nth.call(null, vec__38399, 1, null);
  var map__38400 = cljs.core.apply.call(null, cljs.core.hash_map, opts);
  var map__38400__$1 = (!(map__38400 == null) ? map__38400.cljs$lang$protocol_mask$partition0$ & 64 || map__38400.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__38400) : map__38400;
  var message = cljs.core.get.call(null, map__38400__$1, new cljs.core.Keyword(null, "message", "message", -406056002));
  var pre = cljs.core.get.call(null, map__38400__$1, new cljs.core.Keyword(null, "pre", "pre", 2118456869));
  var pred_subject = cljs.core.get_in.call(null, acc, k__$1);
  if (cljs.core.truth_(bouncer.core.pre_condition_met_QMARK_.call(null, pre, acc))) {
    if (cljs.core.truth_(function() {
      var or__29600__auto__ = function() {
        var and__29588__auto__ = optional;
        if (cljs.core.truth_(and__29588__auto__)) {
          return pred_subject == null;
        } else {
          return and__29588__auto__;
        }
      }();
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        var or__29600__auto____$1 = !cljs.core.empty_QMARK_.call(null, cljs.core.get_in.call(null, acc, error_path));
        if (or__29600__auto____$1) {
          return or__29600__auto____$1;
        } else {
          return cljs.core.apply.call(null, pred, pred_subject, args__$1);
        }
      }
    }())) {
      return acc;
    } else {
      return cljs.core.update_in.call(null, acc, error_path, function(k__$1, error_path, map__38398, map__38398__$1, metadata, optional, default_message_format, meta_with_defaults, vec__38399, args__$1, opts, map__38400, map__38400__$1, message, pre, pred_subject, vec__38397, pred, k, args) {
        return function(p1__38389_SHARP_) {
          return cljs.core.conj.call(null, p1__38389_SHARP_, message_fn.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), k__$1, new cljs.core.Keyword(null, "value", "value", 305978217), pred_subject, new cljs.core.Keyword(null, "args", "args", 1315556576), cljs.core.seq.call(null, args__$1), new cljs.core.Keyword(null, "metadata", "metadata", 1799301597), meta_with_defaults, new cljs.core.Keyword(null, "message", "message", -406056002), 
          message], null)));
        };
      }(k__$1, error_path, map__38398, map__38398__$1, metadata, optional, default_message_format, meta_with_defaults, vec__38399, args__$1, opts, map__38400, map__38400__$1, message, pre, pred_subject, vec__38397, pred, k, args));
    }
  } else {
    return acc;
  }
};
bouncer.core.wrap_chain = function bouncer$core$wrap_chain(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38406 = arguments.length;
  var i__30670__auto___38407 = 0;
  while (true) {
    if (i__30670__auto___38407 < len__30669__auto___38406) {
      args__30676__auto__.push(arguments[i__30670__auto___38407]);
      var G__38408 = i__30670__auto___38407 + 1;
      i__30670__auto___38407 = G__38408;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 2 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(2), 0, null) : null;
  return bouncer.core.wrap_chain.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30677__auto__);
};
bouncer.core.wrap_chain.cljs$core$IFn$_invoke$arity$variadic = function(old_state, message_fn, fs) {
  var new_state = cljs.core.reduce.call(null, cljs.core.partial.call(null, bouncer.core.wrap, message_fn), old_state, fs);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword("bouncer.core", "errors", "bouncer.core/errors", -444562289)).cljs$core$IFn$_invoke$arity$1(new_state), new_state], null);
};
bouncer.core.wrap_chain.cljs$lang$maxFixedArity = 2;
bouncer.core.wrap_chain.cljs$lang$applyTo = function(seq38403) {
  var G__38404 = cljs.core.first.call(null, seq38403);
  var seq38403__$1 = cljs.core.next.call(null, seq38403);
  var G__38405 = cljs.core.first.call(null, seq38403__$1);
  var seq38403__$2 = cljs.core.next.call(null, seq38403__$1);
  return bouncer.core.wrap_chain.cljs$core$IFn$_invoke$arity$variadic(G__38404, G__38405, seq38403__$2);
};
bouncer.core.validate_STAR_ = function bouncer$core$validate_STAR_(message_fn, m, fs) {
  var G__38414 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, m], null);
  var vec__38415 = G__38414;
  var errors = cljs.core.nth.call(null, vec__38415, 0, null);
  var state = cljs.core.nth.call(null, vec__38415, 1, null);
  var ret = vec__38415;
  var fs__$1 = fs;
  var G__38414__$1 = G__38414;
  var fs__$2 = fs__$1;
  while (true) {
    var vec__38416 = G__38414__$1;
    var errors__$1 = cljs.core.nth.call(null, vec__38416, 0, null);
    var state__$1 = cljs.core.nth.call(null, vec__38416, 1, null);
    var ret__$1 = vec__38416;
    var fs__$3 = fs__$2;
    if (cljs.core.seq.call(null, fs__$3)) {
      var G__38417 = bouncer.core.wrap_chain.call(null, state__$1, message_fn, cljs.core.first.call(null, fs__$3));
      var G__38418 = cljs.core.rest.call(null, fs__$3);
      G__38414__$1 = G__38417;
      fs__$2 = G__38418;
      continue;
    } else {
      return ret__$1;
    }
    break;
  }
};
bouncer.core.with_default_messages = function bouncer$core$with_default_messages(error) {
  var map__38421 = error;
  var map__38421__$1 = (!(map__38421 == null) ? map__38421.cljs$lang$protocol_mask$partition0$ & 64 || map__38421.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__38421) : map__38421;
  var message = cljs.core.get.call(null, map__38421__$1, new cljs.core.Keyword(null, "message", "message", -406056002));
  var path = cljs.core.get.call(null, map__38421__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
  var metadata = cljs.core.get.call(null, map__38421__$1, new cljs.core.Keyword(null, "metadata", "metadata", 1799301597));
  return goog.string.format(function() {
    var or__29600__auto__ = message;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return (new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141)).cljs$core$IFn$_invoke$arity$1(metadata);
    }
  }(), cljs.core.name.call(null, cljs.core.peek.call(null, path)));
};
bouncer.core.validate = function bouncer$core$validate(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38426 = arguments.length;
  var i__30670__auto___38427 = 0;
  while (true) {
    if (i__30670__auto___38427 < len__30669__auto___38426) {
      args__30676__auto__.push(arguments[i__30670__auto___38427]);
      var G__38428 = i__30670__auto___38427 + 1;
      i__30670__auto___38427 = G__38428;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return bouncer.core.validate.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
bouncer.core.validate.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  var vec__38424 = cljs.core.fn_QMARK_.call(null, cljs.core.first.call(null, args)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, args), cljs.core.next.call(null, args)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [bouncer.core.with_default_messages, args], null);
  var message_fn = cljs.core.nth.call(null, vec__38424, 0, null);
  var args__$1 = cljs.core.nth.call(null, vec__38424, 1, null);
  var vec__38425 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, args__$1), cljs.core.next.call(null, args__$1)], null);
  var m = cljs.core.nth.call(null, vec__38425, 0, null);
  var forms = cljs.core.nth.call(null, vec__38425, 1, null);
  return bouncer.core.validate_STAR_.call(null, message_fn, m, bouncer.core.build_steps.call(null, forms));
};
bouncer.core.validate.cljs$lang$maxFixedArity = 0;
bouncer.core.validate.cljs$lang$applyTo = function(seq38423) {
  return bouncer.core.validate.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq38423));
};
bouncer.core.valid_QMARK_ = function bouncer$core$valid_QMARK_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___38430 = arguments.length;
  var i__30670__auto___38431 = 0;
  while (true) {
    if (i__30670__auto___38431 < len__30669__auto___38430) {
      args__30676__auto__.push(arguments[i__30670__auto___38431]);
      var G__38432 = i__30670__auto___38431 + 1;
      i__30670__auto___38431 = G__38432;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return bouncer.core.valid_QMARK_.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
bouncer.core.valid_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  return cljs.core.empty_QMARK_.call(null, cljs.core.first.call(null, cljs.core.apply.call(null, bouncer.core.validate, args)));
};
bouncer.core.valid_QMARK_.cljs$lang$maxFixedArity = 0;
bouncer.core.valid_QMARK_.cljs$lang$applyTo = function(seq38429) {
  return bouncer.core.valid_QMARK_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq38429));
};
goog.provide("cljs_time.internal.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("goog.string");
goog.require("goog.string.format");
cljs_time.internal.core._EQ_ = function cljs_time$internal$core$_EQ_(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37444 = arguments.length;
  var i__30670__auto___37445 = 0;
  while (true) {
    if (i__30670__auto___37445 < len__30669__auto___37444) {
      args__30676__auto__.push(arguments[i__30670__auto___37445]);
      var G__37446 = i__30670__auto___37445 + 1;
      i__30670__auto___37445 = G__37446;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 0 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(0), 0, null) : null;
  return cljs_time.internal.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(argseq__30677__auto__);
};
cljs_time.internal.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (cljs.core.every_QMARK_.call(null, function(p1__37441_SHARP_) {
    return p1__37441_SHARP_ instanceof goog.date.Date;
  }, args)) {
    return cljs.core.apply.call(null, cljs.core._EQ_, cljs.core.map.call(null, function(p1__37442_SHARP_) {
      return p1__37442_SHARP_.getTime();
    }, args));
  } else {
    return cljs.core.apply.call(null, cljs.core._EQ_, args);
  }
};
cljs_time.internal.core._EQ_.cljs$lang$maxFixedArity = 0;
cljs_time.internal.core._EQ_.cljs$lang$applyTo = function(seq37443) {
  return cljs_time.internal.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq37443));
};
cljs_time.internal.core.leap_year_QMARK_ = function cljs_time$internal$core$leap_year_QMARK_(y) {
  if (cljs.core.mod.call(null, y, 400) === 0) {
    return true;
  } else {
    if (cljs.core.mod.call(null, y, 100) === 0) {
      return false;
    } else {
      if (cljs.core.mod.call(null, y, 4) === 0) {
        return true;
      } else {
        return false;
      }
    }
  }
};
cljs_time.internal.core.days_in_month = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
cljs_time.internal.core.year_corrected_dim = function cljs_time$internal$core$year_corrected_dim(year, month) {
  var G__37448 = cljs_time.internal.core.days_in_month.call(null, cljs.core.truth_(cljs_time.internal.core._EQ_.call(null, month, 1)) ? 11 : month - 1);
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = cljs_time.internal.core.leap_year_QMARK_.call(null, year);
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs_time.internal.core._EQ_.call(null, month, 2);
    } else {
      return and__29588__auto__;
    }
  }())) {
    return G__37448 + 1;
  } else {
    return G__37448;
  }
};
cljs_time.internal.core.valid_date_QMARK_ = function cljs_time$internal$core$valid_date_QMARK_(p__37449) {
  var map__37452 = p__37449;
  var map__37452__$1 = (!(map__37452 == null) ? map__37452.cljs$lang$protocol_mask$partition0$ & 64 || map__37452.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37452) : map__37452;
  var d = map__37452__$1;
  var years = cljs.core.get.call(null, map__37452__$1, new cljs.core.Keyword(null, "years", "years", -1298579689));
  var months = cljs.core.get.call(null, map__37452__$1, new cljs.core.Keyword(null, "months", "months", -45571637));
  var days = cljs.core.get.call(null, map__37452__$1, new cljs.core.Keyword(null, "days", "days", -1394072564));
  var hours = cljs.core.get.call(null, map__37452__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
  var minutes = cljs.core.get.call(null, map__37452__$1, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394));
  var seconds = cljs.core.get.call(null, map__37452__$1, new cljs.core.Keyword(null, "seconds", "seconds", -445266194));
  var millis = cljs.core.get.call(null, map__37452__$1, new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  var months__$1 = months + 1;
  var _GT__LT_ = function(months__$1, map__37452, map__37452__$1, d, years, months, days, hours, minutes, seconds, millis) {
    return function cljs_time$internal$core$valid_date_QMARK__$__GT__LT_(a, b, x) {
      return x >= a && x <= b;
    };
  }(months__$1, map__37452, map__37452__$1, d, years, months, days, hours, minutes, seconds, millis);
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = years;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = _GT__LT_.call(null, 1, 12, months__$1);
      if (cljs.core.truth_(and__29588__auto____$1)) {
        var and__29588__auto____$2 = _GT__LT_.call(null, 1, cljs_time.internal.core.year_corrected_dim.call(null, years, months__$1), days);
        if (cljs.core.truth_(and__29588__auto____$2)) {
          var and__29588__auto____$3 = _GT__LT_.call(null, 0, 23, hours);
          if (cljs.core.truth_(and__29588__auto____$3)) {
            var and__29588__auto____$4 = _GT__LT_.call(null, 0, 59, minutes);
            if (cljs.core.truth_(and__29588__auto____$4)) {
              var and__29588__auto____$5 = _GT__LT_.call(null, 0, 60, seconds);
              if (cljs.core.truth_(and__29588__auto____$5)) {
                return _GT__LT_.call(null, 0, 999, millis);
              } else {
                return and__29588__auto____$5;
              }
            } else {
              return and__29588__auto____$4;
            }
          } else {
            return and__29588__auto____$3;
          }
        } else {
          return and__29588__auto____$2;
        }
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return d;
  } else {
    throw cljs.core.ex_info.call(null, "Date is not valid", new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "invalid-date", "invalid-date", 2030506573), new cljs.core.Keyword(null, "date", "date", -1463434462), d], null));
  }
};
cljs_time.internal.core.index_of = function cljs_time$internal$core$index_of(coll, x) {
  return cljs.core.first.call(null, cljs.core.keep_indexed.call(null, function(p1__37455_SHARP_, p2__37454_SHARP_) {
    if (cljs.core.truth_(cljs_time.internal.core._EQ_.call(null, p2__37454_SHARP_, x))) {
      return p1__37455_SHARP_;
    } else {
      return null;
    }
  }, coll));
};
cljs_time.internal.core.format = function cljs_time$internal$core$format(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37458 = arguments.length;
  var i__30670__auto___37459 = 0;
  while (true) {
    if (i__30670__auto___37459 < len__30669__auto___37458) {
      args__30676__auto__.push(arguments[i__30670__auto___37459]);
      var G__37460 = i__30670__auto___37459 + 1;
      i__30670__auto___37459 = G__37460;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return cljs_time.internal.core.format.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
cljs_time.internal.core.format.cljs$core$IFn$_invoke$arity$variadic = function(fmt, args) {
  var args__$1 = cljs.core.map.call(null, function(x) {
    if (x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol) {
      return [cljs.core.str(x)].join("");
    } else {
      return x;
    }
  }, args);
  return cljs.core.apply.call(null, goog.string.format, fmt, args__$1);
};
cljs_time.internal.core.format.cljs$lang$maxFixedArity = 1;
cljs_time.internal.core.format.cljs$lang$applyTo = function(seq37456) {
  var G__37457 = cljs.core.first.call(null, seq37456);
  var seq37456__$1 = cljs.core.next.call(null, seq37456);
  return cljs_time.internal.core.format.cljs$core$IFn$_invoke$arity$variadic(G__37457, seq37456__$1);
};
cljs_time.internal.core.zero_pad = function cljs_time$internal$core$zero_pad(var_args) {
  var args37461 = [];
  var len__30669__auto___37464 = arguments.length;
  var i__30670__auto___37465 = 0;
  while (true) {
    if (i__30670__auto___37465 < len__30669__auto___37464) {
      args37461.push(arguments[i__30670__auto___37465]);
      var G__37466 = i__30670__auto___37465 + 1;
      i__30670__auto___37465 = G__37466;
      continue;
    } else {
    }
    break;
  }
  var G__37463 = args37461.length;
  switch(G__37463) {
    case 1:
      return cljs_time.internal.core.zero_pad.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.internal.core.zero_pad.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37461.length)].join(""));;
  }
};
cljs_time.internal.core.zero_pad.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (0 <= n && n <= 9) {
    return [cljs.core.str("0"), cljs.core.str(n)].join("");
  } else {
    return [cljs.core.str(n)].join("");
  }
};
cljs_time.internal.core.zero_pad.cljs$core$IFn$_invoke$arity$2 = function(n, zeros) {
  if (1 > zeros) {
    return [cljs.core.str(n)].join("");
  } else {
    return [cljs.core.str(clojure.string.join.call(null, cljs.core.take.call(null, zeros - cljs.core.count.call(null, [cljs.core.str(n)].join("")), cljs.core.repeat.call(null, "0")))), cljs.core.str(n)].join("");
  }
};
cljs_time.internal.core.zero_pad.cljs$lang$maxFixedArity = 2;
cljs_time.internal.core.multiplied_by = function cljs_time$internal$core$multiplied_by(period, scalar) {
  var scale_fn = function cljs_time$internal$core$multiplied_by_$_scale_fn(field) {
    if (cljs.core.truth_(field)) {
      return field * scalar;
    } else {
      return null;
    }
  };
  return cljs.core.update_in.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, cljs.core.update_in.call(null, period, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "millis", "millis", -1338288387)], null), scale_fn), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "seconds", "seconds", -445266194)], null), scale_fn), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "minutes", "minutes", 1319166394)], null), scale_fn), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "hours", "hours", 58380855)], null), scale_fn), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "days", "days", -1394072564)], null), scale_fn), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "weeks", "weeks", 1844596125)], null), scale_fn), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "months", "months", -45571637)], null), scale_fn), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "years", "years", 
  -1298579689)], null), scale_fn);
};
goog.provide("goog.date.DateLike");
goog.date.DateLike;
goog.provide("goog.i18n.TimeZone");
goog.require("goog.array");
goog.require("goog.date.DateLike");
goog.require("goog.object");
goog.require("goog.string");
goog.i18n.TimeZone = function() {
  this.timeZoneId_;
  this.standardOffset_;
  this.tzNames_;
  this.tzNamesExt_;
  this.transitions_;
};
goog.i18n.TimeZone.MILLISECONDS_PER_HOUR_ = 3600 * 1E3;
goog.i18n.TimeZone.NameType = {STD_SHORT_NAME:0, STD_LONG_NAME:1, DLT_SHORT_NAME:2, DLT_LONG_NAME:3};
goog.i18n.TimeZone.createTimeZone = function(timeZoneData) {
  if (typeof timeZoneData == "number") {
    return goog.i18n.TimeZone.createSimpleTimeZone_(timeZoneData);
  }
  var tz = new goog.i18n.TimeZone;
  tz.timeZoneId_ = timeZoneData["id"];
  tz.standardOffset_ = -timeZoneData["std_offset"];
  tz.tzNames_ = timeZoneData["names"];
  tz.tzNamesExt_ = timeZoneData["names_ext"];
  tz.transitions_ = timeZoneData["transitions"];
  return tz;
};
goog.i18n.TimeZone.createSimpleTimeZone_ = function(timeZoneOffsetInMinutes) {
  var tz = new goog.i18n.TimeZone;
  tz.standardOffset_ = timeZoneOffsetInMinutes;
  tz.timeZoneId_ = goog.i18n.TimeZone.composePosixTimeZoneID_(timeZoneOffsetInMinutes);
  var str = goog.i18n.TimeZone.composeUTCString_(timeZoneOffsetInMinutes);
  var strGMT = goog.i18n.TimeZone.composeGMTString_(timeZoneOffsetInMinutes);
  tz.tzNames_ = [str, str];
  tz.tzNamesExt_ = {STD_LONG_NAME_GMT:strGMT, STD_GENERIC_LOCATION:strGMT};
  tz.transitions_ = [];
  return tz;
};
goog.i18n.TimeZone.composeGMTString_ = function(offset) {
  var parts = ["GMT"];
  parts.push(offset <= 0 ? "+" : "-");
  offset = Math.abs(offset);
  parts.push(goog.string.padNumber(Math.floor(offset / 60) % 100, 2), ":", goog.string.padNumber(offset % 60, 2));
  return parts.join("");
};
goog.i18n.TimeZone.composePosixTimeZoneID_ = function(offset) {
  if (offset == 0) {
    return "Etc/GMT";
  }
  var parts = ["Etc/GMT", offset < 0 ? "-" : "+"];
  offset = Math.abs(offset);
  parts.push(Math.floor(offset / 60) % 100);
  offset = offset % 60;
  if (offset != 0) {
    parts.push(":", goog.string.padNumber(offset, 2));
  }
  return parts.join("");
};
goog.i18n.TimeZone.composeUTCString_ = function(offset) {
  if (offset == 0) {
    return "UTC";
  }
  var parts = ["UTC", offset < 0 ? "+" : "-"];
  offset = Math.abs(offset);
  parts.push(Math.floor(offset / 60) % 100);
  offset = offset % 60;
  if (offset != 0) {
    parts.push(":", offset);
  }
  return parts.join("");
};
goog.i18n.TimeZone.prototype.getTimeZoneData = function() {
  return {"id":this.timeZoneId_, "std_offset":-this.standardOffset_, "names":goog.array.clone(this.tzNames_), "names_ext":goog.object.clone(this.tzNamesExt_), "transitions":goog.array.clone(this.transitions_)};
};
goog.i18n.TimeZone.prototype.getDaylightAdjustment = function(date) {
  var timeInMs = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes());
  var timeInHours = timeInMs / goog.i18n.TimeZone.MILLISECONDS_PER_HOUR_;
  var index = 0;
  while (index < this.transitions_.length && timeInHours >= this.transitions_[index]) {
    index += 2;
  }
  return index == 0 ? 0 : this.transitions_[index - 1];
};
goog.i18n.TimeZone.prototype.getGMTString = function(date) {
  return goog.i18n.TimeZone.composeGMTString_(this.getOffset(date));
};
goog.i18n.TimeZone.prototype.getLongName = function(date) {
  return this.tzNames_[this.isDaylightTime(date) ? goog.i18n.TimeZone.NameType.DLT_LONG_NAME : goog.i18n.TimeZone.NameType.STD_LONG_NAME];
};
goog.i18n.TimeZone.prototype.getOffset = function(date) {
  return this.standardOffset_ - this.getDaylightAdjustment(date);
};
goog.i18n.TimeZone.prototype.getRFCTimeZoneString = function(date) {
  var offset = -this.getOffset(date);
  var parts = [offset < 0 ? "-" : "+"];
  offset = Math.abs(offset);
  parts.push(goog.string.padNumber(Math.floor(offset / 60) % 100, 2), goog.string.padNumber(offset % 60, 2));
  return parts.join("");
};
goog.i18n.TimeZone.prototype.getShortName = function(date) {
  return this.tzNames_[this.isDaylightTime(date) ? goog.i18n.TimeZone.NameType.DLT_SHORT_NAME : goog.i18n.TimeZone.NameType.STD_SHORT_NAME];
};
goog.i18n.TimeZone.prototype.getTimeZoneId = function() {
  return this.timeZoneId_;
};
goog.i18n.TimeZone.prototype.isDaylightTime = function(date) {
  return this.getDaylightAdjustment(date) > 0;
};
goog.i18n.TimeZone.prototype.getLongNameGMT = function(date) {
  if (this.isDaylightTime(date)) {
    return goog.isDef(this.tzNamesExt_.DST_LONG_NAME_GMT) ? this.tzNamesExt_.DST_LONG_NAME_GMT : this.tzNamesExt_["DST_LONG_NAME_GMT"];
  } else {
    return goog.isDef(this.tzNamesExt_.STD_LONG_NAME_GMT) ? this.tzNamesExt_.STD_LONG_NAME_GMT : this.tzNamesExt_["STD_LONG_NAME_GMT"];
  }
};
goog.i18n.TimeZone.prototype.getGenericLocation = function(date) {
  if (this.isDaylightTime(date)) {
    return goog.isDef(this.tzNamesExt_.DST_GENERIC_LOCATION) ? this.tzNamesExt_.DST_GENERIC_LOCATION : this.tzNamesExt_["DST_GENERIC_LOCATION"];
  } else {
    return goog.isDef(this.tzNamesExt_.STD_GENERIC_LOCATION) ? this.tzNamesExt_.STD_GENERIC_LOCATION : this.tzNamesExt_["STD_GENERIC_LOCATION"];
  }
};
goog.provide("goog.date");
goog.provide("goog.date.Date");
goog.provide("goog.date.DateTime");
goog.provide("goog.date.Interval");
goog.provide("goog.date.month");
goog.provide("goog.date.weekDay");
goog.require("goog.asserts");
goog.require("goog.date.DateLike");
goog.require("goog.i18n.DateTimeSymbols");
goog.require("goog.string");
goog.date.weekDay = {MON:0, TUE:1, WED:2, THU:3, FRI:4, SAT:5, SUN:6};
goog.date.month = {JAN:0, FEB:1, MAR:2, APR:3, MAY:4, JUN:5, JUL:6, AUG:7, SEP:8, OCT:9, NOV:10, DEC:11};
goog.date.formatMonthAndYear = function(monthName, yearNum) {
  var MSG_MONTH_AND_YEAR = goog.getMsg("{$monthName} {$yearNum}", {"monthName":monthName, "yearNum":yearNum});
  return MSG_MONTH_AND_YEAR;
};
goog.date.splitDateStringRegex_ = new RegExp("^(\\d{4})(?:(?:-?(\\d{2})(?:-?(\\d{2}))?)|" + "(?:-?(\\d{3}))|(?:-?W(\\d{2})(?:-?([1-7]))?))?$");
goog.date.splitTimeStringRegex_ = /^(\d{2})(?::?(\d{2})(?::?(\d{2})(\.\d+)?)?)?$/;
goog.date.splitTimezoneStringRegex_ = /Z|(?:([-+])(\d{2})(?::?(\d{2}))?)$/;
goog.date.splitDurationRegex_ = new RegExp("^(-)?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?" + "(T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$");
goog.date.MS_PER_DAY = 24 * 60 * 60 * 1E3;
goog.date.isLeapYear = function(year) {
  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
};
goog.date.isLongIsoYear = function(year) {
  var n = 5 * year + 12 - 4 * (Math.floor(year / 100) - Math.floor(year / 400));
  n += Math.floor((year - 100) / 400) - Math.floor((year - 102) / 400);
  n += Math.floor((year - 200) / 400) - Math.floor((year - 199) / 400);
  return n % 28 < 5;
};
goog.date.getNumberOfDaysInMonth = function(year, month) {
  switch(month) {
    case goog.date.month.FEB:
      return goog.date.isLeapYear(year) ? 29 : 28;
    case goog.date.month.JUN:
    ;
    case goog.date.month.SEP:
    ;
    case goog.date.month.NOV:
    ;
    case goog.date.month.APR:
      return 30;
  }
  return 31;
};
goog.date.isSameDay = function(date, opt_now) {
  var now = opt_now || new Date(goog.now());
  return date.getDate() == now.getDate() && goog.date.isSameMonth(date, now);
};
goog.date.isSameMonth = function(date, opt_now) {
  var now = opt_now || new Date(goog.now());
  return date.getMonth() == now.getMonth() && goog.date.isSameYear(date, now);
};
goog.date.isSameYear = function(date, opt_now) {
  var now = opt_now || new Date(goog.now());
  return date.getFullYear() == now.getFullYear();
};
goog.date.getWeekNumber = function(year, month, date, opt_weekDay, opt_firstDayOfWeek) {
  var d = new Date(year, month, date);
  var cutoff = goog.isDef(opt_weekDay) ? opt_weekDay : goog.date.weekDay.THU;
  var firstday = opt_firstDayOfWeek || goog.date.weekDay.MON;
  var isoday = (d.getDay() + 6) % 7;
  var daypos = (isoday - firstday + 7) % 7;
  var cutoffpos = (cutoff - firstday + 7) % 7;
  var cutoffSameWeek = d.valueOf() + (cutoffpos - daypos) * goog.date.MS_PER_DAY;
  var jan1 = (new Date((new Date(cutoffSameWeek)).getFullYear(), 0, 1)).valueOf();
  return Math.floor(Math.round((cutoffSameWeek - jan1) / goog.date.MS_PER_DAY) / 7) + 1;
};
goog.date.min = function(date1, date2) {
  return date1 < date2 ? date1 : date2;
};
goog.date.max = function(date1, date2) {
  return date1 > date2 ? date1 : date2;
};
goog.date.fromIsoString = function(formatted) {
  var ret = new goog.date.DateTime(2E3);
  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;
};
goog.date.setIso8601DateTime = function(dateTime, formatted) {
  formatted = goog.string.trim(formatted);
  var delim = formatted.indexOf("T") == -1 ? " " : "T";
  var parts = formatted.split(delim);
  return goog.date.setIso8601DateOnly_(dateTime, parts[0]) && (parts.length < 2 || goog.date.setIso8601TimeOnly_(dateTime, parts[1]));
};
goog.date.setIso8601DateOnly_ = function(d, formatted) {
  var parts = formatted.match(goog.date.splitDateStringRegex_);
  if (!parts) {
    return false;
  }
  var year = Number(parts[1]);
  var month = Number(parts[2]);
  var date = Number(parts[3]);
  var dayOfYear = Number(parts[4]);
  var week = Number(parts[5]);
  var dayOfWeek = Number(parts[6]) || 1;
  d.setFullYear(year);
  if (dayOfYear) {
    d.setDate(1);
    d.setMonth(0);
    var offset = dayOfYear - 1;
    d.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));
  } else {
    if (week) {
      goog.date.setDateFromIso8601Week_(d, week, dayOfWeek);
    } else {
      if (month) {
        d.setDate(1);
        d.setMonth(month - 1);
      }
      if (date) {
        d.setDate(date);
      }
    }
  }
  return true;
};
goog.date.setDateFromIso8601Week_ = function(d, week, dayOfWeek) {
  d.setMonth(0);
  d.setDate(1);
  var jsDay = d.getDay();
  var jan1WeekDay = jsDay || 7;
  var THURSDAY = 4;
  if (jan1WeekDay <= THURSDAY) {
    var startDelta = 1 - jan1WeekDay
  } else {
    startDelta = 8 - jan1WeekDay;
  }
  var absoluteDays = Number(dayOfWeek) + 7 * (Number(week) - 1);
  var delta = startDelta + absoluteDays - 1;
  var interval = new goog.date.Interval(goog.date.Interval.DAYS, delta);
  d.add(interval);
};
goog.date.setIso8601TimeOnly_ = function(d, formatted) {
  var parts = formatted.match(goog.date.splitTimezoneStringRegex_);
  var offset = 0;
  if (parts) {
    if (parts[0] != "Z") {
      offset = parts[2] * 60 + Number(parts[3]);
      offset *= parts[1] == "-" ? 1 : -1;
    }
    offset -= d.getTimezoneOffset();
    formatted = formatted.substr(0, formatted.length - parts[0].length);
  }
  parts = formatted.match(goog.date.splitTimeStringRegex_);
  if (!parts) {
    return false;
  }
  d.setHours(Number(parts[1]));
  d.setMinutes(Number(parts[2]) || 0);
  d.setSeconds(Number(parts[3]) || 0);
  d.setMilliseconds(parts[4] ? parts[4] * 1E3 : 0);
  if (offset != 0) {
    d.setTime(d.getTime() + offset * 6E4);
  }
  return true;
};
goog.date.Interval = function(opt_years, opt_months, opt_days, opt_hours, opt_minutes, opt_seconds) {
  if (goog.isString(opt_years)) {
    var type = opt_years;
    var interval = (opt_months);
    this.years = type == goog.date.Interval.YEARS ? interval : 0;
    this.months = type == goog.date.Interval.MONTHS ? interval : 0;
    this.days = type == goog.date.Interval.DAYS ? interval : 0;
    this.hours = type == goog.date.Interval.HOURS ? interval : 0;
    this.minutes = type == goog.date.Interval.MINUTES ? interval : 0;
    this.seconds = type == goog.date.Interval.SECONDS ? interval : 0;
  } else {
    this.years = (opt_years) || 0;
    this.months = opt_months || 0;
    this.days = opt_days || 0;
    this.hours = opt_hours || 0;
    this.minutes = opt_minutes || 0;
    this.seconds = opt_seconds || 0;
  }
};
goog.date.Interval.fromIsoString = function(duration) {
  var parts = duration.match(goog.date.splitDurationRegex_);
  if (!parts) {
    return null;
  }
  var timeEmpty = !(parts[6] || parts[7] || parts[8]);
  var dateTimeEmpty = timeEmpty && !(parts[2] || parts[3] || parts[4]);
  if (dateTimeEmpty || timeEmpty && parts[5]) {
    return null;
  }
  var negative = parts[1];
  var years = parseInt(parts[2], 10) || 0;
  var months = parseInt(parts[3], 10) || 0;
  var days = parseInt(parts[4], 10) || 0;
  var hours = parseInt(parts[6], 10) || 0;
  var minutes = parseInt(parts[7], 10) || 0;
  var seconds = parseFloat(parts[8]) || 0;
  return negative ? new goog.date.Interval(-years, -months, -days, -hours, -minutes, -seconds) : new goog.date.Interval(years, months, days, hours, minutes, seconds);
};
goog.date.Interval.prototype.toIsoString = function(opt_verbose) {
  var minField = Math.min(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);
  var maxField = Math.max(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);
  if (minField < 0 && maxField > 0) {
    return null;
  }
  if (!opt_verbose && minField == 0 && maxField == 0) {
    return "PT0S";
  }
  var res = [];
  if (minField < 0) {
    res.push("-");
  }
  res.push("P");
  if (this.years || opt_verbose) {
    res.push(Math.abs(this.years) + "Y");
  }
  if (this.months || opt_verbose) {
    res.push(Math.abs(this.months) + "M");
  }
  if (this.days || opt_verbose) {
    res.push(Math.abs(this.days) + "D");
  }
  if (this.hours || this.minutes || this.seconds || opt_verbose) {
    res.push("T");
    if (this.hours || opt_verbose) {
      res.push(Math.abs(this.hours) + "H");
    }
    if (this.minutes || opt_verbose) {
      res.push(Math.abs(this.minutes) + "M");
    }
    if (this.seconds || opt_verbose) {
      res.push(Math.abs(this.seconds) + "S");
    }
  }
  return res.join("");
};
goog.date.Interval.prototype.equals = function(other) {
  return other.years == this.years && other.months == this.months && other.days == this.days && other.hours == this.hours && other.minutes == this.minutes && other.seconds == this.seconds;
};
goog.date.Interval.prototype.clone = function() {
  return new goog.date.Interval(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);
};
goog.date.Interval.YEARS = "y";
goog.date.Interval.MONTHS = "m";
goog.date.Interval.DAYS = "d";
goog.date.Interval.HOURS = "h";
goog.date.Interval.MINUTES = "n";
goog.date.Interval.SECONDS = "s";
goog.date.Interval.prototype.isZero = function() {
  return this.years == 0 && this.months == 0 && this.days == 0 && this.hours == 0 && this.minutes == 0 && this.seconds == 0;
};
goog.date.Interval.prototype.getInverse = function() {
  return this.times(-1);
};
goog.date.Interval.prototype.times = function(n) {
  return new goog.date.Interval(this.years * n, this.months * n, this.days * n, this.hours * n, this.minutes * n, this.seconds * n);
};
goog.date.Interval.prototype.getTotalSeconds = function() {
  goog.asserts.assert(this.years == 0 && this.months == 0);
  return ((this.days * 24 + this.hours) * 60 + this.minutes) * 60 + this.seconds;
};
goog.date.Interval.prototype.add = function(interval) {
  this.years += interval.years;
  this.months += interval.months;
  this.days += interval.days;
  this.hours += interval.hours;
  this.minutes += interval.minutes;
  this.seconds += interval.seconds;
};
goog.date.Date = function(opt_year, opt_month, opt_date) {
  this.date;
  if (goog.isNumber(opt_year)) {
    this.date = this.buildDate_(opt_year, opt_month || 0, opt_date || 1);
    this.maybeFixDst_(opt_date || 1);
  } else {
    if (goog.isObject(opt_year)) {
      this.date = this.buildDate_(opt_year.getFullYear(), opt_year.getMonth(), opt_year.getDate());
      this.maybeFixDst_(opt_year.getDate());
    } else {
      this.date = new Date(goog.now());
      var expectedDate = this.date.getDate();
      this.date.setHours(0);
      this.date.setMinutes(0);
      this.date.setSeconds(0);
      this.date.setMilliseconds(0);
      this.maybeFixDst_(expectedDate);
    }
  }
};
goog.date.Date.prototype.buildDate_ = function(fullYear, month, date) {
  var d = new Date(fullYear, month, date);
  if (fullYear >= 0 && fullYear < 100) {
    d.setFullYear(d.getFullYear() - 1900);
  }
  return d;
};
goog.date.Date.prototype.firstDayOfWeek_ = goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;
goog.date.Date.prototype.firstWeekCutOffDay_ = goog.i18n.DateTimeSymbols.FIRSTWEEKCUTOFFDAY;
goog.date.Date.prototype.clone = function() {
  var date = new goog.date.Date(this.date);
  date.firstDayOfWeek_ = this.firstDayOfWeek_;
  date.firstWeekCutOffDay_ = this.firstWeekCutOffDay_;
  return date;
};
goog.date.Date.prototype.getFullYear = function() {
  return this.date.getFullYear();
};
goog.date.Date.prototype.getYear = function() {
  return this.getFullYear();
};
goog.date.Date.prototype.getMonth = function() {
  return (this.date.getMonth());
};
goog.date.Date.prototype.getDate = function() {
  return this.date.getDate();
};
goog.date.Date.prototype.getTime = function() {
  return this.date.getTime();
};
goog.date.Date.prototype.getDay = function() {
  return this.date.getDay();
};
goog.date.Date.prototype.getIsoWeekday = function() {
  return ((this.getDay() + 6) % 7);
};
goog.date.Date.prototype.getWeekday = function() {
  return (this.getIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;
};
goog.date.Date.prototype.getUTCFullYear = function() {
  return this.date.getUTCFullYear();
};
goog.date.Date.prototype.getUTCMonth = function() {
  return (this.date.getUTCMonth());
};
goog.date.Date.prototype.getUTCDate = function() {
  return this.date.getUTCDate();
};
goog.date.Date.prototype.getUTCDay = function() {
  return this.date.getDay();
};
goog.date.Date.prototype.getUTCHours = function() {
  return this.date.getUTCHours();
};
goog.date.Date.prototype.getUTCMinutes = function() {
  return this.date.getUTCMinutes();
};
goog.date.Date.prototype.getUTCIsoWeekday = function() {
  return ((this.date.getUTCDay() + 6) % 7);
};
goog.date.Date.prototype.getUTCWeekday = function() {
  return (this.getUTCIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;
};
goog.date.Date.prototype.getFirstDayOfWeek = function() {
  return this.firstDayOfWeek_;
};
goog.date.Date.prototype.getFirstWeekCutOffDay = function() {
  return this.firstWeekCutOffDay_;
};
goog.date.Date.prototype.getNumberOfDaysInMonth = function() {
  return goog.date.getNumberOfDaysInMonth(this.getFullYear(), this.getMonth());
};
goog.date.Date.prototype.getWeekNumber = function() {
  return goog.date.getWeekNumber(this.getFullYear(), this.getMonth(), this.getDate(), this.firstWeekCutOffDay_, this.firstDayOfWeek_);
};
goog.date.Date.prototype.getDayOfYear = function() {
  var dayOfYear = this.getDate();
  var year = this.getFullYear();
  for (var m = this.getMonth() - 1;m >= 0;m--) {
    dayOfYear += goog.date.getNumberOfDaysInMonth(year, m);
  }
  return dayOfYear;
};
goog.date.Date.prototype.getTimezoneOffset = function() {
  return this.date.getTimezoneOffset();
};
goog.date.Date.prototype.getTimezoneOffsetString = function() {
  var tz;
  var offset = this.getTimezoneOffset();
  if (offset == 0) {
    tz = "Z";
  } else {
    var n = Math.abs(offset) / 60;
    var h = Math.floor(n);
    var m = (n - h) * 60;
    tz = (offset > 0 ? "-" : "+") + goog.string.padNumber(h, 2) + ":" + goog.string.padNumber(m, 2);
  }
  return tz;
};
goog.date.Date.prototype.set = function(date) {
  this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
};
goog.date.Date.prototype.setFullYear = function(year) {
  this.date.setFullYear(year);
};
goog.date.Date.prototype.setYear = function(year) {
  this.setFullYear(year);
};
goog.date.Date.prototype.setMonth = function(month) {
  this.date.setMonth(month);
};
goog.date.Date.prototype.setDate = function(date) {
  this.date.setDate(date);
};
goog.date.Date.prototype.setTime = function(ms) {
  this.date.setTime(ms);
};
goog.date.Date.prototype.setUTCFullYear = function(year) {
  this.date.setUTCFullYear(year);
};
goog.date.Date.prototype.setUTCMonth = function(month) {
  this.date.setUTCMonth(month);
};
goog.date.Date.prototype.setUTCDate = function(date) {
  this.date.setUTCDate(date);
};
goog.date.Date.prototype.setFirstDayOfWeek = function(day) {
  this.firstDayOfWeek_ = day;
};
goog.date.Date.prototype.setFirstWeekCutOffDay = function(day) {
  this.firstWeekCutOffDay_ = day;
};
goog.date.Date.prototype.add = function(interval) {
  if (interval.years || interval.months) {
    var month = this.getMonth() + interval.months + interval.years * 12;
    var year = this.getYear() + Math.floor(month / 12);
    month %= 12;
    if (month < 0) {
      month += 12;
    }
    var daysInTargetMonth = goog.date.getNumberOfDaysInMonth(year, month);
    var date = Math.min(daysInTargetMonth, this.getDate());
    this.setDate(1);
    this.setFullYear(year);
    this.setMonth(month);
    this.setDate(date);
  }
  if (interval.days) {
    var noon = new Date(this.getYear(), this.getMonth(), this.getDate(), 12);
    var result = new Date(noon.getTime() + interval.days * 864E5);
    this.setDate(1);
    this.setFullYear(result.getFullYear());
    this.setMonth(result.getMonth());
    this.setDate(result.getDate());
    this.maybeFixDst_(result.getDate());
  }
};
goog.date.Date.prototype.toIsoString = function(opt_verbose, opt_tz) {
  var str = [this.getFullYear(), goog.string.padNumber(this.getMonth() + 1, 2), goog.string.padNumber(this.getDate(), 2)];
  return str.join(opt_verbose ? "-" : "") + (opt_tz ? this.getTimezoneOffsetString() : "");
};
goog.date.Date.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {
  var str = [this.getUTCFullYear(), goog.string.padNumber(this.getUTCMonth() + 1, 2), goog.string.padNumber(this.getUTCDate(), 2)];
  return str.join(opt_verbose ? "-" : "") + (opt_tz ? "Z" : "");
};
goog.date.Date.prototype.equals = function(other) {
  return !!(other && this.getYear() == other.getYear() && this.getMonth() == other.getMonth() && this.getDate() == other.getDate());
};
goog.date.Date.prototype.toString = function() {
  return this.toIsoString();
};
goog.date.Date.prototype.maybeFixDst_ = function(expected) {
  if (this.getDate() != expected) {
    var dir = this.getDate() < expected ? 1 : -1;
    this.date.setUTCHours(this.date.getUTCHours() + dir);
  }
};
goog.date.Date.prototype.valueOf = function() {
  return this.date.valueOf();
};
goog.date.Date.compare = function(date1, date2) {
  return date1.getTime() - date2.getTime();
};
goog.date.DateTime = function(opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds, opt_milliseconds) {
  if (goog.isNumber(opt_year)) {
    this.date = new Date(opt_year, opt_month || 0, opt_date || 1, opt_hours || 0, opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);
  } else {
    this.date = new Date(opt_year ? opt_year.getTime() : goog.now());
  }
};
goog.inherits(goog.date.DateTime, goog.date.Date);
goog.date.DateTime.fromTimestamp = function(timestamp) {
  var date = new goog.date.DateTime;
  date.setTime(timestamp);
  return date;
};
goog.date.DateTime.fromRfc822String = function(formatted) {
  var date = new Date(formatted);
  return !isNaN(date.getTime()) ? new goog.date.DateTime(date) : null;
};
goog.date.DateTime.prototype.getHours = function() {
  return this.date.getHours();
};
goog.date.DateTime.prototype.getMinutes = function() {
  return this.date.getMinutes();
};
goog.date.DateTime.prototype.getSeconds = function() {
  return this.date.getSeconds();
};
goog.date.DateTime.prototype.getMilliseconds = function() {
  return this.date.getMilliseconds();
};
goog.date.DateTime.prototype.getUTCDay = function() {
  return (this.date.getUTCDay());
};
goog.date.DateTime.prototype.getUTCHours = function() {
  return this.date.getUTCHours();
};
goog.date.DateTime.prototype.getUTCMinutes = function() {
  return this.date.getUTCMinutes();
};
goog.date.DateTime.prototype.getUTCSeconds = function() {
  return this.date.getUTCSeconds();
};
goog.date.DateTime.prototype.getUTCMilliseconds = function() {
  return this.date.getUTCMilliseconds();
};
goog.date.DateTime.prototype.setHours = function(hours) {
  this.date.setHours(hours);
};
goog.date.DateTime.prototype.setMinutes = function(minutes) {
  this.date.setMinutes(minutes);
};
goog.date.DateTime.prototype.setSeconds = function(seconds) {
  this.date.setSeconds(seconds);
};
goog.date.DateTime.prototype.setMilliseconds = function(ms) {
  this.date.setMilliseconds(ms);
};
goog.date.DateTime.prototype.setUTCHours = function(hours) {
  this.date.setUTCHours(hours);
};
goog.date.DateTime.prototype.setUTCMinutes = function(minutes) {
  this.date.setUTCMinutes(minutes);
};
goog.date.DateTime.prototype.setUTCSeconds = function(seconds) {
  this.date.setUTCSeconds(seconds);
};
goog.date.DateTime.prototype.setUTCMilliseconds = function(ms) {
  this.date.setUTCMilliseconds(ms);
};
goog.date.DateTime.prototype.isMidnight = function() {
  return this.getHours() == 0 && this.getMinutes() == 0 && this.getSeconds() == 0 && this.getMilliseconds() == 0;
};
goog.date.DateTime.prototype.add = function(interval) {
  goog.date.Date.prototype.add.call(this, interval);
  if (interval.hours) {
    this.setHours(this.date.getHours() + interval.hours);
  }
  if (interval.minutes) {
    this.setMinutes(this.date.getMinutes() + interval.minutes);
  }
  if (interval.seconds) {
    this.setSeconds(this.date.getSeconds() + interval.seconds);
  }
};
goog.date.DateTime.prototype.toIsoString = function(opt_verbose, opt_tz) {
  var dateString = goog.date.Date.prototype.toIsoString.call(this, opt_verbose);
  if (opt_verbose) {
    return dateString + " " + goog.string.padNumber(this.getHours(), 2) + ":" + goog.string.padNumber(this.getMinutes(), 2) + ":" + goog.string.padNumber(this.getSeconds(), 2) + (opt_tz ? this.getTimezoneOffsetString() : "");
  }
  return dateString + "T" + goog.string.padNumber(this.getHours(), 2) + goog.string.padNumber(this.getMinutes(), 2) + goog.string.padNumber(this.getSeconds(), 2) + (opt_tz ? this.getTimezoneOffsetString() : "");
};
goog.date.DateTime.prototype.toXmlDateTime = function(opt_timezone) {
  return goog.date.Date.prototype.toIsoString.call(this, true) + "T" + goog.string.padNumber(this.getHours(), 2) + ":" + goog.string.padNumber(this.getMinutes(), 2) + ":" + goog.string.padNumber(this.getSeconds(), 2) + (opt_timezone ? this.getTimezoneOffsetString() : "");
};
goog.date.DateTime.prototype.toUTCIsoString = function(opt_verbose, opt_tz) {
  var dateStr = goog.date.Date.prototype.toUTCIsoString.call(this, opt_verbose);
  if (opt_verbose) {
    return dateStr + " " + goog.string.padNumber(this.getUTCHours(), 2) + ":" + goog.string.padNumber(this.getUTCMinutes(), 2) + ":" + goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? "Z" : "");
  }
  return dateStr + "T" + goog.string.padNumber(this.getUTCHours(), 2) + goog.string.padNumber(this.getUTCMinutes(), 2) + goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? "Z" : "");
};
goog.date.DateTime.prototype.equals = function(other) {
  return this.getTime() == other.getTime();
};
goog.date.DateTime.prototype.toString = function() {
  return this.toIsoString();
};
goog.date.DateTime.prototype.toUsTimeString = function(opt_padHours, opt_showAmPm, opt_omitZeroMinutes) {
  var hours = this.getHours();
  if (!goog.isDef(opt_showAmPm)) {
    opt_showAmPm = true;
  }
  var isPM = hours == 12;
  if (hours > 12) {
    hours -= 12;
    isPM = true;
  }
  if (hours == 0 && opt_showAmPm) {
    hours = 12;
  }
  var label = opt_padHours ? goog.string.padNumber(hours, 2) : String(hours);
  var minutes = this.getMinutes();
  if (!opt_omitZeroMinutes || minutes > 0) {
    label += ":" + goog.string.padNumber(minutes, 2);
  }
  if (opt_showAmPm) {
    var MSG_TIME_AM = goog.getMsg("am");
    var MSG_TIME_PM = goog.getMsg("pm");
    label += isPM ? MSG_TIME_PM : MSG_TIME_AM;
  }
  return label;
};
goog.date.DateTime.prototype.toIsoTimeString = function(opt_showSeconds) {
  var hours = this.getHours();
  var label = goog.string.padNumber(hours, 2) + ":" + goog.string.padNumber(this.getMinutes(), 2);
  if (!goog.isDef(opt_showSeconds) || opt_showSeconds) {
    label += ":" + goog.string.padNumber(this.getSeconds(), 2);
  }
  return label;
};
goog.date.DateTime.prototype.clone = function() {
  var date = new goog.date.DateTime(this.date);
  date.setFirstDayOfWeek(this.getFirstDayOfWeek());
  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());
  return date;
};
goog.provide("goog.date.UtcDateTime");
goog.require("goog.date");
goog.require("goog.date.Date");
goog.require("goog.date.DateTime");
goog.require("goog.date.Interval");
goog.date.UtcDateTime = function(opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds, opt_milliseconds) {
  var timestamp;
  if (goog.isNumber(opt_year)) {
    timestamp = Date.UTC(opt_year, opt_month || 0, opt_date || 1, opt_hours || 0, opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);
  } else {
    timestamp = opt_year ? opt_year.getTime() : goog.now();
  }
  this.date = new Date(timestamp);
};
goog.inherits(goog.date.UtcDateTime, goog.date.DateTime);
goog.date.UtcDateTime.fromTimestamp = function(timestamp) {
  var date = new goog.date.UtcDateTime;
  date.setTime(timestamp);
  return date;
};
goog.date.UtcDateTime.fromIsoString = function(formatted) {
  var ret = new goog.date.UtcDateTime(2E3);
  return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;
};
goog.date.UtcDateTime.prototype.clone = function() {
  var date = new goog.date.UtcDateTime(this.date);
  date.setFirstDayOfWeek(this.getFirstDayOfWeek());
  date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());
  return date;
};
goog.date.UtcDateTime.prototype.add = function(interval) {
  if (interval.years || interval.months) {
    var yearsMonths = new goog.date.Interval(interval.years, interval.months);
    goog.date.Date.prototype.add.call(this, yearsMonths);
  }
  var daysAndTimeMillis = 1E3 * (interval.seconds + 60 * (interval.minutes + 60 * (interval.hours + 24 * interval.days)));
  this.date = new Date(this.date.getTime() + daysAndTimeMillis);
};
goog.date.UtcDateTime.prototype.getTimezoneOffset = function() {
  return 0;
};
goog.date.UtcDateTime.prototype.getFullYear = goog.date.DateTime.prototype.getUTCFullYear;
goog.date.UtcDateTime.prototype.getMonth = goog.date.DateTime.prototype.getUTCMonth;
goog.date.UtcDateTime.prototype.getDate = goog.date.DateTime.prototype.getUTCDate;
goog.date.UtcDateTime.prototype.getHours = goog.date.DateTime.prototype.getUTCHours;
goog.date.UtcDateTime.prototype.getMinutes = goog.date.DateTime.prototype.getUTCMinutes;
goog.date.UtcDateTime.prototype.getSeconds = goog.date.DateTime.prototype.getUTCSeconds;
goog.date.UtcDateTime.prototype.getMilliseconds = goog.date.DateTime.prototype.getUTCMilliseconds;
goog.date.UtcDateTime.prototype.getDay = goog.date.DateTime.prototype.getUTCDay;
goog.date.UtcDateTime.prototype.setFullYear = goog.date.DateTime.prototype.setUTCFullYear;
goog.date.UtcDateTime.prototype.setMonth = goog.date.DateTime.prototype.setUTCMonth;
goog.date.UtcDateTime.prototype.setDate = goog.date.DateTime.prototype.setUTCDate;
goog.date.UtcDateTime.prototype.setHours = goog.date.DateTime.prototype.setUTCHours;
goog.date.UtcDateTime.prototype.setMinutes = goog.date.DateTime.prototype.setUTCMinutes;
goog.date.UtcDateTime.prototype.setSeconds = goog.date.DateTime.prototype.setUTCSeconds;
goog.date.UtcDateTime.prototype.setMilliseconds = goog.date.DateTime.prototype.setUTCMilliseconds;
goog.provide("cljs_time.core");
goog.require("cljs.core");
goog.require("cljs_time.internal.core");
goog.require("clojure.string");
goog.require("goog.date.Date");
goog.require("goog.date.DateTime");
goog.require("goog.date.UtcDateTime");
goog.require("goog.i18n.TimeZone");
cljs_time.core._STAR_sys_time_STAR_ = null;
cljs_time.core._EQ_ = cljs_time.internal.core._EQ_;
cljs_time.core.DateTimeProtocol = function() {
};
cljs_time.core.year = function cljs_time$core$year(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$year$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$year$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.year[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.year["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.year", this$);
      }
    }
  }
};
cljs_time.core.month = function cljs_time$core$month(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$month$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$month$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.month[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.month["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.month", this$);
      }
    }
  }
};
cljs_time.core.day = function cljs_time$core$day(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$day$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$day$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.day[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.day["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.day", this$);
      }
    }
  }
};
cljs_time.core.day_of_week = function cljs_time$core$day_of_week(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$day_of_week$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$day_of_week$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.day_of_week[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.day_of_week["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.day-of-week", this$);
      }
    }
  }
};
cljs_time.core.hour = function cljs_time$core$hour(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$hour$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$hour$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.hour[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.hour["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.hour", this$);
      }
    }
  }
};
cljs_time.core.minute = function cljs_time$core$minute(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$minute$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$minute$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.minute[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.minute["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.minute", this$);
      }
    }
  }
};
cljs_time.core.sec = function cljs_time$core$sec(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$sec$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$sec$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.sec[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.sec["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.sec", this$);
      }
    }
  }
};
cljs_time.core.second = function cljs_time$core$second(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$second$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$second$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.second[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.second["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.second", this$);
      }
    }
  }
};
cljs_time.core.milli = function cljs_time$core$milli(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$milli$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$milli$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.milli[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.milli["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.milli", this$);
      }
    }
  }
};
cljs_time.core.after_QMARK_ = function cljs_time$core$after_QMARK_(this$, that) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$after_QMARK_$arity$2 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$after_QMARK_$arity$2(this$, that);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.after_QMARK_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, that);
    } else {
      var m__30264__auto____$1 = cljs_time.core.after_QMARK_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, that);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.after?", this$);
      }
    }
  }
};
cljs_time.core.before_QMARK_ = function cljs_time$core$before_QMARK_(this$, that) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$before_QMARK_$arity$2 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$before_QMARK_$arity$2(this$, that);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.before_QMARK_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, that);
    } else {
      var m__30264__auto____$1 = cljs_time.core.before_QMARK_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, that);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.before?", this$);
      }
    }
  }
};
cljs_time.core.plus_ = function cljs_time$core$plus_(this$, period) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$plus_$arity$2 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$plus_$arity$2(this$, period);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.plus_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, period);
    } else {
      var m__30264__auto____$1 = cljs_time.core.plus_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, period);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.plus-", this$);
      }
    }
  }
};
cljs_time.core.minus_ = function cljs_time$core$minus_(this$, period) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$minus_$arity$2 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$minus_$arity$2(this$, period);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.minus_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$, period);
    } else {
      var m__30264__auto____$1 = cljs_time.core.minus_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$, period);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.minus-", this$);
      }
    }
  }
};
cljs_time.core.first_day_of_the_month_ = function cljs_time$core$first_day_of_the_month_(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$first_day_of_the_month_$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$first_day_of_the_month_$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.first_day_of_the_month_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.first_day_of_the_month_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.first-day-of-the-month-", this$);
      }
    }
  }
};
cljs_time.core.last_day_of_the_month_ = function cljs_time$core$last_day_of_the_month_(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$DateTimeProtocol$last_day_of_the_month_$arity$1 == null)) {
    return this$.cljs_time$core$DateTimeProtocol$last_day_of_the_month_$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.last_day_of_the_month_[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.last_day_of_the_month_["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "DateTimeProtocol.last-day-of-the-month-", this$);
      }
    }
  }
};
cljs_time.core.InTimeUnitProtocol = function() {
};
cljs_time.core.in_millis = function cljs_time$core$in_millis(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$InTimeUnitProtocol$in_millis$arity$1 == null)) {
    return this$.cljs_time$core$InTimeUnitProtocol$in_millis$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.in_millis[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.in_millis["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "InTimeUnitProtocol.in-millis", this$);
      }
    }
  }
};
cljs_time.core.in_seconds = function cljs_time$core$in_seconds(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$InTimeUnitProtocol$in_seconds$arity$1 == null)) {
    return this$.cljs_time$core$InTimeUnitProtocol$in_seconds$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.in_seconds[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.in_seconds["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "InTimeUnitProtocol.in-seconds", this$);
      }
    }
  }
};
cljs_time.core.in_minutes = function cljs_time$core$in_minutes(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$InTimeUnitProtocol$in_minutes$arity$1 == null)) {
    return this$.cljs_time$core$InTimeUnitProtocol$in_minutes$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.in_minutes[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.in_minutes["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "InTimeUnitProtocol.in-minutes", this$);
      }
    }
  }
};
cljs_time.core.in_hours = function cljs_time$core$in_hours(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$InTimeUnitProtocol$in_hours$arity$1 == null)) {
    return this$.cljs_time$core$InTimeUnitProtocol$in_hours$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.in_hours[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.in_hours["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "InTimeUnitProtocol.in-hours", this$);
      }
    }
  }
};
cljs_time.core.in_days = function cljs_time$core$in_days(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$InTimeUnitProtocol$in_days$arity$1 == null)) {
    return this$.cljs_time$core$InTimeUnitProtocol$in_days$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.in_days[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.in_days["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "InTimeUnitProtocol.in-days", this$);
      }
    }
  }
};
cljs_time.core.in_weeks = function cljs_time$core$in_weeks(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$InTimeUnitProtocol$in_weeks$arity$1 == null)) {
    return this$.cljs_time$core$InTimeUnitProtocol$in_weeks$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.in_weeks[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.in_weeks["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "InTimeUnitProtocol.in-weeks", this$);
      }
    }
  }
};
cljs_time.core.in_months = function cljs_time$core$in_months(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$InTimeUnitProtocol$in_months$arity$1 == null)) {
    return this$.cljs_time$core$InTimeUnitProtocol$in_months$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.in_months[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.in_months["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "InTimeUnitProtocol.in-months", this$);
      }
    }
  }
};
cljs_time.core.in_years = function cljs_time$core$in_years(this$) {
  if (!(this$ == null) && !(this$.cljs_time$core$InTimeUnitProtocol$in_years$arity$1 == null)) {
    return this$.cljs_time$core$InTimeUnitProtocol$in_years$arity$1(this$);
  } else {
    var x__30263__auto__ = this$ == null ? null : this$;
    var m__30264__auto__ = cljs_time.core.in_years[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, this$);
    } else {
      var m__30264__auto____$1 = cljs_time.core.in_years["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "InTimeUnitProtocol.in-years", this$);
      }
    }
  }
};
cljs_time.core.Interval = function(start, end, __meta, __extmap, __hash) {
  this.start = start;
  this.end = end;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs_time.core.Interval.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs_time.core.Interval.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k37471, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__37473 = k37471 instanceof cljs.core.Keyword ? k37471.fqn : null;
  switch(G__37473) {
    case "start":
      return self__.start;
      break;
    case "end":
      return self__.end;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k37471, else__30225__auto__);
  }
};
cljs_time.core.Interval.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs-time.core.Interval{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start", "start", -355208981), self__.start], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "end", "end", -268185958), self__.end], null)], null), self__.__extmap));
};
cljs_time.core.Interval.prototype.cljs$core$IIterable$ = true;
cljs_time.core.Interval.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__37470) {
  var self__ = this;
  var G__37470__$1 = this;
  return new cljs.core.RecordIter(0, G__37470__$1, 2, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start", "start", -355208981), new cljs.core.Keyword(null, "end", "end", -268185958)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs_time.core.Interval.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs_time.core.Interval.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs_time.core.Interval(self__.start, self__.end, self__.__meta, self__.__extmap, self__.__hash);
};
cljs_time.core.Interval.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cljs_time.core.Interval.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs_time.core.Interval.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs_time.core.Interval.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "start", "start", -355208981), null, new cljs.core.Keyword(null, "end", "end", -268185958), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs_time.core.Interval(self__.start, self__.end, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs_time.core.Interval.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__37470) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__37474 = cljs.core.keyword_identical_QMARK_;
  var expr__37475 = k__30230__auto__;
  if (cljs.core.truth_(pred__37474.call(null, new cljs.core.Keyword(null, "start", "start", -355208981), expr__37475))) {
    return new cljs_time.core.Interval(G__37470, self__.end, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__37474.call(null, new cljs.core.Keyword(null, "end", "end", -268185958), expr__37475))) {
      return new cljs_time.core.Interval(self__.start, G__37470, self__.__meta, self__.__extmap, null);
    } else {
      return new cljs_time.core.Interval(self__.start, self__.end, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__37470), null);
    }
  }
};
cljs_time.core.Interval.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start", "start", -355208981), self__.start], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "end", "end", -268185958), self__.end], null)], null), self__.__extmap));
};
cljs_time.core.Interval.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__37470) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs_time.core.Interval(self__.start, self__.end, G__37470, self__.__extmap, self__.__hash);
};
cljs_time.core.Interval.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs_time.core.Interval.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs_time.core.Interval.cljs$lang$type = true;
cljs_time.core.Interval.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs-time.core/Interval");
};
cljs_time.core.Interval.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs-time.core/Interval");
};
cljs_time.core.__GT_Interval = function cljs_time$core$__GT_Interval(start, end) {
  return new cljs_time.core.Interval(start, end, null, null, null);
};
cljs_time.core.map__GT_Interval = function cljs_time$core$map__GT_Interval(G__37472) {
  return new cljs_time.core.Interval((new cljs.core.Keyword(null, "start", "start", -355208981)).cljs$core$IFn$_invoke$arity$1(G__37472), (new cljs.core.Keyword(null, "end", "end", -268185958)).cljs$core$IFn$_invoke$arity$1(G__37472), null, cljs.core.dissoc.call(null, G__37472, new cljs.core.Keyword(null, "start", "start", -355208981), new cljs.core.Keyword(null, "end", "end", -268185958)), null);
};
cljs_time.core.interval = function cljs_time$core$interval(start, end) {
  if (start.getTime() <= end.getTime()) {
  } else {
    throw new Error("Assert failed: (\x3c\x3d (.getTime start) (.getTime end))");
  }
  return cljs_time.core.__GT_Interval.call(null, start, end);
};
cljs_time.core.Period = function(years, months, weeks, days, hours, minutes, seconds, millis, __meta, __extmap, __hash) {
  this.years = years;
  this.months = months;
  this.weeks = weeks;
  this.days = days;
  this.hours = hours;
  this.minutes = minutes;
  this.seconds = seconds;
  this.millis = millis;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs_time.core.Period.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__30222__auto__, k__30223__auto__) {
  var self__ = this;
  var this__30222__auto____$1 = this;
  return cljs.core._lookup.call(null, this__30222__auto____$1, k__30223__auto__, null);
};
cljs_time.core.Period.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__30224__auto__, k37479, else__30225__auto__) {
  var self__ = this;
  var this__30224__auto____$1 = this;
  var G__37481 = k37479 instanceof cljs.core.Keyword ? k37479.fqn : null;
  switch(G__37481) {
    case "years":
      return self__.years;
      break;
    case "months":
      return self__.months;
      break;
    case "weeks":
      return self__.weeks;
      break;
    case "days":
      return self__.days;
      break;
    case "hours":
      return self__.hours;
      break;
    case "minutes":
      return self__.minutes;
      break;
    case "seconds":
      return self__.seconds;
      break;
    case "millis":
      return self__.millis;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k37479, else__30225__auto__);
  }
};
cljs_time.core.Period.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__30236__auto__, writer__30237__auto__, opts__30238__auto__) {
  var self__ = this;
  var this__30236__auto____$1 = this;
  var pr_pair__30239__auto__ = function(this__30236__auto____$1) {
    return function(keyval__30240__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, cljs.core.pr_writer, "", " ", "", opts__30238__auto__, keyval__30240__auto__);
    };
  }(this__30236__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__30237__auto__, pr_pair__30239__auto__, "#cljs-time.core.Period{", ", ", "}", opts__30238__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "years", "years", -1298579689), self__.years], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "months", "months", -45571637), self__.months], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), self__.weeks], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "days", "days", -1394072564), self__.days], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "hours", "hours", 58380855), self__.hours], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), self__.minutes], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seconds", "seconds", -445266194), self__.seconds], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "millis", "millis", -1338288387), self__.millis], null)], null), self__.__extmap));
};
cljs_time.core.Period.prototype.cljs$core$IIterable$ = true;
cljs_time.core.Period.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__37478) {
  var self__ = this;
  var G__37478__$1 = this;
  return new cljs.core.RecordIter(0, G__37478__$1, 8, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "years", "years", -1298579689), new cljs.core.Keyword(null, "months", "months", -45571637), new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), new cljs.core.Keyword(null, "days", "days", -1394072564), new cljs.core.Keyword(null, "hours", "hours", 58380855), new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), new cljs.core.Keyword(null, 
  "seconds", "seconds", -445266194), new cljs.core.Keyword(null, "millis", "millis", -1338288387)], null), cljs.core._iterator.call(null, self__.__extmap));
};
cljs_time.core.Period.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__30220__auto__) {
  var self__ = this;
  var this__30220__auto____$1 = this;
  return self__.__meta;
};
cljs_time.core.Period.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__30216__auto__) {
  var self__ = this;
  var this__30216__auto____$1 = this;
  return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, self__.days, self__.hours, self__.minutes, self__.seconds, self__.millis, self__.__meta, self__.__extmap, self__.__hash);
};
cljs_time.core.Period.prototype.cljs$core$ICounted$_count$arity$1 = function(this__30226__auto__) {
  var self__ = this;
  var this__30226__auto____$1 = this;
  return 8 + cljs.core.count.call(null, self__.__extmap);
};
cljs_time.core.Period.prototype.cljs$core$IHash$_hash$arity$1 = function(this__30217__auto__) {
  var self__ = this;
  var this__30217__auto____$1 = this;
  var h__30035__auto__ = self__.__hash;
  if (!(h__30035__auto__ == null)) {
    return h__30035__auto__;
  } else {
    var h__30035__auto____$1 = cljs.core.hash_imap.call(null, this__30217__auto____$1);
    self__.__hash = h__30035__auto____$1;
    return h__30035__auto____$1;
  }
};
cljs_time.core.Period.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__30218__auto__, other__30219__auto__) {
  var self__ = this;
  var this__30218__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = other__30219__auto__;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = this__30218__auto____$1.constructor === other__30219__auto__.constructor;
      if (and__29588__auto____$1) {
        return cljs.core.equiv_map.call(null, this__30218__auto____$1, other__30219__auto__);
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs_time.core.Period.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__30231__auto__, k__30232__auto__) {
  var self__ = this;
  var this__30231__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "months", "months", -45571637), null, new cljs.core.Keyword(null, "days", "days", -1394072564), null, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), null, new cljs.core.Keyword(null, "hours", "hours", 58380855), null, new cljs.core.Keyword(null, "years", "years", -1298579689), null, new cljs.core.Keyword(null, "minutes", "minutes", 
  1319166394), null, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), null, new cljs.core.Keyword(null, "millis", "millis", -1338288387), null], null), null), k__30232__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__30231__auto____$1), self__.__meta), k__30232__auto__);
  } else {
    return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, self__.days, self__.hours, self__.minutes, self__.seconds, self__.millis, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__30232__auto__)), null);
  }
};
cljs_time.core.Period.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__30229__auto__, k__30230__auto__, G__37478) {
  var self__ = this;
  var this__30229__auto____$1 = this;
  var pred__37482 = cljs.core.keyword_identical_QMARK_;
  var expr__37483 = k__30230__auto__;
  if (cljs.core.truth_(pred__37482.call(null, new cljs.core.Keyword(null, "years", "years", -1298579689), expr__37483))) {
    return new cljs_time.core.Period(G__37478, self__.months, self__.weeks, self__.days, self__.hours, self__.minutes, self__.seconds, self__.millis, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__37482.call(null, new cljs.core.Keyword(null, "months", "months", -45571637), expr__37483))) {
      return new cljs_time.core.Period(self__.years, G__37478, self__.weeks, self__.days, self__.hours, self__.minutes, self__.seconds, self__.millis, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__37482.call(null, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), expr__37483))) {
        return new cljs_time.core.Period(self__.years, self__.months, G__37478, self__.days, self__.hours, self__.minutes, self__.seconds, self__.millis, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__37482.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564), expr__37483))) {
          return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, G__37478, self__.hours, self__.minutes, self__.seconds, self__.millis, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__37482.call(null, new cljs.core.Keyword(null, "hours", "hours", 58380855), expr__37483))) {
            return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, self__.days, G__37478, self__.minutes, self__.seconds, self__.millis, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__37482.call(null, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), expr__37483))) {
              return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, self__.days, self__.hours, G__37478, self__.seconds, self__.millis, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__37482.call(null, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), expr__37483))) {
                return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, self__.days, self__.hours, self__.minutes, G__37478, self__.millis, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__37482.call(null, new cljs.core.Keyword(null, "millis", "millis", -1338288387), expr__37483))) {
                  return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, self__.days, self__.hours, self__.minutes, self__.seconds, G__37478, self__.__meta, self__.__extmap, null);
                } else {
                  return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, self__.days, self__.hours, self__.minutes, self__.seconds, self__.millis, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__30230__auto__, G__37478), null);
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs_time.core.Period.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__30234__auto__) {
  var self__ = this;
  var this__30234__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "years", "years", -1298579689), self__.years], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "months", "months", -45571637), self__.months], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), self__.weeks], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "days", "days", -1394072564), self__.days], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "hours", "hours", 58380855), self__.hours], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), self__.minutes], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seconds", "seconds", -445266194), self__.seconds], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "millis", "millis", -1338288387), self__.millis], null)], null), self__.__extmap));
};
cljs_time.core.Period.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__30221__auto__, G__37478) {
  var self__ = this;
  var this__30221__auto____$1 = this;
  return new cljs_time.core.Period(self__.years, self__.months, self__.weeks, self__.days, self__.hours, self__.minutes, self__.seconds, self__.millis, G__37478, self__.__extmap, self__.__hash);
};
cljs_time.core.Period.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__30227__auto__, entry__30228__auto__) {
  var self__ = this;
  var this__30227__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__30228__auto__)) {
    return cljs.core._assoc.call(null, this__30227__auto____$1, cljs.core._nth.call(null, entry__30228__auto__, 0), cljs.core._nth.call(null, entry__30228__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__30227__auto____$1, entry__30228__auto__);
  }
};
cljs_time.core.Period.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "years", "years", 341951838, null), new cljs.core.Symbol(null, "months", "months", 1594959890, null), new cljs.core.Symbol(null, "weeks", "weeks", -809839644, null), new cljs.core.Symbol(null, "days", "days", 246458963, null), new cljs.core.Symbol(null, "hours", "hours", 1698912382, null), new cljs.core.Symbol(null, "minutes", "minutes", -1335269375, null), new cljs.core.Symbol(null, 
  "seconds", "seconds", 1195265333, null), new cljs.core.Symbol(null, "millis", "millis", 302243140, null)], null);
};
cljs_time.core.Period.cljs$lang$type = true;
cljs_time.core.Period.cljs$lang$ctorPrSeq = function(this__30256__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs-time.core/Period");
};
cljs_time.core.Period.cljs$lang$ctorPrWriter = function(this__30256__auto__, writer__30257__auto__) {
  return cljs.core._write.call(null, writer__30257__auto__, "cljs-time.core/Period");
};
cljs_time.core.__GT_Period = function cljs_time$core$__GT_Period(years, months, weeks, days, hours, minutes, seconds, millis) {
  return new cljs_time.core.Period(years, months, weeks, days, hours, minutes, seconds, millis, null, null, null);
};
cljs_time.core.map__GT_Period = function cljs_time$core$map__GT_Period(G__37480) {
  return new cljs_time.core.Period((new cljs.core.Keyword(null, "years", "years", -1298579689)).cljs$core$IFn$_invoke$arity$1(G__37480), (new cljs.core.Keyword(null, "months", "months", -45571637)).cljs$core$IFn$_invoke$arity$1(G__37480), (new cljs.core.Keyword(null, "weeks", "weeks", 1844596125)).cljs$core$IFn$_invoke$arity$1(G__37480), (new cljs.core.Keyword(null, "days", "days", -1394072564)).cljs$core$IFn$_invoke$arity$1(G__37480), (new cljs.core.Keyword(null, "hours", "hours", 58380855)).cljs$core$IFn$_invoke$arity$1(G__37480), 
  (new cljs.core.Keyword(null, "minutes", "minutes", 1319166394)).cljs$core$IFn$_invoke$arity$1(G__37480), (new cljs.core.Keyword(null, "seconds", "seconds", -445266194)).cljs$core$IFn$_invoke$arity$1(G__37480), (new cljs.core.Keyword(null, "millis", "millis", -1338288387)).cljs$core$IFn$_invoke$arity$1(G__37480), null, cljs.core.dissoc.call(null, G__37480, new cljs.core.Keyword(null, "years", "years", -1298579689), new cljs.core.Keyword(null, "months", "months", -45571637), new cljs.core.Keyword(null, 
  "weeks", "weeks", 1844596125), new cljs.core.Keyword(null, "days", "days", -1394072564), new cljs.core.Keyword(null, "hours", "hours", 58380855), new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), new cljs.core.Keyword(null, "seconds", "seconds", -445266194), new cljs.core.Keyword(null, "millis", "millis", -1338288387)), null);
};
cljs_time.core.period = function cljs_time$core$period(var_args) {
  var args37486 = [];
  var len__30669__auto___37492 = arguments.length;
  var i__30670__auto___37493 = 0;
  while (true) {
    if (i__30670__auto___37493 < len__30669__auto___37492) {
      args37486.push(arguments[i__30670__auto___37493]);
      var G__37494 = i__30670__auto___37493 + 1;
      i__30670__auto___37493 = G__37494;
      continue;
    } else {
    }
    break;
  }
  var G__37491 = args37486.length;
  switch(G__37491) {
    case 2:
      return cljs_time.core.period.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args37486.slice(2), 0, null);
      return cljs_time.core.period.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs_time.core.period.cljs$core$IFn$_invoke$arity$2 = function(period, value) {
  return cljs_time.core.map__GT_Period.call(null, cljs.core.PersistentArrayMap.fromArray([period, value], true, false));
};
cljs_time.core.period.cljs$core$IFn$_invoke$arity$variadic = function(p1, v1, kvs) {
  return cljs.core.apply.call(null, cljs.core.assoc, cljs_time.core.period.call(null, p1, v1), kvs);
};
cljs_time.core.period.cljs$lang$applyTo = function(seq37487) {
  var G__37488 = cljs.core.first.call(null, seq37487);
  var seq37487__$1 = cljs.core.next.call(null, seq37487);
  var G__37489 = cljs.core.first.call(null, seq37487__$1);
  var seq37487__$2 = cljs.core.next.call(null, seq37487__$1);
  return cljs_time.core.period.cljs$core$IFn$_invoke$arity$variadic(G__37488, G__37489, seq37487__$2);
};
cljs_time.core.period.cljs$lang$maxFixedArity = 2;
cljs_time.core.periods = function() {
  var fixed_time_fn = function(f, set_fn, op, date, value) {
    var date__$1 = date.clone();
    if (cljs.core.truth_(value)) {
      set_fn.call(null, date__$1, op.call(null, f.call(null, date__$1), value));
    } else {
    }
    return date__$1;
  };
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "millis", "millis", -1338288387), cljs.core.partial.call(null, fixed_time_fn, cljs_time.core.milli, function(fixed_time_fn) {
    return function(p1__37496_SHARP_, p2__37497_SHARP_) {
      return p1__37496_SHARP_.setMilliseconds(p2__37497_SHARP_);
    };
  }(fixed_time_fn)), new cljs.core.Keyword(null, "seconds", "seconds", -445266194), cljs.core.partial.call(null, fixed_time_fn, cljs_time.core.second, function(fixed_time_fn) {
    return function(p1__37498_SHARP_, p2__37499_SHARP_) {
      return p1__37498_SHARP_.setSeconds(p2__37499_SHARP_);
    };
  }(fixed_time_fn)), new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), cljs.core.partial.call(null, fixed_time_fn, cljs_time.core.minute, function(fixed_time_fn) {
    return function(p1__37500_SHARP_, p2__37501_SHARP_) {
      return p1__37500_SHARP_.setMinutes(p2__37501_SHARP_);
    };
  }(fixed_time_fn)), new cljs.core.Keyword(null, "hours", "hours", 58380855), cljs.core.partial.call(null, fixed_time_fn, cljs_time.core.hour, function(fixed_time_fn) {
    return function(p1__37502_SHARP_, p2__37503_SHARP_) {
      return p1__37502_SHARP_.setHours(p2__37503_SHARP_);
    };
  }(fixed_time_fn)), new cljs.core.Keyword(null, "days", "days", -1394072564), cljs.core.partial.call(null, fixed_time_fn, cljs_time.core.day, function(fixed_time_fn) {
    return function(p1__37504_SHARP_, p2__37505_SHARP_) {
      return p1__37504_SHARP_.setDate(p2__37505_SHARP_);
    };
  }(fixed_time_fn)), new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), function(fixed_time_fn) {
    return function(op, date, value) {
      var date__$1 = date.clone();
      if (cljs.core.truth_(value)) {
        date__$1.setDate(op.call(null, cljs_time.core.day.call(null, date__$1), 7 * value));
      } else {
      }
      return date__$1;
    };
  }(fixed_time_fn), new cljs.core.Keyword(null, "months", "months", -45571637), function(fixed_time_fn) {
    return function(op, date, value) {
      var date__$1 = date.clone();
      if (cljs.core.truth_(value)) {
        var m_37506 = op.call(null, cljs_time.core.month.call(null, date__$1), value);
        var y_37507 = cljs_time.core.year.call(null, date__$1);
        var y_37508__$1 = m_37506 > 12 ? y_37507 + 1 : m_37506 < 1 ? y_37507 - 1 : y_37507;
        var m_37509__$1 = m_37506 > 12 ? cljs.core.mod.call(null, m_37506, 12) : m_37506 < 1 ? m_37506 + 12 : m_37506;
        var ldom_37510 = cljs_time.core.day.call(null, cljs_time.core.last_day_of_the_month_.call(null, new goog.date.Date(y_37508__$1, m_37509__$1 - 1, 1)));
        if (ldom_37510 < cljs_time.core.day.call(null, date__$1)) {
          date__$1.setDate(ldom_37510);
        } else {
        }
        date__$1.setMonth(m_37509__$1 - 1);
        date__$1.setYear(y_37508__$1);
      } else {
      }
      return date__$1;
    };
  }(fixed_time_fn), new cljs.core.Keyword(null, "years", "years", -1298579689), function(fixed_time_fn) {
    return function(op, date, value) {
      var date__$1 = date.clone();
      if (cljs.core.truth_(value)) {
        if (cljs.core.truth_(function() {
          var and__29588__auto__ = cljs_time.internal.core.leap_year_QMARK_.call(null, cljs_time.core.year.call(null, date__$1));
          if (cljs.core.truth_(and__29588__auto__)) {
            var and__29588__auto____$1 = cljs_time.core._EQ_.call(null, 2, cljs_time.core.month.call(null, date__$1));
            if (cljs.core.truth_(and__29588__auto____$1)) {
              return cljs_time.core._EQ_.call(null, 29, cljs_time.core.day.call(null, date__$1));
            } else {
              return and__29588__auto____$1;
            }
          } else {
            return and__29588__auto__;
          }
        }())) {
          date__$1.setDate(28);
        } else {
        }
        date__$1.setYear(op.call(null, cljs_time.core.year.call(null, date__$1), value));
      } else {
      }
      return date__$1;
    };
  }(fixed_time_fn)], null);
}();
cljs_time.core.period_fn = function cljs_time$core$period_fn(p) {
  return function(operator, date) {
    return cljs.core.reduce.call(null, function(p1__37512_SHARP_, p2__37511_SHARP_) {
      return cljs_time.core.periods.call(null, cljs.core.key.call(null, p2__37511_SHARP_)).call(null, operator, p1__37512_SHARP_, cljs.core.val.call(null, p2__37511_SHARP_));
    }, date, p);
  };
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$ = true;
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$year$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getYear();
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$month$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getMonth() + 1;
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$day$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getDate();
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$day_of_week$arity$1 = function(this$) {
  var this$__$1 = this;
  var d = this$__$1.getDay();
  if (cljs.core.truth_(cljs_time.core._EQ_.call(null, d, 0))) {
    return 7;
  } else {
    return d;
  }
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$hour$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getHours();
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$minute$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getMinutes();
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$second$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getSeconds();
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$milli$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getMilliseconds();
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$after_QMARK_$arity$2 = function(this$, that) {
  var this$__$1 = this;
  return this$__$1.getTime() > that.getTime();
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$before_QMARK_$arity$2 = function(this$, that) {
  var this$__$1 = this;
  return this$__$1.getTime() < that.getTime();
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$plus_$arity$2 = function(this$, period) {
  var this$__$1 = this;
  return cljs_time.core.period_fn.call(null, period).call(null, cljs.core._PLUS_, this$__$1);
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$minus_$arity$2 = function(this$, period) {
  var this$__$1 = this;
  return cljs_time.core.period_fn.call(null, period).call(null, cljs.core._, this$__$1);
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$first_day_of_the_month_$arity$1 = function(this$) {
  var this$__$1 = this;
  return new goog.date.UtcDateTime(this$__$1.getYear(), this$__$1.getMonth(), 1, 0, 0, 0, 0);
};
goog.date.UtcDateTime.prototype.cljs_time$core$DateTimeProtocol$last_day_of_the_month_$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.minus_.call(null, new goog.date.UtcDateTime(this$__$1.getYear(), this$__$1.getMonth() + 1, 1, 0, 0, 0, 0), cljs_time.core.period.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564), 1));
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$ = true;
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$year$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getYear();
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$month$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getMonth() + 1;
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$day$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getDate();
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$day_of_week$arity$1 = function(this$) {
  var this$__$1 = this;
  var d = this$__$1.getDay();
  if (cljs.core.truth_(cljs_time.core._EQ_.call(null, d, 0))) {
    return 7;
  } else {
    return d;
  }
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$hour$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getHours();
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$minute$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getMinutes();
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$second$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getSeconds();
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$milli$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getMilliseconds();
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$after_QMARK_$arity$2 = function(this$, that) {
  var this$__$1 = this;
  return this$__$1.getTime() > that.getTime();
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$before_QMARK_$arity$2 = function(this$, that) {
  var this$__$1 = this;
  return this$__$1.getTime() < that.getTime();
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$plus_$arity$2 = function(this$, period) {
  var this$__$1 = this;
  return cljs_time.core.period_fn.call(null, period).call(null, cljs.core._PLUS_, this$__$1);
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$minus_$arity$2 = function(this$, period) {
  var this$__$1 = this;
  return cljs_time.core.period_fn.call(null, period).call(null, cljs.core._, this$__$1);
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$first_day_of_the_month_$arity$1 = function(this$) {
  var this$__$1 = this;
  return new goog.date.DateTime(this$__$1.getYear(), this$__$1.getMonth(), 1, 0, 0, 0, 0);
};
goog.date.DateTime.prototype.cljs_time$core$DateTimeProtocol$last_day_of_the_month_$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.minus_.call(null, new goog.date.DateTime(this$__$1.getYear(), this$__$1.getMonth() + 1, 1, 0, 0, 0, 0), cljs_time.core.period.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564), 1));
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$ = true;
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$year$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getYear();
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$month$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getMonth() + 1;
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$day$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getDate();
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$day_of_week$arity$1 = function(this$) {
  var this$__$1 = this;
  var d = this$__$1.getDay();
  if (cljs.core.truth_(cljs_time.core._EQ_.call(null, d, 0))) {
    return 7;
  } else {
    return d;
  }
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$hour$arity$1 = function(this$) {
  var this$__$1 = this;
  return null;
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$minute$arity$1 = function(this$) {
  var this$__$1 = this;
  return null;
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$second$arity$1 = function(this$) {
  var this$__$1 = this;
  return null;
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$milli$arity$1 = function(this$) {
  var this$__$1 = this;
  return null;
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$after_QMARK_$arity$2 = function(this$, that) {
  var this$__$1 = this;
  return this$__$1.getTime() > that.getTime();
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$before_QMARK_$arity$2 = function(this$, that) {
  var this$__$1 = this;
  return this$__$1.getTime() < that.getTime();
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$plus_$arity$2 = function(this$, period) {
  var this$__$1 = this;
  return cljs_time.core.period_fn.call(null, period).call(null, cljs.core._PLUS_, this$__$1);
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$minus_$arity$2 = function(this$, period) {
  var this$__$1 = this;
  return cljs_time.core.period_fn.call(null, period).call(null, cljs.core._, this$__$1);
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$first_day_of_the_month_$arity$1 = function(this$) {
  var this$__$1 = this;
  return new goog.date.Date(this$__$1.getYear(), this$__$1.getMonth(), 1);
};
goog.date.Date.prototype.cljs_time$core$DateTimeProtocol$last_day_of_the_month_$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.minus_.call(null, new goog.date.Date(this$__$1.getYear(), this$__$1.getMonth() + 1, 1), cljs_time.core.period.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564), 1));
};
cljs_time.core.utc = goog.i18n.TimeZone.createTimeZone(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", -1388402092), "UTC", new cljs.core.Keyword(null, "std_offset", "std_offset", 1663653877), 0, new cljs.core.Keyword(null, "names", "names", -1943074658), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["UTC"], null), new cljs.core.Keyword(null, "transitions", "transitions", -2046216121), cljs.core.PersistentVector.EMPTY], 
null)));
cljs_time.core.now = function cljs_time$core$now() {
  if (cljs.core.truth_(cljs_time.core._STAR_sys_time_STAR_)) {
    return cljs_time.core._STAR_sys_time_STAR_;
  } else {
    return new goog.date.UtcDateTime;
  }
};
cljs_time.core.time_now = function cljs_time$core$time_now() {
  return new goog.date.DateTime;
};
cljs_time.core.at_midnight = function cljs_time$core$at_midnight(datetime) {
  var datetime__$1 = datetime.clone();
  var G__37514 = datetime__$1;
  G__37514.setHours(0);
  G__37514.setMinutes(0);
  G__37514.setSeconds(0);
  G__37514.setMilliseconds(0);
  return G__37514;
};
cljs_time.core.today_at_midnight = function cljs_time$core$today_at_midnight() {
  return cljs_time.core.at_midnight.call(null, cljs_time.core.now.call(null));
};
cljs_time.core.epoch = function cljs_time$core$epoch() {
  var G__37516 = new goog.date.UtcDateTime;
  G__37516.setTime(0);
  return G__37516;
};
cljs_time.core.date_midnight = function cljs_time$core$date_midnight(var_args) {
  var args37517 = [];
  var len__30669__auto___37520 = arguments.length;
  var i__30670__auto___37521 = 0;
  while (true) {
    if (i__30670__auto___37521 < len__30669__auto___37520) {
      args37517.push(arguments[i__30670__auto___37521]);
      var G__37522 = i__30670__auto___37521 + 1;
      i__30670__auto___37521 = G__37522;
      continue;
    } else {
    }
    break;
  }
  var G__37519 = args37517.length;
  switch(G__37519) {
    case 1:
      return cljs_time.core.date_midnight.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.core.date_midnight.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs_time.core.date_midnight.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37517.length)].join(""));;
  }
};
cljs_time.core.date_midnight.cljs$core$IFn$_invoke$arity$1 = function(year) {
  return cljs_time.core.date_midnight.call(null, year, 1, 1);
};
cljs_time.core.date_midnight.cljs$core$IFn$_invoke$arity$2 = function(year, month) {
  return cljs_time.core.date_midnight.call(null, year, month, 1);
};
cljs_time.core.date_midnight.cljs$core$IFn$_invoke$arity$3 = function(year, month, day) {
  return new goog.date.UtcDateTime(year, month - 1, day);
};
cljs_time.core.date_midnight.cljs$lang$maxFixedArity = 3;
cljs_time.core.date_time = function cljs_time$core$date_time(var_args) {
  var args37524 = [];
  var len__30669__auto___37527 = arguments.length;
  var i__30670__auto___37528 = 0;
  while (true) {
    if (i__30670__auto___37528 < len__30669__auto___37527) {
      args37524.push(arguments[i__30670__auto___37528]);
      var G__37529 = i__30670__auto___37528 + 1;
      i__30670__auto___37528 = G__37529;
      continue;
    } else {
    }
    break;
  }
  var G__37526 = args37524.length;
  switch(G__37526) {
    case 1:
      return cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37524.length)].join(""));;
  }
};
cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$1 = function(year) {
  return cljs_time.core.date_time.call(null, year, 1, 1, 0, 0, 0, 0);
};
cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$2 = function(year, month) {
  return cljs_time.core.date_time.call(null, year, month, 1, 0, 0, 0, 0);
};
cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$3 = function(year, month, day) {
  return cljs_time.core.date_time.call(null, year, month, day, 0, 0, 0, 0);
};
cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$4 = function(year, month, day, hour) {
  return cljs_time.core.date_time.call(null, year, month, day, hour, 0, 0, 0);
};
cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$5 = function(year, month, day, hour, minute) {
  return cljs_time.core.date_time.call(null, year, month, day, hour, minute, 0, 0);
};
cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$6 = function(year, month, day, hour, minute, second) {
  return cljs_time.core.date_time.call(null, year, month, day, hour, minute, second, 0);
};
cljs_time.core.date_time.cljs$core$IFn$_invoke$arity$7 = function(year, month, day, hour, minute, second, millis) {
  return new goog.date.UtcDateTime(year, month - 1, day, hour, minute, second, millis);
};
cljs_time.core.date_time.cljs$lang$maxFixedArity = 7;
cljs_time.core.local_date_time = function cljs_time$core$local_date_time(var_args) {
  var args37531 = [];
  var len__30669__auto___37534 = arguments.length;
  var i__30670__auto___37535 = 0;
  while (true) {
    if (i__30670__auto___37535 < len__30669__auto___37534) {
      args37531.push(arguments[i__30670__auto___37535]);
      var G__37536 = i__30670__auto___37535 + 1;
      i__30670__auto___37535 = G__37536;
      continue;
    } else {
    }
    break;
  }
  var G__37533 = args37531.length;
  switch(G__37533) {
    case 1:
      return cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37531.length)].join(""));;
  }
};
cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$1 = function(year) {
  return cljs_time.core.local_date_time.call(null, year, 1, 1, 0, 0, 0, 0);
};
cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$2 = function(year, month) {
  return cljs_time.core.local_date_time.call(null, year, month, 1, 0, 0, 0, 0);
};
cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$3 = function(year, month, day) {
  return cljs_time.core.local_date_time.call(null, year, month, day, 0, 0, 0, 0);
};
cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$4 = function(year, month, day, hour) {
  return cljs_time.core.local_date_time.call(null, year, month, day, hour, 0, 0, 0);
};
cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$5 = function(year, month, day, hour, minute) {
  return cljs_time.core.local_date_time.call(null, year, month, day, hour, minute, 0, 0);
};
cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$6 = function(year, month, day, hour, minute, second) {
  return cljs_time.core.local_date_time.call(null, year, month, day, hour, minute, second, 0);
};
cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$7 = function(year, month, day, hour, minute, second, millis) {
  return new goog.date.DateTime(year, month - 1, day, hour, minute, second, millis);
};
cljs_time.core.local_date_time.cljs$lang$maxFixedArity = 7;
cljs_time.core.local_date = function cljs_time$core$local_date(year, month, day) {
  return new goog.date.Date(year, month - 1, day);
};
cljs_time.core.today = function cljs_time$core$today() {
  if (cljs.core.truth_(cljs_time.core._STAR_sys_time_STAR_)) {
    var d = cljs_time.core._STAR_sys_time_STAR_;
    return new goog.date.Date(d.getYear(), d.getMonth(), d.getDate());
  } else {
    return new goog.date.Date;
  }
};
cljs_time.core.time_zone_for_offset = function cljs_time$core$time_zone_for_offset(var_args) {
  var args37538 = [];
  var len__30669__auto___37541 = arguments.length;
  var i__30670__auto___37542 = 0;
  while (true) {
    if (i__30670__auto___37542 < len__30669__auto___37541) {
      args37538.push(arguments[i__30670__auto___37542]);
      var G__37543 = i__30670__auto___37542 + 1;
      i__30670__auto___37542 = G__37543;
      continue;
    } else {
    }
    break;
  }
  var G__37540 = args37538.length;
  switch(G__37540) {
    case 1:
      return cljs_time.core.time_zone_for_offset.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.core.time_zone_for_offset.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37538.length)].join(""));;
  }
};
cljs_time.core.time_zone_for_offset.cljs$core$IFn$_invoke$arity$1 = function(hours) {
  return cljs_time.core.time_zone_for_offset.call(null, hours, null);
};
cljs_time.core.time_zone_for_offset.cljs$core$IFn$_invoke$arity$2 = function(hours, minutes) {
  var sign = hours < 0 ? new cljs.core.Keyword(null, "-", "-", -2112348439) : new cljs.core.Keyword(null, "+", "+", 1913524883);
  var fmt = [cljs.core.str("UTC%s%02d"), cljs.core.str(cljs.core.truth_(minutes) ? ":%02d" : null)].join("");
  var hours__$1 = hours < 0 ? -1 * hours : hours;
  var tz_name = cljs.core.truth_(minutes) ? cljs_time.internal.core.format.call(null, fmt, cljs.core.name.call(null, sign), hours__$1, minutes) : cljs_time.internal.core.format.call(null, fmt, cljs.core.name.call(null, sign), hours__$1);
  return cljs.core.with_meta.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", -1388402092), tz_name, new cljs.core.Keyword(null, "offset", "offset", 296498311), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [sign, hours__$1, function() {
    var or__29600__auto__ = minutes;
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return 0;
    }
  }(), 0], null), new cljs.core.Keyword(null, "rules", "rules", 1198912366), "-", new cljs.core.Keyword(null, "names", "names", -1943074658), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tz_name], null)], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("cljs-time.core", "time-zone", "cljs-time.core/time-zone", 751963705)], null));
};
cljs_time.core.time_zone_for_offset.cljs$lang$maxFixedArity = 2;
cljs_time.core.default_time_zone = function cljs_time$core$default_time_zone() {
  var hours = -1 * (new goog.date.DateTime).getTimezoneOffset() / 60;
  return cljs_time.core.time_zone_for_offset.call(null, hours | 0, cljs.core.mod.call(null, hours, 1));
};
cljs_time.core.to_default_time_zone = function cljs_time$core$to_default_time_zone(dt) {
  return new goog.date.DateTime(dt);
};
cljs_time.core.from_default_time_zone = function cljs_time$core$from_default_time_zone(dt) {
  return new goog.date.DateTime(dt.getYear(), dt.getMonth(), dt.getDate(), dt.getHours(), dt.getMinutes(), dt.getSeconds(), dt.getMilliseconds());
};
cljs_time.core.years = function cljs_time$core$years(var_args) {
  var args37545 = [];
  var len__30669__auto___37548 = arguments.length;
  var i__30670__auto___37549 = 0;
  while (true) {
    if (i__30670__auto___37549 < len__30669__auto___37548) {
      args37545.push(arguments[i__30670__auto___37549]);
      var G__37550 = i__30670__auto___37549 + 1;
      i__30670__auto___37549 = G__37550;
      continue;
    } else {
    }
    break;
  }
  var G__37547 = args37545.length;
  switch(G__37547) {
    case 0:
      return cljs_time.core.years.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.core.years.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37545.length)].join(""));;
  }
};
cljs_time.core.years.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.core.years.call(null, null);
};
cljs_time.core.years.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "years", "years", -1298579689), n);
};
cljs_time.core.years.cljs$lang$maxFixedArity = 1;
cljs_time.core.months = function cljs_time$core$months(var_args) {
  var args37552 = [];
  var len__30669__auto___37555 = arguments.length;
  var i__30670__auto___37556 = 0;
  while (true) {
    if (i__30670__auto___37556 < len__30669__auto___37555) {
      args37552.push(arguments[i__30670__auto___37556]);
      var G__37557 = i__30670__auto___37556 + 1;
      i__30670__auto___37556 = G__37557;
      continue;
    } else {
    }
    break;
  }
  var G__37554 = args37552.length;
  switch(G__37554) {
    case 0:
      return cljs_time.core.months.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.core.months.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37552.length)].join(""));;
  }
};
cljs_time.core.months.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.core.months.call(null, null);
};
cljs_time.core.months.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "months", "months", -45571637), n);
};
cljs_time.core.months.cljs$lang$maxFixedArity = 1;
cljs_time.core.weeks = function cljs_time$core$weeks(var_args) {
  var args37559 = [];
  var len__30669__auto___37562 = arguments.length;
  var i__30670__auto___37563 = 0;
  while (true) {
    if (i__30670__auto___37563 < len__30669__auto___37562) {
      args37559.push(arguments[i__30670__auto___37563]);
      var G__37564 = i__30670__auto___37563 + 1;
      i__30670__auto___37563 = G__37564;
      continue;
    } else {
    }
    break;
  }
  var G__37561 = args37559.length;
  switch(G__37561) {
    case 0:
      return cljs_time.core.weeks.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.core.weeks.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37559.length)].join(""));;
  }
};
cljs_time.core.weeks.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.core.weeks.call(null, null);
};
cljs_time.core.weeks.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), n);
};
cljs_time.core.weeks.cljs$lang$maxFixedArity = 1;
cljs_time.core.days = function cljs_time$core$days(var_args) {
  var args37566 = [];
  var len__30669__auto___37569 = arguments.length;
  var i__30670__auto___37570 = 0;
  while (true) {
    if (i__30670__auto___37570 < len__30669__auto___37569) {
      args37566.push(arguments[i__30670__auto___37570]);
      var G__37571 = i__30670__auto___37570 + 1;
      i__30670__auto___37570 = G__37571;
      continue;
    } else {
    }
    break;
  }
  var G__37568 = args37566.length;
  switch(G__37568) {
    case 0:
      return cljs_time.core.days.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.core.days.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37566.length)].join(""));;
  }
};
cljs_time.core.days.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.core.days.call(null, null);
};
cljs_time.core.days.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564), n);
};
cljs_time.core.days.cljs$lang$maxFixedArity = 1;
cljs_time.core.hours = function cljs_time$core$hours(var_args) {
  var args37573 = [];
  var len__30669__auto___37576 = arguments.length;
  var i__30670__auto___37577 = 0;
  while (true) {
    if (i__30670__auto___37577 < len__30669__auto___37576) {
      args37573.push(arguments[i__30670__auto___37577]);
      var G__37578 = i__30670__auto___37577 + 1;
      i__30670__auto___37577 = G__37578;
      continue;
    } else {
    }
    break;
  }
  var G__37575 = args37573.length;
  switch(G__37575) {
    case 0:
      return cljs_time.core.hours.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.core.hours.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37573.length)].join(""));;
  }
};
cljs_time.core.hours.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.core.hours.call(null, null);
};
cljs_time.core.hours.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "hours", "hours", 58380855), n);
};
cljs_time.core.hours.cljs$lang$maxFixedArity = 1;
cljs_time.core.minutes = function cljs_time$core$minutes(var_args) {
  var args37580 = [];
  var len__30669__auto___37583 = arguments.length;
  var i__30670__auto___37584 = 0;
  while (true) {
    if (i__30670__auto___37584 < len__30669__auto___37583) {
      args37580.push(arguments[i__30670__auto___37584]);
      var G__37585 = i__30670__auto___37584 + 1;
      i__30670__auto___37584 = G__37585;
      continue;
    } else {
    }
    break;
  }
  var G__37582 = args37580.length;
  switch(G__37582) {
    case 0:
      return cljs_time.core.minutes.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.core.minutes.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37580.length)].join(""));;
  }
};
cljs_time.core.minutes.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.core.minutes.call(null, null);
};
cljs_time.core.minutes.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), n);
};
cljs_time.core.minutes.cljs$lang$maxFixedArity = 1;
cljs_time.core.seconds = function cljs_time$core$seconds(var_args) {
  var args37587 = [];
  var len__30669__auto___37590 = arguments.length;
  var i__30670__auto___37591 = 0;
  while (true) {
    if (i__30670__auto___37591 < len__30669__auto___37590) {
      args37587.push(arguments[i__30670__auto___37591]);
      var G__37592 = i__30670__auto___37591 + 1;
      i__30670__auto___37591 = G__37592;
      continue;
    } else {
    }
    break;
  }
  var G__37589 = args37587.length;
  switch(G__37589) {
    case 0:
      return cljs_time.core.seconds.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.core.seconds.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37587.length)].join(""));;
  }
};
cljs_time.core.seconds.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.core.seconds.call(null, null);
};
cljs_time.core.seconds.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), n);
};
cljs_time.core.seconds.cljs$lang$maxFixedArity = 1;
cljs_time.core.millis = function cljs_time$core$millis(var_args) {
  var args37594 = [];
  var len__30669__auto___37597 = arguments.length;
  var i__30670__auto___37598 = 0;
  while (true) {
    if (i__30670__auto___37598 < len__30669__auto___37597) {
      args37594.push(arguments[i__30670__auto___37598]);
      var G__37599 = i__30670__auto___37598 + 1;
      i__30670__auto___37598 = G__37599;
      continue;
    } else {
    }
    break;
  }
  var G__37596 = args37594.length;
  switch(G__37596) {
    case 0:
      return cljs_time.core.millis.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.core.millis.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37594.length)].join(""));;
  }
};
cljs_time.core.millis.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.core.millis.call(null, null);
};
cljs_time.core.millis.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "millis", "millis", -1338288387), n);
};
cljs_time.core.millis.cljs$lang$maxFixedArity = 1;
cljs_time.core.plus = function cljs_time$core$plus(var_args) {
  var args37601 = [];
  var len__30669__auto___37607 = arguments.length;
  var i__30670__auto___37608 = 0;
  while (true) {
    if (i__30670__auto___37608 < len__30669__auto___37607) {
      args37601.push(arguments[i__30670__auto___37608]);
      var G__37609 = i__30670__auto___37608 + 1;
      i__30670__auto___37608 = G__37609;
      continue;
    } else {
    }
    break;
  }
  var G__37606 = args37601.length;
  switch(G__37606) {
    case 2:
      return cljs_time.core.plus.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args37601.slice(2), 0, null);
      return cljs_time.core.plus.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs_time.core.plus.cljs$core$IFn$_invoke$arity$2 = function(dt, p) {
  return cljs_time.core.plus_.call(null, dt, p);
};
cljs_time.core.plus.cljs$core$IFn$_invoke$arity$variadic = function(dt, p, ps) {
  return cljs.core.reduce.call(null, cljs_time.core.plus_, cljs_time.core.plus_.call(null, dt, p), ps);
};
cljs_time.core.plus.cljs$lang$applyTo = function(seq37602) {
  var G__37603 = cljs.core.first.call(null, seq37602);
  var seq37602__$1 = cljs.core.next.call(null, seq37602);
  var G__37604 = cljs.core.first.call(null, seq37602__$1);
  var seq37602__$2 = cljs.core.next.call(null, seq37602__$1);
  return cljs_time.core.plus.cljs$core$IFn$_invoke$arity$variadic(G__37603, G__37604, seq37602__$2);
};
cljs_time.core.plus.cljs$lang$maxFixedArity = 2;
cljs_time.core.minus = function cljs_time$core$minus(var_args) {
  var args37611 = [];
  var len__30669__auto___37617 = arguments.length;
  var i__30670__auto___37618 = 0;
  while (true) {
    if (i__30670__auto___37618 < len__30669__auto___37617) {
      args37611.push(arguments[i__30670__auto___37618]);
      var G__37619 = i__30670__auto___37618 + 1;
      i__30670__auto___37618 = G__37619;
      continue;
    } else {
    }
    break;
  }
  var G__37616 = args37611.length;
  switch(G__37616) {
    case 2:
      return cljs_time.core.minus.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args37611.slice(2), 0, null);
      return cljs_time.core.minus.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
cljs_time.core.minus.cljs$core$IFn$_invoke$arity$2 = function(dt, p) {
  return cljs_time.core.minus_.call(null, dt, p);
};
cljs_time.core.minus.cljs$core$IFn$_invoke$arity$variadic = function(dt, p, ps) {
  return cljs.core.reduce.call(null, cljs_time.core.minus_, cljs_time.core.minus_.call(null, dt, p), ps);
};
cljs_time.core.minus.cljs$lang$applyTo = function(seq37612) {
  var G__37613 = cljs.core.first.call(null, seq37612);
  var seq37612__$1 = cljs.core.next.call(null, seq37612);
  var G__37614 = cljs.core.first.call(null, seq37612__$1);
  var seq37612__$2 = cljs.core.next.call(null, seq37612__$1);
  return cljs_time.core.minus.cljs$core$IFn$_invoke$arity$variadic(G__37613, G__37614, seq37612__$2);
};
cljs_time.core.minus.cljs$lang$maxFixedArity = 2;
cljs_time.core.ago = function cljs_time$core$ago(period) {
  return cljs_time.core.minus.call(null, cljs_time.core.now.call(null), period);
};
cljs_time.core.yesterday = function cljs_time$core$yesterday() {
  return cljs_time.core.ago.call(null, cljs_time.core.days.call(null, 1));
};
cljs_time.core.from_now = function cljs_time$core$from_now(period) {
  return cljs_time.core.plus.call(null, cljs_time.core.now.call(null), period);
};
cljs_time.core.earliest = function cljs_time$core$earliest(var_args) {
  var args37621 = [];
  var len__30669__auto___37624 = arguments.length;
  var i__30670__auto___37625 = 0;
  while (true) {
    if (i__30670__auto___37625 < len__30669__auto___37624) {
      args37621.push(arguments[i__30670__auto___37625]);
      var G__37626 = i__30670__auto___37625 + 1;
      i__30670__auto___37625 = G__37626;
      continue;
    } else {
    }
    break;
  }
  var G__37623 = args37621.length;
  switch(G__37623) {
    case 2:
      return cljs_time.core.earliest.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return cljs_time.core.earliest.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37621.length)].join(""));;
  }
};
cljs_time.core.earliest.cljs$core$IFn$_invoke$arity$2 = function(dt1, dt2) {
  if (cljs.core.truth_(cljs_time.core.before_QMARK_.call(null, dt1, dt2))) {
    return dt1;
  } else {
    return dt2;
  }
};
cljs_time.core.earliest.cljs$core$IFn$_invoke$arity$1 = function(dts) {
  return cljs.core.reduce.call(null, cljs_time.core.earliest, dts);
};
cljs_time.core.earliest.cljs$lang$maxFixedArity = 2;
cljs_time.core.latest = function cljs_time$core$latest(var_args) {
  var args37628 = [];
  var len__30669__auto___37631 = arguments.length;
  var i__30670__auto___37632 = 0;
  while (true) {
    if (i__30670__auto___37632 < len__30669__auto___37631) {
      args37628.push(arguments[i__30670__auto___37632]);
      var G__37633 = i__30670__auto___37632 + 1;
      i__30670__auto___37632 = G__37633;
      continue;
    } else {
    }
    break;
  }
  var G__37630 = args37628.length;
  switch(G__37630) {
    case 2:
      return cljs_time.core.latest.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return cljs_time.core.latest.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37628.length)].join(""));;
  }
};
cljs_time.core.latest.cljs$core$IFn$_invoke$arity$2 = function(dt1, dt2) {
  if (cljs.core.truth_(cljs_time.core.after_QMARK_.call(null, dt1, dt2))) {
    return dt1;
  } else {
    return dt2;
  }
};
cljs_time.core.latest.cljs$core$IFn$_invoke$arity$1 = function(dts) {
  return cljs.core.reduce.call(null, cljs_time.core.latest, dts);
};
cljs_time.core.latest.cljs$lang$maxFixedArity = 2;
cljs_time.core.start = function cljs_time$core$start(in$) {
  return (new cljs.core.Keyword(null, "start", "start", -355208981)).cljs$core$IFn$_invoke$arity$1(in$);
};
cljs_time.core.end = function cljs_time$core$end(in$) {
  return (new cljs.core.Keyword(null, "end", "end", -268185958)).cljs$core$IFn$_invoke$arity$1(in$);
};
cljs_time.core.extend = function cljs_time$core$extend(var_args) {
  var args__30676__auto__ = [];
  var len__30669__auto___37637 = arguments.length;
  var i__30670__auto___37638 = 0;
  while (true) {
    if (i__30670__auto___37638 < len__30669__auto___37637) {
      args__30676__auto__.push(arguments[i__30670__auto___37638]);
      var G__37639 = i__30670__auto___37638 + 1;
      i__30670__auto___37638 = G__37639;
      continue;
    } else {
    }
    break;
  }
  var argseq__30677__auto__ = 1 < args__30676__auto__.length ? new cljs.core.IndexedSeq(args__30676__auto__.slice(1), 0, null) : null;
  return cljs_time.core.extend.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__30677__auto__);
};
cljs_time.core.extend.cljs$core$IFn$_invoke$arity$variadic = function(in$, by) {
  return cljs.core.assoc.call(null, in$, new cljs.core.Keyword(null, "end", "end", -268185958), cljs.core.apply.call(null, cljs_time.core.plus, cljs_time.core.end.call(null, in$), by));
};
cljs_time.core.extend.cljs$lang$maxFixedArity = 1;
cljs_time.core.extend.cljs$lang$applyTo = function(seq37635) {
  var G__37636 = cljs.core.first.call(null, seq37635);
  var seq37635__$1 = cljs.core.next.call(null, seq37635);
  return cljs_time.core.extend.cljs$core$IFn$_invoke$arity$variadic(G__37636, seq37635__$1);
};
cljs_time.core.month_range = function cljs_time$core$month_range(p__37642) {
  var map__37645 = p__37642;
  var map__37645__$1 = (!(map__37645 == null) ? map__37645.cljs$lang$protocol_mask$partition0$ & 64 || map__37645.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37645) : map__37645;
  var start = cljs.core.get.call(null, map__37645__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end = cljs.core.get.call(null, map__37645__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  return cljs.core.take_while.call(null, function(map__37645, map__37645__$1, start, end) {
    return function(p1__37640_SHARP_) {
      return cljs_time.core.before_QMARK_.call(null, p1__37640_SHARP_, end);
    };
  }(map__37645, map__37645__$1, start, end), cljs.core.map.call(null, function(map__37645, map__37645__$1, start, end) {
    return function(p1__37641_SHARP_) {
      return cljs_time.core.plus.call(null, start, cljs_time.core.months.call(null, p1__37641_SHARP_ + 1));
    };
  }(map__37645, map__37645__$1, start, end), cljs.core.range.call(null)));
};
cljs_time.core.total_days_in_whole_months = function cljs_time$core$total_days_in_whole_months(interval) {
  return cljs.core.map.call(null, function(p1__37647_SHARP_) {
    return p1__37647_SHARP_.getNumberOfDaysInMonth();
  }, cljs_time.core.month_range.call(null, interval));
};
cljs_time.core.in_months_ = function cljs_time$core$in_months_(p__37648) {
  var map__37651 = p__37648;
  var map__37651__$1 = (!(map__37651 == null) ? map__37651.cljs$lang$protocol_mask$partition0$ & 64 || map__37651.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37651) : map__37651;
  var interval = map__37651__$1;
  var start = cljs.core.get.call(null, map__37651__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end = cljs.core.get.call(null, map__37651__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  return cljs.core.count.call(null, cljs_time.core.total_days_in_whole_months.call(null, interval));
};
cljs_time.core.in_years_ = function cljs_time$core$in_years_(p__37653) {
  var map__37656 = p__37653;
  var map__37656__$1 = (!(map__37656 == null) ? map__37656.cljs$lang$protocol_mask$partition0$ & 64 || map__37656.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37656) : map__37656;
  var start = cljs.core.get.call(null, map__37656__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end = cljs.core.get.call(null, map__37656__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  var sm = cljs_time.core.month.call(null, start);
  var sd = cljs_time.core.day.call(null, start);
  var em = cljs_time.core.month.call(null, end);
  var ed = cljs_time.core.day.call(null, end);
  var d1 = cljs.core.truth_(function() {
    var and__29588__auto__ = cljs_time.core._EQ_.call(null, sm, 2);
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = cljs_time.core._EQ_.call(null, sd, 29);
      if (cljs.core.truth_(and__29588__auto____$1)) {
        var and__29588__auto____$2 = cljs_time.core._EQ_.call(null, em, 2);
        if (cljs.core.truth_(and__29588__auto____$2)) {
          return cljs_time.core._EQ_.call(null, ed, 28);
        } else {
          return and__29588__auto____$2;
        }
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }()) ? 0 : cljs.core.truth_(cljs_time.core.before_QMARK_.call(null, cljs_time.core.date_time.call(null, cljs_time.core.year.call(null, start), sm, sd), cljs_time.core.date_time.call(null, cljs_time.core.year.call(null, start), em, ed))) ? 0 : cljs.core.truth_(cljs_time.core.after_QMARK_.call(null, cljs_time.core.date_time.call(null, cljs_time.core.year.call(null, start), sm, sd), cljs_time.core.date_time.call(null, cljs_time.core.year.call(null, start), em, ed))) ? 1 : 0;
  return cljs_time.core.year.call(null, end) - cljs_time.core.year.call(null, start) - d1;
};
cljs_time.core.conversion_error = function cljs_time$core$conversion_error(from, to) {
  var from__$1 = clojure.string.capitalize.call(null, cljs.core.name.call(null, from));
  var to__$1 = cljs.core.name.call(null, to);
  throw cljs.core.ex_info.call(null, cljs_time.internal.core.format.call(null, "%s cannot be converted to %s", from__$1, to__$1), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "unsupported-operation", "unsupported-operation", 1890540953)], null));
};
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$ = true;
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$in_millis$arity$1 = function(p__37658) {
  var map__37659 = p__37658;
  var map__37659__$1 = (!(map__37659 == null) ? map__37659.cljs$lang$protocol_mask$partition0$ & 64 || map__37659.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37659) : map__37659;
  var millis = cljs.core.get.call(null, map__37659__$1, new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  var seconds = cljs.core.get.call(null, map__37659__$1, new cljs.core.Keyword(null, "seconds", "seconds", -445266194));
  var minutes = cljs.core.get.call(null, map__37659__$1, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394));
  var hours = cljs.core.get.call(null, map__37659__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
  var days = cljs.core.get.call(null, map__37659__$1, new cljs.core.Keyword(null, "days", "days", -1394072564));
  var weeks = cljs.core.get.call(null, map__37659__$1, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125));
  var months = cljs.core.get.call(null, map__37659__$1, new cljs.core.Keyword(null, "months", "months", -45571637));
  var years = cljs.core.get.call(null, map__37659__$1, new cljs.core.Keyword(null, "years", "years", -1298579689));
  var map__37661 = this;
  var map__37661__$1 = (!(map__37661 == null) ? map__37661.cljs$lang$protocol_mask$partition0$ & 64 || map__37661.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37661) : map__37661;
  var millis__$1 = cljs.core.get.call(null, map__37661__$1, new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  var seconds__$1 = cljs.core.get.call(null, map__37661__$1, new cljs.core.Keyword(null, "seconds", "seconds", -445266194));
  var minutes__$1 = cljs.core.get.call(null, map__37661__$1, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394));
  var hours__$1 = cljs.core.get.call(null, map__37661__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
  var days__$1 = cljs.core.get.call(null, map__37661__$1, new cljs.core.Keyword(null, "days", "days", -1394072564));
  var weeks__$1 = cljs.core.get.call(null, map__37661__$1, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125));
  var months__$1 = cljs.core.get.call(null, map__37661__$1, new cljs.core.Keyword(null, "months", "months", -45571637));
  var years__$1 = cljs.core.get.call(null, map__37661__$1, new cljs.core.Keyword(null, "years", "years", -1298579689));
  if (cljs.core.truth_(months__$1)) {
    return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "months", "months", -45571637), new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  } else {
    if (cljs.core.truth_(years__$1)) {
      return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "years", "years", -1298579689), new cljs.core.Keyword(null, "millis", "millis", -1338288387));
    } else {
      return millis__$1 + seconds__$1 * 1E3 + minutes__$1 * 60 * 1E3 + hours__$1 * 60 * 60 * 1E3 + days__$1 * 24 * 60 * 60 * 1E3 + weeks__$1 * 7 * 24 * 60 * 60 * 1E3;
    }
  }
};
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$in_seconds$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_millis.call(null, this$__$1) / 1E3 | 0;
};
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$in_minutes$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_seconds.call(null, this$__$1) / 60 | 0;
};
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$in_hours$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_minutes.call(null, this$__$1) / 60 | 0;
};
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$in_days$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_hours.call(null, this$__$1) / 24 | 0;
};
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$in_weeks$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_days.call(null, this$__$1) / 7 | 0;
};
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$in_months$arity$1 = function(p__37663) {
  var map__37664 = p__37663;
  var map__37664__$1 = (!(map__37664 == null) ? map__37664.cljs$lang$protocol_mask$partition0$ & 64 || map__37664.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37664) : map__37664;
  var millis = cljs.core.get.call(null, map__37664__$1, new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  var seconds = cljs.core.get.call(null, map__37664__$1, new cljs.core.Keyword(null, "seconds", "seconds", -445266194));
  var minutes = cljs.core.get.call(null, map__37664__$1, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394));
  var hours = cljs.core.get.call(null, map__37664__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
  var days = cljs.core.get.call(null, map__37664__$1, new cljs.core.Keyword(null, "days", "days", -1394072564));
  var weeks = cljs.core.get.call(null, map__37664__$1, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125));
  var months = cljs.core.get.call(null, map__37664__$1, new cljs.core.Keyword(null, "months", "months", -45571637));
  var years = cljs.core.get.call(null, map__37664__$1, new cljs.core.Keyword(null, "years", "years", -1298579689));
  var map__37666 = this;
  var map__37666__$1 = (!(map__37666 == null) ? map__37666.cljs$lang$protocol_mask$partition0$ & 64 || map__37666.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37666) : map__37666;
  var millis__$1 = cljs.core.get.call(null, map__37666__$1, new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  var seconds__$1 = cljs.core.get.call(null, map__37666__$1, new cljs.core.Keyword(null, "seconds", "seconds", -445266194));
  var minutes__$1 = cljs.core.get.call(null, map__37666__$1, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394));
  var hours__$1 = cljs.core.get.call(null, map__37666__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
  var days__$1 = cljs.core.get.call(null, map__37666__$1, new cljs.core.Keyword(null, "days", "days", -1394072564));
  var weeks__$1 = cljs.core.get.call(null, map__37666__$1, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125));
  var months__$1 = cljs.core.get.call(null, map__37666__$1, new cljs.core.Keyword(null, "months", "months", -45571637));
  var years__$1 = cljs.core.get.call(null, map__37666__$1, new cljs.core.Keyword(null, "years", "years", -1298579689));
  if (cljs.core.truth_(millis__$1)) {
    return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "millis", "millis", -1338288387), new cljs.core.Keyword(null, "months", "months", -45571637));
  } else {
    if (cljs.core.truth_(seconds__$1)) {
      return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), new cljs.core.Keyword(null, "months", "months", -45571637));
    } else {
      if (cljs.core.truth_(minutes__$1)) {
        return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), new cljs.core.Keyword(null, "months", "months", -45571637));
      } else {
        if (cljs.core.truth_(hours__$1)) {
          return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "hours", "hours", 58380855), new cljs.core.Keyword(null, "months", "months", -45571637));
        } else {
          if (cljs.core.truth_(days__$1)) {
            return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564), new cljs.core.Keyword(null, "months", "months", -45571637));
          } else {
            if (cljs.core.truth_(weeks__$1)) {
              return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), new cljs.core.Keyword(null, "months", "months", -45571637));
            } else {
              if (cljs.core.truth_(months__$1)) {
                return months__$1 + function() {
                  var or__29600__auto__ = years__$1;
                  if (cljs.core.truth_(or__29600__auto__)) {
                    return or__29600__auto__;
                  } else {
                    return 0;
                  }
                }() * 12;
              } else {
                if (cljs.core.truth_(years__$1)) {
                  return years__$1 * 12;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs_time.core.Period.prototype.cljs_time$core$InTimeUnitProtocol$in_years$arity$1 = function(p__37668) {
  var map__37669 = p__37668;
  var map__37669__$1 = (!(map__37669 == null) ? map__37669.cljs$lang$protocol_mask$partition0$ & 64 || map__37669.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37669) : map__37669;
  var millis = cljs.core.get.call(null, map__37669__$1, new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  var seconds = cljs.core.get.call(null, map__37669__$1, new cljs.core.Keyword(null, "seconds", "seconds", -445266194));
  var minutes = cljs.core.get.call(null, map__37669__$1, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394));
  var hours = cljs.core.get.call(null, map__37669__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
  var days = cljs.core.get.call(null, map__37669__$1, new cljs.core.Keyword(null, "days", "days", -1394072564));
  var weeks = cljs.core.get.call(null, map__37669__$1, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125));
  var months = cljs.core.get.call(null, map__37669__$1, new cljs.core.Keyword(null, "months", "months", -45571637));
  var years = cljs.core.get.call(null, map__37669__$1, new cljs.core.Keyword(null, "years", "years", -1298579689));
  var map__37671 = this;
  var map__37671__$1 = (!(map__37671 == null) ? map__37671.cljs$lang$protocol_mask$partition0$ & 64 || map__37671.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37671) : map__37671;
  var millis__$1 = cljs.core.get.call(null, map__37671__$1, new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  var seconds__$1 = cljs.core.get.call(null, map__37671__$1, new cljs.core.Keyword(null, "seconds", "seconds", -445266194));
  var minutes__$1 = cljs.core.get.call(null, map__37671__$1, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394));
  var hours__$1 = cljs.core.get.call(null, map__37671__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
  var days__$1 = cljs.core.get.call(null, map__37671__$1, new cljs.core.Keyword(null, "days", "days", -1394072564));
  var weeks__$1 = cljs.core.get.call(null, map__37671__$1, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125));
  var months__$1 = cljs.core.get.call(null, map__37671__$1, new cljs.core.Keyword(null, "months", "months", -45571637));
  var years__$1 = cljs.core.get.call(null, map__37671__$1, new cljs.core.Keyword(null, "years", "years", -1298579689));
  if (cljs.core.truth_(millis__$1)) {
    return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "millis", "millis", -1338288387), new cljs.core.Keyword(null, "years", "years", -1298579689));
  } else {
    if (cljs.core.truth_(seconds__$1)) {
      return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), new cljs.core.Keyword(null, "years", "years", -1298579689));
    } else {
      if (cljs.core.truth_(minutes__$1)) {
        return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), new cljs.core.Keyword(null, "years", "years", -1298579689));
      } else {
        if (cljs.core.truth_(hours__$1)) {
          return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "hours", "hours", 58380855), new cljs.core.Keyword(null, "years", "years", -1298579689));
        } else {
          if (cljs.core.truth_(days__$1)) {
            return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564), new cljs.core.Keyword(null, "years", "years", -1298579689));
          } else {
            if (cljs.core.truth_(weeks__$1)) {
              return cljs_time.core.conversion_error.call(null, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), new cljs.core.Keyword(null, "years", "years", -1298579689));
            } else {
              if (cljs.core.truth_(months__$1)) {
                return months__$1 / 12 + years__$1 | 0;
              } else {
                if (cljs.core.truth_(years__$1)) {
                  return years__$1;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$ = true;
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$in_millis$arity$1 = function(p__37673) {
  var map__37674 = p__37673;
  var map__37674__$1 = (!(map__37674 == null) ? map__37674.cljs$lang$protocol_mask$partition0$ & 64 || map__37674.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37674) : map__37674;
  var start = cljs.core.get.call(null, map__37674__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end = cljs.core.get.call(null, map__37674__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  var map__37676 = this;
  var map__37676__$1 = (!(map__37676 == null) ? map__37676.cljs$lang$protocol_mask$partition0$ & 64 || map__37676.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37676) : map__37676;
  var start__$1 = cljs.core.get.call(null, map__37676__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end__$1 = cljs.core.get.call(null, map__37676__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  return end__$1.getTime() - start__$1.getTime();
};
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$in_seconds$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_millis.call(null, this$__$1) / 1E3 | 0;
};
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$in_minutes$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_seconds.call(null, this$__$1) / 60 | 0;
};
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$in_hours$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_minutes.call(null, this$__$1) / 60 | 0;
};
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$in_days$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_hours.call(null, this$__$1) / 24 | 0;
};
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$in_weeks$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_days.call(null, this$__$1) / 7 | 0;
};
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$in_months$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_months_.call(null, this$__$1);
};
cljs_time.core.Interval.prototype.cljs_time$core$InTimeUnitProtocol$in_years$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs_time.core.in_years_.call(null, this$__$1);
};
cljs_time.core.within_QMARK_ = function cljs_time$core$within_QMARK_(var_args) {
  var args37678 = [];
  var len__30669__auto___37684 = arguments.length;
  var i__30670__auto___37685 = 0;
  while (true) {
    if (i__30670__auto___37685 < len__30669__auto___37684) {
      args37678.push(arguments[i__30670__auto___37685]);
      var G__37686 = i__30670__auto___37685 + 1;
      i__30670__auto___37685 = G__37686;
      continue;
    } else {
    }
    break;
  }
  var G__37680 = args37678.length;
  switch(G__37680) {
    case 2:
      return cljs_time.core.within_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs_time.core.within_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37678.length)].join(""));;
  }
};
cljs_time.core.within_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(p__37681, date) {
  var map__37682 = p__37681;
  var map__37682__$1 = (!(map__37682 == null) ? map__37682.cljs$lang$protocol_mask$partition0$ & 64 || map__37682.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37682) : map__37682;
  var start = cljs.core.get.call(null, map__37682__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end = cljs.core.get.call(null, map__37682__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  return cljs_time.core.within_QMARK_.call(null, start, end, date);
};
cljs_time.core.within_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(start, end, date) {
  var or__29600__auto__ = cljs_time.core._EQ_.call(null, start, date);
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    var and__29588__auto__ = cljs_time.core.before_QMARK_.call(null, start, date);
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs_time.core.after_QMARK_.call(null, end, date);
    } else {
      return and__29588__auto__;
    }
  }
};
cljs_time.core.within_QMARK_.cljs$lang$maxFixedArity = 3;
cljs_time.core.overlaps_QMARK_ = function cljs_time$core$overlaps_QMARK_(var_args) {
  var args37688 = [];
  var len__30669__auto___37697 = arguments.length;
  var i__30670__auto___37698 = 0;
  while (true) {
    if (i__30670__auto___37698 < len__30669__auto___37697) {
      args37688.push(arguments[i__30670__auto___37698]);
      var G__37699 = i__30670__auto___37698 + 1;
      i__30670__auto___37698 = G__37699;
      continue;
    } else {
    }
    break;
  }
  var G__37690 = args37688.length;
  switch(G__37690) {
    case 2:
      return cljs_time.core.overlaps_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs_time.core.overlaps_QMARK_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37688.length)].join(""));;
  }
};
cljs_time.core.overlaps_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(p__37691, p__37692) {
  var map__37693 = p__37691;
  var map__37693__$1 = (!(map__37693 == null) ? map__37693.cljs$lang$protocol_mask$partition0$ & 64 || map__37693.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37693) : map__37693;
  var start_a = cljs.core.get.call(null, map__37693__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end_a = cljs.core.get.call(null, map__37693__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  var map__37694 = p__37692;
  var map__37694__$1 = (!(map__37694 == null) ? map__37694.cljs$lang$protocol_mask$partition0$ & 64 || map__37694.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37694) : map__37694;
  var start_b = cljs.core.get.call(null, map__37694__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end_b = cljs.core.get.call(null, map__37694__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  var and__29588__auto__ = cljs.core.not.call(null, function() {
    var or__29600__auto__ = cljs_time.core._EQ_.call(null, start_a, end_b);
    if (cljs.core.truth_(or__29600__auto__)) {
      return or__29600__auto__;
    } else {
      return cljs_time.core._EQ_.call(null, end_a, start_b);
    }
  }());
  if (and__29588__auto__) {
    return cljs_time.core.overlaps_QMARK_.call(null, start_a, end_a, start_b, end_b);
  } else {
    return and__29588__auto__;
  }
};
cljs_time.core.overlaps_QMARK_.cljs$core$IFn$_invoke$arity$4 = function(start_a, end_a, start_b, end_b) {
  var or__29600__auto__ = function() {
    var and__29588__auto__ = cljs_time.core.before_QMARK_.call(null, start_b, end_a);
    if (cljs.core.truth_(and__29588__auto__)) {
      return cljs_time.core.after_QMARK_.call(null, end_b, start_a);
    } else {
      return and__29588__auto__;
    }
  }();
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    var or__29600__auto____$1 = function() {
      var and__29588__auto__ = cljs_time.core.after_QMARK_.call(null, end_b, start_a);
      if (cljs.core.truth_(and__29588__auto__)) {
        return cljs_time.core.before_QMARK_.call(null, start_b, end_a);
      } else {
        return and__29588__auto__;
      }
    }();
    if (cljs.core.truth_(or__29600__auto____$1)) {
      return or__29600__auto____$1;
    } else {
      var or__29600__auto____$2 = cljs_time.core._EQ_.call(null, start_a, end_b);
      if (cljs.core.truth_(or__29600__auto____$2)) {
        return or__29600__auto____$2;
      } else {
        return cljs_time.core._EQ_.call(null, start_b, end_a);
      }
    }
  }
};
cljs_time.core.overlaps_QMARK_.cljs$lang$maxFixedArity = 4;
cljs_time.core.abuts_QMARK_ = function cljs_time$core$abuts_QMARK_(p__37701, p__37702) {
  var map__37707 = p__37701;
  var map__37707__$1 = (!(map__37707 == null) ? map__37707.cljs$lang$protocol_mask$partition0$ & 64 || map__37707.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37707) : map__37707;
  var start_a = cljs.core.get.call(null, map__37707__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end_a = cljs.core.get.call(null, map__37707__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  var map__37708 = p__37702;
  var map__37708__$1 = (!(map__37708 == null) ? map__37708.cljs$lang$protocol_mask$partition0$ & 64 || map__37708.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37708) : map__37708;
  var start_b = cljs.core.get.call(null, map__37708__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end_b = cljs.core.get.call(null, map__37708__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  var or__29600__auto__ = cljs_time.core._EQ_.call(null, start_a, end_b);
  if (cljs.core.truth_(or__29600__auto__)) {
    return or__29600__auto__;
  } else {
    return cljs_time.core._EQ_.call(null, end_a, start_b);
  }
};
cljs_time.core.date_QMARK_ = function cljs_time$core$date_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs_time$core$DateTimeProtocol$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs_time.core.DateTimeProtocol, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs_time.core.DateTimeProtocol, x);
  }
};
cljs_time.core.interval_QMARK_ = function cljs_time$core$interval_QMARK_(x) {
  return x instanceof cljs_time.core.Interval;
};
cljs_time.core.period_QMARK_ = function cljs_time$core$period_QMARK_(x) {
  return x instanceof cljs_time.core.Period;
};
cljs_time.core.period_type_QMARK_ = function cljs_time$core$period_type_QMARK_(type, x) {
  var and__29588__auto__ = cljs_time.core.period_QMARK_.call(null, x);
  if (cljs.core.truth_(and__29588__auto__)) {
    return cljs.core.contains_QMARK_.call(null, x, type);
  } else {
    return and__29588__auto__;
  }
};
cljs_time.core.years_QMARK_ = function cljs_time$core$years_QMARK_(val) {
  return cljs_time.core.period_type_QMARK_.call(null, new cljs.core.Keyword(null, "years", "years", -1298579689), val);
};
cljs_time.core.months_QMARK_ = function cljs_time$core$months_QMARK_(val) {
  return cljs_time.core.period_type_QMARK_.call(null, new cljs.core.Keyword(null, "months", "months", -45571637), val);
};
cljs_time.core.weeks_QMARK_ = function cljs_time$core$weeks_QMARK_(val) {
  return cljs_time.core.period_type_QMARK_.call(null, new cljs.core.Keyword(null, "weeks", "weeks", 1844596125), val);
};
cljs_time.core.days_QMARK_ = function cljs_time$core$days_QMARK_(val) {
  return cljs_time.core.period_type_QMARK_.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564), val);
};
cljs_time.core.hours_QMARK_ = function cljs_time$core$hours_QMARK_(val) {
  return cljs_time.core.period_type_QMARK_.call(null, new cljs.core.Keyword(null, "hours", "hours", 58380855), val);
};
cljs_time.core.minutes_QMARK_ = function cljs_time$core$minutes_QMARK_(val) {
  return cljs_time.core.period_type_QMARK_.call(null, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), val);
};
cljs_time.core.seconds_QMARK_ = function cljs_time$core$seconds_QMARK_(val) {
  return cljs_time.core.period_type_QMARK_.call(null, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), val);
};
cljs_time.core.mins_ago = function cljs_time$core$mins_ago(d) {
  return cljs_time.core.in_minutes.call(null, cljs_time.core.interval.call(null, d, cljs_time.core.now.call(null)));
};
cljs_time.core.last_day_of_the_month = function cljs_time$core$last_day_of_the_month(var_args) {
  var args37713 = [];
  var len__30669__auto___37716 = arguments.length;
  var i__30670__auto___37717 = 0;
  while (true) {
    if (i__30670__auto___37717 < len__30669__auto___37716) {
      args37713.push(arguments[i__30670__auto___37717]);
      var G__37718 = i__30670__auto___37717 + 1;
      i__30670__auto___37717 = G__37718;
      continue;
    } else {
    }
    break;
  }
  var G__37715 = args37713.length;
  switch(G__37715) {
    case 1:
      return cljs_time.core.last_day_of_the_month.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.core.last_day_of_the_month.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37713.length)].join(""));;
  }
};
cljs_time.core.last_day_of_the_month.cljs$core$IFn$_invoke$arity$1 = function(dt) {
  return cljs_time.core.last_day_of_the_month_.call(null, dt);
};
cljs_time.core.last_day_of_the_month.cljs$core$IFn$_invoke$arity$2 = function(year, month) {
  return cljs_time.core.last_day_of_the_month_.call(null, cljs_time.core.date_time.call(null, year, month));
};
cljs_time.core.last_day_of_the_month.cljs$lang$maxFixedArity = 2;
cljs_time.core.number_of_days_in_the_month = function cljs_time$core$number_of_days_in_the_month(var_args) {
  var args37720 = [];
  var len__30669__auto___37723 = arguments.length;
  var i__30670__auto___37724 = 0;
  while (true) {
    if (i__30670__auto___37724 < len__30669__auto___37723) {
      args37720.push(arguments[i__30670__auto___37724]);
      var G__37725 = i__30670__auto___37724 + 1;
      i__30670__auto___37724 = G__37725;
      continue;
    } else {
    }
    break;
  }
  var G__37722 = args37720.length;
  switch(G__37722) {
    case 1:
      return cljs_time.core.number_of_days_in_the_month.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.core.number_of_days_in_the_month.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37720.length)].join(""));;
  }
};
cljs_time.core.number_of_days_in_the_month.cljs$core$IFn$_invoke$arity$1 = function(dt) {
  return cljs_time.core.number_of_days_in_the_month.call(null, cljs_time.core.year.call(null, dt), cljs_time.core.month.call(null, dt));
};
cljs_time.core.number_of_days_in_the_month.cljs$core$IFn$_invoke$arity$2 = function(year, month) {
  return cljs_time.core.last_day_of_the_month.call(null, year, month).getDate();
};
cljs_time.core.number_of_days_in_the_month.cljs$lang$maxFixedArity = 2;
cljs_time.core.first_day_of_the_month = function cljs_time$core$first_day_of_the_month(var_args) {
  var args37727 = [];
  var len__30669__auto___37730 = arguments.length;
  var i__30670__auto___37731 = 0;
  while (true) {
    if (i__30670__auto___37731 < len__30669__auto___37730) {
      args37727.push(arguments[i__30670__auto___37731]);
      var G__37732 = i__30670__auto___37731 + 1;
      i__30670__auto___37731 = G__37732;
      continue;
    } else {
    }
    break;
  }
  var G__37729 = args37727.length;
  switch(G__37729) {
    case 1:
      return cljs_time.core.first_day_of_the_month.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.core.first_day_of_the_month.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37727.length)].join(""));;
  }
};
cljs_time.core.first_day_of_the_month.cljs$core$IFn$_invoke$arity$1 = function(dt) {
  return cljs_time.core.first_day_of_the_month_.call(null, dt);
};
cljs_time.core.first_day_of_the_month.cljs$core$IFn$_invoke$arity$2 = function(year, month) {
  return cljs_time.core.first_day_of_the_month_.call(null, cljs_time.core.date_time.call(null, year, month));
};
cljs_time.core.first_day_of_the_month.cljs$lang$maxFixedArity = 2;
if (typeof cljs_time.core.__GT_period !== "undefined") {
} else {
  cljs_time.core.__GT_period = function() {
    var method_table__30524__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__30525__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__30526__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__30527__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__30528__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs-time.core", "-\x3eperiod"), cljs.core.type, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__30528__auto__, method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__);
  }();
}
cljs.core._add_method.call(null, cljs_time.core.__GT_period, cljs_time.core.Interval, function(p__37734) {
  var map__37735 = p__37734;
  var map__37735__$1 = (!(map__37735 == null) ? map__37735.cljs$lang$protocol_mask$partition0$ & 64 || map__37735.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37735) : map__37735;
  var interval = map__37735__$1;
  var start = cljs.core.get.call(null, map__37735__$1, new cljs.core.Keyword(null, "start", "start", -355208981));
  var end = cljs.core.get.call(null, map__37735__$1, new cljs.core.Keyword(null, "end", "end", -268185958));
  var years = cljs_time.core.in_years.call(null, interval);
  var start_year = cljs_time.core.year.call(null, start);
  var leap_years = cljs.core.count.call(null, cljs.core.remove.call(null, cljs.core.false_QMARK_, cljs.core.map.call(null, cljs_time.internal.core.leap_year_QMARK_, cljs.core.range.call(null, start_year, start_year + years))));
  var start_month = cljs_time.core.month.call(null, start);
  var days_in_months = cljs_time.core.total_days_in_whole_months.call(null, interval);
  var months = cljs.core.count.call(null, days_in_months);
  var days_to_remove = 365 * years + leap_years + cljs.core.reduce.call(null, cljs.core._PLUS_, days_in_months);
  var days = cljs_time.core.in_days.call(null, interval) - days_to_remove;
  var hours_to_remove = 24 * (days + days_to_remove);
  var hours = cljs_time.core.in_hours.call(null, interval) - hours_to_remove;
  var minutes_to_remove = 60 * (hours + hours_to_remove);
  var minutes = cljs_time.core.in_minutes.call(null, interval) - minutes_to_remove;
  var seconds_to_remove = 60 * (minutes + minutes_to_remove);
  var seconds = cljs_time.core.in_seconds.call(null, interval) - seconds_to_remove;
  return cljs_time.core.period.call(null, new cljs.core.Keyword(null, "years", "years", -1298579689), years, new cljs.core.Keyword(null, "months", "months", -45571637), months, new cljs.core.Keyword(null, "days", "days", -1394072564), days, new cljs.core.Keyword(null, "hours", "hours", 58380855), hours, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), minutes, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), seconds, new cljs.core.Keyword(null, "millis", "millis", -1338288387), 
  cljs_time.core.in_millis.call(null, interval) - 1E3 * (seconds + seconds_to_remove));
});
cljs.core._add_method.call(null, cljs_time.core.__GT_period, cljs_time.core.Period, function(period) {
  return period;
});
cljs_time.core.today_at = function cljs_time$core$today_at(var_args) {
  var args37737 = [];
  var len__30669__auto___37741 = arguments.length;
  var i__30670__auto___37742 = 0;
  while (true) {
    if (i__30670__auto___37742 < len__30669__auto___37741) {
      args37737.push(arguments[i__30670__auto___37742]);
      var G__37743 = i__30670__auto___37742 + 1;
      i__30670__auto___37742 = G__37743;
      continue;
    } else {
    }
    break;
  }
  var G__37739 = args37737.length;
  switch(G__37739) {
    case 4:
      return cljs_time.core.today_at.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 3:
      return cljs_time.core.today_at.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 2:
      return cljs_time.core.today_at.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37737.length)].join(""));;
  }
};
cljs_time.core.today_at.cljs$core$IFn$_invoke$arity$4 = function(hours, minutes, seconds, millis) {
  var midnight = new goog.date.Date;
  var G__37740 = new goog.date.UtcDateTime(0);
  G__37740.setYear(midnight.getYear());
  G__37740.setMonth(midnight.getMonth());
  G__37740.setDate(midnight.getDate());
  G__37740.setHours(hours);
  G__37740.setMinutes(minutes);
  G__37740.setSeconds(seconds);
  G__37740.setMilliseconds(millis);
  return G__37740;
};
cljs_time.core.today_at.cljs$core$IFn$_invoke$arity$3 = function(hours, minutes, seconds) {
  return cljs_time.core.today_at.call(null, hours, minutes, seconds, 0);
};
cljs_time.core.today_at.cljs$core$IFn$_invoke$arity$2 = function(hours, minutes) {
  return cljs_time.core.today_at.call(null, hours, minutes, 0);
};
cljs_time.core.today_at.cljs$lang$maxFixedArity = 4;
cljs_time.core.do_at_STAR_ = function cljs_time$core$do_at_STAR_(base_date_time, body_fn) {
  var _STAR_sys_time_STAR_37746 = cljs_time.core._STAR_sys_time_STAR_;
  cljs_time.core._STAR_sys_time_STAR_ = base_date_time;
  try {
    return body_fn.call(null);
  } finally {
    cljs_time.core._STAR_sys_time_STAR_ = _STAR_sys_time_STAR_37746;
  }
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function clojure$set$bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(max) {
    return function(p1__37749_SHARP_) {
      return max === p1__37749_SHARP_;
    };
  }(max), coll));
};
clojure.set.union = function clojure$set$union(var_args) {
  var args37750 = [];
  var len__30669__auto___37756 = arguments.length;
  var i__30670__auto___37757 = 0;
  while (true) {
    if (i__30670__auto___37757 < len__30669__auto___37756) {
      args37750.push(arguments[i__30670__auto___37757]);
      var G__37758 = i__30670__auto___37757 + 1;
      i__30670__auto___37757 = G__37758;
      continue;
    } else {
    }
    break;
  }
  var G__37755 = args37750.length;
  switch(G__37755) {
    case 0:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args37750.slice(2), 0, null);
      return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.union.cljs$lang$applyTo = function(seq37751) {
  var G__37752 = cljs.core.first.call(null, seq37751);
  var seq37751__$1 = cljs.core.next.call(null, seq37751);
  var G__37753 = cljs.core.first.call(null, seq37751__$1);
  var seq37751__$2 = cljs.core.next.call(null, seq37751__$1);
  return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(G__37752, G__37753, seq37751__$2);
};
clojure.set.union.cljs$lang$maxFixedArity = 2;
clojure.set.intersection = function clojure$set$intersection(var_args) {
  var args37761 = [];
  var len__30669__auto___37767 = arguments.length;
  var i__30670__auto___37768 = 0;
  while (true) {
    if (i__30670__auto___37768 < len__30669__auto___37767) {
      args37761.push(arguments[i__30670__auto___37768]);
      var G__37769 = i__30670__auto___37768 + 1;
      i__30670__auto___37768 = G__37769;
      continue;
    } else {
    }
    break;
  }
  var G__37766 = args37761.length;
  switch(G__37766) {
    case 1:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args37761.slice(2), 0, null);
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  while (true) {
    if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
      var G__37771 = s2;
      var G__37772 = s1;
      s1 = G__37771;
      s2 = G__37772;
      continue;
    } else {
      return cljs.core.reduce.call(null, function(s1, s2) {
        return function(result, item) {
          if (cljs.core.contains_QMARK_.call(null, s2, item)) {
            return result;
          } else {
            return cljs.core.disj.call(null, result, item);
          }
        };
      }(s1, s2), s1, s1);
    }
    break;
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__37760_SHARP_) {
    return -cljs.core.count.call(null, p1__37760_SHARP_);
  }, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, clojure.set.intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.intersection.cljs$lang$applyTo = function(seq37762) {
  var G__37763 = cljs.core.first.call(null, seq37762);
  var seq37762__$1 = cljs.core.next.call(null, seq37762);
  var G__37764 = cljs.core.first.call(null, seq37762__$1);
  var seq37762__$2 = cljs.core.next.call(null, seq37762__$1);
  return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(G__37763, G__37764, seq37762__$2);
};
clojure.set.intersection.cljs$lang$maxFixedArity = 2;
clojure.set.difference = function clojure$set$difference(var_args) {
  var args37773 = [];
  var len__30669__auto___37779 = arguments.length;
  var i__30670__auto___37780 = 0;
  while (true) {
    if (i__30670__auto___37780 < len__30669__auto___37779) {
      args37773.push(arguments[i__30670__auto___37780]);
      var G__37781 = i__30670__auto___37780 + 1;
      i__30670__auto___37780 = G__37781;
      continue;
    } else {
    }
    break;
  }
  var G__37778 = args37773.length;
  switch(G__37778) {
    case 1:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__30688__auto__ = new cljs.core.IndexedSeq(args37773.slice(2), 0, null);
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__30688__auto__);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, function(result, item) {
      if (cljs.core.contains_QMARK_.call(null, s2, item)) {
        return cljs.core.disj.call(null, result, item);
      } else {
        return result;
      }
    }, s1, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  return cljs.core.reduce.call(null, clojure.set.difference, s1, cljs.core.conj.call(null, sets, s2));
};
clojure.set.difference.cljs$lang$applyTo = function(seq37774) {
  var G__37775 = cljs.core.first.call(null, seq37774);
  var seq37774__$1 = cljs.core.next.call(null, seq37774);
  var G__37776 = cljs.core.first.call(null, seq37774__$1);
  var seq37774__$2 = cljs.core.next.call(null, seq37774__$1);
  return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(G__37775, G__37776, seq37774__$2);
};
clojure.set.difference.cljs$lang$maxFixedArity = 2;
clojure.set.select = function clojure$set$select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function clojure$set$project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__37783_SHARP_) {
    return cljs.core.select_keys.call(null, p1__37783_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function clojure$set$rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__37786) {
    var vec__37787 = p__37786;
    var old = cljs.core.nth.call(null, vec__37787, 0, null);
    var new$ = cljs.core.nth.call(null, vec__37787, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function clojure$set$rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__37788_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__37788_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function clojure$set$index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function clojure$set$map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__37791) {
    var vec__37792 = p__37791;
    var k = cljs.core.nth.call(null, vec__37792, 0, null);
    var v = cljs.core.nth.call(null, vec__37792, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function clojure$set$join(var_args) {
  var args37797 = [];
  var len__30669__auto___37802 = arguments.length;
  var i__30670__auto___37803 = 0;
  while (true) {
    if (i__30670__auto___37803 < len__30669__auto___37802) {
      args37797.push(arguments[i__30670__auto___37803]);
      var G__37804 = i__30670__auto___37803 + 1;
      i__30670__auto___37803 = G__37804;
      continue;
    } else {
    }
    break;
  }
  var G__37799 = args37797.length;
  switch(G__37799) {
    case 2:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37797.length)].join(""));;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$2 = function(xrel, yrel) {
  if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
    var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
    var vec__37800 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
    var r = cljs.core.nth.call(null, vec__37800, 0, null);
    var s = cljs.core.nth.call(null, vec__37800, 1, null);
    var idx = clojure.set.index.call(null, r, ks);
    return cljs.core.reduce.call(null, function(ks, vec__37800, r, s, idx) {
      return function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(found, ks, vec__37800, r, s, idx) {
            return function(p1__37793_SHARP_, p2__37794_SHARP_) {
              return cljs.core.conj.call(null, p1__37793_SHARP_, cljs.core.merge.call(null, p2__37794_SHARP_, x));
            };
          }(found, ks, vec__37800, r, s, idx), ret, found);
        } else {
          return ret;
        }
      };
    }(ks, vec__37800, r, s, idx), cljs.core.PersistentHashSet.EMPTY, s);
  } else {
    return cljs.core.PersistentHashSet.EMPTY;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$3 = function(xrel, yrel, km) {
  var vec__37801 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
  var r = cljs.core.nth.call(null, vec__37801, 0, null);
  var s = cljs.core.nth.call(null, vec__37801, 1, null);
  var k = cljs.core.nth.call(null, vec__37801, 2, null);
  var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
  return cljs.core.reduce.call(null, function(vec__37801, r, s, k, idx) {
    return function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(found, vec__37801, r, s, k, idx) {
          return function(p1__37795_SHARP_, p2__37796_SHARP_) {
            return cljs.core.conj.call(null, p1__37795_SHARP_, cljs.core.merge.call(null, p2__37796_SHARP_, x));
          };
        }(found, vec__37801, r, s, k, idx), ret, found);
      } else {
        return ret;
      }
    };
  }(vec__37801, r, s, k, idx), cljs.core.PersistentHashSet.EMPTY, s);
};
clojure.set.join.cljs$lang$maxFixedArity = 3;
clojure.set.subset_QMARK_ = function clojure$set$subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__37806_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__37806_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function clojure$set$superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__37807_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__37807_SHARP_);
  }, set2);
};
goog.provide("cljs_time.format");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.date");
goog.require("cljs_time.core");
goog.require("clojure.set");
goog.require("cljs_time.internal.core");
goog.require("goog.string.format");
goog.require("clojure.string");
cljs_time.format.months = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], null);
cljs_time.format.days = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], null);
cljs_time.format.abbreviate = function cljs_time$format$abbreviate(n, s) {
  return cljs.core.subs.call(null, s, 0, n);
};
cljs_time.format.date_formatters = function() {
  var d = function(p1__37810_SHARP_) {
    return p1__37810_SHARP_.getDate();
  };
  var M = function(d) {
    return function(p1__37811_SHARP_) {
      return p1__37811_SHARP_.getMonth() + 1;
    };
  }(d);
  var y = function(d, M) {
    return function(p1__37812_SHARP_) {
      return p1__37812_SHARP_.getYear();
    };
  }(d, M);
  var h = function(d, M, y) {
    return function(p1__37813_SHARP_) {
      var hr = cljs.core.mod.call(null, p1__37813_SHARP_.getHours(), 12);
      if (hr === 0) {
        return 12;
      } else {
        return hr;
      }
    };
  }(d, M, y);
  var a = function(d, M, y, h) {
    return function(p1__37814_SHARP_) {
      if (p1__37814_SHARP_.getHours() < 12) {
        return "am";
      } else {
        return "pm";
      }
    };
  }(d, M, y, h);
  var A = function(d, M, y, h, a) {
    return function(p1__37815_SHARP_) {
      if (p1__37815_SHARP_.getHours() < 12) {
        return "AM";
      } else {
        return "PM";
      }
    };
  }(d, M, y, h, a);
  var H = function(d, M, y, h, a, A) {
    return function(p1__37816_SHARP_) {
      return p1__37816_SHARP_.getHours();
    };
  }(d, M, y, h, a, A);
  var m = function(d, M, y, h, a, A, H) {
    return function(p1__37817_SHARP_) {
      return p1__37817_SHARP_.getMinutes();
    };
  }(d, M, y, h, a, A, H);
  var s = function(d, M, y, h, a, A, H, m) {
    return function(p1__37818_SHARP_) {
      return p1__37818_SHARP_.getSeconds();
    };
  }(d, M, y, h, a, A, H, m);
  var S = function(d, M, y, h, a, A, H, m, s) {
    return function(p1__37819_SHARP_) {
      return p1__37819_SHARP_.getMilliseconds();
    };
  }(d, M, y, h, a, A, H, m, s);
  var Z = function(d, M, y, h, a, A, H, m, s, S) {
    return function(p1__37820_SHARP_) {
      return p1__37820_SHARP_.getTimezoneOffsetString();
    };
  }(d, M, y, h, a, A, H, m, s, S);
  var doy = function(d, M, y, h, a, A, H, m, s, S, Z) {
    return function(p1__37821_SHARP_) {
      return p1__37821_SHARP_.getDayOfYear();
    };
  }(d, M, y, h, a, A, H, m, s, S, Z);
  var dow = function(d, M, y, h, a, A, H, m, s, S, Z, doy) {
    return function(p1__37822_SHARP_) {
      return p1__37822_SHARP_.getDay();
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy);
  return cljs.core.PersistentHashMap.fromArrays(["d", "HH", "ZZ", "s", "ww", "MMM", "YYYY", "e", "ss", "DDD", "SSS", "dow", "YY", "M", "mm", "S", "MM", "EEE", "Z", "H", "DD", "dd", "a", "hh", "dth", "yyyy", "A", "EEEE", "h", "xxxx", "m", "yy", "D", "MMMM"], [d, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37834_SHARP_) {
      return cljs_time.internal.core.zero_pad.call(null, H.call(null, p1__37834_SHARP_));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), Z, s, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37838_SHARP_) {
      return cljs_time.internal.core.zero_pad.call(null, Math.ceil(doy.call(null, p1__37838_SHARP_) / 7));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37829_SHARP_) {
      return cljs_time.format.abbreviate.call(null, 3, cljs_time.format.months.call(null, M.call(null, p1__37829_SHARP_) - 1));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), y, dow, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37836_SHARP_) {
      return cljs_time.internal.core.zero_pad.call(null, s.call(null, p1__37836_SHARP_));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), doy, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37837_SHARP_) {
      return cljs_time.internal.core.zero_pad.call(null, S.call(null, p1__37837_SHARP_), 3);
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37825_SHARP_) {
      return cljs_time.format.days.call(null, dow.call(null, p1__37825_SHARP_));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37832_SHARP_) {
      return cljs.core.mod.call(null, y.call(null, p1__37832_SHARP_), 100);
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), M, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37835_SHARP_) {
      return cljs_time.internal.core.zero_pad.call(null, m.call(null, p1__37835_SHARP_));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), S, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37828_SHARP_) {
      return cljs_time.internal.core.zero_pad.call(null, M.call(null, p1__37828_SHARP_));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37826_SHARP_) {
      return cljs_time.format.abbreviate.call(null, 3, cljs_time.format.days.call(null, dow.call(null, p1__37826_SHARP_)));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), Z, H, doy, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37823_SHARP_) {
      return cljs_time.internal.core.zero_pad.call(null, d.call(null, p1__37823_SHARP_));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), a, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37833_SHARP_) {
      return cljs_time.internal.core.zero_pad.call(null, h.call(null, p1__37833_SHARP_));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37824_SHARP_) {
      var d__$1 = d.call(null, p1__37824_SHARP_);
      return [cljs.core.str(d__$1), cljs.core.str(function() {
        var G__37839 = d__$1;
        switch(G__37839) {
          case 1:
            return "st";
            break;
          case 2:
            return "nd";
            break;
          case 3:
            return "rd";
            break;
          default:
            return "th";
        }
      }())].join("");
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), y, A, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37827_SHARP_) {
      return cljs_time.format.days.call(null, dow.call(null, p1__37827_SHARP_));
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), h, y, m, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37831_SHARP_) {
      return cljs.core.mod.call(null, y.call(null, p1__37831_SHARP_), 100);
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow), doy, function(d, M, y, h, a, A, H, m, s, S, Z, doy, dow) {
    return function(p1__37830_SHARP_) {
      return cljs_time.format.months.call(null, M.call(null, p1__37830_SHARP_) - 1);
    };
  }(d, M, y, h, a, A, H, m, s, S, Z, doy, dow)]);
}();
cljs_time.format.timezone_adjustment = function cljs_time$format$timezone_adjustment(d, timezone_string) {
  var vec__37844 = clojure.string.split.call(null, timezone_string, /Z|(?:([-+])(\d{2})(?::?(\d{2}))?)$/);
  var _ = cljs.core.nth.call(null, vec__37844, 0, null);
  var sign = cljs.core.nth.call(null, vec__37844, 1, null);
  var hh = cljs.core.nth.call(null, vec__37844, 2, null);
  var mm = cljs.core.nth.call(null, vec__37844, 3, null);
  if (cljs.core.truth_(function() {
    var and__29588__auto__ = sign;
    if (cljs.core.truth_(and__29588__auto__)) {
      var and__29588__auto____$1 = hh;
      if (cljs.core.truth_(and__29588__auto____$1)) {
        return mm;
      } else {
        return and__29588__auto____$1;
      }
    } else {
      return and__29588__auto__;
    }
  }())) {
    var sign_37846__$1 = cljs.core._EQ_.call(null, sign, "-") ? cljs_time.core.plus : cljs.core._EQ_.call(null, sign, "+") ? cljs_time.core.minus : null;
    var vec__37845_37847 = cljs.core.map.call(null, function(sign_37846__$1, vec__37844, _, sign, hh, mm) {
      return function(p1__37841_SHARP_) {
        return parseInt(p1__37841_SHARP_, 10);
      };
    }(sign_37846__$1, vec__37844, _, sign, hh, mm), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hh, mm], null));
    var hh_37848__$1 = cljs.core.nth.call(null, vec__37845_37847, 0, null);
    var mm_37849__$1 = cljs.core.nth.call(null, vec__37845_37847, 1, null);
    var adjusted_37850 = sign_37846__$1.call(null, sign_37846__$1.call(null, d, cljs_time.core.hours.call(null, hh_37848__$1)), cljs_time.core.minutes.call(null, mm_37849__$1));
    d.setTime(adjusted_37850.getTime());
  } else {
  }
  return d;
};
cljs_time.format.date_parsers = function() {
  var parse_int = function(p1__37851_SHARP_) {
    return parseInt(p1__37851_SHARP_, 10);
  };
  var assoc_fn = function(parse_int) {
    return function(kw) {
      return function(parse_int) {
        return function(p1__37852_SHARP_, p2__37853_SHARP_) {
          return cljs.core.assoc.call(null, p1__37852_SHARP_, kw, parse_int.call(null, p2__37853_SHARP_));
        };
      }(parse_int);
    };
  }(parse_int);
  var y = assoc_fn.call(null, new cljs.core.Keyword(null, "years", "years", -1298579689));
  var d = assoc_fn.call(null, new cljs.core.Keyword(null, "days", "days", -1394072564));
  var M = function(parse_int, assoc_fn, y, d) {
    return function(p1__37854_SHARP_, p2__37855_SHARP_) {
      return cljs.core.assoc.call(null, p1__37854_SHARP_, new cljs.core.Keyword(null, "months", "months", -45571637), parse_int.call(null, p2__37855_SHARP_) - 1);
    };
  }(parse_int, assoc_fn, y, d);
  var h = function(parse_int, assoc_fn, y, d, M) {
    return function(p1__37856_SHARP_, p2__37857_SHARP_) {
      return cljs.core.assoc.call(null, p1__37856_SHARP_, new cljs.core.Keyword(null, "hours", "hours", 58380855), cljs.core.mod.call(null, parse_int.call(null, p2__37857_SHARP_), 12));
    };
  }(parse_int, assoc_fn, y, d, M);
  var a = function(parse_int, assoc_fn, y, d, M, h) {
    return function(p__37864, x) {
      var map__37865 = p__37864;
      var map__37865__$1 = (!(map__37865 == null) ? map__37865.cljs$lang$protocol_mask$partition0$ & 64 || map__37865.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37865) : map__37865;
      var date = map__37865__$1;
      var hours = cljs.core.get.call(null, map__37865__$1, new cljs.core.Keyword(null, "hours", "hours", 58380855));
      if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["p", null, "pm", null], null), null)).call(null, clojure.string.lower_case.call(null, x)))) {
        return cljs.core.assoc.call(null, date, new cljs.core.Keyword(null, "hours", "hours", 58380855), function() {
          var hours__$1 = 12 + hours;
          if (cljs.core._EQ_.call(null, hours__$1, 24)) {
            return 0;
          } else {
            return hours__$1;
          }
        }());
      } else {
        return date;
      }
    };
  }(parse_int, assoc_fn, y, d, M, h);
  var H = assoc_fn.call(null, new cljs.core.Keyword(null, "hours", "hours", 58380855));
  var m = assoc_fn.call(null, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394));
  var s = assoc_fn.call(null, new cljs.core.Keyword(null, "seconds", "seconds", -445266194));
  var S = assoc_fn.call(null, new cljs.core.Keyword(null, "millis", "millis", -1338288387));
  var MMM = function(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S) {
    return function(p1__37859_SHARP_, p2__37858_SHARP_) {
      var full = cljs.core.first.call(null, cljs.core.filter.call(null, function(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S) {
        return function(m__$1) {
          return cljs.core.re_seq.call(null, cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(p2__37858_SHARP_)].join("")), m__$1);
        };
      }(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S), cljs_time.format.months));
      return M.call(null, p1__37859_SHARP_, [cljs.core.str(cljs_time.internal.core.index_of.call(null, cljs_time.format.months, full) + 1)].join(""));
    };
  }(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S);
  var MMMM = function(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S, MMM) {
    return function(p1__37860_SHARP_, p2__37861_SHARP_) {
      return M.call(null, p1__37860_SHARP_, [cljs.core.str(cljs_time.internal.core.index_of.call(null, cljs_time.format.months, p2__37861_SHARP_) + 1)].join(""));
    };
  }(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S, MMM);
  var skip = function(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S, MMM, MMMM) {
    return function() {
      var G__37867__delegate = function(x, args) {
        return x;
      };
      var G__37867 = function(x, var_args) {
        var args = null;
        if (arguments.length > 1) {
          var G__37868__i = 0, G__37868__a = new Array(arguments.length - 1);
          while (G__37868__i < G__37868__a.length) {
            G__37868__a[G__37868__i] = arguments[G__37868__i + 1];
            ++G__37868__i;
          }
          args = new cljs.core.IndexedSeq(G__37868__a, 0);
        }
        return G__37867__delegate.call(this, x, args);
      };
      G__37867.cljs$lang$maxFixedArity = 1;
      G__37867.cljs$lang$applyTo = function(arglist__37869) {
        var x = cljs.core.first(arglist__37869);
        var args = cljs.core.rest(arglist__37869);
        return G__37867__delegate(x, args);
      };
      G__37867.cljs$core$IFn$_invoke$arity$variadic = G__37867__delegate;
      return G__37867;
    }();
  }(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S, MMM, MMMM);
  var tz = function(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S, MMM, MMMM, skip) {
    return function(p1__37862_SHARP_, p2__37863_SHARP_) {
      return cljs.core.assoc.call(null, p1__37862_SHARP_, new cljs.core.Keyword(null, "time-zone", "time-zone", -1838760002), p2__37863_SHARP_);
    };
  }(parse_int, assoc_fn, y, d, M, h, a, H, m, s, S, MMM, MMMM, skip);
  return cljs.core.PersistentHashMap.fromArrays(["d", "HH", "ZZ", "s", "MMM", "YYYY", "ss", "DDD", "SSS", "dow", "YY", "M", "mm", "S", "MM", "Y", "EEE", "Z", "H", "E", "DD", "dd", "a", "hh", "dth", "y", "yyyy", "A", "EEEE", "h", "m", "yy", "D", "MMMM"], [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,2})", d], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{2})", H], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["((?:(?:\\+|-)\\d{2}:\\d{2})|Z+)", tz], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,2})", s], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("("), cljs.core.str(clojure.string.join.call(null, "|", cljs.core.map.call(null, cljs.core.partial.call(null, cljs_time.format.abbreviate, 3), cljs_time.format.months))), cljs.core.str(")")].join(""), 
  MMM], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{4})", y], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{2})", s], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{3})", d], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{3})", S], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [[cljs.core.str("("), cljs.core.str(clojure.string.join.call(null, "|", cljs_time.format.days)), cljs.core.str(")")].join(""), skip], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{2,4})", y], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,2})", M], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{2})", m], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,2})", S], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["((?:\\d{2})|(?:\\b\\d{1,2}\\b))", M], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,4})", y], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("("), cljs.core.str(clojure.string.join.call(null, "|", cljs.core.map.call(null, cljs.core.partial.call(null, 
  cljs_time.format.abbreviate, 3), cljs_time.format.days))), cljs.core.str(")")].join(""), skip], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["((?:(?:\\+|-)\\d{2}:?\\d{2})|Z+)", tz], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,2})", H], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("("), cljs.core.str(clojure.string.join.call(null, "|", cljs.core.map.call(null, 
  cljs.core.partial.call(null, cljs_time.format.abbreviate, 3), cljs_time.format.days))), cljs.core.str(")")].join(""), skip], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{2,3})", d], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{2})", d], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(am|pm|a|p|AM|PM|A|P)", a], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{2})", h], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,2})(?:st|nd|rd|th)", d], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,4})", y], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{4})", y], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(am|pm|a|p|AM|PM|A|P)", 
  a], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("("), cljs.core.str(clojure.string.join.call(null, "|", cljs_time.format.days)), cljs.core.str(")")].join(""), skip], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,2})", h], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,2})", m], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  ["(\\d{2,4})", y], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["(\\d{1,3})", d], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("("), cljs.core.str(clojure.string.join.call(null, "|", cljs_time.format.months)), cljs.core.str(")")].join(""), MMMM], null)]);
}();
cljs_time.format.date_setters = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "years", "years", -1298579689), function(p1__37870_SHARP_, p2__37871_SHARP_) {
  return p1__37870_SHARP_.setYear(p2__37871_SHARP_);
}, new cljs.core.Keyword(null, "months", "months", -45571637), function(p1__37872_SHARP_, p2__37873_SHARP_) {
  return p1__37872_SHARP_.setMonth(p2__37873_SHARP_);
}, new cljs.core.Keyword(null, "days", "days", -1394072564), function(p1__37874_SHARP_, p2__37875_SHARP_) {
  return p1__37874_SHARP_.setDate(p2__37875_SHARP_);
}, new cljs.core.Keyword(null, "hours", "hours", 58380855), function(p1__37876_SHARP_, p2__37877_SHARP_) {
  return p1__37876_SHARP_.setHours(p2__37877_SHARP_);
}, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), function(p1__37878_SHARP_, p2__37879_SHARP_) {
  return p1__37878_SHARP_.setMinutes(p2__37879_SHARP_);
}, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), function(p1__37880_SHARP_, p2__37881_SHARP_) {
  return p1__37880_SHARP_.setSeconds(p2__37881_SHARP_);
}, new cljs.core.Keyword(null, "millis", "millis", -1338288387), function(p1__37882_SHARP_, p2__37883_SHARP_) {
  return p1__37882_SHARP_.setMilliseconds(p2__37883_SHARP_);
}, new cljs.core.Keyword(null, "time-zone", "time-zone", -1838760002), cljs_time.format.timezone_adjustment], null);
cljs_time.format.parser_sort_order_pred = function cljs_time$format$parser_sort_order_pred(parser) {
  return cljs_time.internal.core.index_of.call(null, new cljs.core.PersistentVector(null, 30, 5, cljs.core.PersistentVector.EMPTY_NODE, ["YYYY", "YY", "Y", "yyyy", "yy", "y", "d", "dd", "D", "DD", "DDD", "dth", "M", "MM", "MMM", "MMMM", "dow", "h", "H", "m", "s", "S", "hh", "HH", "mm", "ss", "a", "SSS", "Z", "ZZ"], null), parser);
};
cljs_time.format.date_format_pattern = cljs.core.re_pattern.call(null, [cljs.core.str("("), cljs.core.str(clojure.string.join.call(null, ")|(", cljs.core.reverse.call(null, cljs.core.sort_by.call(null, cljs.core.count, cljs.core.keys.call(null, cljs_time.format.date_formatters))))), cljs.core.str(")")].join(""));
cljs_time.format.date_parse_pattern = function cljs_time$format$date_parse_pattern(formatter) {
  return cljs.core.re_pattern.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, formatter, /'([^']+)'/, "$1"), cljs_time.format.date_format_pattern, function(p1__37884_SHARP_) {
    return cljs.core.first.call(null, cljs_time.format.date_parsers.call(null, p1__37884_SHARP_));
  }));
};
cljs_time.format.parser_fn = function cljs_time$format$parser_fn(fmts) {
  return function(s) {
    return cljs.core.sort_by.call(null, cljs.core.comp.call(null, cljs_time.format.parser_sort_order_pred, cljs.core.second), cljs.core.partition.call(null, 2, cljs.core.interleave.call(null, cljs.core.nfirst.call(null, cljs.core.re_seq.call(null, cljs_time.format.date_parse_pattern.call(null, fmts), s)), cljs.core.map.call(null, cljs.core.first, cljs.core.re_seq.call(null, cljs_time.format.date_format_pattern, fmts)))));
  };
};
cljs_time.format.formatter_fn = function cljs_time$format$formatter_fn(fmts, formatters) {
  return function() {
    var G__37890__delegate = function(date, p__37888) {
      var vec__37889 = p__37888;
      var formatter_overrides = cljs.core.nth.call(null, vec__37889, 0, null);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.replace.call(null, fmts, /'([^']+)'/, "$1"), cljs_time.format.date_format_pattern, function(vec__37889, formatter_overrides) {
        return function(p1__37885_SHARP_) {
          return function() {
            var or__29600__auto__ = formatter_overrides;
            if (cljs.core.truth_(or__29600__auto__)) {
              return or__29600__auto__;
            } else {
              return formatters;
            }
          }().call(null, p1__37885_SHARP_).call(null, date);
        };
      }(vec__37889, formatter_overrides)], null);
    };
    var G__37890 = function(date, var_args) {
      var p__37888 = null;
      if (arguments.length > 1) {
        var G__37891__i = 0, G__37891__a = new Array(arguments.length - 1);
        while (G__37891__i < G__37891__a.length) {
          G__37891__a[G__37891__i] = arguments[G__37891__i + 1];
          ++G__37891__i;
        }
        p__37888 = new cljs.core.IndexedSeq(G__37891__a, 0);
      }
      return G__37890__delegate.call(this, date, p__37888);
    };
    G__37890.cljs$lang$maxFixedArity = 1;
    G__37890.cljs$lang$applyTo = function(arglist__37892) {
      var date = cljs.core.first(arglist__37892);
      var p__37888 = cljs.core.rest(arglist__37892);
      return G__37890__delegate(date, p__37888);
    };
    G__37890.cljs$core$IFn$_invoke$arity$variadic = G__37890__delegate;
    return G__37890;
  }();
};
cljs_time.format.formatter = function cljs_time$format$formatter(var_args) {
  var args37893 = [];
  var len__30669__auto___37896 = arguments.length;
  var i__30670__auto___37897 = 0;
  while (true) {
    if (i__30670__auto___37897 < len__30669__auto___37896) {
      args37893.push(arguments[i__30670__auto___37897]);
      var G__37898 = i__30670__auto___37897 + 1;
      i__30670__auto___37897 = G__37898;
      continue;
    } else {
    }
    break;
  }
  var G__37895 = args37893.length;
  switch(G__37895) {
    case 1:
      return cljs_time.format.formatter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs_time.format.formatter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37893.length)].join(""));;
  }
};
cljs_time.format.formatter.cljs$core$IFn$_invoke$arity$1 = function(fmts) {
  return cljs_time.format.formatter.call(null, fmts, cljs_time.core.utc);
};
cljs_time.format.formatter.cljs$core$IFn$_invoke$arity$2 = function(fmts, dtz) {
  return cljs.core.with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "format-str", "format-str", 695206156), fmts, new cljs.core.Keyword(null, "formatters", "formatters", -1875637118), cljs_time.format.date_formatters], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("cljs-time.format", "formatter", "cljs-time.format/formatter", 1104417384)], null));
};
cljs_time.format.formatter.cljs$lang$maxFixedArity = 2;
cljs_time.format.formatter_local = function cljs_time$format$formatter_local(fmts) {
  return cljs.core.with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "format-str", "format-str", 695206156), fmts, new cljs.core.Keyword(null, "formatters", "formatters", -1875637118), cljs.core.assoc.call(null, cljs_time.format.date_formatters, "Z", cljs.core.constantly.call(null, ""), "ZZ", cljs.core.constantly.call(null, ""))], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("cljs-time.format", 
  "formatter", "cljs-time.format/formatter", 1104417384)], null));
};
cljs_time.format.not_implemented = function cljs_time$format$not_implemented(sym) {
  return function() {
    throw cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "not-implemented", "not-implemented", 1918806714), new cljs.core.Keyword(null, "message", "message", -406056002), cljs_time.internal.core.format.call(null, "%s not implemented yet", cljs.core.name.call(null, sym))], null));
  };
};
cljs_time.format.with_default_year = function cljs_time$format$with_default_year(f, default_year) {
  return cljs.core.assoc.call(null, f, new cljs.core.Keyword(null, "default-year", "default-year", 1658037695), default_year);
};
cljs_time.format.formatters = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "date-element-parser", "date-element-parser", 2072167040), new cljs.core.Keyword(null, "hour-minute", "hour-minute", -1164421312), new cljs.core.Keyword(null, "t-time", "t-time", -42016318), new cljs.core.Keyword(null, "basic-ordinal-date", "basic-ordinal-date", 243220162), new cljs.core.Keyword(null, "date", "date", -1463434462), new cljs.core.Keyword(null, "hour", "hour", -555989214), new cljs.core.Keyword(null, 
"time-no-ms", "time-no-ms", 870271683), new cljs.core.Keyword(null, "weekyear-week-day", "weekyear-week-day", -740233533), new cljs.core.Keyword(null, "week-date-time", "week-date-time", 540228836), new cljs.core.Keyword(null, "date-hour-minute-second-fraction", "date-hour-minute-second-fraction", 1937143076), new cljs.core.Keyword(null, "basic-date-time", "basic-date-time", 1525413604), new cljs.core.Keyword(null, "date-time", "date-time", 177938180), new cljs.core.Keyword(null, "basic-time-no-ms", 
"basic-time-no-ms", -1720654076), new cljs.core.Keyword(null, "date-parser", "date-parser", -981534587), new cljs.core.Keyword(null, "basic-week-date", "basic-week-date", 1775847845), new cljs.core.Keyword(null, "basic-t-time-no-ms", "basic-t-time-no-ms", -424650106), new cljs.core.Keyword(null, "local-time", "local-time", -1873195290), new cljs.core.Keyword(null, "date-time-no-ms", "date-time-no-ms", 1655953671), new cljs.core.Keyword(null, "year-month-day", "year-month-day", -415594169), new cljs.core.Keyword(null, 
"date-opt-time", "date-opt-time", -1507102105), new cljs.core.Keyword(null, "rfc822", "rfc822", -404628697), new cljs.core.Keyword(null, "date-hour-minute-second-ms", "date-hour-minute-second-ms", -425334775), new cljs.core.Keyword(null, "basic-ordinal-date-time", "basic-ordinal-date-time", 1054564521), new cljs.core.Keyword(null, "ordinal-date", "ordinal-date", -77899447), new cljs.core.Keyword(null, "hour-minute-second-fraction", "hour-minute-second-fraction", -1253038551), new cljs.core.Keyword(null, 
"date-hour-minute", "date-hour-minute", 1629918346), new cljs.core.Keyword(null, "time", "time", 1385887882), new cljs.core.Keyword(null, "basic-week-date-time", "basic-week-date-time", -502077622), new cljs.core.Keyword(null, "weekyear", "weekyear", -74064500), new cljs.core.Keyword(null, "basic-time", "basic-time", -923134899), new cljs.core.Keyword(null, "hour-minute-second", "hour-minute-second", -1906654770), new cljs.core.Keyword(null, "ordinal-date-time", "ordinal-date-time", -1386753458), 
new cljs.core.Keyword(null, "ordinal-date-time-no-ms", "ordinal-date-time-no-ms", -1539005490), new cljs.core.Keyword(null, "hour-minute-second-ms", "hour-minute-second-ms", 1209749775), new cljs.core.Keyword(null, "time-parser", "time-parser", -1636511536), new cljs.core.Keyword(null, "date-time-parser", "date-time-parser", -656147568), new cljs.core.Keyword(null, "year", "year", 335913393), new cljs.core.Keyword(null, "t-time-no-ms", "t-time-no-ms", 990689905), new cljs.core.Keyword(null, "basic-week-date-time-no-ms", 
"basic-week-date-time-no-ms", -2043113679), new cljs.core.Keyword(null, "basic-date", "basic-date", 1566551506), new cljs.core.Keyword(null, "weekyear-week", "weekyear-week", 795291571), new cljs.core.Keyword(null, "local-date", "local-date", 1829761428), new cljs.core.Keyword(null, "basic-ordinal-date-time-no-ms", "basic-ordinal-date-time-no-ms", -395135436), new cljs.core.Keyword(null, "year-month", "year-month", 735283381), new cljs.core.Keyword(null, "local-date-opt-time", "local-date-opt-time", 
1178432599), new cljs.core.Keyword(null, "week-date", "week-date", -1176745129), new cljs.core.Keyword(null, "date-hour", "date-hour", -344234471), new cljs.core.Keyword(null, "time-element-parser", "time-element-parser", -2042883205), new cljs.core.Keyword(null, "date-hour-minute-second", "date-hour-minute-second", -1565419364), new cljs.core.Keyword(null, "week-date-time-no-ms", "week-date-time-no-ms", -1226853060), new cljs.core.Keyword(null, "basic-date-time-no-ms", "basic-date-time-no-ms", -899402179), 
new cljs.core.Keyword(null, "mysql", "mysql", -1431590210), new cljs.core.Keyword(null, "basic-t-time", "basic-t-time", 191791391)], [cljs_time.format.not_implemented.call(null, new cljs.core.Symbol(null, "dateElementParser", "dateElementParser", 984800945, null)), cljs_time.format.formatter.call(null, "HH:mm"), cljs_time.format.formatter.call(null, "'T'HH:mm:ss.SSSZZ"), cljs_time.format.formatter.call(null, "yyyyDDD"), cljs_time.format.formatter.call(null, "yyyy-MM-dd"), cljs_time.format.formatter.call(null, 
"HH"), cljs_time.format.formatter.call(null, "HH:mm:ssZZ"), cljs_time.format.formatter.call(null, "xxxx-'W'ww-e"), cljs_time.format.formatter.call(null, "xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ"), cljs_time.format.formatter.call(null, "yyyy-MM-dd'T'HH:mm:ss.SSS"), cljs_time.format.formatter.call(null, "yyyyMMdd'T'HHmmss.SSSZ"), cljs_time.format.formatter.call(null, "yyyy-MM-dd'T'HH:mm:ss.SSSZZ"), cljs_time.format.formatter.call(null, "HHmmssZ"), cljs_time.format.not_implemented.call(null, new cljs.core.Symbol(null, 
"dateParser", "dateParser", -1248418930, null)), cljs_time.format.formatter.call(null, "xxxx'W'wwe"), cljs_time.format.formatter.call(null, "'T'HHmmssZ"), cljs_time.format.not_implemented.call(null, new cljs.core.Symbol(null, "localTimeParser", "localTimeParser", -1738135328, null)), cljs_time.format.formatter.call(null, "yyyy-MM-dd'T'HH:mm:ssZZ"), cljs_time.format.formatter.call(null, "yyyy-MM-dd"), cljs_time.format.not_implemented.call(null, new cljs.core.Symbol(null, "dateOptionalTimeParser", 
"dateOptionalTimeParser", 1783230854, null)), cljs_time.format.formatter.call(null, "EEE, dd MMM yyyy HH:mm:ss Z"), cljs_time.format.formatter.call(null, "yyyy-MM-dd'T'HH:mm:ss.SSS"), cljs_time.format.formatter.call(null, "yyyyDDD'T'HHmmss.SSSZ"), cljs_time.format.formatter.call(null, "yyyy-DDD"), cljs_time.format.formatter.call(null, "HH:mm:ss.SSS"), cljs_time.format.formatter.call(null, "yyyy-MM-dd'T'HH:mm"), cljs_time.format.formatter.call(null, "HH:mm:ss.SSSZZ"), cljs_time.format.formatter.call(null, 
"xxxx'W'wwe'T'HHmmss.SSSZ"), cljs_time.format.formatter.call(null, "xxxx"), cljs_time.format.formatter.call(null, "HHmmss.SSSZ"), cljs_time.format.formatter.call(null, "HH:mm:ss"), cljs_time.format.formatter.call(null, "yyyy-DDD'T'HH:mm:ss.SSSZZ"), cljs_time.format.formatter.call(null, "yyyy-DDD'T'HH:mm:ssZZ"), cljs_time.format.formatter.call(null, "HH:mm:ss.SSS"), cljs_time.format.formatter.call(null, new cljs.core.Symbol(null, "timeParser", "timeParser", 1585048034, null)), cljs_time.format.not_implemented.call(null, 
new cljs.core.Symbol(null, "dateTimeParser", "dateTimeParser", -1493718282, null)), cljs_time.format.formatter.call(null, "yyyy"), cljs_time.format.formatter.call(null, "'T'HH:mm:ssZZ"), cljs_time.format.formatter.call(null, "xxxx'W'wwe'T'HHmmssZ"), cljs_time.format.formatter.call(null, "yyyyMMdd"), cljs_time.format.formatter.call(null, "xxxx-'W'ww"), cljs_time.format.not_implemented.call(null, new cljs.core.Symbol(null, "localDateParser", "localDateParser", 477820077, null)), cljs_time.format.formatter.call(null, 
"yyyyDDD'T'HHmmssZ"), cljs_time.format.formatter.call(null, "yyyy-MM"), cljs_time.format.not_implemented.call(null, new cljs.core.Symbol(null, "localDateOptionalTimeParser", "localDateOptionalTimeParser", 435955537, null)), cljs_time.format.formatter.call(null, "xxxx-'W'ww-e"), cljs_time.format.formatter.call(null, "yyyy-MM-dd'T'HH"), cljs_time.format.not_implemented.call(null, new cljs.core.Symbol(null, "timeElementParser", "timeElementParser", 302132553, null)), cljs_time.format.formatter.call(null, 
"yyyy-MM-dd'T'HH:mm:ss"), cljs_time.format.formatter.call(null, "xxxx-'W'ww-e'T'HH:mm:ssZZ"), cljs_time.format.formatter.call(null, "yyyyMMdd'T'HHmmssZ"), cljs_time.format.formatter.call(null, "yyyy-MM-dd HH:mm:ss"), cljs_time.format.formatter.call(null, "'T'HHmmss.SSSZ")]);
cljs_time.format.parsers = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null, "date-element-parser", "date-element-parser", 2072167040), null, new cljs.core.Keyword(null, "date-parser", "date-parser", -981534587), null, new cljs.core.Keyword(null, "local-time", "local-time", -1873195290), null, new cljs.core.Keyword(null, "date-opt-time", "date-opt-time", -1507102105), null, new cljs.core.Keyword(null, "time-parser", "time-parser", -1636511536), 
null, new cljs.core.Keyword(null, "date-time-parser", "date-time-parser", -656147568), null, new cljs.core.Keyword(null, "local-date", "local-date", 1829761428), null, new cljs.core.Keyword(null, "local-date-opt-time", "local-date-opt-time", 1178432599), null, new cljs.core.Keyword(null, "time-element-parser", "time-element-parser", -2042883205), null], null), null);
cljs_time.format.printers = clojure.set.difference.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs_time.format.formatters)), cljs_time.format.parsers);
cljs_time.format.part_splitter_regex = /(?:(?!(?:\+|-)\d{2}):(?!\d{2}$))|[^\w:]+|.[TW]|'[^']+'/;
if (typeof cljs_time.format.date_map !== "undefined") {
} else {
  cljs_time.format.date_map = function() {
    var method_table__30524__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__30525__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__30526__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__30527__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__30528__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs-time.format", "date-map"), cljs.core.type, new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__30528__auto__, method_table__30524__auto__, prefer_table__30525__auto__, method_cache__30526__auto__, cached_hierarchy__30527__auto__);
  }();
}
cljs.core._add_method.call(null, cljs_time.format.date_map, goog.date.Date, function(d) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "years", "years", -1298579689), 0, new cljs.core.Keyword(null, "months", "months", -45571637), 0, new cljs.core.Keyword(null, "days", "days", -1394072564), 1], null);
});
cljs.core._add_method.call(null, cljs_time.format.date_map, goog.date.DateTime, function(d) {
  return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "years", "years", -1298579689), 0, new cljs.core.Keyword(null, "months", "months", -45571637), 0, new cljs.core.Keyword(null, "days", "days", -1394072564), 1, new cljs.core.Keyword(null, "hours", "hours", 58380855), 0, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), 0, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), 0, new cljs.core.Keyword(null, "millis", "millis", -1338288387), 0], null);
});
cljs.core._add_method.call(null, cljs_time.format.date_map, goog.date.UtcDateTime, function(d) {
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "years", "years", -1298579689), 0, new cljs.core.Keyword(null, "months", "months", -45571637), 0, new cljs.core.Keyword(null, "days", "days", -1394072564), 1, new cljs.core.Keyword(null, "hours", "hours", 58380855), 0, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), 0, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), 0, new cljs.core.Keyword(null, "millis", "millis", -1338288387), 0, new cljs.core.Keyword(null, 
  "time-zone", "time-zone", -1838760002), null], null);
});
cljs_time.format.parse_STAR_ = function cljs_time$format$parse_STAR_(constructor$, p__37902, s) {
  var map__37909 = p__37902;
  var map__37909__$1 = (!(map__37909 == null) ? map__37909.cljs$lang$protocol_mask$partition0$ & 64 || map__37909.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37909) : map__37909;
  var fmt = map__37909__$1;
  var format_str = cljs.core.get.call(null, map__37909__$1, new cljs.core.Keyword(null, "format-str", "format-str", 695206156));
  var default_year = cljs.core.get.call(null, map__37909__$1, new cljs.core.Keyword(null, "default-year", "default-year", 1658037695));
  if (cljs.core.seq.call(null, s)) {
  } else {
    throw new Error("Assert failed: (seq s)");
  }
  var min_parts = cljs.core.count.call(null, clojure.string.split.call(null, s, cljs_time.format.part_splitter_regex));
  var parse_fn = cljs_time.format.parser_fn.call(null, format_str);
  var parse_seq = cljs.core.seq.call(null, cljs.core.map.call(null, function(parse_fn, min_parts, map__37909, map__37909__$1, fmt, format_str, default_year) {
    return function(p__37911) {
      var vec__37912 = p__37911;
      var a = cljs.core.nth.call(null, vec__37912, 0, null);
      var b = cljs.core.nth.call(null, vec__37912, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, cljs.core.second.call(null, cljs_time.format.date_parsers.call(null, b))], null);
    };
  }(parse_fn, min_parts, map__37909, map__37909__$1, fmt, format_str, default_year), parse_fn.call(null, s)));
  if (cljs.core.count.call(null, parse_seq) >= min_parts) {
    var d = new constructor$(0, 0, 0, 0, 0, 0, 0);
    var empty = cljs.core.assoc.call(null, cljs_time.format.date_map.call(null, d), new cljs.core.Keyword(null, "years", "years", -1298579689), function() {
      var or__29600__auto__ = default_year;
      if (cljs.core.truth_(or__29600__auto__)) {
        return or__29600__auto__;
      } else {
        return 0;
      }
    }());
    var setters = cljs.core.select_keys.call(null, cljs_time.format.date_setters, cljs.core.keys.call(null, empty));
    cljs.core.merge_with.call(null, function(d, empty, setters, parse_fn, parse_seq, min_parts, map__37909, map__37909__$1, fmt, format_str, default_year) {
      return function(p1__37900_SHARP_, p2__37901_SHARP_) {
        return p1__37900_SHARP_.call(null, d, p2__37901_SHARP_);
      };
    }(d, empty, setters, parse_fn, parse_seq, min_parts, map__37909, map__37909__$1, fmt, format_str, default_year), setters, cljs_time.internal.core.valid_date_QMARK_.call(null, cljs.core.reduce.call(null, function(d, empty, setters, parse_fn, parse_seq, min_parts, map__37909, map__37909__$1, fmt, format_str, default_year) {
      return function(date, p__37913) {
        var vec__37914 = p__37913;
        var part = cljs.core.nth.call(null, vec__37914, 0, null);
        var do_parse = cljs.core.nth.call(null, vec__37914, 1, null);
        return do_parse.call(null, date, part);
      };
    }(d, empty, setters, parse_fn, parse_seq, min_parts, map__37909, map__37909__$1, fmt, format_str, default_year), empty, parse_seq)));
    return d;
  } else {
    throw cljs.core.ex_info.call(null, "The parser could not match the input string.", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "parser-no-match", "parser-no-match", 1748518307)], null));
  }
};
cljs_time.format.parse = function cljs_time$format$parse(var_args) {
  var args37915 = [];
  var len__30669__auto___37926 = arguments.length;
  var i__30670__auto___37927 = 0;
  while (true) {
    if (i__30670__auto___37927 < len__30669__auto___37926) {
      args37915.push(arguments[i__30670__auto___37927]);
      var G__37928 = i__30670__auto___37927 + 1;
      i__30670__auto___37927 = G__37928;
      continue;
    } else {
    }
    break;
  }
  var G__37917 = args37915.length;
  switch(G__37917) {
    case 2:
      return cljs_time.format.parse.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return cljs_time.format.parse.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37915.length)].join(""));;
  }
};
cljs_time.format.parse.cljs$core$IFn$_invoke$arity$2 = function(fmt, s) {
  return cljs_time.format.parse_STAR_.call(null, goog.date.UtcDateTime, fmt, s);
};
cljs_time.format.parse.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.first.call(null, function() {
    var iter__30380__auto__ = function cljs_time$format$iter__37918(s__37919) {
      return new cljs.core.LazySeq(null, function() {
        var s__37919__$1 = s__37919;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__37919__$1);
          if (temp__4657__auto__) {
            var s__37919__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__37919__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__37919__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__37921 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__37920 = 0;
                while (true) {
                  if (i__37920 < size__30379__auto__) {
                    var f = cljs.core._nth.call(null, c__30378__auto__, i__37920);
                    var d = function() {
                      try {
                        return cljs_time.format.parse.call(null, f, s);
                      } catch (e37924) {
                        if (e37924 instanceof Error) {
                          var _ = e37924;
                          return null;
                        } else {
                          throw e37924;
                        }
                      }
                    }();
                    if (cljs.core.truth_(d)) {
                      cljs.core.chunk_append.call(null, b__37921, d);
                      var G__37930 = i__37920 + 1;
                      i__37920 = G__37930;
                      continue;
                    } else {
                      var G__37931 = i__37920 + 1;
                      i__37920 = G__37931;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37921), cljs_time$format$iter__37918.call(null, cljs.core.chunk_rest.call(null, s__37919__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37921), null);
              }
            } else {
              var f = cljs.core.first.call(null, s__37919__$2);
              var d = function() {
                try {
                  return cljs_time.format.parse.call(null, f, s);
                } catch (e37925) {
                  if (e37925 instanceof Error) {
                    var _ = e37925;
                    return null;
                  } else {
                    throw e37925;
                  }
                }
              }();
              if (cljs.core.truth_(d)) {
                return cljs.core.cons.call(null, d, cljs_time$format$iter__37918.call(null, cljs.core.rest.call(null, s__37919__$2)));
              } else {
                var G__37932 = cljs.core.rest.call(null, s__37919__$2);
                s__37919__$1 = G__37932;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, cljs.core.vals.call(null, cljs_time.format.formatters));
  }());
};
cljs_time.format.parse.cljs$lang$maxFixedArity = 2;
cljs_time.format.parse_local = function cljs_time$format$parse_local(var_args) {
  var args37933 = [];
  var len__30669__auto___37944 = arguments.length;
  var i__30670__auto___37945 = 0;
  while (true) {
    if (i__30670__auto___37945 < len__30669__auto___37944) {
      args37933.push(arguments[i__30670__auto___37945]);
      var G__37946 = i__30670__auto___37945 + 1;
      i__30670__auto___37945 = G__37946;
      continue;
    } else {
    }
    break;
  }
  var G__37935 = args37933.length;
  switch(G__37935) {
    case 2:
      return cljs_time.format.parse_local.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return cljs_time.format.parse_local.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37933.length)].join(""));;
  }
};
cljs_time.format.parse_local.cljs$core$IFn$_invoke$arity$2 = function(fmt, s) {
  return cljs_time.format.parse_STAR_.call(null, goog.date.DateTime, fmt, s);
};
cljs_time.format.parse_local.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.first.call(null, function() {
    var iter__30380__auto__ = function cljs_time$format$iter__37936(s__37937) {
      return new cljs.core.LazySeq(null, function() {
        var s__37937__$1 = s__37937;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__37937__$1);
          if (temp__4657__auto__) {
            var s__37937__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__37937__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__37937__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__37939 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__37938 = 0;
                while (true) {
                  if (i__37938 < size__30379__auto__) {
                    var f = cljs.core._nth.call(null, c__30378__auto__, i__37938);
                    var d = function() {
                      try {
                        return cljs_time.format.parse_local.call(null, f, s);
                      } catch (e37942) {
                        if (e37942 instanceof Error) {
                          var _ = e37942;
                          return null;
                        } else {
                          throw e37942;
                        }
                      }
                    }();
                    if (cljs.core.truth_(d)) {
                      cljs.core.chunk_append.call(null, b__37939, d);
                      var G__37948 = i__37938 + 1;
                      i__37938 = G__37948;
                      continue;
                    } else {
                      var G__37949 = i__37938 + 1;
                      i__37938 = G__37949;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37939), cljs_time$format$iter__37936.call(null, cljs.core.chunk_rest.call(null, s__37937__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37939), null);
              }
            } else {
              var f = cljs.core.first.call(null, s__37937__$2);
              var d = function() {
                try {
                  return cljs_time.format.parse_local.call(null, f, s);
                } catch (e37943) {
                  if (e37943 instanceof Error) {
                    var _ = e37943;
                    return null;
                  } else {
                    throw e37943;
                  }
                }
              }();
              if (cljs.core.truth_(d)) {
                return cljs.core.cons.call(null, d, cljs_time$format$iter__37936.call(null, cljs.core.rest.call(null, s__37937__$2)));
              } else {
                var G__37950 = cljs.core.rest.call(null, s__37937__$2);
                s__37937__$1 = G__37950;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, cljs.core.vals.call(null, cljs_time.format.formatters));
  }());
};
cljs_time.format.parse_local.cljs$lang$maxFixedArity = 2;
cljs_time.format.parse_local_date = function cljs_time$format$parse_local_date(var_args) {
  var args37951 = [];
  var len__30669__auto___37962 = arguments.length;
  var i__30670__auto___37963 = 0;
  while (true) {
    if (i__30670__auto___37963 < len__30669__auto___37962) {
      args37951.push(arguments[i__30670__auto___37963]);
      var G__37964 = i__30670__auto___37963 + 1;
      i__30670__auto___37963 = G__37964;
      continue;
    } else {
    }
    break;
  }
  var G__37953 = args37951.length;
  switch(G__37953) {
    case 2:
      return cljs_time.format.parse_local_date.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 1:
      return cljs_time.format.parse_local_date.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37951.length)].join(""));;
  }
};
cljs_time.format.parse_local_date.cljs$core$IFn$_invoke$arity$2 = function(fmt, s) {
  return cljs_time.format.parse_STAR_.call(null, goog.date.Date, fmt, s);
};
cljs_time.format.parse_local_date.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.first.call(null, function() {
    var iter__30380__auto__ = function cljs_time$format$iter__37954(s__37955) {
      return new cljs.core.LazySeq(null, function() {
        var s__37955__$1 = s__37955;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__37955__$1);
          if (temp__4657__auto__) {
            var s__37955__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__37955__$2)) {
              var c__30378__auto__ = cljs.core.chunk_first.call(null, s__37955__$2);
              var size__30379__auto__ = cljs.core.count.call(null, c__30378__auto__);
              var b__37957 = cljs.core.chunk_buffer.call(null, size__30379__auto__);
              if (function() {
                var i__37956 = 0;
                while (true) {
                  if (i__37956 < size__30379__auto__) {
                    var f = cljs.core._nth.call(null, c__30378__auto__, i__37956);
                    var d = function() {
                      try {
                        return cljs_time.format.parse_local_date.call(null, f, s);
                      } catch (e37960) {
                        if (e37960 instanceof Error) {
                          var _ = e37960;
                          return null;
                        } else {
                          throw e37960;
                        }
                      }
                    }();
                    if (cljs.core.truth_(d)) {
                      cljs.core.chunk_append.call(null, b__37957, d);
                      var G__37966 = i__37956 + 1;
                      i__37956 = G__37966;
                      continue;
                    } else {
                      var G__37967 = i__37956 + 1;
                      i__37956 = G__37967;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37957), cljs_time$format$iter__37954.call(null, cljs.core.chunk_rest.call(null, s__37955__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__37957), null);
              }
            } else {
              var f = cljs.core.first.call(null, s__37955__$2);
              var d = function() {
                try {
                  return cljs_time.format.parse_local_date.call(null, f, s);
                } catch (e37961) {
                  if (e37961 instanceof Error) {
                    var _ = e37961;
                    return null;
                  } else {
                    throw e37961;
                  }
                }
              }();
              if (cljs.core.truth_(d)) {
                return cljs.core.cons.call(null, d, cljs_time$format$iter__37954.call(null, cljs.core.rest.call(null, s__37955__$2)));
              } else {
                var G__37968 = cljs.core.rest.call(null, s__37955__$2);
                s__37955__$1 = G__37968;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__30380__auto__.call(null, cljs.core.vals.call(null, cljs_time.format.formatters));
  }());
};
cljs_time.format.parse_local_date.cljs$lang$maxFixedArity = 2;
cljs_time.format.unparse = function cljs_time$format$unparse(p__37969, dt) {
  var map__37972 = p__37969;
  var map__37972__$1 = (!(map__37972 == null) ? map__37972.cljs$lang$protocol_mask$partition0$ & 64 || map__37972.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37972) : map__37972;
  var format_str = cljs.core.get.call(null, map__37972__$1, new cljs.core.Keyword(null, "format-str", "format-str", 695206156));
  var formatters = cljs.core.get.call(null, map__37972__$1, new cljs.core.Keyword(null, "formatters", "formatters", -1875637118));
  if (!(dt == null)) {
  } else {
    throw new Error("Assert failed: (not (nil? dt))");
  }
  if (dt instanceof goog.date.DateTime) {
  } else {
    throw new Error("Assert failed: (instance? goog.date.DateTime dt)");
  }
  return cljs.core.apply.call(null, clojure.string.replace, cljs_time.format.formatter_fn.call(null, format_str, formatters).call(null, dt));
};
cljs_time.format.unparse_local = function cljs_time$format$unparse_local(p__37974, dt) {
  var map__37977 = p__37974;
  var map__37977__$1 = (!(map__37977 == null) ? map__37977.cljs$lang$protocol_mask$partition0$ & 64 || map__37977.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37977) : map__37977;
  var fmt = map__37977__$1;
  var format_str = cljs.core.get.call(null, map__37977__$1, new cljs.core.Keyword(null, "format-str", "format-str", 695206156));
  var formatters = cljs.core.get.call(null, map__37977__$1, new cljs.core.Keyword(null, "formatters", "formatters", -1875637118));
  if (!(dt == null)) {
  } else {
    throw new Error("Assert failed: (not (nil? dt))");
  }
  if (dt instanceof goog.date.DateTime) {
  } else {
    throw new Error("Assert failed: (instance? goog.date.DateTime dt)");
  }
  return cljs.core.apply.call(null, clojure.string.replace, cljs_time.format.formatter_fn.call(null, format_str, formatters).call(null, dt, cljs.core.assoc.call(null, cljs_time.format.date_formatters, "Z", cljs.core.constantly.call(null, ""), "ZZ", cljs.core.constantly.call(null, ""))));
};
cljs_time.format.unparse_local_date = function cljs_time$format$unparse_local_date(p__37979, dt) {
  var map__37982 = p__37979;
  var map__37982__$1 = (!(map__37982 == null) ? map__37982.cljs$lang$protocol_mask$partition0$ & 64 || map__37982.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__37982) : map__37982;
  var fmt = map__37982__$1;
  var format_str = cljs.core.get.call(null, map__37982__$1, new cljs.core.Keyword(null, "format-str", "format-str", 695206156));
  var formatters = cljs.core.get.call(null, map__37982__$1, new cljs.core.Keyword(null, "formatters", "formatters", -1875637118));
  if (!(dt == null)) {
  } else {
    throw new Error("Assert failed: (not (nil? dt))");
  }
  if (dt instanceof goog.date.Date) {
  } else {
    throw new Error("Assert failed: (instance? goog.date.Date dt)");
  }
  return cljs.core.apply.call(null, clojure.string.replace, cljs_time.format.formatter_fn.call(null, format_str, formatters).call(null, dt, cljs.core.assoc.call(null, cljs_time.format.date_formatters, "Z", cljs.core.constantly.call(null, ""), "ZZ", cljs.core.constantly.call(null, ""))));
};
cljs_time.format.show_formatters = function cljs_time$format$show_formatters(var_args) {
  var args37984 = [];
  var len__30669__auto___37991 = arguments.length;
  var i__30670__auto___37992 = 0;
  while (true) {
    if (i__30670__auto___37992 < len__30669__auto___37991) {
      args37984.push(arguments[i__30670__auto___37992]);
      var G__37993 = i__30670__auto___37992 + 1;
      i__30670__auto___37992 = G__37993;
      continue;
    } else {
    }
    break;
  }
  var G__37986 = args37984.length;
  switch(G__37986) {
    case 0:
      return cljs_time.format.show_formatters.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs_time.format.show_formatters.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args37984.length)].join(""));;
  }
};
cljs_time.format.show_formatters.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs_time.format.show_formatters.call(null, cljs_time.core.now.call(null));
};
cljs_time.format.show_formatters.cljs$core$IFn$_invoke$arity$1 = function(dt) {
  var seq__37987 = cljs.core.seq.call(null, cljs.core.sort.call(null, cljs_time.format.printers));
  var chunk__37988 = null;
  var count__37989 = 0;
  var i__37990 = 0;
  while (true) {
    if (i__37990 < count__37989) {
      var p = cljs.core._nth.call(null, chunk__37988, i__37990);
      var fmt_37995 = cljs_time.format.formatters.call(null, p);
      cljs.core.print.call(null, cljs_time.internal.core.format.call(null, "%-40s%s\n", p, cljs_time.format.unparse.call(null, fmt_37995, dt)));
      var G__37996 = seq__37987;
      var G__37997 = chunk__37988;
      var G__37998 = count__37989;
      var G__37999 = i__37990 + 1;
      seq__37987 = G__37996;
      chunk__37988 = G__37997;
      count__37989 = G__37998;
      i__37990 = G__37999;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq.call(null, seq__37987);
      if (temp__4657__auto__) {
        var seq__37987__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__37987__$1)) {
          var c__30411__auto__ = cljs.core.chunk_first.call(null, seq__37987__$1);
          var G__38000 = cljs.core.chunk_rest.call(null, seq__37987__$1);
          var G__38001 = c__30411__auto__;
          var G__38002 = cljs.core.count.call(null, c__30411__auto__);
          var G__38003 = 0;
          seq__37987 = G__38000;
          chunk__37988 = G__38001;
          count__37989 = G__38002;
          i__37990 = G__38003;
          continue;
        } else {
          var p = cljs.core.first.call(null, seq__37987__$1);
          var fmt_38004 = cljs_time.format.formatters.call(null, p);
          cljs.core.print.call(null, cljs_time.internal.core.format.call(null, "%-40s%s\n", p, cljs_time.format.unparse.call(null, fmt_38004, dt)));
          var G__38005 = cljs.core.next.call(null, seq__37987__$1);
          var G__38006 = null;
          var G__38007 = 0;
          var G__38008 = 0;
          seq__37987 = G__38005;
          chunk__37988 = G__38006;
          count__37989 = G__38007;
          i__37990 = G__38008;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs_time.format.show_formatters.cljs$lang$maxFixedArity = 1;
cljs_time.format.Mappable = function() {
};
cljs_time.format.instant__GT_map = function cljs_time$format$instant__GT_map(instant) {
  if (!(instant == null) && !(instant.cljs_time$format$Mappable$instant__GT_map$arity$1 == null)) {
    return instant.cljs_time$format$Mappable$instant__GT_map$arity$1(instant);
  } else {
    var x__30263__auto__ = instant == null ? null : instant;
    var m__30264__auto__ = cljs_time.format.instant__GT_map[goog.typeOf(x__30263__auto__)];
    if (!(m__30264__auto__ == null)) {
      return m__30264__auto__.call(null, instant);
    } else {
      var m__30264__auto____$1 = cljs_time.format.instant__GT_map["_"];
      if (!(m__30264__auto____$1 == null)) {
        return m__30264__auto____$1.call(null, instant);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mappable.instant-\x3emap", instant);
      }
    }
  }
};
cljs_time.format.to_map = function cljs_time$format$to_map(years, months, days, hours, minutes, seconds, millis) {
  return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "years", "years", -1298579689), years, new cljs.core.Keyword(null, "months", "months", -45571637), months, new cljs.core.Keyword(null, "days", "days", -1394072564), days, new cljs.core.Keyword(null, "hours", "hours", 58380855), hours, new cljs.core.Keyword(null, "minutes", "minutes", 1319166394), minutes, new cljs.core.Keyword(null, "seconds", "seconds", -445266194), seconds, new cljs.core.Keyword(null, "millis", "millis", 
  -1338288387), millis], null);
};
goog.date.UtcDateTime.prototype.cljs_time$format$Mappable$ = true;
goog.date.UtcDateTime.prototype.cljs_time$format$Mappable$instant__GT_map$arity$1 = function(dt) {
  var dt__$1 = this;
  return cljs_time.format.to_map.call(null, dt__$1.getYear(), dt__$1.getMonth() + 1, dt__$1.getDate(), dt__$1.getHours(), dt__$1.getMinutes(), dt__$1.getSeconds(), dt__$1.getMilliseconds());
};
cljs_time.core.Period.prototype.cljs_time$format$Mappable$ = true;
cljs_time.core.Period.prototype.cljs_time$format$Mappable$instant__GT_map$arity$1 = function(m) {
  var m__$1 = this;
  return cljs_time.core.__GT_period.call(null, m__$1);
};
cljs_time.core.Interval.prototype.cljs_time$format$Mappable$ = true;
cljs_time.core.Interval.prototype.cljs_time$format$Mappable$instant__GT_map$arity$1 = function(m) {
  var m__$1 = this;
  return cljs_time.core.__GT_period.call(null, m__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs_time$format$Mappable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs_time$format$Mappable$instant__GT_map$arity$1 = function(m) {
  var m__$1 = this;
  var G__38009 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, m__$1)) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, m__$1)).fqn : null;
  switch(G__38009) {
    case "cljs-time.core/period":
      return m__$1;
      break;
    case "cljs-time.core/interval":
      return cljs_time.core.__GT_period.call(null, m__$1);
      break;
    default:
      throw new Error([cljs.core.str("No matching clause: "), cljs.core.str((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, m__$1)))].join(""));;
  }
};
goog.provide("bouncer.validators");
goog.require("cljs.core");
goog.require("cljs_time.format");
bouncer.validators.required = cljs.core.with_meta.call(null, function bouncer$validators$required(value) {
  if (typeof value === "string") {
    return !cljs.core.empty_QMARK_.call(null, value);
  } else {
    return !(value == null);
  }
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), false, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be present", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "required", "bouncer.validators/required", -465826887)], null));
bouncer.validators.number = cljs.core.with_meta.call(null, function bouncer$validators$number(maybe_a_number) {
  return typeof maybe_a_number === "number";
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be a number", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "number", "bouncer.validators/number", -1457674719)], null));
bouncer.validators.integer = cljs.core.with_meta.call(null, function bouncer$validators$integer(maybe_an_int) {
  return cljs.core.integer_QMARK_.call(null, maybe_an_int);
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be an integer", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "integer", "bouncer.validators/integer", -412024393)], null));
bouncer.validators.boolean$ = cljs.core.with_meta.call(null, function bouncer$validators$boolean(maybe_a_boolean) {
  return cljs.core._EQ_.call(null, false, maybe_a_boolean) || cljs.core._EQ_.call(null, true, maybe_a_boolean);
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be a boolean", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "boolean", "bouncer.validators/boolean", -14906243)], null));
bouncer.validators.string = cljs.core.with_meta.call(null, function bouncer$validators$string(maybe_a_string) {
  return typeof maybe_a_string === "string";
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be a string", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "string", "bouncer.validators/string", -17988663)], null));
bouncer.validators.in_range = cljs.core.with_meta.call(null, function bouncer$validators$in_range(value, p__38013) {
  var vec__38015 = p__38013;
  var from = cljs.core.nth.call(null, vec__38015, 0, null);
  var to = cljs.core.nth.call(null, vec__38015, 1, null);
  return from <= value && value <= to;
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be in a specified range", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "in-range", "bouncer.validators/in-range", -1520951092)], null));
bouncer.validators.positive = cljs.core.with_meta.call(null, function bouncer$validators$positive(number) {
  return number > 0;
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be a positive number", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "positive", "bouncer.validators/positive", -155537451)], null));
bouncer.validators.member = cljs.core.with_meta.call(null, function bouncer$validators$member(value, coll) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([value], true), coll);
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be one of the values in the list", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "member", "bouncer.validators/member", -1164005429)], null));
bouncer.validators.custom = cljs.core.with_meta.call(null, function bouncer$validators$custom(value, pred) {
  cljs.core.println.call(null, "Warning: bouncer.validators/custom is deprecated and will be removed. Use plain functions instead.");
  return pred.call(null, value);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "custom", "bouncer.validators/custom", 2142880173)], null));
bouncer.validators.every = cljs.core.with_meta.call(null, function bouncer$validators$every(coll, pred) {
  return cljs.core.every_QMARK_.call(null, pred, coll);
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "All items in %s must satisfy the predicate", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "every", "bouncer.validators/every", -281179041)], null));
bouncer.validators.matches = cljs.core.with_meta.call(null, function bouncer$validators$matches(value, re) {
  return cljs.core.complement.call(null, cljs.core.empty_QMARK_).call(null, cljs.core.re_seq.call(null, re, value));
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must satisfy the given pattern", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "matches", "bouncer.validators/matches", -1184599255)], null));
bouncer.validators.email = cljs.core.with_meta.call(null, function bouncer$validators$email(value) {
  var and__29588__auto__ = bouncer.validators.required.call(null, value);
  if (cljs.core.truth_(and__29588__auto__)) {
    return bouncer.validators.matches.call(null, value, /^[^@]+@[^@\\.]+[\\.].+/);
  } else {
    return and__29588__auto__;
  }
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be a valid email address", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "email", "bouncer.validators/email", -1058548467)], null));
bouncer.validators.datetime = cljs.core.with_meta.call(null, function() {
  var bouncer$validators$datetime__delegate = function(value, p__38016) {
    var vec__38019 = p__38016;
    var opt = cljs.core.nth.call(null, vec__38019, 0, null);
    var _ = cljs.core.nthnext.call(null, vec__38019, 1);
    var formatter = typeof opt === "string" ? cljs_time.format.formatter.call(null, opt) : opt;
    try {
      if (cljs.core.truth_(formatter)) {
        return cljs_time.format.parse.call(null, formatter, value);
      } else {
        return cljs_time.format.parse.call(null, value);
      }
    } catch (e38020) {
      if (e38020 instanceof Error) {
        var e = e38020;
        return false;
      } else {
        throw e38020;
      }
    }
  };
  var bouncer$validators$datetime = function(value, var_args) {
    var p__38016 = null;
    if (arguments.length > 1) {
      var G__38021__i = 0, G__38021__a = new Array(arguments.length - 1);
      while (G__38021__i < G__38021__a.length) {
        G__38021__a[G__38021__i] = arguments[G__38021__i + 1];
        ++G__38021__i;
      }
      p__38016 = new cljs.core.IndexedSeq(G__38021__a, 0);
    }
    return bouncer$validators$datetime__delegate.call(this, value, p__38016);
  };
  bouncer$validators$datetime.cljs$lang$maxFixedArity = 1;
  bouncer$validators$datetime.cljs$lang$applyTo = function(arglist__38022) {
    var value = cljs.core.first(arglist__38022);
    var p__38016 = cljs.core.rest(arglist__38022);
    return bouncer$validators$datetime__delegate(value, p__38016);
  };
  bouncer$validators$datetime.cljs$core$IFn$_invoke$arity$variadic = bouncer$validators$datetime__delegate;
  return bouncer$validators$datetime;
}(), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s must be a valid date", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "datetime", "bouncer.validators/datetime", -2030523505)], null));
bouncer.validators.max_count = cljs.core.with_meta.call(null, function bouncer$validators$max_count(value, maximum) {
  return cljs.core.count.call(null, cljs.core.seq.call(null, value)) <= maximum;
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s is longer than the maximum", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "max-count", "bouncer.validators/max-count", -835039936)], null));
bouncer.validators.min_count = cljs.core.with_meta.call(null, function bouncer$validators$min_count(value, minimum) {
  return cljs.core.count.call(null, cljs.core.seq.call(null, value)) >= minimum;
}, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optional", "optional", 2053951509), true, new cljs.core.Keyword(null, "default-message-format", "default-message-format", 179806141), "%s is less than the minimum", new cljs.core.Keyword(null, "validator", "validator", -1966190681), new cljs.core.Keyword("bouncer.validators", "min-count", "bouncer.validators/min-count", -359601934)], null));
goog.provide("humfunding.validation");
goog.require("cljs.core");
goog.require("bouncer.core");
goog.require("bouncer.validators");
